/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Simple object that defines properties to be set on the next accepted socket.</p>
 */
var AcceptDict = function() {
};
AcceptDict.prototype = {

    /**
     * <p>Callback to be fired when the socket enters the {@link Ti.Network.Socket.ERROR} state.</p>
     * @type Callback<ErrorCallbackArgs>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Timeout, in milliseconds, for all <code>write</code> operations.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    timeout:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var AcceptedCallbackArgs = function() {
};
AcceptedCallbackArgs.prototype = {

    /**
     * <p>Socket which represents the inbound connection.</p>
     * @type Ti.Network.Socket.TCP
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    inbound:null,

    /**
     * <p>Socket which received the connection.</p>
     * @type Ti.Network.Socket.TCP
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    socket:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>A button bar or tabbed bar item can have an image or a title, but not both.
Buttons with images and buttons with text can be mixed in the same bar, however.</p>
<p>If both <code>image</code> and <code>title</code> properties are specified for a given item, the 
<code>image</code> property takes precedence and the <code>title</code> property is ignored.</p>
 */
var BarItemType = function() {
};
BarItemType.prototype = {

    /**
     * <p>Whether the button is enabled initially.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    enabled:null,

    /**
     * <p>Button icon. If specified, takes precedence over <code>title</code>.</p>
     * @type String|Ti.Blob|Ti.Filesystem.File
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    image:null,

    /**
     * <p>Button title, used if no <code>image</code> is specified.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    title:null,

    /**
     * <p>Width for this button.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CameraMediaItemType = function() {
};
CameraMediaItemType.prototype = {

    /**
     * <p>Simple object defining the user's selected crop rectangle, or <code>null</code> if the user has not edited the photo.</p>
     * @type CropRectType
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    cropRect:null,

    /**
     * <p>The media object, as a {@link Ti.Blob}.</p>
     * @type Ti.Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    media:null,

    /**
     * <p>The type of media, either <code>MEDIA_TYPE_PHOTO</code> or <code>MEDIA_TYPE_VIDEO</code> defined in {@link Ti.Media}.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    mediaType:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CameraOptionsType = function() {
};
CameraOptionsType.prototype = {

    /**
     * <p>Specifies if the media should be editable after capture/selection.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    allowEditing:null,

    /**
     * <p>Specifies if the dialog should be animated upon showing and hiding.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animated:null,

    /**
     * <p>Controls the type of arrow and position of the popover.</p>
     * @type Number
     * @since 0.8 (iPad)
     */
    arrowDirection:null,

    /**
     * <p>Specifies if the camera should be hidden automatically after the media capture is completed.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    autohide:null,

    /**
     * <p>Function to call if the user presses the cancel button.</p>
     * @type Callback<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    cancel:null,

    /**
     * <p>Function to call upon receiving an error.</p>
     * @type Callback<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Show the camera in a popover.</p>
     * @type Boolean
     * @since 0.8 (iPad)
     */
    inPopOver:null,

    /**
     * <p>Array of media type constants to allow: <code>MEDIA_TYPE_PHOTO</code> or <code>MEDIA_TYPE_VIDEO</code>.</p>
     * @type Array<String>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    mediaTypes:null,

    /**
     * <p>View to added as an overlay to the camera UI (on top).</p>
     * @type Ti.UI.View
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    overlay:null,

    /**
     * <p>View to position the camera or photo gallery popover on top of.</p>
     * @type Ti.UI.View
     * @since 0.8 (iPad)
     */
    popoverView:null,

    /**
     * <p>Specifies if the media should be saved to the photo gallery upon successful capture.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    saveToPhotoGallery:null,

    /**
     * <p>Indicates if the built-in camera controls should be displayed.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    showControls:null,

    /**
     * <p>Function to call when the camera is closed after a successful capture/selection.</p>
     * @type Callback<CameraMediaItemType>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,

    /**
     * <p>Transformation matrix to apply to the camera or photogallery view.</p>
     * @type Ti.UI.D2Matrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Maximum duration (in milliseconds) to allow video capture before completing.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    videoMaximumDuration:null,

    /**
     * <p>Constant to indicate the video quality during capture.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    videoQuality:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CloudChatGroupsResponse = function() {
};
CloudChatGroupsResponse.prototype = {

    /**
     * <p>Array of <code>chat_groups</code> objects, if any</p>
     * @type Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    chat_groups:null,

    /**
     * <p>Error code, if any.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    code:null,

    /**
     * <p>Set to <code>true</code> if the request failed.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Error message, if any.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>A dictionary object containing meta data, if any.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    meta:null,

    /**
     * <p>Set to <code>true</code> if the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CloudChatsResponse = function() {
};
CloudChatsResponse.prototype = {

    /**
     * <p>Array of <code>chats</code> objects, if any</p>
     * @type Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    chats:null,

    /**
     * <p>Error code, if any.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    code:null,

    /**
     * <p>Set to <code>true</code> if the request failed.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Error message, if any.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>A dictionary object containing meta data, if any.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    meta:null,

    /**
     * <p>Set to <code>true</code> if the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CloudCheckinsResponse = function() {
};
CloudCheckinsResponse.prototype = {

    /**
     * <p>Array of <code>checkins</code> objects, if any</p>
     * @type Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    checkins:null,

    /**
     * <p>Error code, if any.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    code:null,

    /**
     * <p>Set to <code>true</code> if the request failed.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Error message, if any.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>A dictionary object containing meta data, if any.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    meta:null,

    /**
     * <p>Set to <code>true</code> if the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CloudClientsResponse = function() {
};
CloudClientsResponse.prototype = {

    /**
     * <p>Error code, if any.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    code:null,

    /**
     * <p>Set to <code>true</code> if the request failed.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>IP address of client</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ip_address:null,

    /**
     * <p>Location of client</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    location:null,

    /**
     * <p>Error message, if any.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>A dictionary object containing meta data, if any.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    meta:null,

    /**
     * <p>Set to <code>true</code> if the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CloudEmailsResponse = function() {
};
CloudEmailsResponse.prototype = {

    /**
     * <p>Error code, if any.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    code:null,

    /**
     * <p>Set to <code>true</code> if the request failed.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Error message, if any.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>A dictionary object containing meta data, if any.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    meta:null,

    /**
     * <p>Set to <code>true</code> if the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CloudKeyValuesResponse = function() {
};
CloudKeyValuesResponse.prototype = {

    /**
     * <p>Error code, if any.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    code:null,

    /**
     * <p>Set to <code>true</code> if the request failed.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Array of <code>keyvalues</code> objects, if any</p>
     * @type Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    keyvalues:null,

    /**
     * <p>Error message, if any.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>A dictionary object containing meta data, if any.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    meta:null,

    /**
     * <p>Set to <code>true</code> if the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CloudObjectsResponse = function() {
};
CloudObjectsResponse.prototype = {

    /**
     * <p>Array of <code>classname</code> objects, if any</p>
     * @type Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    classname:null,

    /**
     * <p>Error code, if any.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    code:null,

    /**
     * <p>Set to <code>true</code> if the request failed.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Error message, if any.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>A dictionary object containing meta data, if any.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    meta:null,

    /**
     * <p>Set to <code>true</code> if the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CloudPhotoCollectionsPhotosResponse = function() {
};
CloudPhotoCollectionsPhotosResponse.prototype = {

    /**
     * <p>Error code, if any.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    code:null,

    /**
     * <p>Set to <code>true</code> if the request failed.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Error message, if any.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>A dictionary object containing meta data, if any.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    meta:null,

    /**
     * <p>Array of <code>photos</code> objects, if any</p>
     * @type Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    photos:null,

    /**
     * <p>Set to <code>true</code> if the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CloudPhotoCollectionsResponse = function() {
};
CloudPhotoCollectionsResponse.prototype = {

    /**
     * <p>Error code, if any.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    code:null,

    /**
     * <p>Array of <code>collections</code> objects, if any</p>
     * @type Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    collections:null,

    /**
     * <p>Set to <code>true</code> if the request failed.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Error message, if any.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>A dictionary object containing meta data, if any.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    meta:null,

    /**
     * <p>Set to <code>true</code> if the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CloudPhotosResponse = function() {
};
CloudPhotosResponse.prototype = {

    /**
     * <p>Error code, if any.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    code:null,

    /**
     * <p>Set to <code>true</code> if the request failed.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Error message, if any.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>A dictionary object containing meta data, if any.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    meta:null,

    /**
     * <p>Array of <code>photos</code> objects, if any</p>
     * @type Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    photos:null,

    /**
     * <p>Set to <code>true</code> if the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CloudPlacesResponse = function() {
};
CloudPlacesResponse.prototype = {

    /**
     * <p>Error code, if any.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    code:null,

    /**
     * <p>Set to <code>true</code> if the request failed.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Error message, if any.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>A dictionary object containing meta data, if any.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    meta:null,

    /**
     * <p>Array of <code>places</code> objects, if any</p>
     * @type Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    places:null,

    /**
     * <p>Set to <code>true</code> if the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CloudPostsResponse = function() {
};
CloudPostsResponse.prototype = {

    /**
     * <p>Error code, if any.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    code:null,

    /**
     * <p>Set to <code>true</code> if the request failed.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Error message, if any.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>A dictionary object containing meta data, if any.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    meta:null,

    /**
     * <p>Array of <code>posts</code> objects, if any</p>
     * @type Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    posts:null,

    /**
     * <p>Set to <code>true</code> if the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CloudPushNotificationConfig = function() {
};
CloudPushNotificationConfig.prototype = {

    /**
     * <p>Callback function called when an error occurs during registration.</p>
     * @type Callback<CloudPushNotificationErrorArg>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Callback function called when the push registration is successfully completed.</p>
     * @type Callback<CloudPushNotificationSuccessArg>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CloudPushNotificationErrorArg = function() {
};
CloudPushNotificationErrorArg.prototype = {

    /**
     * <p>Description of the error.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CloudPushNotificationSuccessArg = function() {
};
CloudPushNotificationSuccessArg.prototype = {

    /**
     * <p>The device token which this device was registered for.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    deviceToken:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CloudPushNotificationsResponse = function() {
};
CloudPushNotificationsResponse.prototype = {

    /**
     * <p>Error code, if any.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    code:null,

    /**
     * <p>Set to <code>true</code> if the request failed.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Error message, if any.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>A dictionary object containing meta data, if any.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    meta:null,

    /**
     * <p>Set to <code>true</code> if the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CloudResponse = function() {
};
CloudResponse.prototype = {

    /**
     * <p>Error code, if any.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    code:null,

    /**
     * <p>Set to <code>true</code> if the request failed.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Error message, if any.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>A dictionary object containing meta data, if any.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    meta:null,

    /**
     * <p>Set to <code>true</code> if the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CloudReviewsResponse = function() {
};
CloudReviewsResponse.prototype = {

    /**
     * <p>Error code, if any.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    code:null,

    /**
     * <p>Set to <code>true</code> if the request failed.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Error message, if any.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>A dictionary object containing meta data, if any.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    meta:null,

    /**
     * <p>Array of <code>reviews</code> objects, if any</p>
     * @type Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    reviews:null,

    /**
     * <p>Set to <code>true</code> if the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CloudSocialIntegrationsResponse = function() {
};
CloudSocialIntegrationsResponse.prototype = {

    /**
     * <p>Error code, if any.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    code:null,

    /**
     * <p>Set to <code>true</code> if the request failed.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Error message, if any.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>A dictionary object containing meta data, if any.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    meta:null,

    /**
     * <p>Set to <code>true</code> if the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,

    /**
     * <p>Array of <code>users</code> objects, if any</p>
     * @type Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    users:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CloudStatusesResponse = function() {
};
CloudStatusesResponse.prototype = {

    /**
     * <p>Error code, if any.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    code:null,

    /**
     * <p>Set to <code>true</code> if the request failed.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Error message, if any.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>A dictionary object containing meta data, if any.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    meta:null,

    /**
     * <p>Array of <code>statuses</code> objects, if any</p>
     * @type Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    statuses:null,

    /**
     * <p>Set to <code>true</code> if the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CloudStreamProgress = function() {
};
CloudStreamProgress.prototype = {

    /**
     * <p>A value from 0.0-1.0 with the progress of the exchange.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    progress:null,

    /**
     * <p>The URL for the request, to help you identify it.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    url:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CloudUsersResponse = function() {
};
CloudUsersResponse.prototype = {

    /**
     * <p>Error code, if any.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    code:null,

    /**
     * <p>Set to <code>true</code> if the request failed.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Error message, if any.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>A dictionary object containing meta data, if any.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    meta:null,

    /**
     * <p>Set to <code>true</code> if the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,

    /**
     * <p>Array of <code>user</code> objects, if any</p>
     * @type Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    users:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Only invoked following a successful {@link Ti.Network.Socket.TCP.connect}
call.</p>
 */
var ConnectedCallbackArgs = function() {
};
ConnectedCallbackArgs.prototype = {

    /**
     * <p>Socket instance that has been connected.</p>
     * @type Ti.Network.Socket.TCP
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    socket:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>If supplied, the <code>width</code> and <code>height</code> values must be exact values,
not <code>'auto'</code>.</p>
<p>If the size specified is different from the size of the image, the 
image is cropped and/or scaled to fit the specified size.</p>
 */
var CoverFlowImageType = function() {
};
CoverFlowImageType.prototype = {

    /**
     * <p>Display height of the image, in Apple points.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Image to use, as a local file URL, <code>Blob</code>, or <code>File</code>.</p>
     * @type String|Ti.Blob|Ti.Filesystem.File
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    image:null,

    /**
     * <p>Display width for the image, in Apple points.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CreateBufferArgs = function() {
};
CreateBufferArgs.prototype = {

    /**
     * <p>The byte order of this buffer.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    byteOrder:null,

    /**
     * <p>The length of the buffer.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    length:null,

    /**
     * <p>The type of data encoding to use with <code>value</code>.</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    type:null,

    /**
     * <p>An initial value which will be encoded and placed in the buffer. If value is a Number, type must also be set. (this is simply a convenient way of calling {@link Ti.Codec.encodeString} or {@link Ti.Codec.encodeNumber} and placing the encoded value in the returned buffer.)</p>
     * @type String|Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    value:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CreateStreamArgs = function() {
};
CreateStreamArgs.prototype = {

    /**
     * <p>Mode to open the stream in.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    mode:null,

    /**
     * <p>Object that the stream will read from or write to.</p>
     * @type Ti.Blob|Ti.Buffer
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    source:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var CropRectType = function() {
};
CropRectType.prototype = {

    /**
     * <p>Height of the crop rectangle, in pixels.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Width of the crop rectangle, in pixels.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>X coordinate of the crop rectangle's upper-left corner.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    x:null,

    /**
     * <p>Y coordinate of the crop rectangle's upper-left corner.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    y:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var DecodeNumberDict = function() {
};
DecodeNumberDict.prototype = {

    /**
     * <p>The byte order to decode with</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    byteOrder:null,

    /**
     * <p>The position in <code>source</code> to start at</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    position:null,

    /**
     * <p>The buffer to decode</p>
     * @type Ti.Buffer
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    source:null,

    /**
     * <p>The encoding type to use. Must be one of {@link Ti.Codec.TYPE_BYTE}, {@link Ti.Codec.TYPE_SHORT}, {@link Ti.Codec.TYPE_INT}, {@link Ti.Codec.TYPE_FLOAT}, {@link Ti.Codec.TYPE_LONG}, or {@link Ti.Codec.TYPE_DOUBLE}</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    type:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var DecodeStringDict = function() {
};
DecodeStringDict.prototype = {

    /**
     * <p>The character set to use when encoding this string to bytes.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    charset:null,

    /**
     * <p>The number of bytes to decode.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    length:null,

    /**
     * <p>The position to start decoding.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    position:null,

    /**
     * <p>The buffer to decode.</p>
     * @type Ti.Buffer
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    source:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>The type <code>Dictionary</code> is used to describe a plain JavaScript object used to pass a 
set of properties.</p>
<p>The type <code>Dictionary&lt;</code> <em>Type</em> <code>&gt;</code> is used to describe a dictionary
where the properties correspond to the properties of the named <em>Type</em>. So 
<code>Dictionary&lt;</code> <code>Ti.UI.Window</code> <code>&gt;</code> refers to a dictionary of <code>Window</code>
properties. </p>
<p>Property dictionaries are used extensively in the Titanium API, especially when 
creating objects. For example, You can specify the initial properties for 
a new window by passing a <code>Dictionary&lt;</code> <code>Ti.UI.Window</code> <code>&gt;</code> object to the 
{@link Ti.UI.createWindow} method:</p>
<pre><code>var window = Ti.UI.createWindow({
    title: "Test", 
    fullscreen: true, 
    backgroundColor: '#aea'
});
</code></pre>
 */
var Dictionary = function() {
};
Dictionary.prototype = {



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>The value of x and y positions will both be 0 when returned by the size property. When a dimension is
returned by the rect property, x will return the left position, and y will return the top position.</p>
 */
var Dimension = function() {
};
Dimension.prototype = {

    /**
     * <p>The height measurement.</p>
     * @type Number
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    height:null,

    /**
     * <p>The width measurement.</p>
     * @type Number
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    width:null,

    /**
     * <p>The x-axis coordinate of the position.</p>
     * @type Number
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    x:null,

    /**
     * <p>The y-axis coordinate of the position.</p>
     * @type Number
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    y:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var EncodeNumberDict = function() {
};
EncodeNumberDict.prototype = {

    /**
     * <p>The byte order to encode with</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    byteOrder:null,

    /**
     * <p>The destination buffer</p>
     * @type Ti.Buffer
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    dest:null,

    /**
     * <p>The position in dest to set the encoded data</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    position:null,

    /**
     * <p>The source Number to encode</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    source:null,

    /**
     * <p>The encoding type to use. Must be one of {@link Ti.Codec.TYPE_BYTE}, {@link Ti.Codec.TYPE_SHORT}, {@link Ti.Codec.TYPE_INT}, {@link Ti.Codec.TYPE_FLOAT}, {@link Ti.Codec.TYPE_LONG}, or {@link Ti.Codec.TYPE_DOUBLE}</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    type:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var EncodeStringDict = function() {
};
EncodeStringDict.prototype = {

    /**
     * <p>The character set to use when encoding this string to bytes.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    charset:null,

    /**
     * <p>The destination buffer</p>
     * @type Ti.Buffer
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    dest:null,

    /**
     * <p>The position in <code>dest</code> to set the encoded string.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    destPosition:null,

    /**
     * <p>The source string to encode</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    source:null,

    /**
     * <p>The number of characters in <code>source</code> to encode.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    sourceLength:null,

    /**
     * <p>The position in <code>source</code> to start encoding.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    sourcePosition:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var ErrorCallbackArgs = function() {
};
ErrorCallbackArgs.prototype = {

    /**
     * <p>A text description of the error.</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>The error code of the error (potentially system-dependent).</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    errorCode:null,

    /**
     * <p>Socket that experienced the error.</p>
     * @type Ti.Network.Socket.TCP
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    socket:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>The <code>success</code> and <code>cancelled</code> properties may not be reliable for dialogs. In the event
that the user canceled the dialog, the <code>result</code> field is <code>undefined</code>.</p>
 */
var FacebookDialogResponse = function() {
};
FacebookDialogResponse.prototype = {

    /**
     * <p>Indicates if the user canceled the dialog.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    cancelled:null,

    /**
     * <p>Error message, if request failed.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>JSON response containing the <code>post_id</code> of the new post, if successful.
<code>undefined</code> if the user canceled the dialog.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    result:null,

    /**
     * <p>Indicates if the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var FacebookGraphResponse = function() {
};
FacebookGraphResponse.prototype = {

    /**
     * <p>Error message, if request failed.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Graph API path of the original request.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    path:null,

    /**
     * <p>JSON response returned by Facebook.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    result:null,

    /**
     * <p>Indicates if the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var FacebookRESTResponse = function() {
};
FacebookRESTResponse.prototype = {

    /**
     * <p>Error message, if request failed.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>REST method call you specified.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    method:null,

    /**
     * <p>JSON response returned by Facebook.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    result:null,

    /**
     * <p>Indicates if the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Available fonts vary by platform and device. On iOS, font support depends on the OS
version. On Android, font support depends on the OS version <strong>and</strong> device manufacturer.</p>
<p>Note that to update the font used by a UI component, you must set the object's <code>font</code>
property, like this:</p>
<pre><code>myLabel.font = { fontSize: 24, font: myFontName }
</code></pre>
<p>Changing the <code>font</code> object after assigning it does not reliably affect the underlying UI
component:</p>
<pre><code>// This may not work as expected
myLabel.font.fontSize = 24;
</code></pre>
<h4>Custom Fonts</h4>
<p>Custom TrueType (.ttf) or OpenType (.otf) fonts may be embedded in an application on iOS and
Android. (Note that you must have redistribution rights on the fonts you ship.)</p>
<p>Custom fonts must be placed in the <code>Resources/fonts</code> directory. Note that the steps
for referring to the fonts are slightly different by platform.</p>
<ul>
<li>
<p>On Android, use the font file name, minus the <code>.otf</code> or <code>.ttf</code> extension.
  For example, if you are using the Chantelli Antiqua font and the file is
  named <code>Chantelli_Antiqua.ttf</code>, specify <code>fontFamily: 'Chantelli_Antiqua'</code> 
  on Android.</p>
</li>
<li>
<p>On iOS, use the official font name--this name is embedded in the font file and 
  does not change if you rename the file. For example, for Chantelli Antiqua, 
  you'd specify: <code>fontFamily: 'Chantelli Antiqua'</code> (with a space).
  On OS X, double-clicking on the font file will launch the Font Book application, 
  which shows the official font name.</p>
</li>
</ul>
<p>iOS requires one more step to embed a custom font in an application. The font must be 
added to the application's <code>Info.plist</code> file:</p>
<ol>
<li>
<p>Build the project at least once (the font won't work yet).</p>
</li>
<li>
<p>Copy <em>yourproject</em><code>/build/iphone/Info.plist</code> to the <em>yourproject</em> folder.</p>
</li>
<li>
<p>Double-click <code>Info.plist</code> to open it in Xcode.</p>
</li>
<li>
<p>Right-click a blank area in the list of keys and choose <strong>Add Row</strong>. </p>
<p>From the resulting list, choose <strong>Fonts provided by application</strong>.</p>
</li>
<li>
<p>Expand <strong>Fonts provided by application</strong> and click in the Value field. </p>
<p>Enter the full path of the font file, for example, <code>/fonts/Chantelli_Antiqua.ttf</code>.</p>
</li>
<li>
<p>Save the file and close Xcode.</p>
</li>
<li>
<p>In Studio, clean the project then build it again. Your custom font should
    show up.</p>
</li>
</ol>
<p>For more information on embedding custom fonts, see:</p>
<ul>
<li>{@link http://docs.appcelerator.com/titanium/#!/guide/Custom_Fonts}</li>
</ul>
 */
var Font = function() {
};
Font.prototype = {

    /**
     * <p>Name of a font family, for example, "Helvetica" or "DroidSans".</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fontFamily:null,

    /**
     * <p>Font size, in platform-dependent units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fontSize:null,

    /**
     * <p>Font style. Valid values are "italic" or "normal".</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    fontStyle:null,

    /**
     * <p>Font weight. Valid values are "bold" or "normal".</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fontWeight:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var ForwardGeocodeResponse = function() {
};
ForwardGeocodeResponse.prototype = {

    /**
     * <p>Estimated accuracy of the geocoding, in meters.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    accuracy:null,

    /**
     * <p>Full address.</p>
     * @type String
     * @since 0.8 (Android)
     */
    address:null,

    /**
     * <p>City name.</p>
     * @type String
     * @since 0.8 (Android)
     */
    city:null,

    /**
     * <p>Country name.</p>
     * @type String
     * @since 0.8 (Android)
     */
    country:null,

    /**
     * <p>Country code.</p>
     * @type String
     * @since 0.8 (Android)
     */
    countryCode:null,

    /**
     * <p>Country code. Same as <code>country_code</code>.</p>
     * @type String
     * @since 0.8 (Android)
     */
    country_code:null,

    /**
     * <p>Display address. Identical to <code>address</code>.</p>
     * @type String
     * @since 0.8 (Android)
     */
    displayAddress:null,

    /**
     * <p>Latitude of the geocoded address.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    latitude:null,

    /**
     * <p>Longitude of the geocoded address.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    longitude:null,

    /**
     * <p>Postal code.</p>
     * @type String
     * @since 0.8 (Android)
     */
    postalCode:null,

    /**
     * <p>First line of region.</p>
     * @type String
     * @since 0.8 (Android)
     */
    region1:null,

    /**
     * <p>Not used.</p>
     * @type String
     * @since 0.8 (Android)
     */
    region2:null,

    /**
     * <p>Street name, without street address.</p>
     * @type String
     * @since 0.8 (Android)
     */
    street:null,

    /**
     * <p>Street name.</p>
     * @type String
     * @since 0.8 (Android)
     */
    street1:null,

    /**
     * <p>Indicates whether the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var GeocodedAddress = function() {
};
GeocodedAddress.prototype = {

    /**
     * <p>Full address.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    address:null,

    /**
     * <p>City name.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    city:null,

    /**
     * <p>Country name.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    country:null,

    /**
     * <p>Country code. On iOS, use <code>country_code</code>.</p>
     * @type String
     * @since 0.8 (Android)
     */
    countryCode:null,

    /**
     * <p>Country code. Same as <code>country_code</code>.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    country_code:null,

    /**
     * <p>Display address. Identical to <code>address</code>.</p>
     * @type String
     * @since 0.8 (Android)
     */
    displayAddress:null,

    /**
     * <p>Latitude of the geocoded point.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    latitude:null,

    /**
     * <p>Longitude of the geocoded point.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    longitude:null,

    /**
     * <p>Postal code. On iOS, use <code>zipcode</code>.</p>
     * @type String
     * @since 0.8 (Android)
     */
    postalCode:null,

    /**
     * <p>First line of region.</p>
     * @type String
     * @since 0.8 (Android)
     */
    region1:null,

    /**
     * <p>Not used.</p>
     * @type String
     * @since 0.8 (Android)
     */
    region2:null,

    /**
     * <p>Street name, without street address.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    street:null,

    /**
     * <p>Street name.</p>
     * @type String
     * @since 0.8 (Android)
     */
    street1:null,

    /**
     * <p>Postal code. On Android, use <code>postalCode</code>.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    zipcode:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Titanium provides a number of global built-in objects, detailed below. </p>
<h4>JSON</h4>
<p>Titanium provides a built-in {@link Global.JSON} object two functions, <code>parse</code> and <code>stringify</code>.</p>
<h4>String Utilities</h4>
<p>Titanium includes several extra utility functions for formatting text, attached to the
global {@link Global.String} object.</p>
<h4>Timers</h4>
<p>Titanium has built-in support for one-off and repeating timers:</p>
<ul>
<li>
<p>Use {@link Global.setTimeout} to start a one-off timer.</p>
</li>
<li>
<p>Use {@link Global.setInterval} to start a repeating timer.</p>
</li>
</ul>
<h4>Alert</h4>
<p>Titanium has a built-in convenience function {@link Global.alert} which can be used as an alias 
for the {@link Ti.UI.AlertDialog} module.</p>
<h4>Locale</h4>
<p>The <code>L</code> macro can also be used as an alias for the {@link Ti.Locale.getString} method.</p>
 */
    /**
     * <p>An alias for {@link Ti.Locale.getString}.</p>
     * @param {String} key <p>Key used to lookup the localized string.</p>
     * @param {String} hint <p>Text to return if <code>key</code> is not found.</p>
     * @returns String Localized string defined by `key`, or value of `hint` otherwise.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    function L(key, hint) {
    }

    /**
     * <p>Displays a pop-up alert dialog with the passed in <code>message</code>.</p>
     * @param {String} message <p>Alert message.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    function alert(message) {
    }

    /**
     * <p>Cancels an interval timer.</p>
     * @param {Number} timerId <p>Unique timer identifier returned by {@link Global.setInterval}.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    function clearInterval(timerId) {
    }

    /**
     * <p>Cancels a one-time timer.</p>
     * @param {Number} timerId <p>Unique timer identifier returned by {@link Global.setTimeout}.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    function clearTimeout(timerId) {
    }

    /**
     * <p>Replaces each escape sequence in the specified string, created using the <code>encodedURI</code> 
method, with the character that it represents. </p>
     * @param {String} encodedURI <p>Text that optionally contains encoded escape sequences.</p>
     * @returns String Decoded string.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    function decodeURIComponent(encodedURI) {
    }

    /**
     * <p>Replaces each special character in the specified string with the equivalent URI escape 
sequence. Useful for encoding URIs.</p>
     * @param {String} string <p>Text that optionally contains special characters.</p>
     * @returns String Encoded string.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    function encodeURIComponent(string) {
    }

    /**
     * <p>Loads either a native Titanium module, or a CommonJS module.</p>
     * @param {String} moduleId <p>Native module ID, or local path to a JavaScript file, <em>minus</em> the <code>.js</code> extension.</p>
     * @returns Object Exported `exports` object of the required module.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    function require(moduleId) {
    }

    /**
     * <p>Executes a function repeatedly with a fixed time delay between each call to that function.</p>
     * @param {Callback} _function <p>Function to call.</p>
     * @param {Number} delay <p>Time in milliseconds to wait between calls to function.</p>
     * @returns Number Unique timer identifier.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    function setInterval(_function, delay) {
    }

    /**
     * <p>Executes code or a function after a delay.</p>
     * @param {Callback} _function <p>Code or function to call.</p>
     * @param {Number} delay <p>Time in milliseconds to wait before the function is called.</p>
     * @returns Number Unique timer identifier.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    function setTimeout(_function, delay) {
    }

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
    /**
     * <p>Parses a JSON text to produce an object or array.</p>
     * @param {String} text <p>JSON text to parse.</p>
     * @param {Callback} reviver <p>Function to filter and transform the results.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    JSON.prototype.parse = function(text, reviver) {
    };

    /**
     * <p>Produces a JSON text from a JavaScript value.</p>
     * @param {Object} value <p>Any JavaScript value, usually an object or array.</p>
     * @param {Callback|Array<String>} replacer <p>Determines how object values are stringified for objects. See main text for usage.</p>
     * @param {Number|String} space <p>Specifies how nested structures are indented. If it is a number, it specifies the number of spaces to indent at each level. If it is a string (such as '\t' or '&amp;nbsp;'), it specifies the characters used to indent at each level.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    JSON.prototype.stringify = function(value, replacer, space) {
    };

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>This module contains Titanium-only extensions for formatting data into locale-specific strings. 
The target locale is configured by the user in the device's system Settings.</p>
 */
    /**
     * <p>Formats a string using <code>printf</code>-style substitution.</p>
     * @param {String} formatString <p>An IEEE <code>printf</code>-style string, containing zero or more conversion specifications.</p>
     * @param {String|Number} value <p>Comma-separated list of one or more values to substitute into the <code>formatString</code>. 
Optional on Android.</p>
     * @returns String Formatted string.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    String.prototype.format = function(formatString, value) {
    };

    /**
     * <p>Formats a number into the currency format, including currency symbol, of the locale 
configured for the system.</p>
     * @param {Number} value <p>Currency value.</p>
     * @returns String Formatted, localized string.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    String.prototype.formatCurrency = function(value) {
    };

    /**
     * <p>Formats a date into the date format of the locale configured for the system.</p>
     * @param {Date} date <p>Date to format.</p>
     * @param {String} format <p>Date format to use. One of 'short', 'medium', or 'long'.</p>
     * @returns String Formatted, localized string.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    String.prototype.formatDate = function(date, format) {
    };

    /**
     * <p>Formats a number into the decimal format, including decimal symbol, of the locale 
configured for the system.</p>
     * @param {Number} value <p>Value to format.</p>
     * @param {String} locale <p>Locale string. For example, <code>en-US</code> for US English.</p>
     * @param {String} pattern <p>Format pattern.</p>
     * @returns String String representation of the specified number, using a locale-specific decimal symbol, 
if required.

     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    String.prototype.formatDecimal = function(value, locale, pattern) {
    };

    /**
     * <p>Formats a date into the time format of the locale configured for the system.</p>
     * @param {Date} date <p>Date to format.</p>
     * @param {String} format <p>Date format to use. One of 'short', 'medium', or 'long' (iOS only.)</p>
     * @returns String Formatted, localized string.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    String.prototype.formatTime = function(date, format) {
    };

/**
 * platforms: iPhone, iPad
 */
var Gradient = function() {
};
Gradient.prototype = {

    /**
     * <p>Set to <code>true</code> to continue filling with the final color beyond the <code>endPoint</code>.</p>
     * @type Boolean
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    backfillEnd:null,

    /**
     * <p>Set to <code>true</code> to continue filling with the starting color beyond the <code>startPoint</code>.</p>
     * @type Boolean
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    backfillStart:null,

    /**
     * <p>An array of colors, as a color name or hex triplet.</p>
     * @type Array<String>|Array<GradientColorRef>
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    colors:null,

    /**
     * <p>End point for the gradient.</p>
     * @type Point
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    endPoint:null,

    /**
     * <p>For a radial gradient, the radius at the <code>endPoint</code>.</p>
     * @type Number
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    endRadius:null,

    /**
     * <p>Start point for the gradient.</p>
     * @type Point
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    startPoint:null,

    /**
     * <p>For a radial gradient, the radius at the <code>startPoint</code>.</p>
     * @type Number
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    startRadius:null,

    /**
     * <p>Type of gradient, either 'linear' or 'radial'.</p>
     * @type String
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    type:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var GradientColorRef = function() {
};
GradientColorRef.prototype = {

    /**
     * <p>Color value at this point in the gradient, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    color:null,

    /**
     * <p>Offset of this color in the gradient, from 0 (start) to 1 (end).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    offset:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var HeadingData = function() {
};
HeadingData.prototype = {

    /**
     * <p>Accuracy of the compass heading, in platform-specific units.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    accuracy:null,

    /**
     * <p>Declination in degrees from magnetic North.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    magneticHeading:null,

    /**
     * <p>Timestamp for the heading data, in milliseconds.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    timestamp:null,

    /**
     * <p>Declination in degrees from true North.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    trueHeading:null,

    /**
     * <p>Raw geomagnetic data for the X axis.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad), 0.8 (Android)
     */
    x:null,

    /**
     * <p>Raw geomagnetic data for the Y axis.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad), 0.8 (Android)
     */
    y:null,

    /**
     * <p>Raw geomagnetic data for the Z axis.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad), 0.8 (Android)
     */
    z:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var HeadingResponse = function() {
};
HeadingResponse.prototype = {

    /**
     * <p>If <code>success</code> is false, an error code, if available.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    code:null,

    /**
     * <p>If <code>success</code> is false, includes a text description of the error.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>If <code>success</code> is true, the actual heading data.</p>
     * @type HeadingData
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    heading:null,

    /**
     * <p>Indicates whether the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var ImageAsCroppedDict = function() {
};
ImageAsCroppedDict.prototype = {

    /**
     * <p>The height to crop this image to.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>The width to crop this image to.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>The x point within the image to crop.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    x:null,

    /**
     * <p>The y point within the image to crop.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    y:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var LocationCoordinates = function() {
};
LocationCoordinates.prototype = {

    /**
     * <p>Accuracy of the location update, in meters.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    accuracy:null,

    /**
     * <p>Altitude of the location update, in meters.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    altitude:null,

    /**
     * <p>Vertical accuracy of the location update, in meters.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    altitudeAccuracy:null,

    /**
     * <p>Compass heading, in degrees. May be unknown if device is not moving. On 
iOS, a negative value indicates that the heading data is not valid.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    heading:null,

    /**
     * <p>Latitude of the location update, in decimal degrees.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    latitude:null,

    /**
     * <p>Longitude of the location update, in decimal degrees.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    longitude:null,

    /**
     * <p>Current speed in meters/second. On iOS, a negative value indicates that the 
heading data is not valid.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    speed:null,

    /**
     * <p>Timestamp for this location update, in milliseconds.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    timestamp:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>The <code>accuracy</code> and <code>power</code> values correspond to constants defined in the 
Android API. See
{@link http://developer.android.com/reference/android/location/Criteria} 
in the Android API Reference.</p>
<p>These values are generalizations. In general, a provider with coarse accuracy will
provide less accurate results than a provider with fine accuracy, and a provider with
high power requirements will use more battery power than a provider with low power
requirements.</p>
 */
var LocationProviderDict = function() {
};
LocationProviderDict.prototype = {

    /**
     * <p>Accuracy of the location provider, either fine (1) or coarse (2).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    accuracy:null,

    /**
     * <p>Name of the location provider.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    name:null,

    /**
     * <p>Power consumption for this provider, either low (1), medium (2), or high (3).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    power:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var LocationResults = function() {
};
LocationResults.prototype = {

    /**
     * <p>if <code>success</code> is false, the error code if available.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    code:null,

    /**
     * <p>Location data for this update.</p>
     * @type LocationCoordinates
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    coords:null,

    /**
     * <p>If <code>success</code> is false, a string describing the error.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Object describing the location provider generating this update.</p>
     * @type LocationProviderDict
     * @since 0.8 (Android)
     */
    provider:null,

    /**
     * <p>Indicates if location data was successfully retrieved.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var MapLocationType = function() {
};
MapLocationType.prototype = {

    /**
     * <p>Set to <code>true</code> to animate the move to the new location.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:null,

    /**
     * <p>Latitude value for the center point of the map, in decimal degrees.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    latitude:null,

    /**
     * <p>The amount of north-to-south distance displayed on the map, measured in decimal degrees.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    latitudeDelta:null,

    /**
     * <p>Longitude value for the center point of the map, in decimal degrees.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    longitude:null,

    /**
     * <p>The amount of east-to-west distance displayed on the map, measured in decimal degrees.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    longitudeDelta:null,

    /**
     * <p>If <code>true</code>, the specified region is modified to fit the aspect ratio of the
map view, while remaining centered on <code>latitude</code>,<code>longitude</code>.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    regionFit:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var MapPointType = function() {
};
MapPointType.prototype = {

    /**
     * <p>Latitude value of the map point, in decimal degrees.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    latitude:null,

    /**
     * <p>Longitude value of the map point, in decimal degrees.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    longitude:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var MapRegionType = function() {
};
MapRegionType.prototype = {

    /**
     * <p>Latitude value for the center point of the map, in decimal degrees.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    latitude:null,

    /**
     * <p>The amount of north-to-south distance displayed on the map, measured in decimal degrees.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    latitudeDelta:null,

    /**
     * <p>Longitude value for the center point of the map, in decimal degrees.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    longitude:null,

    /**
     * <p>The amount of east-to-west distance displayed on the map, measured in decimal degrees.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    longitudeDelta:null,



};

/**
 * platforms: iPhone, iPad
 */
var MapRouteType = function() {
};
MapRouteType.prototype = {

    /**
     * <p>Color to use when drawing the route, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    color:null,

    /**
     * <p>Route name.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    name:null,

    /**
     * <p>Array of map points making up the route.</p>
     * @type Array<MapPointType>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    points:null,

    /**
     * <p>Line width to use when drawing the route.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    width:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>The matrix is initialized with the specified transforms.</p>
<p>On iOS, rotation is always performed first, regardless of the order the 
properties are specified in.</p>
<p>On Android, specifying both <code>scale</code> and <code>rotate</code> the same dictionary results
in an incorrect transformation.</p>
 */
var MatrixCreationDict = function() {
};
MatrixCreationDict.prototype = {

    /**
     * <p>Point to rotate around, specified as a dictionary object with <code>x</code> and <code>y</code>
properties, where { x: 0.5, y: 0.5 } represents the center of whatever is being
rotated.</p>
     * @type Dictionary
     * @since 0.8 (Android)
     */
    anchorPoint:null,

    /**
     * <p>Rotation angle, in degrees. See the {@link Ti.UI.D2Matrix.rotate} method
for a discussion of rotation.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    rotate:null,

    /**
     * <p>Scale the matrix by the specified scaling factor. The same scaling factor is used
for both horizontal and vertical scaling.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    scale:null,



};

/**
 * platforms: iPhone, iPad
 */
var MediaItemType = function() {
};
MediaItemType.prototype = {

    /**
     * <p>The album artist ID3 tag contents.</p>
     * @type String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    albumArtist:null,

    /**
     * <p>The album title ID3 tag contents.</p>
     * @type String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    albumTitle:null,

    /**
     * <p>The total number of tracks on the album.</p>
     * @type Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    albumTrackCount:null,

    /**
     * <p>The track number of the album.</p>
     * @type Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    albumTrackNumber:null,

    /**
     * <p>The artist ID3 tag contents.</p>
     * @type String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    artist:null,

    /**
     * <p>The composer ID3 tag contents.</p>
     * @type String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    composer:null,

    /**
     * <p>The total number of discs comprising the album.</p>
     * @type Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    discCount:null,

    /**
     * <p>The disc number of the album.</p>
     * @type Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    discNumber:null,

    /**
     * <p>The genre ID3 tag contents.</p>
     * @type String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    genre:null,

    /**
     * <p>Whether or not the media is part of a compilation album.</p>
     * @type Boolean
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    isCompilation:null,

    /**
     * <p>The lyrics ID3 tag contents.</p>
     * @type String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    lyrics:null,

    /**
     * <p>The type of the media. One of the <code>MUSIC_MEDIA_TYPE_*</code> constants on {@link Ti.Media}.</p>
     * @type Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    mediaType:null,

    /**
     * <p>The total number of plays.</p>
     * @type Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    playCount:null,

    /**
     * <p>The playback length.</p>
     * @type Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    playbackDuration:null,

    /**
     * <p>The podcast title. Only valid for media of type <code>MUSIC_MEDIA_TYPE_PODCAST</code>.</p>
     * @type String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    podcastTitle:null,

    /**
     * <p>The user rating.</p>
     * @type Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    rating:null,

    /**
     * <p>The total number of skips.</p>
     * @type Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    skipCount:null,

    /**
     * <p>The title ID3 tag contents.</p>
     * @type String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    title:null,



};

/**
 * platforms: iPhone, iPad
 */
var MediaQueryInfoType = function() {
};
MediaQueryInfoType.prototype = {

    /**
     * <p>Whether or not the predicate is for an exact match.  The default is <code>true</code>.</p>
     * @type Boolean
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    exact:null,

    /**
     * <p>The value for the given predicate. See the descriptions in {@link MediaQueryType} for information about which properties require which values.</p>
     * @type Number|String|Boolean
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    value:null,



};

/**
 * platforms: iPhone, iPad
 */
var MediaQueryType = function() {
};
MediaQueryType.prototype = {

    /**
     * <p>The album artist to filter on. Value should be a String.</p>
     * @type MediaQueryInfoType|String
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    albumArtist:null,

    /**
     * <p>The album title to filter on. Value should be a String.</p>
     * @type MediaQueryInfoType|String
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    albumTitle:null,

    /**
     * <p>The artist to filter on. Value should be a String.</p>
     * @type MediaQueryInfoType|String
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    artist:null,

    /**
     * <p>The composer to filter on. Value should be a String.</p>
     * @type MediaQueryInfoType|String
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    composer:null,

    /**
     * <p>The genre to filter on. Value should be a String.</p>
     * @type MediaQueryInfoType|String
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    genre:null,

    /**
     * <p>A constant that specifies the ordering of the result array. One of the <code>MUSIC_MEDIA_GROUP_*</code> constants specified on the {@link Ti.Media} module.</p>
     * @type Number
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    grouping:null,

    /**
     * <p>Filter by whether or not the item is a compilation. Value should be a Boolean.</p>
     * @type MediaQueryInfoType|Boolean
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    isCompilation:null,

    /**
     * <p>The media type to filter on. Value should be one of the <code>MUSIC_MEDIA_TYPE_</code> constants on {@link Ti.Media}.</p>
     * @type MediaQueryInfoType|Number
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    mediaType:null,

    /**
     * <p>The title to filter on. Value should be a String.</p>
     * @type MediaQueryInfoType|String
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    title:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>The callback is called once per scanned file.</p>
 */
var MediaScannerResponse = function() {
};
MediaScannerResponse.prototype = {

    /**
     * <p>Path to the media file that was scanned.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    path:null,

    /**
     * <p>URI to the file if it was scanned and added to the media library, or <code>null</code>
if the file was not added.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    uri:null,



};

/**
 * platforms: iPhone, iPad
 */
var MovieSize = function() {
};
MovieSize.prototype = {

    /**
     * <p>Height of the movie.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    height:null,

    /**
     * <p>Width of the movie.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    width:null,



};

/**
 * platforms: iPhone, iPad
 */
var MusicLibraryOptionsType = function() {
};
MusicLibraryOptionsType.prototype = {

    /**
     * <p>Set to <code>true</code> to allow the user to select multiple items from the library.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    allowMultipleSelections:null,

    /**
     * <p>Boolean if the dialog should be animated when showing and hiding.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animated:null,

    /**
     * <p>Specifies that the library should be hidden automatically after media selection is completed.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    autohide:null,

    /**
     * <p>Function to call if the user presses the cancel button.</p>
     * @type Callback<Object>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    cancel:null,

    /**
     * <p>Function to call upon receiving an error.</p>
     * @type Callback<Object>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    error:null,

    /**
     * <p>An array of media type constants defining selectable media.</p>
     * @type Number|Array<Number>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    mediaTypes:null,

    /**
     * <p>Function to call when the music library selection is made.</p>
     * @type Callback<Object>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    success:null,



};

/**
 * platforms: iPhone, iPad
 */
var NotificationParams = function() {
};
NotificationParams.prototype = {

    /**
     * <p>Alert button text ('View', by default) or slider text ('slide to unlock...', by default) 
to display.</p>
     * @type String
     * @since 1.7 (iPhone), 1.7 (iPad)
     */
    alertAction:null,

    /**
     * <p>Alert message to display.</p>
     * @type String
     * @since 1.7 (iPhone), 1.7 (iPad)
     */
    alertBody:null,

    /**
     * <p>Image to display instead of <code>Default.png</code> when launching the application.</p>
     * @type String
     * @since 1.7 (iPhone), 1.7 (iPad)
     */
    alertLaunchImage:null,

    /**
     * <p>Application badge value.</p>
     * @type Number
     * @since 1.7 (iPhone), 1.7 (iPad)
     */
    badge:null,

    /**
     * <p>Date and time for the notification to occur.</p>
     * @type Date
     * @since 1.7 (iPhone), 1.7 (iPad)
     */
    date:null,

    /**
     * <p>Interval to repeat the notification. One of <code>weekly</code>, <code>daily</code>, <code>yearly,</code> <code>monthly</code>.</p>
     * @type String
     * @since 1.7 (iPhone), 1.7 (iPad)
     */
    repeat:null,

    /**
     * <p>Path to the sound file to play when notification occurs, relative to the <code>Resources</code> folder.</p>
     * @type String
     * @since 1.7 (iPhone), 1.7 (iPad)
     */
    sound:null,

    /**
     * <p>Timezone of the date configured for the notification. If not set, the system timezone is used.</p>
     * @type String
     * @since 1.7 (iPhone), 1.7 (iPad)
     */
    timezone:null,

    /**
     * <p>Data to pass to the application with the notification event.</p>
     * @type Dictionary
     * @since 1.7 (iPhone), 1.7 (iPad)
     */
    userInfo:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var PhotoGalleryOptionsType = function() {
};
PhotoGalleryOptionsType.prototype = {

    /**
     * <p>Specifies if the media should be editable after capture/selection.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    allowEditing:null,

    /**
     * <p>Specifies if the dialog should be animated upon showing and hiding.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animated:null,

    /**
     * <p>Controls the type of arrow and position of the popover.</p>
     * @type Number
     * @since 0.8 (iPad)
     */
    arrowDirection:null,

    /**
     * <p>Specifies if the photo gallery should be hidden automatically after the media selection is completed.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    autohide:null,

    /**
     * <p>Function to call if the user presses the cancel button.</p>
     * @type Callback<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    cancel:null,

    /**
     * <p>Function to call upon receiving an error.</p>
     * @type Callback<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Array of media type constants to allow: <code>MEDIA_TYPE_PHOTO</code> or <code>MEDIA_TYPE_VIDEO</code>.</p>
     * @type Array<String>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    mediaTypes:null,

    /**
     * <p>View to position the photo gallery popover on top of.</p>
     * @type Ti.UI.View
     * @since 0.8 (iPad)
     */
    popoverView:null,

    /**
     * <p>Function to call when the photogallery is closed after a successful selection.</p>
     * @type Callback<CameraMediaItemType>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad
 */
var Point = function() {
};
Point.prototype = {

    /**
     * <p>The x-axis coordinate of this point.</p>
     * @type Number
     * @since 1.8.0 (Android), 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    x:null,

    /**
     * <p>The y-axis coordinate of this point.</p>
     * @type Number
     * @since 1.8.0 (Android), 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    y:null,



};

/**
 * platforms: Android
 */
var PreviewImageError = function() {
};
PreviewImageError.prototype = {

    /**
     * <p>Error code, if applicable. See {@link Ti.Media} constants such as {@link Ti.Media.DEVICE_BUSY}.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    code:null,

    /**
     * <p>Description of the error.</p>
     * @type String
     * @since 0.8 (Android)
     */
    message:null,



};

/**
 * platforms: Android
 */
var PreviewImageOptions = function() {
};
PreviewImageOptions.prototype = {

    /**
     * <p>Function called back if the preview fails. Check the <code>message</code> property of passed back parameter.</p>
     * @type Callback<PreviewImageError>
     * @since 0.8 (Android)
     */
    error:null,

    /**
     * <p>The image to preview. Must be a blob based on a file, such as from {@link Ti.Filesystem.File.read}.</p>
     * @type Ti.Blob
     * @since 0.8 (Android)
     */
    image:null,

    /**
     * <p>Function to be called back if the preview succeeds. No info is passed.</p>
     * @type Callback<Object>
     * @since 0.8 (Android)
     */
    success:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>A callback with <code>bytesProcessed</code> set to -1 indicates the end of the 
pump operation, either because of an error or because the end of the
stream has been reached.</p>
 */
var PumpCallbackArgs = function() {
};
PumpCallbackArgs.prototype = {

    /**
     * <p>Buffer object holding the data currently being pumped to the handler method.</p>
     * @type Ti.Buffer
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    buffer:null,

    /**
     * <p>Number of bytes being passed to this invocation of the handler, or 
-1 in the event of an error or end of stream.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    bytesProcessed:null,

    /**
     * <p>Text description of the error.</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    errorDescription:null,

    /**
     * <p>Whether an error was encountered. Set to 1 in the case of an error, 0
otherwise.</p>
     * @type Number
     * @since 1.7 (Android)
     */
    errorState:null,

    /**
     * <p>Stream being read from.</p>
     * @type Ti.IOStream
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    source:null,

    /**
     * <p>Total number of bytes read from the stream so far, 
including the data passed to this current invocation of the handler.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    totalBytesProcessed:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var PushNotificationConfig = function() {
};
PushNotificationConfig.prototype = {

    /**
     * <p>Callback function invoked upon receiving a new push notification.</p>
     * @type Callback<PushNotificationData>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    callback:null,

    /**
     * <p>Callback function called when an error occurs during registration.</p>
     * @type Callback<PushNotificationErrorArg>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>Callback function called when the push registration is successfully completed.</p>
     * @type Callback<PushNotificationSuccessArg>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,

    /**
     * <p>Array of <code>NOTIFICATION_TYPE</code> constants that the application would like to receive.</p>
     * @type Array<Number>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    types:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var PushNotificationData = function() {
};
PushNotificationData.prototype = {

    /**
     * <p>The <code>userinfo</code> dictionary passed to the Apple Push Notification Service.</p>
     * @type Dictionary
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    data:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var PushNotificationErrorArg = function() {
};
PushNotificationErrorArg.prototype = {

    /**
     * <p>Description of the error.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>The value of this string is always "remote".</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    type:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var PushNotificationSuccessArg = function() {
};
PushNotificationSuccessArg.prototype = {

    /**
     * <p>The device token which this device was registered for.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    deviceToken:null,

    /**
     * <p>The value of this string is always "remote".</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    type:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var ReadCallbackArgs = function() {
};
ReadCallbackArgs.prototype = {

    /**
     * <p>Number of bytes processed, or -1 in the event of an error or end of stream.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    bytesProcessed:null,

    /**
     * <p>Text description of the error.</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    errorDescription:null,

    /**
     * <p>Whether an error was encountered. Set to 1 in the case of an error, 0
otherwise.</p>
     * @type Number
     * @since 1.7 (Android)
     */
    errorState:null,

    /**
     * <p>Stream being read.</p>
     * @type Ti.IOStream
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    source:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var Rect = function() {
};
Rect.prototype = {

    /**
     * <p>Bottom boundary of this Rect relative to parents height measured from the bottom boundary of parent.</p>
     * @type Number
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>Right boundary of this Rect relative to parent's' width measured from the right boundary of parent.</p>
     * @type Number
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    left:null,

    /**
     * <p>Color value at this point in the gradient.</p>
     * @type Number
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    right:null,

    /**
     * <p>Top boundary of this Rect relative to parent's height.</p>
     * @type Number
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    top:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var ReverseGeocodeResponse = function() {
};
ReverseGeocodeResponse.prototype = {

    /**
     * <p>An array of reverse-geocoded addresses matching the requested location.</p>
     * @type Array<GeocodedAddress>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    places:null,

    /**
     * <p>Indicates whether the request succeeded.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    success:null,



};

/**
 * platforms: iPhone, iPad, Android
 */
var ScreenshotResult = function() {
};
ScreenshotResult.prototype = {

    /**
     * <p>The screenshot image.</p>
     * @type Ti.Blob
     * @since 0.8 (iPhone), 0.8 (iPad), 0.8 (Android)
     */
    media:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var ServiceIntentOptions = function() {
};
ServiceIntentOptions.prototype = {

    /**
     * <p>One of the <code>START_</code> constants from {@link Ti.Android} to specify the "stickiness" of the Service when Android shuts down the host application.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    startMode:null,

    /**
     * <p>URL for the service's JavaScript.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    url:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>These properties are only used on iOS. Not all properties apply to all methods.</p>
<p><code>animationStyle</code> does not apply to the <code>scrollToTop</code> or <code>scrollToIndex</code> methods.</p>
<p><code>positon</code> only applies to the <code>scrollToIndex</code> method.</p>
 */
var TableViewAnimationProperties = function() {
};
TableViewAnimationProperties.prototype = {

    /**
     * <p>Whether this table change should be animated. Ignored if any <code>animationStyle</code> value is specified.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animated:null,

    /**
     * <p>Type of animation to use for row insertions and deletions. One of the animation style constants defined in {@link Ti.UI.iPhone.RowAnimationStyle}.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animationStyle:null,

    /**
     * <p>Specifies what position to scroll the selected row to. One of the position constants from {@link Ti.UI.iPhone.TableViewScrollPosition}.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    position:null,



};

/**
 * platforms: iPhone, iPad
 * @namespace <p>On iOS, the optional parameters <code>animated</code> and <code>duration</code>to enable the animation and duration 
for animation while the content insets are updated. For example</p>
<pre><code>setContentInset({top:50,bottom:100}, {animated:true, duration:3000})
</code></pre>
 */
var TableViewContentInsetOption = function() {
};
TableViewContentInsetOption.prototype = {

    /**
     * <p>Determines whether the table view's content inset change is animated.</p>
     * @type Boolean
     * @since 2.1.0 (iPhone), 2.1.0 (iPad)
     */
    animated:null,

    /**
     * <p>The duration in <code>milleseconds</code> for animation while the content inset is  being changed.</p>
     * @type Number
     * @since 2.1.0 (iPhone), 2.1.0 (iPad)
     */
    duration:null,



};

/**
 * platforms: iPhone, iPad
 * @namespace <p>On iOS, the parameter <code>edgeInsets</code> can be specified to set the distance(<code>top</code>, <code>bottom</code>,
<code>right</code>, <code>left</code>) that the content view is inset from the enclosing scroll view of the table.
For example</p>
<pre><code>setContentInset({top:50,bottom:10,right:10,left:10}, {animated:true})
</code></pre>
 */
var TableViewEdgeInsets = function() {
};
TableViewEdgeInsets.prototype = {

    /**
     * <p>Value specifying the bottom insets for the enclosing scroll view of the table.</p>
     * @type Number
     * @since 2.1.0 (iPhone), 2.1.0 (iPad)
     */
    bottom:null,

    /**
     * <p>Value specifying the left insets for the enclosing scroll view of the table.</p>
     * @type Number
     * @since 2.1.0 (iPhone), 2.1.0 (iPad)
     */
    left:null,

    /**
     * <p>Value specifying the right insets for the enclosing scroll view of the table.</p>
     * @type Number
     * @since 2.1.0 (iPhone), 2.1.0 (iPad)
     */
    right:null,

    /**
     * <p>Value specifying the top insets for the enclosing scroll view of the table.</p>
     * @type Number
     * @since 2.1.0 (iPhone), 2.1.0 (iPad)
     */
    top:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var TableViewIndexEntry = function() {
};
TableViewIndexEntry.prototype = {

    /**
     * <p>Row index associated with this item.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    index:null,

    /**
     * <p>Title to display in the index bar for this item.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    title:null,



};

/**
 * platforms: iPhone, iPad
 * @namespace <p>The callback is invoked when a movie thumbnail is available.</p>
 */
var ThumbnailResponse = function() {
};
ThumbnailResponse.prototype = {

    /**
     * <p>If <code>success</code> is <code>false</code>, provides an error message.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    error:null,

    /**
     * <p>Thumbnail image, as a <code>Blob</code>.</p>
     * @type Ti.Blob
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    image:null,

    /**
     * <p>Boolean to indicate success or failure.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    success:null,

    /**
     * <p>Time offset for the thumbnail, in seconds.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    time:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>The Titanium module provides the Titanium Mobile API, allowing developers to access native 
features of each target environment. Currently, the Android, iOS and Mobile Web (beta) 
environments are supported.</p>
<h4>Titanium Namespace</h4>
<p>The complete Titanium API is accessible from the <code>Titanium</code> namespace but, for convenience and 
brevity, the alias <code>Ti</code> is also provided. As the <code>Titanium</code> namespace is functionally-identical 
to its <code>Ti</code> alias, it is always recommended to use <code>Ti</code> in your code.</p>
<p>For example, the following pairs of Titanium calls behave exactly the same.</p>
<pre><code>Ti.API.info('Hello Titanium!');
Ti.API.info('Hello Titanium!');

Ti.Utils.sha256('Hello Titanium!');
Ti.Utils.sha256('Hello Titanium!');

Ti.App.Properties.setString('hello_msg','Hello Titanium!');
Ti.App.Properties.setString('hello_msg','Hello Titanium!');

Ti.Database.open('mydb');
Ti.Database.open('mydb');
</code></pre>
<h4>Global APIs</h4>
<p>Titanium includes a number of built-in JavaScript objects that are not part of the Titanium 
namespace, including JSON parsing, String formatting, timers, and the CommonJS <code>require</code> function. 
See {@link Global} for details.</p>
 */
var Ti = {

    /**
     * <p>Date of the Titanium build.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    buildDate:null,

    /**
     * <p>Git hash of the Titanium build.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    buildHash:null,

    /**
     * <p>User-agent string used by Ti.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    userAgent:null,

    /**
     * <p>Version of Titanium that is executing.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    version:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Creates a new buffer based on the params.</p>
     * @param {CreateBufferArgs} params <p>creation arguments</p>
     * @returns Ti.Buffer The new buffer.
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    createBuffer:function(params) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.buildDate} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getBuildDate:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.buildHash} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getBuildHash:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.userAgent} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getUserAgent:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.version} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getVersion:function() {
    },

    /**
     * <p>Includes JavaScript code from one or more files.</p>
     * @param {String} name <p>Filename(s) to include.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    include:function(name) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.userAgent} property.</p>
     * @param {String} userAgent <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setUserAgent:function(userAgent) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Ti.API = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Logs messages with a <code>debug</code> severity-level.</p>
     * @param {Array<String>|String} message <p>Message to log. Accepts an array on iOS only.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    debug:function(message) {
    },

    /**
     * <p>Logs messages with an <code>error</code> severity-level.</p>
     * @param {Array<String>|String} message <p>Message to log. Accepts an array on iOS only.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    error:function(message) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Logs messages with an <code>info</code> severity-level.</p>
     * @param {Array<String>|String} message <p>Message to log. Accepts an array on iOS only.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    info:function(message) {
    },

    /**
     * <p>Logs messages with the specified severity-level.</p>
     * @param {String} level <p>Log level. One of <code>info</code>, <code>warn</code>, <code>error</code>, <code>debug</code> and <code>trace</code>. If the value is not 
recognized, an info-level message prefixed with the value is logged.</p>
     * @param {Array<String>|String} message <p>Message to log. Accepts an array on iOS only.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    log:function(level, message) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Logs messages with a <code>timestamp</code> severity-level, prefixed with a timestamp float number 
representing the number of seconds since January 1st, 2001.</p>
     * @param {Array<String>|String} message <p>Message to log. Accepts an array on iOS only.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    timestamp:function(message) {
    },

    /**
     * <p>Logs messages with a <code>trace</code> severity-level.</p>
     * @param {Array<String>|String} message <p>Message to log. Accepts an array on iOS only.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    trace:function(message) {
    },

    /**
     * <p>Logs messages with a <code>warn</code> severity-level.</p>
     * @param {Array<String>|String} message <p>Message to log. Accepts an array on iOS only.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    warn:function(message) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>You'll want to be selective about turning on and off the device accelerometer.  It's recommended you 
turn off the accelerometer when you're not using it.</p>
<p>You can turn off the accelerometer by simply removing your event listener function. </p>
<pre><code>Ti.Accelerometer.removeEventListener('update',myFunction);
</code></pre>
<p>You can turn it back on by re-adding the same function with <code>addEventListener</code>.</p>
 * 
 * @example Basic Accelerometer Event
 * <p>Adds an accelerometer update event listener which prints out the x, y and z axis as the 
device is moved.  You should generally remove the event when not used to conserve device 
resources.  If you do not have an active event listener, the accelerometer is turned off to 
conserve device resources.</p>
<pre><code>Ti.Accelerometer.addEventListener('update',function(e)
{
    Ti.API.debug("accelerometer - x:"+e.x+",y:"+e.y+",z:"+e.z);
});
</code></pre>
 */
Ti.Accelerometer = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>The analytics module can be used to supply additional context or application-specific 
information which can then be accessed during analysis using Analytics.</p>
<p>Use the {@link Ti.Analytics.featureEvent} method to generate custom
events that you can view through the Analytics product. You can specify a name for 
the feature event which is visible through Analytics.</p>
<p><strong>NOTE</strong> Although the analytics module allows you to transmit other types of 
events, such as navigation events and timed events, <em>data regarding these events 
is <strong>not</strong> accessible through the Analytics UI.</em> </p>
<p>Navigation events will be supported in a future version of the Analytics product. 
There is no plan to support the other event types, and they and should not be used.</p>
 * 
 * @example Custom Feature Event
 * <p>This example shows how to send a feature event during an application session to indicate 
some feature that you would like to track was used.</p>
<pre><code>Ti.Analytics.featureEvent('app.feature.blah');
</code></pre>
<p>In this case, the Analytics product would show statistics about how many times the
'app.feature.blah' event was generated. </p>
 */
Ti.Analytics = {


    /**
     * <p>Sends a generic event for this application session.
<strong>Not displayed in Analytics UI</strong>.</p>
     * @param {String} type <p>Event type.</p>
     * @param {String} name <p>Event name.</p>
     * @param {Object} data <p>Extra data related to the event. Must be serializable as JSON.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEvent:function(type, name, data) {
    },

    /**
     * <p>Sends a feature event for this application session.</p>
     * @param {String} name <p>Event name, displayed in Analytics UI.</p>
     * @param {Object} data <p>Extra data related to the event, <strong>not displayed in Analytics UI</strong>. 
The object must be serializable as JSON.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    featureEvent:function(name, data) {
    },

    /**
     * <p>Sends a navigation event for this application session. 
<strong>Not displayed in Analytics UI</strong>.</p>
     * @param {String} from <p>String describing the location the user navigated from.</p>
     * @param {String} to <p>String describing the location the user navigated to.</p>
     * @param {String} name <p>Event name.</p>
     * @param {Object} data <p>Extra data related to the event. The object must be serializable as JSON.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    navEvent:function(from, to, name, data) {
    },

    /**
     * <p>Sends a settings event for this application session.
<strong>Not displayed in Analytics UI</strong>.</p>
     * @param {String} name <p>Event name.</p>
     * @param {Object} data <p>Extra data related to the event. Must be serializable as JSON.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    settingsEvent:function(name, data) {
    },

    /**
     * <p>Send a timed event for this application session.
<strong>Not displayed in Analytics UI</strong>.</p>
     * @param {String} name <p>Event name.</p>
     * @param {Date} start <p>Event start as a Date object.</p>
     * @param {Date} stop <p>Event end as a Date object.</p>
     * @param {Number} duration <p>Event duration.</p>
     * @param {Object} data <p>Extra data related to the event. Must be serializable as JSON.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    timedEvent:function(name, start, stop, duration, data) {
    },

    /**
     * <p>Sends a user event for this application session. <strong>Not displayed in Analytics UI</strong>.</p>
     * @param {String} name <p>Event name.</p>
     * @param {Object} data <p>Extra data related to the event. Must be serializable as JSON.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    userEvent:function(name, data) {
    }
};

/**
 * platforms: Android
 * @namespace <p>The {@link Ti.Android.currentActivity} property provides a reference to the
context's current {@link Ti.Android.Activity}. Activity objects cannot be 
created directly, although a new activity can be started from an existing activity
using {@link Ti.Android.Activity.startActivity} or 
{@link Ti.Android.Activity.startActivityForResult}.</p>
<p>Almost all of the constants defined in this module correspond directly to Android
constants, and are documented in the official Android documentation. In particular, 
the <code>ACTION_</code>, <code>EXTRA_</code> and <code>CATEGORY_</code> constants are defined in the 
{@link http://developer.android.com/reference/android/content/Intent}, </p>
<p>See also:</p>
<ul>
<li>{@link http://developer.android.com/guide/topics/intents/intents}</li>
</ul>
 */
Ti.Android = {

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_AIRPLANE_MODE_CHANGED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_AIRPLANE_MODE_CHANGED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_ALL_APPS</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_ALL_APPS:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_ANSWER</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_ANSWER:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_ATTACH_DATA</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_ATTACH_DATA:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_BATTERY_CHANGED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_BATTERY_CHANGED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_BATTERY_LOW</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_BATTERY_LOW:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_BATTERY_OKAY</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_BATTERY_OKAY:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_BOOT_COMPLETED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_BOOT_COMPLETED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_BUG_REPORT</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_BUG_REPORT:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_CALL</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_CALL:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_CALL_BUTTON</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_CALL_BUTTON:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_CAMERA_BUTTON</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_CAMERA_BUTTON:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_CHOOSER</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_CHOOSER:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_CLOSE_SYSTEM_DIALOGS</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_CLOSE_SYSTEM_DIALOGS:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_CONFIGURATION_CHANGED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_CONFIGURATION_CHANGED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_CREATE_SHORTCUT</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_CREATE_SHORTCUT:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_DATE_CHANGED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_DATE_CHANGED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_DEFAULT</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_DEFAULT:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_DELETE</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_DELETE:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_DEVICE_STORAGE_LOW</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_DEVICE_STORAGE_LOW:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_DIAL</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_DIAL:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_EDIT</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_EDIT:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_GET_CONTENT</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_GET_CONTENT:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_GTALK_SERVICE_CONNECTED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_GTALK_SERVICE_CONNECTED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_GTALK_SERVICE_DISCONNECTED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_GTALK_SERVICE_DISCONNECTED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_HEADSET_PLUG</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_HEADSET_PLUG:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_INPUT_METHOD_CHANGED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_INPUT_METHOD_CHANGED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_INSERT</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_INSERT:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_INSERT_OR_EDIT</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_INSERT_OR_EDIT:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_MAIN</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MAIN:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_MANAGE_PACKAGE_STORAGE</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MANAGE_PACKAGE_STORAGE:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_MEDIA_BAD_REMOVAL</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_BAD_REMOVAL:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_MEDIA_BUTTON</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_BUTTON:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_MEDIA_CHECKING</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_CHECKING:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_MEDIA_EJECT</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_EJECT:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_MEDIA_MOUNTED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_MOUNTED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_MEDIA_NOFS</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_NOFS:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_MEDIA_REMOVED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_REMOVED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_MEDIA_SCANNER_FINISHED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_SCANNER_FINISHED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_MEDIA_SCANNER_SCAN_FILE</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_SCANNER_SCAN_FILE:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_MEDIA_SCANNER_STARTED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_SCANNER_STARTED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_MEDIA_SHARED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_SHARED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_MEDIA_UNMOUNTABLE</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_UNMOUNTABLE:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_MEDIA_UNMOUNTED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_UNMOUNTED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_NEW_OUTGOING_CALL</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_NEW_OUTGOING_CALL:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_PACKAGE_ADDED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_PACKAGE_ADDED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_PACKAGE_CHANGED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_PACKAGE_CHANGED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_PACKAGE_DATA_CLEARED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_PACKAGE_DATA_CLEARED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_PACKAGE_INSTALL</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_PACKAGE_INSTALL:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_PACKAGE_REMOVED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_PACKAGE_REMOVED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_PACKAGE_REPLACED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_PACKAGE_REPLACED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_PACKAGE_RESTARTED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_PACKAGE_RESTARTED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_PICK</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_PICK:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_PICK_ACTIVITY</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_PICK_ACTIVITY:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_POWER_CONNECTED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_POWER_CONNECTED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_POWER_DISCONNECTED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_POWER_DISCONNECTED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_POWER_USAGE_SUMMARY</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_POWER_USAGE_SUMMARY:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_PROVIDER_CHANGED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_PROVIDER_CHANGED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_REBOOT</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_REBOOT:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_RUN</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_RUN:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_SCREEN_OFF</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_SCREEN_OFF:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_SCREEN_ON</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_SCREEN_ON:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_SEARCH</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_SEARCH:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_SEARCH_LONG_PRESS</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_SEARCH_LONG_PRESS:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_SEND</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_SEND:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_SENDTO</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_SENDTO:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_SEND_MULTIPLE</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_SEND_MULTIPLE:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_SET_WALLPAPER</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_SET_WALLPAPER:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_SHUTDOWN</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_SHUTDOWN:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_SYNC</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_SYNC:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_SYSTEM_TUTORIAL</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_SYSTEM_TUTORIAL:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_TIME_CHANGED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_TIME_CHANGED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_TIME_TICK</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_TIME_TICK:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_UID_REMOVED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_UID_REMOVED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_UMS_CONNECTED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_UMS_CONNECTED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_UMS_DISCONNECTED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_UMS_DISCONNECTED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_USER_PRESENT</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_USER_PRESENT:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_VIEW</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_VIEW:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_VOICE_COMMAND</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_VOICE_COMMAND:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_WALLPAPER_CHANGED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_WALLPAPER_CHANGED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.ACTION_WEB_SEARCH</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_WEB_SEARCH:null,

    /**
     * <p>Corresponds to the Android <code>Intent.CATEGORY_ALTERNATIVE</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_ALTERNATIVE:null,

    /**
     * <p>Corresponds to the Android <code>Intent.CATEGORY_BROWSABLE</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_BROWSABLE:null,

    /**
     * <p>Corresponds to the Android <code>Intent.CATEGORY_DEFAULT</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_DEFAULT:null,

    /**
     * <p>Corresponds to the Android <code>Intent.CATEGORY_DEVELOPMENT_PREFERENCE</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_DEVELOPMENT_PREFERENCE:null,

    /**
     * <p>Corresponds to the Android <code>Intent.CATEGORY_EMBED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_EMBED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST:null,

    /**
     * <p>Corresponds to the Android <code>Intent.CATEGORY_HOME</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_HOME:null,

    /**
     * <p>Corresponds to the Android <code>Intent.CATEGORY_INFO</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_INFO:null,

    /**
     * <p>Corresponds to the Android <code>Intent.CATEGORY_LAUNCHER</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_LAUNCHER:null,

    /**
     * <p>Corresponds to the Android <code>Intent.CATEGORY_MONKEY</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_MONKEY:null,

    /**
     * <p>Corresponds to the Android <code>Intent.CATEGORY_OPENABLE</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_OPENABLE:null,

    /**
     * <p>Corresponds to the Android <code>Intent.CATEGORY_PREFERENCE</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_PREFERENCE:null,

    /**
     * <p>Corresponds to the Android <code>Intent.CATEGORY_SAMPLE_CODE</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_SAMPLE_CODE:null,

    /**
     * <p>Corresponds to the Android <code>Intent.CATEGORY_SELECTED_ALTERNATIVE</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_SELECTED_ALTERNATIVE:null,

    /**
     * <p>Corresponds to the Android <code>Intent.CATEGORY_TAB</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_TAB:null,

    /**
     * <p>Corresponds to the Android <code>Intent.CATEGORY_TEST</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_TEST:null,

    /**
     * <p>Corresponds to the Android <code>Intent.CATEGORY_UNIT_TEST</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_UNIT_TEST:null,

    /**
     * <p>Use all default settings for a notification; see
{@link Ti.Android.Notification.defaults}.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    DEFAULT_ALL:null,

    /**
     * <p>Use the default light settings for a notification; see
{@link Ti.Android.Notification.defaults}.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    DEFAULT_LIGHTS:null,

    /**
     * <p>Use the default sound settings for a notification; see
{@link Ti.Android.Notification.defaults}.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    DEFAULT_SOUND:null,

    /**
     * <p>Use the default vibration settings for a notification; see
{@link Ti.Android.Notification.defaults}.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    DEFAULT_VIBRATE:null,

    /**
     * <p>Corresponds to the Android <code>Intent.EXTRA_ALARM_COUNT</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_ALARM_COUNT:null,

    /**
     * <p>Corresponds to the Android <code>Intent.EXTRA_BCC</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_BCC:null,

    /**
     * <p>Corresponds to the Android <code>Intent.EXTRA_CC</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_CC:null,

    /**
     * <p>Corresponds to the Android <code>Intent.EXTRA_DATA_REMOVED</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_DATA_REMOVED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.EXTRA_DONT_KILL_APP</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_DONT_KILL_APP:null,

    /**
     * <p>Corresponds to the Android <code>Intent.EXTRA_EMAIL</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_EMAIL:null,

    /**
     * <p>Corresponds to the Android <code>Intent.EXTRA_INTENT</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_INTENT:null,

    /**
     * <p>Corresponds to the Android <code>Intent.EXTRA_KEY_EVENT</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_KEY_EVENT:null,

    /**
     * <p>Corresponds to the Android <code>Intent.EXTRA_PHONE_NUMBER</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_PHONE_NUMBER:null,

    /**
     * <p>Corresponds to the Android <code>Intent.EXTRA_REPLACING</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_REPLACING:null,

    /**
     * <p>Corresponds to the Android <code>Intent.EXTRA_SHORTCUT_ICON</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_SHORTCUT_ICON:null,

    /**
     * <p>Corresponds to the Android <code>Intent.EXTRA_SHORTCUT_ICON_RESOURCE</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_SHORTCUT_ICON_RESOURCE:null,

    /**
     * <p>Corresponds to the Android <code>Intent.EXTRA_SHORTCUT_INTENT</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_SHORTCUT_INTENT:null,

    /**
     * <p>Corresponds to the Android <code>Intent.EXTRA_SHORTCUT_NAME</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_SHORTCUT_NAME:null,

    /**
     * <p>Corresponds to the Android <code>Intent.EXTRA_STREAM</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_STREAM:null,

    /**
     * <p>Corresponds to the Android <code>Intent.EXTRA_SUBJECT</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_SUBJECT:null,

    /**
     * <p>Corresponds to the Android <code>Intent.EXTRA_TEMPLATE</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_TEMPLATE:null,

    /**
     * <p>Corresponds to the Android <code>Intent.EXTRA_TEXT</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_TEXT:null,

    /**
     * <p>Corresponds to the Android <code>Intent.EXTRA_TITLE</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_TITLE:null,

    /**
     * <p>Corresponds to the Android <code>Intent.EXTRA_UID</code> constant.</p>
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_UID:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FILL_IN_ACTION</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FILL_IN_ACTION:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FILL_IN_CATEGORIES</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FILL_IN_CATEGORIES:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FILL_IN_COMPONENT</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FILL_IN_COMPONENT:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FILL_IN_DATA</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FILL_IN_DATA:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FILL_IN_PACKAGE</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FILL_IN_PACKAGE:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_BROUGHT_TO_FRONT:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FLAG_ACTIVITY_CLEAR_TOP</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_CLEAR_TOP:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FLAG_ACTIVITY_FORWARD_RESULT</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_FORWARD_RESULT:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FLAG_ACTIVITY_MULTIPLE_TASK</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_MULTIPLE_TASK:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FLAG_ACTIVITY_NEW_TASK</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_NEW_TASK:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FLAG_ACTIVITY_NO_ANIMATION</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_NO_ANIMATION:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FLAG_ACTIVITY_NO_HISTORY</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_NO_HISTORY:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FLAG_ACTIVITY_NO_USER_ACTION</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_NO_USER_ACTION:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_PREVIOUS_IS_TOP:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FLAG_ACTIVITY_REORDER_TO_FRONT</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_REORDER_TO_FRONT:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_RESET_TASK_IF_NEEDED:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FLAG_ACTIVITY_SINGLE_TOP</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_SINGLE_TOP:null,

    /**
     * <p>Cancel the notification when it is clicked by the user.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_AUTO_CANCEL:null,

    /**
     * <p>Corresponds to the Android <code>PendingIntent.FLAG_CANCEL_CURRENT</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_CANCEL_CURRENT:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FLAG_DEBUG_LOG_RESOLUTION</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_DEBUG_LOG_RESOLUTION:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FLAG_FROM_BACKGROUND</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_FROM_BACKGROUND:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FLAG_GRANT_READ_URI_PERMISSION</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_GRANT_READ_URI_PERMISSION:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FLAG_GRANT_WRITE_URI_PERMISSION</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_GRANT_WRITE_URI_PERMISSION:null,

    /**
     * <p>Repeat audio until the notification is cancelled or the notification window
is opened.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_INSISTENT:null,

    /**
     * <p>Do not cancel the notification when the user clicks the Clear All button.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_NO_CLEAR:null,

    /**
     * <p>Corresponds to the Android <code>PendingIntent.FLAG_NO_CREATE</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_NO_CREATE:null,

    /**
     * <p>Corresponds to the Android <code>PendingIntent.FLAG_ONE_SHOT</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ONE_SHOT:null,

    /**
     * <p>Specifies that a notification is in reference to something that is ongoing, like a phone call.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ONGOING_EVENT:null,

    /**
     * <p>Play an alert (sound, lights, and/or vibration) once each time the notification is sent, even if it has not been canceled before that.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ONLY_ALERT_ONCE:null,

    /**
     * <p>Corresponds to the Android <code>Intent.FLAG_RECEIVER_REGISTERED_ONLY</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_RECEIVER_REGISTERED_ONLY:null,

    /**
     * <p>Use LED lights to alert the user to the notification.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_SHOW_LIGHTS:null,

    /**
     * <p>Corresponds to the Android <code>PendingIntent.FLAG_UPDATE_CURRENT</code> constant.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_UPDATE_CURRENT:null,

    /**
     * <p>Not used.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    PENDING_INTENT_FOR_ACTIVITY:null,

    /**
     * <p>Not used.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    PENDING_INTENT_FOR_BROADCAST:null,

    /**
     * <p>Not used.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    PENDING_INTENT_FOR_SERVICE:null,

    /**
     * <p>Not used.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    PENDING_INTENT_MAX_VALUE:null,

    /**
     * <p>Accessor for Android system resources.</p>
     * @type Ti.Android.R
     * @since 1.5 (Android)
     */
    R:null,

    /**
     * <p>Used with {@link Ti.Android.Activity.setResult} to specify that
an activity was canceled.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    RESULT_CANCELED:null,

    /**
     * <p>Used with {@link Ti.Android.Activity.setResult} to specify a 
user-defined result.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    RESULT_FIRST_USER:null,

    /**
     * <p>Used with {@link Ti.Android.Activity.setResult} to specify that
an activity succeeded.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    RESULT_OK:null,

    /**
     * <p>Use with {@link Ti.Android.Activity.requestedOrientation} to
specify the activity should run in the same orientation as the activity behind it
in the activity stack.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    SCREEN_ORIENTATION_BEHIND:null,

    /**
     * <p>Use with {@link Ti.Android.Activity.requestedOrientation} to
specify a landscape screen orientation.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    SCREEN_ORIENTATION_LANDSCAPE:null,

    /**
     * <p>Use with {@link Ti.Android.Activity.requestedOrientation} to
specify that the sensor should be ignored and the display should not rotate.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    SCREEN_ORIENTATION_NOSENSOR:null,

    /**
     * <p>Use with {@link Ti.Android.Activity.requestedOrientation} to
specify a portrait screen orientation.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    SCREEN_ORIENTATION_PORTRAIT:null,

    /**
     * <p>Use with {@link Ti.Android.Activity.requestedOrientation} to
specify that orientation should be determined by the orientation sensor.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    SCREEN_ORIENTATION_SENSOR:null,

    /**
     * <p>Use with {@link Ti.Android.Activity.requestedOrientation} to
specify that the system should use its default rules for determining the best
orientation.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    SCREEN_ORIENTATION_UNSPECIFIED:null,

    /**
     * <p>Use with {@link Ti.Android.Activity.requestedOrientation} to
specify that the system should use the user's preferred orientation.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    SCREEN_ORIENTATION_USER:null,

    /**
     * <p>A Service start mode indicating that if the host application is stopped by Android, the service should not be restarted automatically.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    START_NOT_STICKY:null,

    /**
     * <p>A Service start mode indicating that if the host application is stopped by Android, the service should be restarted automatically and the original Intent re-sent.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    START_REDELIVER_INTENT:null,

    /**
     * <p>Use with {@link Ti.Android.Notification.audioStreamType} to request that the default stream type for notifications be used.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    STREAM_DEFAULT:null,

    /**
     * <p>The URI scheme used for intent URIs.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    URI_INTENT_SCHEME:null,

    /**
     * <p>Activity of the active context.</p>
     * @type Ti.Android.Activity
     * @since 1.5 (Android)
     */
    currentActivity:null,

    /**
     * <p>Service in the active context.</p>
     * @type Ti.Android.Service
     * @since 1.5 (Android)
     */
    currentService:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.Android.Intent}.</p>
     * @param {Dictionary<Ti.Android.Intent>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.Android.Intent} except those marked not-creation or read-only.</p>
     * @returns Ti.Android.Intent
     * @since 1.5 (Android)
     */
    createIntent:function(parameters) {
    },

    /**
     * <p>Creates an activity chooser intent, used to allow the user to select a target activity
for an intent.</p>
     * @param {Ti.Android.Intent} intent <p>The intent to display a chooser for.</p>
     * @param {String} title <p>Title to display on the chooser.</p>
     * @returns Ti.Android.Intent
     * @since 1.5 (Android)
     */
    createIntentChooser:function(intent, title) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.Android.Notification}.</p>
     * @param {Dictionary<Ti.Android.Notification>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.Android.Notification} except those marked not-creation or read-only.</p>
     * @returns Ti.Android.Notification
     * @since 1.5 (Android)
     */
    createNotification:function(parameters) {
    },

    /**
     * <p>Creates a {@link Ti.Android.PendingIntent} to be used inside a
{@link Ti.Android.Notification}.</p>
     * @param {Dictionary<Ti.Android.PendingIntent>} parameters <p>Properties to set on the new object, including any defined by
{@link Ti.Android.PendingIntent}, except those marked not-creation or read-only.</p>
     * @returns Ti.Android.PendingIntent
     * @since 1.5 (Android)
     */
    createPendingIntent:function(parameters) {
    },

    /**
     * <p>Create a {@link Ti.Android.Service} so you can start/stop it and listen for events from it.</p>
     * @param {Ti.Android.Intent} intent <p>An <code>Intent</code> created with {@link Ti.Android.createServiceIntent},
which specifies the service to be instantiated.</p>
     * @returns Ti.Android.Service
     * @since 1.5 (Android)
     */
    createService:function(intent) {
    },

    /**
     * <p>Create an <code>Intent</code> to be used to start a service.</p>
     * @param {ServiceIntentOptions} options <p>Options for the Service.</p>
     * @returns Ti.Android.Intent
     * @since 1.5 (Android)
     */
    createServiceIntent:function(options) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.currentActivity} property.</p>
     * @returns Ti.Android.Activity
     * @since 1.5 (Android)
     */
    getCurrentActivity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.currentService} property.</p>
     * @returns Ti.Android.Service
     * @since 1.5 (Android)
     */
    getCurrentService:function() {
    },

    /**
     * <p>Check on state of Service.</p>
     * @param {Ti.Android.Intent} intent <p>An <code>Intent</code> created with {@link Ti.Android.createServiceIntent},
which specifies the service to check.</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    isServiceRunning:function(intent) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Starts a simple service.</p>
     * @param {Ti.Android.Intent} intent <p>An <code>Intent</code> created with {@link Ti.Android.createServiceIntent},
which specifies the service to start.</p>
     * @since 1.5 (Android)
     */
    startService:function(intent) {
    },

    /**
     * <p>Stop a simple service that was started with <code>startService</code>.</p>
     * @param {Ti.Android.Intent} intent <p>An <code>Intent</code> created with {@link Ti.Android.createServiceIntent},
which specifies the service to stop.</p>
     * @since 1.5 (Android)
     */
    stopService:function(intent) {
    }
};

/**
 * platforms: Android
 * 
 * @example Callback example
 * <p>activity.startActivityForResult(intent, function(e) {
    // The request code used to start this Activity
    var requestCode = e.requestCode;
    // The result code returned from the Activity (http://developer.android.com/reference/android/app/Activity.html#StartingActivities)
    var resultCode = e.resultCode;
    // A Ti.Android.Intent filled with data returned from the Activity
    var intent = e.intent;
    // The Activity the received the result
    var source = e.source;
});</p>
 */
Ti.Android.Activity = function() {
};
Ti.Android.Activity.prototype = {

    /**
     * <p>The {@link Ti.Android.Intent} that was used to start this Activity</p>
     * @type Ti.Android.Intent
     * @since 1.5 (Android)
     */
    intent:null,

    /**
     * <p>A callback function that is called to initially create an Android {@link http://developer.android.com/guide/topics/ui/menus.html#options} for this Activity when the user presses the Menu button. See the menu examples in {@link Ti.Android.Menu}</p>
     * @type Callback<Object>
     * @since 1.5 (Android)
     */
    onCreateOptionsMenu:null,

    /**
     * <p>A callback function that is called to prepare an {@link http://developer.android.com/guide/topics/ui/menus.html#options} for displaying on this Activity when the user presses the Menu button. See the menu examples in {@link Ti.Android.Menu}</p>
     * @type Callback<Object>
     * @since 1.5 (Android)
     */
    onPrepareOptionsMenu:null,

    /**
     * <p>Can be one of {@link Ti.Android.SCREEN_ORIENTATION_BEHIND}, {@link Ti.Android.SCREEN_ORIENTATION_LANDSCAPE}, {@link Ti.Android.SCREEN_ORIENTATION_NOSENSOR}, {@link Ti.Android.SCREEN_ORIENTATION_PORTRAIT}, {@link Ti.Android.SCREEN_ORIENTATION_SENSOR}, {@link Ti.Android.SCREEN_ORIENTATION_UNSPECIFIED}, {@link Ti.Android.SCREEN_ORIENTATION_USER}</p>
     * @type Number
     * @since 1.5 (Android)
     */
    requestedOrientation:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Called when the activity is done and should be closed. Also see Android's documentation for {@link http://developer.android.com/reference/android/app/Activity.html#finish()}</p>
     * @since 1.5 (Android)
     */
    finish:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Activity.intent} property.</p>
     * @returns Ti.Android.Intent
     * @since 1.5 (Android)
     */
    getIntent:function() {
    },

    /**
     * <p>Get an Android or Application string using the passed-in Resource ID and optional format arguments. Also see Android's documentation for {@link http://developer.android.com/reference/android/content/Context.html#getString(int)} and {@link http://developer.android.com/guide/topics/resources/string}</p>
     * @param {Number} resourceId <p>A Resource ID from the Application or Android.</p>
     * @param {Array<Object>} format <p>Optional format arguments for the String resource</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getString:function(resourceId, format) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Set the requested Activity orientation. Also see Android's documentation for {@link http://developer.android.com/reference/android/app/Activity.html#setRequestedOrientation(int)}</p>
     * @param {Number} orientation <p>Can be one of {@link Ti.Android.SCREEN_ORIENTATION_BEHIND}, {@link Ti.Android.SCREEN_ORIENTATION_LANDSCAPE}, {@link Ti.Android.SCREEN_ORIENTATION_NOSENSOR}, {@link Ti.Android.SCREEN_ORIENTATION_PORTRAIT}, {@link Ti.Android.SCREEN_ORIENTATION_SENSOR}, {@link Ti.Android.SCREEN_ORIENTATION_UNSPECIFIED}, {@link Ti.Android.SCREEN_ORIENTATION_USER}</p>
     * @since 1.5 (Android)
     */
    setRequestedOrientation:function(orientation) {
    },

    /**
     * <p>Sets the result of this Activity using an Intent. This should be used in the case when the Activity responds to startActivityForResult. Also see Android's documentation for {@link http://developer.android.com/reference/android/app/Activity.html#setResult(int)}</p>
     * @param {Number} resultCode <p>The result code for this Activity. Must be one of {@link Ti.Android.RESULT_OK}, {@link Ti.Android.RESULT_CANCELED}, {@link Ti.Android.RESULT_FIRST_USER}</p>
     * @param {Ti.Android.Intent} intent <p>An optional {@link Ti.Android.Intent} with extra result data</p>
     * @since 1.5 (Android)
     */
    setResult:function(resultCode, intent) {
    },

    /**
     * <p>Starts a new Activity, using the passed in Intent as the description. Also see Android's documentation for {@link http://developer.android.com/reference/android/app/Activity.html#startActivity(android.content.Intent)}</p>
     * @param {Ti.Android.Intent} intent <p>Description of the Activity to start</p>
     * @since 1.5 (Android)
     */
    startActivity:function(intent) {
    },

    /**
     * <p>The same as <code>startActivity</code>, but also accepts a callback function for handling the result of the started Activity. Also see Android's documentation for {@link http://developer.android.com/reference/android/app/Activity.html#startActivityForResult(android.content.Intent, int)}</p>
     * @param {Ti.Android.Intent} intent <p>Description of the Activity to start</p>
     * @param {Callback<Object>} callback <p>A callback function that is executed when the Activity has set it's result. See example in {@link Ti.Android.Activity}.</p>
     * @since 1.5 (Android)
     */
    startActivityForResult:function(intent, callback) {
    }
};

/**
 * platforms: Android
 * @namespace <p>This module supports retrieving information about existing events and creating new events.<br />
However, modifying or deleting existing events is not yet supported.<br />
Additionally, recurring events are not yet supported.</p>
 * 
 * @example All Calendars vs Selectable Calendars
 * <p>Print the names of all calendars known to Android, and the names of calendars that 
have been selected in the native Android calendar application.</p>
<pre><code>function showCalendars(calendars) {
    for (var i = 0; i &lt; calendars.length; i++) {
        Ti.API.info(calendars[i].name);
    }
}

Ti.API.info('ALL CALENDARS:');
showCalendars(Ti.Android.Calendar.allCalendars);
Ti.API.info('SELECTABLE CALENDARS:');
showCalendars(Ti.Android.Calendar.selectableCalendars);
</code></pre>
 * 
 * @example Events in a year
 * <p>Create a picker to allow an existing calendar to be selected and, when a button is clicked, 
generate details of all events in that calendar for the current year .</p>
<pre><code>var calendars = [];
var selectedCalendarName;
var selectedCalendarId;
var pickerData = [];

var win = Ti.UI.createWindow({
  backgroundColor: 'white',
  exitOnClose: true,
  fullscreen: false,
  layout: 'vertical',
  title: 'Calendar Demo'
});

var scrollView = Ti.UI.createScrollView({
  backgroundColor: '#eee',
  height: 500,
  top: 20
});

var label = Ti.UI.createLabel({
  backgroundColor: 'white',
  text: 'Click on the button to display the events for the selected calendar',
  textAlign: Ti.UI.TEXT_ALIGNMENT_CENTER,
  top: 20
});
scrollView.add(label);

var selectableCalendars = Ti.Android.Calendar.selectableCalendars;
for (var i = 0, ilen = selectableCalendars.length; i &lt; ilen; i++) {
  calendars.push({ name: selectableCalendars[i].name, id: selectableCalendars[i].id });
  pickerData.push( Ti.UI.createPickerRow({ title: calendars[i].name }) );
  if(i === 0){
    selectedCalendarName = selectableCalendars[i].name;
    selectedCalendarId = selectableCalendars[i].id;
  }
}
var selectableCalendars = null;

if(!calendars.length){
  label.text = 'No calendars available. Select at least one in the native calendar before using this app';
} else {
  label.text = 'Click button to view calendar events';

  var picker = Ti.UI.createPicker({
    top:20
  });

  picker.add(pickerData);
  win.add(picker);

  picker.addEventListener('change', function(e){
    for (var i = 0, ilen = calendars.length; i &lt; ilen; i++) {
      if(calendars[i].name === e.row.title){
        selectedCalendarName = calendars[i].name;
        selectedCalendarId = calendars[i].id;
      }
    }
  });

  var button = Ti.UI.createButton({
    title: 'View events',
    top: 20
  });
  win.add(button);

  button.addEventListener('click', function(e){
    label.text = 'Generating...';

    var currentYear = new Date().getFullYear();

    var consoleString = '';

    function print(s) {
      if (consoleString.length) {
        consoleString = consoleString + '\n';
      }
      consoleString = consoleString + s;
    }

    var calendar = Ti.Android.Calendar.getCalendarById(selectedCalendarId);

    function printReminder(r) {
      var typetext = '[method unknown]';
      if (r.method == Ti.Android.Calendar.METHOD_EMAIL) {
        typetext = 'Email';
      } else if (r.method == Ti.Android.Calendar.METHOD_SMS) {
        typetext = 'SMS';
      } else if (r.method == Ti.Android.Calendar.METHOD_ALERT) {
        typetext = 'Alert';
      } else if (r.method == Ti.Android.Calendar.METHOD_DEFAULT) {
        typetext = '[default reminder method]';
      }
      print(typetext + ' reminder to be sent ' + r.minutes + ' minutes before the event');
    }

    function printAlert(a) {
      print('Alert id ' + a.id + ' begin ' + a.begin + '; end ' + a.end + '; alarmTime ' + a.alarmTime + '; minutes ' + a.minutes);
    }

    function printEvent(event) {
      if (event.allDay) {
        print('Event: ' + event.title + '; ' + event.begin.toLocaleDateString() + ' (all day)');
      } else {
        print('Event: ' + event.title + '; ' + event.begin.toLocaleDateString() + ' ' + event.begin.toLocaleTimeString()+ '-' + event.end.toLocaleTimeString());
      }

      var reminders = event.reminders;
      if (reminders &amp;&amp; reminders.length) {
        print('There is/are ' + reminders.length + ' reminder(s)');
        for (var i = 0; i &lt; reminders.length; i++) {
          printReminder(reminders[i]);
        }
      }

      print('hasAlarm? ' + event.hasAlarm);
      var alerts = event.alerts;
      if (alerts &amp;&amp; alerts.length) {
        for (var i = 0; i &lt; alerts.length; i++) {
          printAlert(alerts[i]);
        }
      }

      var status = event.status;
      if (status == Ti.Android.Calendar.STATUS_TENTATIVE) {
        print('This event is tentative');
      }
      if (status == Ti.Android.Calendar.STATUS_CONFIRMED) {
        print('This event is confirmed');
      }
      if (status == Ti.Android.Calendar.STATUS_CANCELED) {
        print('This event was canceled');
      }
    }

    var events = calendar.getEventsInYear(currentYear);
    if (events &amp;&amp; events.length) {
      print(events.length + ' event(s) in ' + currentYear);
      print('');
      for (var i = 0; i &lt; events.length; i++) {
        printEvent(events[i]);
        print('');
      }
    } else {
      print('No events');
    }

    label.text = consoleString;
  });
}

win.add(scrollView);

win.open();
</code></pre>
 * 
 * @example Create an Event and Reminder
 * <p>Creates an event and adds an e-mail reminder for 10 minutes before the event.</p>
<pre><code>var CALENDAR_TO_USE = 3;
var calendar = Ti.Android.Calendar.getCalendarById(CALENDAR_TO_USE);

// Create the event
var eventBegins = new Date(2010, 11, 26, 12, 0, 0);
var eventEnds = new Date(2010, 11, 26, 14, 0, 0);
var details = {
    title: 'Do some stuff',
    description: "I'm going to do some stuff at this time.",
    begin: eventBegins,
    end: eventEnds
};

var event = calendar.createEvent(details);

// Now add a reminder via e-mail for 10 minutes before the event.
var reminderDetails = {
    minutes: 10,
    method: Ti.Android.Calendar.METHOD_EMAIL
};
event.createReminder(reminderDetails);
</code></pre>
 */
Ti.Android.Calendar = {

    /**
     * <p>Reminder alert delivery method.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    METHOD_ALERT:null,

    /**
     * <p>Reminder default delivery method.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    METHOD_DEFAULT:null,

    /**
     * <p>Reminder email delivery method.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    METHOD_EMAIL:null,

    /**
     * <p>Reminder SMS delivery method.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    METHOD_SMS:null,

    /**
     * <p>Alert dismissed state.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    STATE_DISMISSED:null,

    /**
     * <p>Alert fired state.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    STATE_FIRED:null,

    /**
     * <p>Alert scheduled status.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    STATE_SCHEDULED:null,

    /**
     * <p>Event canceled status.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    STATUS_CANCELED:null,

    /**
     * <p>Event confirmed status.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    STATUS_CONFIRMED:null,

    /**
     * <p>Event tentative status.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    STATUS_TENTATIVE:null,

    /**
     * <p>Event confidential visibility.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    VISIBILITY_CONFIDENTIAL:null,

    /**
     * <p>Event default visibility.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    VISIBILITY_DEFAULT:null,

    /**
     * <p>Event private visibility.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    VISIBILITY_PRIVATE:null,

    /**
     * <p>Event public visibility.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    VISIBILITY_PUBLIC:null,

    /**
     * <p>All alerts in selected calendars.</p>
     * @type Array<Ti.Android.Calendar.Alert>
     * @since 1.5 (Android)
     */
    allAlerts:null,

    /**
     * <p>All calendars known to the native calendar app.</p>
     * @type Array<Ti.Android.Calendar.Calendar>
     * @since 1.5 (Android)
     */
    allCalendars:null,

    /**
     * <p>All calendars selected within the native calendar app, which may be a subset of <code>allCalendars</code>. </p>
     * @type Array<Ti.Android.Calendar.Calendar>
     * @since 1.5 (Android)
     */
    selectableCalendars:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.allAlerts} property.</p>
     * @returns Array<Ti.Android.Calendar.Alert>
     * @since 1.5 (Android)
     */
    getAllAlerts:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.allCalendars} property.</p>
     * @returns Array<Ti.Android.Calendar.Calendar>
     * @since 1.5 (Android)
     */
    getAllCalendars:function() {
    },

    /**
     * <p>Gets the calendar with the specified identifier.</p>
     * @param {Number} id <p>Integer identifier of the calendar.</p>
     * @returns Ti.Android.Calendar.Calendar
     * @since 1.5 (Android)
     */
    getCalendarById:function(id) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.selectableCalendars} property.</p>
     * @returns Array<Ti.Android.Calendar.Calendar>
     * @since 1.5 (Android)
     */
    getSelectableCalendars:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android
 */
Ti.Android.Calendar.Alert = function() {
};
Ti.Android.Calendar.Alert.prototype = {

    /**
     * <p>Date/time at which this alert alarm is set to trigger.</p>
     * @type Date
     * @since 1.5 (Android)
     */
    alarmTime:null,

    /**
     * <p>Start date/time for the corresponding event.</p>
     * @type Date
     * @since 1.5 (Android)
     */
    begin:null,

    /**
     * <p>End date/time for the corresponding event.</p>
     * @type Date
     * @since 1.5 (Android)
     */
    end:null,

    /**
     * <p>Identifier of the event for which this alert is set.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    eventId:null,

    /**
     * <p>Identifier of this alert.</p>
     * @type String
     * @since 1.5 (Android)
     */
    id:null,

    /**
     * <p>Reminder notice period in minutes, that determines how long prior to the event this alert 
should trigger.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    minutes:null,

    /**
     * <p>The current state of the alert.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    state:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Alert.alarmTime} property.</p>
     * @returns Date
     * @since 1.5 (Android)
     */
    getAlarmTime:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Alert.begin} property.</p>
     * @returns Date
     * @since 1.5 (Android)
     */
    getBegin:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Alert.end} property.</p>
     * @returns Date
     * @since 1.5 (Android)
     */
    getEnd:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Alert.eventId} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getEventId:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Alert.id} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getId:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Alert.minutes} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getMinutes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Alert.state} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getState:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android
 */
Ti.Android.Calendar.Calendar = function() {
};
Ti.Android.Calendar.Calendar.prototype = {

    /**
     * <p>Indicates whether this calendar is hidden.</p>
     * @type Boolean
     * @since 1.5 (Android)
     */
    hidden:null,

    /**
     * <p>Identifier of this calendar.</p>
     * @type String
     * @since 1.5 (Android)
     */
    id:null,

    /**
     * <p>Display name of this calendar.</p>
     * @type String
     * @since 1.5 (Android)
     */
    name:null,

    /**
     * <p>Indicates whether the calendar is selected.</p>
     * @type Boolean
     * @since 1.5 (Android)
     */
    selected:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Creates an event in this calendar.</p>
     * @param {Dictionary<Ti.Android.Calendar.Event>} properties <p>Properties of the event</p>
     * @returns Ti.Android.Calendar.Event
     * @since 1.5 (Android)
     */
    createEvent:function(properties) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the event with the specified identifier.</p>
     * @param {Number} id <p>Identifier of the event.</p>
     * @returns Ti.Android.Calendar.Event
     * @since 1.5 (Android)
     */
    getEventById:function(id) {
    },

    /**
     * <p>Gets events that occur between two dates.</p>
     * @param {Date} date1 <p>Start date.</p>
     * @param {Date} date2 <p>End date.</p>
     * @returns Array<Ti.Android.Calendar.Event>
     * @since 1.5 (Android)
     */
    getEventsBetweenDates:function(date1, date2) {
    },

    /**
     * <p>Gets events that occur on a specified date.</p>
     * @param {Number} year <p>Year of the events.</p>
     * @param {Number} month <p>Month of the events, as a zero-based integer with January at 0 and December at 11.</p>
     * @param {Number} day <p>Day of the month of the events.</p>
     * @returns Array<Ti.Android.Calendar.Event>
     * @since 1.5 (Android)
     */
    getEventsInDate:function(year, month, day) {
    },

    /**
     * <p>Gets events that occur during a specified month.</p>
     * @param {Number} year <p>Year of the events.</p>
     * @param {Number} month <p>Month of the events, as a zero-based integer with January at 0 and December at 11.</p>
     * @returns Array<Ti.Android.Calendar.Event>
     * @since 1.5 (Android)
     */
    getEventsInMonth:function(year, month) {
    },

    /**
     * <p>Gets all events that occur during a specified year.</p>
     * @param {Number} year <p>Year of the events.</p>
     * @returns Array<Ti.Android.Calendar.Event>
     * @since 1.5 (Android)
     */
    getEventsInYear:function(year) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Calendar.hidden} property.</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    getHidden:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Calendar.id} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getId:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Calendar.name} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Calendar.selected} property.</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    getSelected:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android
 * @namespace <p>The API supports retrieving information about existing events and creating new events.<br />
Be aware that modifying or deleting existing events is not yet supported. Additionally, recurring 
events are not yet supported.</p>
<p>See {@link Ti.Android.Calendar} for examples of retrieving event information and creating events.</p>
 */
Ti.Android.Calendar.Event = function() {
};
Ti.Android.Calendar.Event.prototype = {

    /**
     * <p>Existing alerts for this event.</p>
     * @type Array<Ti.Android.Calendar.Alert>
     * @since 1.5 (Android)
     */
    alerts:null,

    /**
     * <p>Indicates whether this event is all day.</p>
     * @type Boolean
     * @since 1.5 (Android)
     */
    allDay:null,

    /**
     * <p>Start date/time of this event.</p>
     * @type Date
     * @since 1.5 (Android)
     */
    begin:null,

    /**
     * <p>Description of this event.</p>
     * @type String
     * @since 1.5 (Android)
     */
    description:null,

    /**
     * <p>End date/time of this event.</p>
     * @type Date
     * @since 1.5 (Android)
     */
    end:null,

    /**
     * <p>Extended properties of this event.</p>
     * @type Dictionary
     * @since 1.5 (Android)
     */
    extendedProperties:null,

    /**
     * <p>Indicates whether an alarm is scheduled for this event.</p>
     * @type Boolean
     * @since 1.5 (Android)
     */
    hasAlarm:null,

    /**
     * <p>Indicates whether {@link Ti.Android.Calendar.Event.extendedProperties} 
exists for this event.</p>
     * @type Boolean
     * @since 1.5 (Android)
     */
    hasExtendedProperties:null,

    /**
     * <p>Identifier of this event.</p>
     * @type String
     * @since 1.5 (Android)
     */
    id:null,

    /**
     * <p>Location of this event.</p>
     * @type String
     * @since 1.5 (Android)
     */
    location:null,

    /**
     * <p>Existing reminders for this event.</p>
     * @type Array<Ti.Android.Calendar.Reminder>
     * @since 1.5 (Android)
     */
    reminders:null,

    /**
     * <p>Status of this event.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    status:null,

    /**
     * <p>Title of this event.</p>
     * @type String
     * @since 1.5 (Android)
     */
    title:null,

    /**
     * <p>Visibility of this event.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    visibility:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Creates an alert for this event.</p>
     * @param {Dictionary<Ti.Android.Calendar.Alert>} data <p>Properties for the alert.</p>
     * @returns Ti.Android.Calendar.Alert
     * @since 1.5 (Android)
     */
    createAlert:function(data) {
    },

    /**
     * <p>Creates a reminder for this event.</p>
     * @param {Dictionary<Ti.Android.Calendar.Reminder>} data <p>Properties for the reminder.</p>
     * @returns Ti.Android.Calendar.Reminder
     * @since 1.5 (Android)
     */
    createReminder:function(data) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Event.alerts} property.</p>
     * @returns Array<Ti.Android.Calendar.Alert>
     * @since 1.5 (Android)
     */
    getAlerts:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Event.allDay} property.</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    getAllDay:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Event.begin} property.</p>
     * @returns Date
     * @since 1.5 (Android)
     */
    getBegin:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Event.description} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getDescription:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Event.end} property.</p>
     * @returns Date
     * @since 1.5 (Android)
     */
    getEnd:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Event.extendedProperties} property.</p>
     * @returns Dictionary
     * @since 1.5 (Android)
     */
    getExtendedProperties:function() {
    },

    /**
     * <p>Gets the value of the specified extended property.</p>
     * @param {String} name <p>Name of an existing extended property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getExtendedProperty:function(name) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Event.hasAlarm} property.</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    getHasAlarm:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Event.hasExtendedProperties} property.</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    getHasExtendedProperties:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Event.id} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getId:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Event.location} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getLocation:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Event.reminders} property.</p>
     * @returns Array<Ti.Android.Calendar.Reminder>
     * @since 1.5 (Android)
     */
    getReminders:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Event.status} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getStatus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Event.title} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Event.visibility} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getVisibility:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the specified extended property.</p>
     * @param {String} name <p>Property name.</p>
     * @param {String} value <p>Property value.</p>
     * @since 1.5 (Android)
     */
    setExtendedProperty:function(name, value) {
    }
};

/**
 * platforms: Android
 * @namespace <p>Reminders should be created using the {@link Ti.Android.Calendar.Event.createReminder} method 
rather than directly.</p>
<p>See {@link Ti.Android.Calendar} for examples of retrieving reminder information and creating 
reminders for events.</p>
 */
Ti.Android.Calendar.Reminder = function() {
};
Ti.Android.Calendar.Reminder.prototype = {

    /**
     * <p>Identifier of this reminder.</p>
     * @type String
     * @since 1.5 (Android)
     */
    id:null,

    /**
     * <p>Method by which this reminder will be delivered.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    method:null,

    /**
     * <p>Reminder notice period in minutes, that determines how long prior to the event this reminder 
should trigger.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    minutes:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Reminder.id} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getId:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Reminder.method} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getMethod:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Calendar.Reminder.minutes} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getMinutes:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android
 * 
 * @example Create an Intent for Launching an Activity
 * <p>var intent = Ti.Android.createIntent({
    action: Ti.Android.ACTION_MAIN,
    url: 'activity1.js'
});
intent.addCategory(Ti.Android.CATEGORY_LAUNCHER);
Ti.Android.currentActivity.startActivity(intent);</p>
 * 
 * @example Create an Intent to get a Contact URI from the user's contacts
 * <p>var intent = Ti.Android.createIntent({
    action: Ti.Android.ACTION_GET_CONTENT,
    type: "vnd.android.cursor.item/phone"
});</p>
 * 
 * @example Pick a Photo from the Photo Gallery
 * <p>var intent = Ti.Android.createIntent({
    action: Ti.Android.ACTION_PICK,
    type: "image/*"
});
intent.addCategory(Ti.Android.CATEGORY_DEFAULT);</p>
 * 
 * @example Create an ImageView from an image SEND Intent
 * <p>This example requires that an intent filter be set up in a
custom AndroidManifest.xml. The following intent filter should
be added to your app's main activity. You can trigger this 
intent filter by long pressing on an image in the Android gallery
and selecting "share".
AndroidManifest.xml
    &lt;intent-filter&gt;
        &lt;action android:name="android.intent.action.SEND" /&gt;
        &lt;category android:name="android.intent.category.DEFAULT" /&gt;
        &lt;data android:mimeType="image/*" /&gt;
    &lt;/intent-filter&gt;
Sample code
    var win = Ti.UI.createWindow({
        backgroundColor: '#fff',
        fullscreen: false,
        exitOnClose: true
    });
    win.addEventListener('open', function(e) {
        var intent = Ti.Android.currentActivity.getIntent();
        var iname = Ti.Android.EXTRA_STREAM;
        if (intent &amp;&amp; intent.hasExtra(iname)) {
            // Create ImageView from TiBlob
            var blob = intent.getBlobExtra(iname);
            win.add(Ti.UI.createImageView({
                image: blob,
                height: 300,
                width: 300,
                left: 0,
                top: 0
            }));
        } else {
            Ti.API.info('No extra named "' + iname + '" found in Intent');
        }
    });      <br />
    win.open();</p>
 */
Ti.Android.Intent = function() {
};
Ti.Android.Intent.prototype = {

    /**
     * <p>The action associated with this intent.</p>
     * @type String
     * @since 1.5 (Android)
     */
    action:null,

    /**
     * <p>The Java class name of the activity associated with this intent (<code>packageName</code> must also be set).</p>
     * @type String
     * @since 1.5 (Android)
     */
    className:null,

    /**
     * <p>The Intent's Data URI.</p>
     * @type String
     * @since 1.5 (Android)
     */
    data:null,

    /**
     * <p>Intent flags. See the <code>FLAG_</code> constants in {@link Ti.Android}.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    flags:null,

    /**
     * <p>The fully-qualified Java package name of the activity.</p>
     * @type String
     * @since 1.5 (Android)
     */
    packageName:null,

    /**
     * <p>The MIME type for this Intent.</p>
     * @type String
     * @since 1.5 (Android)
     */
    type:null,

    /**
     * <p>The URL to a Titanium JavaScript Activity.</p>
     * @type String
     * @since 1.5 (Android)
     */
    url:null,


    /**
     * <p>Adds a category to this Intent. See the <code>CATEGORY</code> constants in {@link Ti.Android}.</p>
     * @param {String} name <p>The category name. See the <code>CATEGORY</code> constants in {@link Ti.Android}.</p>
     * @since 1.5 (Android)
     */
    addCategory:function(name) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Adds to the existing flags on the Intent.</p>
     * @param {Number} flags <p>Bitwise OR of the flags to add to the existing set.</p>
     * @since 1.5 (Android)
     */
    addFlags:function(flags) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Intent.action} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getAction:function() {
    },

    /**
     * <p>Get a {@link Ti.Blob} property from this Intent</p>
     * @param {String} name <p>The {@link Ti.Blob} extra to get, most commonly {@link Ti.Android.EXTRA_STREAM}.</p>
     * @returns Ti.Blob
     * @since 2.1.0 (Android)
     */
    getBlobExtra:function(name) {
    },

    /**
     * <p>Get a boolean property from this Intent.</p>
     * @param {String} name <p>Property to get.</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    getBooleanExtra:function(name) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Intent.className} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getClassName:function() {
    },

    /**
     * <p>Get the Data URI from this Intent.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getData:function() {
    },

    /**
     * <p>Get a double property from this Intent.</p>
     * @param {String} name <p>Property to get.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getDoubleExtra:function(name) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Intent.flags} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getFlags:function() {
    },

    /**
     * <p>Get an int property from this Intent.</p>
     * @param {String} name <p>Property to get.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getIntExtra:function(name) {
    },

    /**
     * <p>Get a long property from this Intent.</p>
     * @param {String} name <p>Property to get.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getLongExtra:function(name) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Intent.packageName} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getPackageName:function() {
    },

    /**
     * <p>Get a string property from this Intent.</p>
     * @param {String} name <p>Property to get.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getStringExtra:function(name) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Intent.type} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Intent.url} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getUrl:function() {
    },

    /**
     * <p>Returns <code>true</code> if this Intent has the specified property.</p>
     * @param {String} name <p>Property name to check for.</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    hasExtra:function(name) {
    },

    /**
     * <p>Puts an extra property on this Intent.</p>
     * @param {String} name <p>Name of the property to add.</p>
     * @param {Object} value <p>Property value to set.</p>
     * @since 1.5 (Android)
     */
    putExtra:function(name, value) {
    },

    /**
     * <p>Put a URI property on this Intent (useful for {@link Ti.Android.EXTRA_STREAM}).</p>
     * @param {String} name <p>The property name.</p>
     * @param {String} value <p>The URI string.</p>
     * @since 1.5 (Android)
     */
    putExtraUri:function(name, value) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Android.Intent.flags} property.</p>
     * @param {Number} flags <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setFlags:function(flags) {
    }
};

/**
 * platforms: Android
 * 
 * @example Simple menu create
 * <p>Create an Android menu that displays a menu item named "Item 1", which logs a debug message 
when clicked.</p>
<pre><code>var win = Ti.UI.createWindow({
  fullscreen: true
});

var activity = win.activity;

activity.onCreateOptionsMenu = function(e){
  var menu = e.menu;
  var menuItem = menu.add({ title: "Item 1" });
  menuItem.setIcon("item1.png");
  menuItem.addEventListener("click", function(e) {
    Ti.API.debug("I was clicked");
  });
};

win.open();
</code></pre>
 * 
 * @example Dynamic menu create
 * <p>Create an Android menu that displays a menu item named "Login" or "Logout", depending on the 
value of a <code>loggedIn</code> Boolean variable. Click on the item to toggle the variable's value.</p>
<pre><code>var win = Ti.UI.createWindow({
  fullscreen: true
});
var LOGIN = 1, LOGOUT = 2;
var loggedIn = false;

var activity = win.activity;

activity.onCreateOptionsMenu = function(e){
  var menu = e.menu;
  var login = menu.add({ title: "Login", itemId: LOGIN });
  login.setIcon("login.png");
  login.addEventListener("click", function(e) {
    loggedIn = true;
  });
  var logout = menu.add({ title: "Logout", itemId: LOGOUT });
  logout.setIcon("logout.png");
  logout.addEventListener("click", function(e) {
    loggedIn = false;
  });
};

activity.onPrepareOptionsMenu = function(e) {
  var menu = e.menu;
  menu.findItem(LOGIN).setVisible(!loggedIn);
  menu.findItem(LOGOUT).setVisible(loggedIn);
};
win.open();
</code></pre>
 */
Ti.Android.Menu = function() {
};
Ti.Android.Menu.prototype = {

    /**
     * <p>array of {@link Ti.Android.MenuItem}</p>
     * @type Array<Ti.Android.MenuItem>
     * @since 1.5 (Android)
     */
    items:null,


    /**
     * <p>creates a {@link Ti.Android.MenuItem} from the passed creation options.</p>
     * @param {Object} options <p>creation options. Supported options are itemId, groupId, title, and order.</p>
     * @returns Ti.Android.MenuItem
     * @since 1.5 (Android)
     */
    add:function(options) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>clear all items from the menu. You should release all references you have retained to {@link Ti.Android.MenuItem} previously created.</p>
     * @since 1.5 (Android)
     */
    clear:function() {
    },

    /**
     * <p>close the menu if visible</p>
     * @since 1.5 (Android)
     */
    close:function() {
    },

    /**
     * <p>locate a {@link Ti.Android.MenuItem}</p>
     * @param {Object} item <p>integer itemId or {@link Ti.Android.MenuItem}</p>
     * @returns Ti.Android.MenuItem
     * @since 1.5 (Android)
     */
    findItem:function(item) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>return the {@link Ti.Android.MenuItem} at a specific index</p>
     * @param {Number} index <p>item at index where index &lt; size()</p>
     * @returns Ti.Android.MenuItem
     * @since 1.5 (Android)
     */
    getItem:function(index) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Menu.items} property.</p>
     * @returns Array<Ti.Android.MenuItem>
     * @since 1.5 (Android)
     */
    getItems:function() {
    },

    /**
     * <p>query for any visible menu items</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    hasVisibleItems:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>remove all {@link Ti.Android.MenuItem} with the specified groupId</p>
     * @param {Number} groupId <p>groupId of items to remove.</p>
     * @since 1.5 (Android)
     */
    removeGroup:function(groupId) {
    },

    /**
     * <p>remove a specific {@link Ti.Android.MenuItem} by the specified itemId</p>
     * @param {Number} itemId <p>itemId of item to remove.</p>
     * @since 1.5 (Android)
     */
    removeItem:function(itemId) {
    },

    /**
     * <p>enable or disable a group of {@link Ti.Android.MenuItem} by groupId</p>
     * @param {Number} groupId <p>groupId to enable or disable</p>
     * @param {Boolean} enabled <p>true to enable, false to disable.</p>
     * @since 1.5 (Android)
     */
    setGroupEnabled:function(groupId, enabled) {
    },

    /**
     * <p>show or hide a group of {@link Ti.Android.MenuItem} by groupId</p>
     * @param {Number} groupId <p>groupId to enable or disable</p>
     * @param {Boolean} visible <p>true to show, false to hide</p>
     * @since 1.5 (Android)
     */
    setGroupVisible:function(groupId, visible) {
    },

    /**
     * <p>number of {@link Ti.Android.MenuItem} in this menu</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    size:function() {
    }
};

/**
 * platforms: Android
 */
Ti.Android.MenuItem = function() {
};
Ti.Android.MenuItem.prototype = {

    /**
     * <p>set the enabled state of the item</p>
     * @type Boolean
     * @since 1.5 (Android)
     */
    enabled:null,

    /**
     * <p>groupId for this item</p>
     * @type Number
     * @since 1.5 (Android)
     */
    groupId:null,

    /**
     * <p>itemId for this item</p>
     * @type Number
     * @since 1.5 (Android)
     */
    itemId:null,

    /**
     * <p>integer used for controlling sort order</p>
     * @type Number
     * @since 1.5 (Android)
     */
    order:null,

    /**
     * <p>item title</p>
     * @type String
     * @since 1.5 (Android)
     */
    title:null,

    /**
     * <p>condensed item title</p>
     * @type String
     * @since 1.5 (Android)
     */
    titleCondensed:null,

    /**
     * <p>set the visible state of the item</p>
     * @type Boolean
     * @since 1.5 (Android)
     */
    visible:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.MenuItem.enabled} property.</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    getEnabled:function() {
    },

    /**
     * <p>retrieve the groupId for this item</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getGroupId:function() {
    },

    /**
     * <p>retrieve the itemId for this item</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getItemId:function() {
    },

    /**
     * <p>retrieve the sort order</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getOrder:function() {
    },

    /**
     * <p>retrieve the title of the item</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getTitle:function() {
    },

    /**
     * <p>retrieve the condensed title of the item</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getTitleCondensed:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.MenuItem.visible} property.</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    getVisible:function() {
    },

    /**
     * <p>retrieve the enabled state of the menu</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    isEnabled:function() {
    },

    /**
     * <p>retrieve the visible state of the menu</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    isVisible:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>set the enabled state of the item</p>
     * @param {Boolean} enabled <p>true to enable item, false to disable</p>
     * @since 1.5 (Android)
     */
    setEnabled:function(enabled) {
    },

    /**
     * <p>set the icon for the item</p>
     * @param {Object} icon <p>icon to use with the item</p>
     * @since 1.5 (Android)
     */
    setIcon:function(icon) {
    },

    /**
     * <p>set the title for the item</p>
     * @param {String} title <p>new title</p>
     * @since 1.5 (Android)
     */
    setTitle:function(title) {
    },

    /**
     * <p>set the condensed title for the item</p>
     * @param {String} condensedTitle <p>new condensed title</p>
     * @since 1.5 (Android)
     */
    setTitleCondensed:function(condensedTitle) {
    },

    /**
     * <p>set the visible state of the item</p>
     * @param {Boolean} visible <p>true to show the item, false to hide</p>
     * @since 1.5 (Android)
     */
    setVisible:function(visible) {
    }
};

/**
 * platforms: Android
 * @namespace <p>This object is used for status bar notifications.</p>
<p>See the official Android documentation on 
{@link http://developer.android.com/guide/topics/ui/notifiers/notifications}
for an overview of how status bar notifications are used.</p>
<p>If you pass <code>contentTitle</code> and/or <code>contentText</code> into {@link Ti.Android.createNotification}, 
then <code>setLatestEventInfo</code> will automatically be called with those properties.  There's no need 
to call it separately unless you want to update the notification at a later time. You can also 
use a custom <code>layout.xml</code> wrapped in 
a {@link Ti.Android.RemoteViews} object in the <code>contentView</code> property, which gives more 
fine grained control and customization to how the notification actually behaves.</p>
<p>Use the {@link Ti.Android.NotificationManager} module to send
and cancel notifications.</p>
<p>For Android "toast" (pop-up) notifications, see {@link Ti.UI.Notification}.</p>
 */
Ti.Android.Notification = function() {
};
Ti.Android.Notification.prototype = {

    /**
     * <p>The audio stream type to use when playing the sound.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    audioStreamType:null,

    /**
     * <p>The <code>PendingIntent</code> to execute when the expanded status entry is clicked.</p>
     * @type Ti.Android.PendingIntent
     * @since 1.5 (Android)
     */
    contentIntent:null,

    /**
     * <p>Description text of the notification.</p>
     * @type String
     * @since 1.5 (Android)
     */
    contentText:null,

    /**
     * <p>Title of the notification.</p>
     * @type String
     * @since 1.5 (Android)
     */
    contentTitle:null,

    /**
     * <p>Specifies which values should be taken from the defaults.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    defaults:null,

    /**
     * <p>The <code>PendingIntent</code> to execute when the status entry is deleted by the user with the "Clear All Notifications" button.</p>
     * @type Ti.Android.PendingIntent
     * @since 1.5 (Android)
     */
    deleteIntent:null,

    /**
     * <p>Set of flags for the notification.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    flags:null,

    /**
     * <p>Notification icon, specified as an Android resource ID, or a local URL to a density-specific image.</p>
     * @type Number|String
     * @since 1.5 (Android)
     */
    icon:null,

    /**
     * <p>The color for the LED to blink.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    ledARGB:null,

    /**
     * <p>The number of milliseconds for the LED to be off while it's flashing.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    ledOffMS:null,

    /**
     * <p>The number of milliseconds for the LED to be on while it's flashing.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    ledOnMS:null,

    /**
     * <p>The number of events that this notification represents.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    number:null,

    /**
     * <p>A URL to the sound to play (supports both Android and Titanium URLs).</p>
     * @type String
     * @since 1.5 (Android)
     */
    sound:null,

    /**
     * <p>Text to scroll across the screen when this item is added to the status bar.</p>
     * @type String
     * @since 1.5 (Android)
     */
    tickerText:null,

    /**
     * <p>The timestamp for the notification (defaults to the current time).</p>
     * @type Date|Number
     * @since 1.5 (Android)
     */
    when:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Notification.audioStreamType} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getAudioStreamType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Notification.contentIntent} property.</p>
     * @returns Ti.Android.PendingIntent
     * @since 1.5 (Android)
     */
    getContentIntent:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Notification.contentText} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getContentText:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Notification.contentTitle} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getContentTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Notification.defaults} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getDefaults:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Notification.deleteIntent} property.</p>
     * @returns Ti.Android.PendingIntent
     * @since 1.5 (Android)
     */
    getDeleteIntent:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Notification.flags} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getFlags:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Notification.icon} property.</p>
     * @returns Number
     * @returns String
     * @since 1.5 (Android)
     */
    getIcon:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Notification.ledARGB} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getLedARGB:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Notification.ledOffMS} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getLedOffMS:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Notification.ledOnMS} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getLedOnMS:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Notification.number} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getNumber:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Notification.sound} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getSound:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Notification.tickerText} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getTickerText:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Notification.when} property.</p>
     * @returns Date
     * @returns Number
     * @since 1.5 (Android)
     */
    getWhen:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Android.Notification.audioStreamType} property.</p>
     * @param {Number} audioStreamType <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setAudioStreamType:function(audioStreamType) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Android.Notification.contentIntent} property.</p>
     * @param {Ti.Android.PendingIntent} contentIntent <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setContentIntent:function(contentIntent) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Android.Notification.contentText} property.</p>
     * @param {String} contentText <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setContentText:function(contentText) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Android.Notification.contentTitle} property.</p>
     * @param {String} contentTitle <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setContentTitle:function(contentTitle) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Android.Notification.defaults} property.</p>
     * @param {Number} defaults <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setDefaults:function(defaults) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Android.Notification.deleteIntent} property.</p>
     * @param {Ti.Android.PendingIntent} deleteIntent <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setDeleteIntent:function(deleteIntent) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Android.Notification.flags} property.</p>
     * @param {Number} flags <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setFlags:function(flags) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Android.Notification.icon} property.</p>
     * @param {Number|String} icon <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setIcon:function(icon) {
    },

    /**
     * <p>Sets the latest event info using the built-in Notification View for this notification.</p>
     * @param {String} contentTitle <p>Title to display when the notification is expanded.</p>
     * @param {String} contentText <p>Text to display when the notification is expanded.</p>
     * @param {Ti.Android.PendingIntent} contentIntent <p>Intent to launch when the user clicks on the notification.</p>
     * @since 1.5 (Android)
     */
    setLatestEventInfo:function(contentTitle, contentText, contentIntent) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Android.Notification.ledARGB} property.</p>
     * @param {Number} ledARGB <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setLedARGB:function(ledARGB) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Android.Notification.ledOffMS} property.</p>
     * @param {Number} ledOffMS <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setLedOffMS:function(ledOffMS) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Android.Notification.ledOnMS} property.</p>
     * @param {Number} ledOnMS <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setLedOnMS:function(ledOnMS) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Android.Notification.number} property.</p>
     * @param {Number} number <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setNumber:function(number) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Android.Notification.sound} property.</p>
     * @param {String} sound <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setSound:function(sound) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Android.Notification.tickerText} property.</p>
     * @param {String} tickerText <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setTickerText:function(tickerText) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Android.Notification.when} property.</p>
     * @param {Date|Number} when <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setWhen:function(when) {
    }
};

/**
 * platforms: Android
 * @namespace <p>This module provides methods for sending and canceling status bar notifications,
which are represented by the {@link Ti.Android.Notification} object.</p>
<p>The <code>NotificationManager</code> module is a thin wrapper on the Android <code>NotificationManager</code>
class. The constants in this module are derived from the Android <code>Notification</code> class.</p>
<p>See also:</p>
<ul>
<li>
<p>{@link http://docs.appcelerator.com/titanium/2.0/#!/guide/Android_Notifications}</p>
</li>
<li>
<p>{@link http://developer.android.com/guide/topics/ui/notifiers/notifications}</p>
</li>
<li>
<p>{@link http://developer.android.com/reference/android/app/NotificationManager} </p>
</li>
<li>
<p>{@link http://developer.android.com/reference/android/app/Notification} </p>
</li>
</ul>
 * 
 * @example Simple Notification Example
 * <p>The following example shows how to create a notification that launches the
application when the user clicks on the notification.</p>
<p>The {@link Ti.Android.Intent} object associated with the notification determines 
what happens when the user clicks on the notification. In this case, we simply launch the application.
The intent in this sample uses a className to identify the activity to launch. </p>
<p>A Titanium application's main activity generally has the class name:</p>
<p><i>&lt;app_id&gt;.&lt;Appname&gt;</i><b>Activity</b> </p>
<p>where <i>&lt;app_id&gt;</i> is the application's app ID, and <i>&lt;Appname&gt;</i>
is the application's name, with the first letter capitalized and all other letters
lowercase.</p>
<p>For example, in this case the test application has the app ID
<code>com.appcelerator.notificationsample</code> and app name <code>NotificationSample</code>, so the 
activity class name is:</p>
<pre><code>com.appcelerator.notificationsample.NotificationsampleActivity
</code></pre>
<p>You can also find the activity's class name by looking in the <code>build/android</code> folder of your 
Titanium project.</p>
<p>The notification icon must be specified as an Android resource ID. In this case,
the icon, <code>my_icon.png</code> would be placed in
<code>platforms/android/res/drawable/my_icon.png</code>.
See {@link Ti.App.Android.R} for more information.</p>
<pre><code>// Intent object to launch the application 
var intent = Ti.Android.createIntent({
    flags : Ti.Android.FLAG_ACTIVITY_CLEAR_TOP | Ti.Android.FLAG_ACTIVITY_NEW_TASK,
    // Substitute the correct classname for your application
    className : 'com.appcelerator.notificationsample.NotificationsampleActivity',
});
intent.addCategory(Ti.Android.CATEGORY_LAUNCHER);

// Create a PendingIntent to tie together the Activity and Intent
var pending = Ti.Android.createPendingIntent({
    intent: intent,
    flags: Ti.Android.FLAG_UPDATE_CURRENT
});

// Create the notification
var notification = Ti.Android.createNotification({
    // icon is passed as an Android resource ID -- see Ti.App.Android.R.
    icon: Ti.App.Android.R.drawable.my_icon,
    contentTitle: 'Something Happened',
    contentText : 'Click to return to the application.',
    contentIntent: pending
});
// Send the notification.
Ti.Android.NotificationManager.notify(1, notification);
</code></pre>
 */
Ti.Android.NotificationManager = {

    /**
     * <p>Use all default settings for a notification; see
{@link Ti.Android.Notification.defaults}.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    DEFAULT_ALL:null,

    /**
     * <p>Use the default light settings for a notification; see
{@link Ti.Android.Notification.defaults}.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    DEFAULT_LIGHTS:null,

    /**
     * <p>Use the default sound settings for a notification; see
{@link Ti.Android.Notification.defaults}.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    DEFAULT_SOUND:null,

    /**
     * <p>Use the default vibration settings for a notification; see
{@link Ti.Android.Notification.defaults}.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    DEFAULT_VIBRATE:null,

    /**
     * <p>Cancel the notification when it is clicked by the user.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_AUTO_CANCEL:null,

    /**
     * <p>Repeat audio until the notification is cancelled or the notification window
is opened.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_INSISTENT:null,

    /**
     * <p>Do not cancel the notification when the user clicks the Clear All button.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_NO_CLEAR:null,

    /**
     * <p>Specifies that a notification is in reference to something that is ongoing, like a phone call.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ONGOING_EVENT:null,

    /**
     * <p>Play an alert (sound, lights, and/or vibration) once each time the notification is sent, even 
if it has not been canceled before that.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ONLY_ALERT_ONCE:null,

    /**
     * <p>Use LED lights to alert the user to the notification.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_SHOW_LIGHTS:null,

    /**
     * <p>Use with {@link Ti.Android.Notification.audioStreamType} to request that the default stream type for notifications be used.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    STREAM_DEFAULT:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Cancels a previously displayed notification.</p>
     * @param {Number} id <p>The ID passed to {@link Ti.Android.NotificationManager.notify}.</p>
     * @since 1.5 (Android)
     */
    cancel:function(id) {
    },

    /**
     * <p>Cancels all previously displayed notifications.</p>
     * @since 1.5 (Android)
     */
    cancelAll:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Adds a persistent notification to the status bar.</p>
     * @param {Number} id <p>An ID that may be used to cancel a shown notification.</p>
     * @param {Ti.Android.Notification} notification <p>Notification to display.</p>
     * @since 1.5 (Android)
     */
    notify:function(id, notification) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android
 * @namespace <p>Use the {@link Ti.Android.createPendingIntent} method to create a pending intent.</p>
<p>The type of <code>Intent</code> you pass to <code>createPendingIntent</code>  determines what kind of 
<code>PendingIntent</code> is created.  Each type corresponds directly with a get method on 
Android's PendingIntent:</p>
<ul>
<li>
<p>To create a <code>PendingIntent</code> that starts an activity, pass in an activity intent, 
    created with {@link Ti.Android.createIntent}. This is equivalent to
    calling the native Android <code>PendingIntent.getActivity</code> method. See
    {@link http://developer.android.com/reference/android/app/PendingIntent.html#getActivity(android.content.Context, int, android.content.Intent, int)}</p>
</li>
<li>
<p>To create a <code>PendingIntent</code> that starts a service, pass in a service intent,
    created with {@link Ti.Android.createServiceIntent}. This is 
     equivalent to calling the native Android <code>PendingIntent.getService</code> method. See 
     {@link http://developer.android.com/reference/android/app/PendingIntent.html#getService(android.content.Context, int, android.content.Intent, int)}.</p>
</li>
</ul>
<p>The <code>PendingIntent</code> is always associated with the activity that was the current activity
when the intent was created.</p>
<p>Note that this <code>PendingIntent</code> is designed primarily to be used with the 
{@link Ti.Android.Notification} object. It does not support all features 
of the native Android <code>PendingIntent</code> -- in particular, 
broadcast pending intents are not supported.</p>
<p>See also: </p>
<ul>
<li>{@link http://developer.android.com/reference/android/app/PendingIntent}</li>
</ul>
 */
Ti.Android.PendingIntent = function() {
};
Ti.Android.PendingIntent.prototype = {

    /**
     * <p>Flags used for creating the Pending Intent.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    flags:null,

    /**
     * <p>The intent data to pass to the {@link Ti.Android.Activity} launched by this <code>PendingIntent</code>.</p>
     * @type Ti.Android.Intent
     * @since 1.5 (Android)
     */
    intent:null,

    /**
     * <p>If this property is true, flag {@link Ti.Android.FLAG_UPDATE_CURRENT} will be
appended to <code>flags</code> automatically. Default value is true.</p>
     * @type Boolean
     * @since 1.5 (Android)
     */
    updateCurrentIntent:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.PendingIntent.flags} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getFlags:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.PendingIntent.intent} property.</p>
     * @returns Ti.Android.Intent
     * @since 1.5 (Android)
     */
    getIntent:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.PendingIntent.updateCurrentIntent} property.</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    getUpdateCurrentIntent:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android
 * @namespace <p>These properties and sub-properties are queried directly against the <code>android.R</code> class, and should have the same syntax. For example, to retrieve the "OK" string in Android:</p>
<p><code>Ti.Android.currentActivity.getString(Ti.Android.R.string.ok);</code></p>
 */
Ti.Android.R = function() {
};
Ti.Android.R.prototype = {

    /**
     * <p>Animation resources, see {@link http://developer.android.com/reference/android/R.anim}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    anim:null,

    /**
     * <p>Array resources, see {@link http://developer.android.com/reference/android/R.array}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    array:null,

    /**
     * <p>Attribute resources, see {@link http://developer.android.com/reference/android/R.attr}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    attr:null,

    /**
     * <p>Color resources, see {@link http://developer.android.com/reference/android/R.color}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    color:null,

    /**
     * <p>Dimension resources, see {@link http://developer.android.com/reference/android/R.dimen}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    dimen:null,

    /**
     * <p>Drawable resources, see {@link http://developer.android.com/reference/android/R.drawable}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    drawable:null,

    /**
     * <p>ID resources, see {@link http://developer.android.com/reference/android/R.id}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    id:null,

    /**
     * <p>Integer resources, see {@link http://developer.android.com/reference/android/R.integer}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    integer:null,

    /**
     * <p>Layout resources, see {@link http://developer.android.com/reference/android/R.layout}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    layout:null,

    /**
     * <p>String resources, see {@link http://developer.android.com/reference/android/R.string}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    string:null,

    /**
     * <p>Style resources, see {@link http://developer.android.com/reference/android/R.style}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    style:null,

    /**
     * <p>Styleable reosurces, see {@link http://developer.android.com/reference/android/R.styleable}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    styleable:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android
 * 
 * @example Create a RemoteViews based on a custom layout called "custom_layout.xml", and set a label's text.
 * <p>var AppR = Ti.App.Android.R;
var customLayout = Ti.Android.createRemoteViews(AppR.layout.custom_layout);
customLayout.setTextViewText(AppR.id.custom_text, "Hello World");</p>
 */
Ti.Android.RemoteViews = function() {
};
Ti.Android.RemoteViews.prototype = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.6 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.6 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.6 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Call a method taking one boolean on a view in the layout for this RemoteViews. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setBoolean(int, java.lang.String, boolean)}</p>
     * @param {Number} viewId <p>The resource id of the View (also see {@link Ti.App.Android.R})</p>
     * @param {String} methodName <p>The name of the method to call</p>
     * @param {Boolean} value <p>The boolean to pass to the method</p>
     * @since 1.6 (Android)
     */
    setBoolean:function(viewId, methodName, value) {
    },

    /**
     * <p>Sets a chronometer's base, format, and started flag. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setChronometer(int, long, java.lang.String, boolean)}</p>
     * @param {Number} viewId <p>The resource id of the Chronometer whose values will change (also see {@link Ti.App.Android.R})</p>
     * @param {Date} base <p>The time at which the timer would have read 0:00</p>
     * @param {String} format <p>The Chronometer format string, or null to simply display the timer value</p>
     * @param {Boolean} started <p>True if you want the clock to be started, false if not</p>
     * @since 1.6 (Android)
     */
    setChronometer:function(viewId, base, format, started) {
    },

    /**
     * <p>Call a method taking one double on a view in the layout for this RemoteViews. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setDouble(int, java.lang.String, double)}</p>
     * @param {Number} viewId <p>The resource id of the View (also see {@link Ti.App.Android.R})</p>
     * @param {String} methodName <p>The name of the method to call</p>
     * @param {Number} value <p>The double to pass to the method</p>
     * @since 1.6 (Android)
     */
    setDouble:function(viewId, methodName, value) {
    },

    /**
     * <p>Sets an ImageView's source given a Resource ID. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setImageViewResource(int, int)}</p>
     * @param {Number} viewId <p>The resource id of the ImageView whose image should change (also see {@link Ti.App.Android.R})</p>
     * @param {Number} srcId <p>The resource id of the image</p>
     * @since 1.6 (Android)
     */
    setImageViewResource:function(viewId, srcId) {
    },

    /**
     * <p>Sets an ImageView's source given a URI (supports both Android and Titanium URLs). See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setImageViewUri(int, android.net.Uri)}</p>
     * @param {Number} viewId <p>The resource id of the ImageView whose image should change (also see {@link Ti.App.Android.R})</p>
     * @param {String} uri <p>The URI of the image (both Android and Titanium URLs are supported)</p>
     * @since 1.6 (Android)
     */
    setImageViewUri:function(viewId, uri) {
    },

    /**
     * <p>Call a method taking one int on a view in the layout for this RemoteViews. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setInt(int, java.lang.String, int)}</p>
     * @param {Number} viewId <p>The resource id of the View (also see {@link Ti.App.Android.R})</p>
     * @param {String} methodName <p>The name of the method to call</p>
     * @param {Number} value <p>The int to pass to the method</p>
     * @since 1.6 (Android)
     */
    setInt:function(viewId, methodName, value) {
    },

    /**
     * <p>Launches a {@link Ti.Android.PendingIntent} when the specified view is clicked. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setOnClickPendingIntent(int, android.app.PendingIntent)}</p>
     * @param {Number} viewId <p>The resource id of the View to add a click listener to (also see {@link Ti.App.Android.R})</p>
     * @param {Ti.Android.PendingIntent} pendingIntent <p>The PendingIntent to execute when this view is clicked</p>
     * @since 1.6 (Android)
     */
    setOnClickPendingIntent:function(viewId, pendingIntent) {
    },

    /**
     * <p>Sets the progress, max value, and indeterminate flag of a ProgressBar. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setProgressBar(int, int, int, boolean)}</p>
     * @param {Number} viewId <p>The resource id of the ProgressBar to change (also see {@link Ti.App.Android.R})</p>
     * @param {Number} max <p>The new max value of the ProgressBar</p>
     * @param {Number} progress <p>The new progress value of the ProgressBar (from 0..max)</p>
     * @param {Boolean} indeterminate <p>Whether or not the progress in indeterminate</p>
     * @since 1.6 (Android)
     */
    setProgressBar:function(viewId, max, progress, indeterminate) {
    },

    /**
     * <p>Call a method taking one String on a view in the layout for this RemoteViews. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setString(int, java.lang.String, java.lang.String)}</p>
     * @param {Number} viewId <p>The resource id of the View (also see {@link Ti.App.Android.R})</p>
     * @param {String} methodName <p>The name of the method to call</p>
     * @param {String} value <p>The String to pass to the method</p>
     * @since 1.6 (Android)
     */
    setString:function(viewId, methodName, value) {
    },

    /**
     * <p>Sets the text color of a view. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setTextColor(int, int)}</p>
     * @param {Number} viewId <p>The resource id of the View whose text color will change (also see {@link Ti.App.Android.R})</p>
     * @param {Number} color <p>A color as an integer</p>
     * @since 1.6 (Android)
     */
    setTextColor:function(viewId, color) {
    },

    /**
     * <p>Sets the text of a TextView. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setTextViewText(int, java.lang.CharSequence)}</p>
     * @param {Number} viewId <p>The resource id of the TextView whose text will change (also see {@link Ti.App.Android.R})</p>
     * @param {String} text <p>The new text of the TextView</p>
     * @since 1.6 (Android)
     */
    setTextViewText:function(viewId, text) {
    },

    /**
     * <p>Call a method taking one Uri on a view in the layout for this RemoteViews. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setUri(int, java.lang.String, android.net.Uri)}</p>
     * @param {Number} viewId <p>The resource id of the View (also see {@link Ti.App.Android.R})</p>
     * @param {String} methodName <p>The name of the method to call</p>
     * @param {String} value <p>The URI (as a string) to pass to the method</p>
     * @since 1.6 (Android)
     */
    setUri:function(viewId, methodName, value) {
    },

    /**
     * <p>Sets the visibility of a View. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setViewVisibility(int, int)}</p>
     * @param {Number} viewId <p>The resource id of the View whose visibility will change (also see {@link Ti.App.Android.R})</p>
     * @param {Number} visibility <p>The visibility. Either <code>0</code> (VISIBLE), <code>4</code> (INVISIBLE) or <code>8</code> (GONE).</p>
     * @since 1.6 (Android)
     */
    setViewVisibility:function(viewId, visibility) {
    }
};

/**
 * platforms: Android
 * 
 * @example Hello World Service
 * <p>Your service code in its own Javascript file.  It reads the {@link Ti.Android.Intent} which created it, to see what it should say besides "Hello World".</p>
<p>File: myservice.js:</p>
<pre><code>var service = Ti.Android.currentService;
var intent = service.intent;
var message = intent.getStringExtra("message_to_echo");
Ti.API.info("Hello World!  I am a Service.  I have this to say: " + message);
</code></pre>
<p>Register the service in tiapp.xml:</p>
<pre><code>&lt;android xmlns:android="http://schemas.android.com/apk/res/android"&gt;
    &lt;services&gt;
        &lt;service url="myservice.js" type="interval"/&gt;
    &lt;/services&gt;
&lt;/android&gt;
</code></pre>
<p>Code in "regular" Titanium file to launch the service and listen for pause/resume events.  Code also stops the service after its code runs 3 times.</p>
<pre><code>var intent = Ti.Android.createServiceIntent( { url: 'myservice.js' } );
// Service should run its code every 2 seconds.
intent.putExtra('interval', 2000);
// A message that the service should 'echo'
intent.putExtra('message_to_echo', 'Titanium rocks!');

var service = Ti.Android.createService(intent);
service.addEventListener('resume', function(e) {
    Ti.API.info('Service code resumes, iteration ' + e.iteration);
});
service.addEventListener('pause', function(e) {
    Ti.API.info('Service code pauses, iteration ' + e.iteration);
    if (e.iteration === 3) {
        Ti.API.info('Service code has run 3 times, will now stop it.');
        service.stop();
    }
});
service.start();
</code></pre>
<p>Console Output:</p>
<pre><code>[INFO] [29,1942] Service code resumes, iteration 1
[INFO] [70,2029] Hello World! I am a Service. I have this to say: Titanium rocks!
[INFO] [3,2070] Service code pauses, iteration 1
[INFO] [2,3915] Service code resumes, iteration 2
[INFO] [31,3961] Hello World! I am a Service. I have this to say: Titanium rocks!
[INFO] [5,3968] Service code pauses, iteration 2
[INFO] [2,5917] Service code resumes, iteration 3
[INFO] [27,5961] Hello World! I am a Service. I have this to say: Titanium rocks!
[INFO] [16,5980] Service code pauses, iteration 3
[INFO] [1,5981] Service code has run 3 times, will now stop it.
</code></pre>
 */
Ti.Android.Service = function() {
};
Ti.Android.Service.prototype = {

    /**
     * <p>The {@link Ti.Android.Intent} used to start or bind to the Service.</p>
     * @type Ti.Android.Intent
     * @since 1.5 (Android)
     */
    intent:null,

    /**
     * <p>A service can be started more than once -- this number (based on an incrementing integer) indicates which "start number" in the sequence the current service instance is.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    serviceInstanceId:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Service.intent} property.</p>
     * @returns Ti.Android.Intent
     * @since 1.5 (Android)
     */
    getIntent:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Android.Service.serviceInstanceId} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getServiceInstanceId:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Start the Service.  Effective only if this instance of {@link Ti.Android.Service} was created with {@link Ti.Android.createService}.</p>
     * @since 1.5 (Android)
     */
    start:function() {
    },

    /**
     * <p>Stop this running instance of the Service.</p>
     * @since 1.5 (Android)
     */
    stop:function() {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>The <code>App</code> module exposes a number of properties set in the <code>tiapp.xml</code> file.<br />
</p>
<p>Three of these properties, the application name, ID, and URL, must be specified when the 
application is created.<br />
</p>
<p>While most values may be changed by editing the <code>tiapp.xml</code> file after creating the project, 
the GUID is automatically generated and should not be changed.</p>
 */
Ti.App = {

    /**
     * <p>Indicates whether Analytics is enabled, determined by <code>tiapp.xml</code>.</p>
     * @type Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    analytics:null,

    /**
     * <p>Application copyright statement, determined by <code>tiapp.xml</code>.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    copyright:null,

    /**
     * <p>Build type that reflects how the application was packaged; either <code>test</code>, <code>development</code> or 
<code>production</code>.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    deployType:null,

    /**
     * <p>Application description, determined by <code>tiapp.xml</code>.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    description:null,

    /**
     * <p>Application globally-unique ID, determined by <code>tiapp.xml</code>.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    guid:null,

    /**
     * <p>Application ID, from <code>tiapp.xml</code>.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    id:null,

    /**
     * <p>Determines whether the screen is locked when the device is idle.</p>
     * @type Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    idleTimerDisabled:null,

    /**
     * <p>The install ID for this application.</p>
     * @type String
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    installId:null,

    /**
     * <p>Indicates whether or not the soft keyboard is visible.</p>
     * @type Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    keyboardVisible:null,

    /**
     * <p>Application name, determined by <code>tiapp.xml</code>.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    name:null,

    /**
     * <p>Determines whether proximity detection is enabled.</p>
     * @type Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    proximityDetection:null,

    /**
     * <p>Indicates the state of the device's proximity sensor, according to the 
{@link Ti.App.proximity} event.</p>
     * @type Boolean
     * @since 0.1 (iPhone)
     */
    proximityState:null,

    /**
     * <p>Application publisher, from <code>tiapp.xml</code>.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    publisher:null,

    /**
     * <p>Unique session identifier for the current continuous run of the application.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    sessionId:null,

    /**
     * <p>Application URL, from <code>tiapp.xml</code>.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    url:null,

    /**
     * <p>Application version, from <code>tiapp.xml</code>.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    version:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.App.analytics} property.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getAnalytics:function() {
    },

    /**
     * <p>Returns the arguments passed to the application on startup.</p>
     * @returns Dictionary
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getArguments:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.App.copyright} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getCopyright:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.App.deployType} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getDeployType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.App.description} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getDescription:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.App.guid} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getGuid:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.App.id} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getId:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.App.idleTimerDisabled} property.</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getIdleTimerDisabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.App.installId} property.</p>
     * @returns String
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    getInstallId:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.App.keyboardVisible} property.</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getKeyboardVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.App.name} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.App.proximityDetection} property.</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getProximityDetection:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.App.proximityState} property.</p>
     * @returns Boolean
     * @since 0.1 (iPhone)
     */
    getProximityState:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.App.publisher} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getPublisher:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.App.sessionId} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getSessionId:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.App.url} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getUrl:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.App.version} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getVersion:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.App.idleTimerDisabled} property.</p>
     * @param {Boolean} idleTimerDisabled <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setIdleTimerDisabled:function(idleTimerDisabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.App.proximityDetection} property.</p>
     * @param {Boolean} proximityDetection <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setProximityDetection:function(proximityDetection) {
    }
};

/**
 * platforms: Android
 * @namespace <p>For more information, refer to the official documentation on the Android Developer website about 
{@link http://developer.android.com/guide/topics/resources/index}.</p>
 * 
 * @example Custom String Resource
 * <p>Custom Android resources may be placed in <code>platform/android</code> in the project root.<br />
For example, to utilize a custom localization file, create and populate 
<code>platform/android/res/values/mystrings.xml</code> with the following data.</p>
<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;
    &lt;string name="mystring"&gt;testing 1 2 3&lt;/string&gt;
&lt;/resources&gt;
</code></pre>
<p>In Javascript, this can be accessed as follows.</p>
<pre><code>var activity = Ti.Android.currentActivity;
var R = Ti.App.Android.R;

var mystring = activity.getString(R.string.mystring);
Ti.API.debug("mystring = " + mystring);
</code></pre>
 */
Ti.App.Android = {

    /**
     * <p>The <code>R</code> namespace for application resources.</p>
     * @type Ti.App.Android.R
     * @since 1.5 (Android)
     */
    R:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android
 * @namespace <p>The properties and sub-properties of this object relate directly to the native application 
resources <code>R</code> class, and thus have the same syntax. For more information, refer to the 
official documentation on the Android Developer website about 
{@link http://developer.android.com/guide/topics/resources/accessing}.<br />
</p>
<p>For example, if the file 
<code>platform/android/res/drawable/icon.png</code> exists in the project, it can be accessed using its 
integer id, as follows.</p>
<pre><code>var resid = Ti.App.Android.R.drawable.icon;
</code></pre>
<p>To access system-wide resources, rather than application resources, use {@link Ti.Android.R} 
instead.</p>
 */
Ti.App.Android.R = function() {
};
Ti.App.Android.R.prototype = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * 
 * @example Store a property
 * <p>Store a string property.</p>
<pre><code>Ti.App.Properties.setString('givenName', 'Paul');
Ti.API.info('The value of the givenName property is: ' + Ti.App.Properties.getString('givenName'));
</code></pre>
 * 
 * @example Enumerate over saved properties
 * <p>Output all saved properties to the console.</p>
<pre><code>var props = Ti.App.Properties.listProperties();

for (var i=0, ilen=props.length; i&lt;ilen; i++){
    var value = Ti.App.Properties.getString(props[i]);
    Ti.API.info(props[i] + ' = ' + value);
}
</code></pre>
 */
Ti.App.Properties = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Returns the value of a property as a boolean data type.</p>
     * @param {String} property <p>Name of property.</p>
     * @param {Boolean} _default <p>Default value to return if property does not exist.</p>
     * @returns Boolean
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    getBool:function(property, _default) {
    },

    /**
     * <p>Returns the value of a property as a double (double-precision, floating point) data type.</p>
     * @param {String} property <p>Name of property.</p>
     * @param {Number} _default <p>Default value to return if property does not exist.</p>
     * @returns Number
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    getDouble:function(property, _default) {
    },

    /**
     * <p>Returns the value of a property as an integer data type.</p>
     * @param {String} property <p>Name of property.</p>
     * @param {Number} _default <p>Default value to return if property does not exist.</p>
     * @returns Number
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    getInt:function(property, _default) {
    },

    /**
     * <p>Returns the value of a property as an array data type.</p>
     * @param {String} property <p>Name of property.</p>
     * @param {Array<Object>} _default <p>Default value to return if property does not exist.</p>
     * @returns Array<Object>
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    getList:function(property, _default) {
    },

    /**
     * <p>Returns the value of a property as a string data type.</p>
     * @param {String} property <p>Name of property.</p>
     * @param {String} _default <p>Default value to return if property does not exist.</p>
     * @returns String
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    getString:function(property, _default) {
    },

    /**
     * <p>Indicates whether a property exists.</p>
     * @param {String} property <p>Name of property.</p>
     * @returns Boolean
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    hasProperty:function(property) {
    },

    /**
     * <p>Returns an array of property names.</p>
     * @returns Array<Object>
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    listProperties:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Removes a property if it exists, or does nothing otherwise.</p>
     * @param {String} property <p>Name of property.</p>
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    removeProperty:function(property) {
    },

    /**
     * <p>Sets the value of a property as a boolean data type. The property will be created if it 
does not exist.</p>
     * @param {String} property <p>Name of property.</p>
     * @param {Boolean} value <p>Property value.</p>
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    setBool:function(property, value) {
    },

    /**
     * <p>Sets the value of a property as a double (double-precision, floating point) data type. The 
property will be created if it does not exist.</p>
     * @param {String} property <p>Name of property.</p>
     * @param {Number} value <p>Property value.</p>
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    setDouble:function(property, value) {
    },

    /**
     * <p>Sets the value of a property as an integer data type. The property will be created if it 
does not exist.</p>
     * @param {String} property <p>Name of property.</p>
     * @param {Number} value <p>Property value, within the range <code>-2,147,483,648</code> to <code>2,147,483,647</code>.</p>
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    setInt:function(property, value) {
    },

    /**
     * <p>Sets the value of a property as an array data type. The property will be created if it 
does not exist.</p>
     * @param {String} property <p>Name of property.</p>
     * @param {Array<Object>} value <p>Property value.</p>
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    setList:function(property, value) {
    },

    /**
     * <p>Sets the value of a property as a string data type. The property will be created if it 
does not exist.</p>
     * @param {String} property <p>Name of property.</p>
     * @param {String} value <p>Property value.</p>
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    setString:function(property, value) {
    }
};

/**
 * platforms: iPhone, iPad
 * @namespace <p>Local notifications are a way for an application that is not running in the foreground to let 
users know that it has information for them. When invoked, an alert dialog is displayed 
containing a "Close" button to dismiss and a customizable "View" button to bring the application 
into the foreground. Also, they can be configured to set an application icon badge, to show the 
number of pending notifications, and to generate a sound.</p>
 */
Ti.App.iOS = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Cancels all scheduled local notifications.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    cancelAllLocalNotifications:function() {
    },

    /**
     * <p>Cancels a local notification.</p>
     * @param {Number} id <p>ID of the local notification to cancel.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    cancelLocalNotification:function(id) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.App.iOS.LocalNotification}.</p>
     * @param {Dictionary<Ti.App.iOS.LocalNotification>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.App.iOS.LocalNotification} except those marked not-creation or read-only.</p>
     * @returns Ti.App.iOS.LocalNotification
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    createLocalNotification:function(parameters) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Registers a service to run when the application is placed in the background.</p>
     * @param {Dictionary} params <p>Parameters used to create the service. Must include a <code>url</code> property, to specify the 
local JavaScript file to execute when the application is placed in the background.</p>
     * @returns Ti.App.iOS.BackgroundService
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    registerBackgroundService:function(params) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Schedule a local notification.</p>
     * @param {Dictionary<NotificationParams>} params <p>Parameters used to create a notification.</p>
     * @returns Ti.App.iOS.LocalNotification
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    scheduleLocalNotification:function(params) {
    }
};

/**
 * platforms: iPhone, iPad
 * @namespace <p>A background service is created by {@link Ti.App.iOS.registerBackgroundService}.<br />
</p>
<p>At creation, a local URL to a JavaScript file must be defined. The code it contains is executed 
each time the application is no longer in the foreground, along with all other services that have 
been registered in the same way. When this happens, all background services continue to run until 
one of the following occurs:</p>
<ul>
<li>A service is stopped with the <code>stop</code> method.</li>
<li>The application resumes, at which points all background services are stopped.</li>
<li>The OS terminates the service for one of the reasons discussed in 
"Background Service Limitations", below.</li>
</ul>
<p>A background service can invoke a {@link Ti.App.iOS.LocalNotification}, which prompts users via 
a dialog to return to the application and provides a button that brings it back into the 
foreground.</p>
<h4>Background Service Limitations</h4>
<p>A background service is subject to limitations imposed by the operating system, such as</p>
<ul>
<li>The OS limits the total amount of time a background service can run for after the application 
is paused, typically to no more than 10 minutes.</li>
<li>The OS may terminate the background service at any point to reclaim resources.</li>
</ul>
 * 
 * @example Background Services Example
 * <p>Two background services are registered in the following application.</p>
<p>The first service logs a message every time the application is paused and then is stopped to 
release the service from memory. The service is not unregistered, and so will continue to be 
invoked.</p>
<p>The second creates an application property where it stores a run count value. For the first 4 
times the application is paused, a local notification is invoked that gives the user the 
opportunity to bring the application back to the foreground. Once the run count reaches 5, 
the service is unregistered and is not invoked again until the application is relaunched.</p>
<h4>app.js</h4>
<pre><code>var win1 = Ti.UI.createWindow({  
  title:'Background Services Example',
  backgroundColor:'#4186cd',
  modal:true
});

Ti.API.info('Registering background services');
var service = Ti.App.iOS.registerBackgroundService({url:'bg-service1.js'});
var service2 = Ti.App.iOS.registerBackgroundService({url:'bg-service2.js'});
Ti.API.info('*** Press home button to pause application ***');

win1.open();
</code></pre>
<h4>bg-service1.js</h4>
<pre><code>Ti.API.info('bg-service1: service has been invoked once, and will now be stopped to release it from memory. ');
Ti.App.currentService.stop();

var listener = Ti.App.currentService.addEventListener('stop',function(){
  Ti.API.info('bg-service1: Although the service has been stopped, it is still registered and will be executed again on next pause');
  Ti.API.info('bg-service1: As all background services are automatically stopped on resume, it is not always necessary to explicitly stop a service');
});
</code></pre>
<h4>bg-service2.js</h4>
<pre><code>var count = Ti.App.Properties.getInt('bg-svc2-count', 0);

if (count &gt; 4){
  // reset count after 4 invocations
  count = 0;
}

count++;

Ti.App.Properties.setInt('bg-svc2-count', count);

Ti.API.info('bg-service2 has been run ' + count + ' times');

if (count &gt; 4){
  Ti.App.currentService.unregister();
  var finalNotif = Ti.App.iOS.scheduleLocalNotification({
    alertBody:'bg-service2: As service has been invoked more than 4 times, it has been unregistered and will NOT run again. Relaunch the app to re-register it',
    date:new Date(new Date().getTime() + 1000) // 1 second after unregister
  });   
} else {
  var curNotif = Ti.App.iOS.scheduleLocalNotification({
    alertBody:'bg-service2: has been invoked ' + count + ' times. It is still registered and will run again when the app is transitioned to the background',
    date:new Date(new Date().getTime() + 1000) // 1 second after pause
  });   
}
</code></pre>
 */
Ti.App.iOS.BackgroundService = function() {
};
Ti.App.iOS.BackgroundService.prototype = {

    /**
     * <p>A local URL to a JavaScript file containing the code to run in the background.</p>
     * @type String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    url:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.App.iOS.BackgroundService.url} property.</p>
     * @returns String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    getUrl:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Stops the service from running during the current background session to conserve resources.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    stop:function() {
    },

    /**
     * <p>Unregisters the background service.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    unregister:function() {
    }
};

/**
 * platforms: iPhone, iPad
 * @namespace <p>A LocalNotification is created by {@link Ti.App.iOS.scheduleLocalNotification}.<br />
</p>
<p>Local notifications are a way for an application that is not running in the foreground to let 
users know that it has information for them. When invoked, an alert dialog is displayed 
containing a "Close" button to dismiss or a customizable "View" button to bring the application 
into the foreground. Also, an application icon badge showing the number of pending notifications 
may be set and a sound may be generated.</p>
 */
Ti.App.iOS.LocalNotification = function() {
};
Ti.App.iOS.LocalNotification.prototype = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Cancels the pending notification.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    cancel:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Ti.Blob = function() {
};
Ti.Blob.prototype = {

    /**
     * <p>When this blob represents an image, this is the height of the image in pixels. Otherwise, this is 0.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>The length of this blob in bytes.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    length:null,

    /**
     * <p>The mime type of this blob.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    mimeType:null,

    /**
     * <p>When this blob represents a {@link Ti.Filesystem.File}, this is the file URL that represents it</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    nativePath:null,

    /**
     * <p>When this blob represents an image, this is the total number of pixels in the image. Otherwise it returns the number of bytes in the binary data.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>A UTF-8 string representation of the data in this blob. If this blob represents pure binary data, the value will be <code>null</code>.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    text:null,

    /**
     * <p>When this blob represents an image, this is the width of the image in pixels. Otherwise, this is 0.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    width:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends the data from another blob to this blob.</p>
     * @param {Ti.Blob} blob <p>The blob to append to this blob</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    append:function(blob) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Blob.height} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Blob.length} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLength:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Blob.mimeType} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getMimeType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Blob.nativePath} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNativePath:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Blob.size} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Blob.text} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getText:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Blob.width} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>When this blob represents an image, this creates a new blob by cropping the underlying image to the specified dimensions.</p>
     * @param {Dictionary<ImageAsCroppedDict>} options <p>imageAsCropped named options</p>
     * @returns Ti.Blob The cropped image in a blob.
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    imageAsCropped:function(options) {
    },

    /**
     * <p>When this blob represents an image, this creates a new blob by resizing and scaling the underlying image to the specified dimensions.</p>
     * @param {Number} width <p>The width to resize this image to.</p>
     * @param {Number} height <p>The height to resize this image to.</p>
     * @returns Ti.Blob The resized image in a blob.
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    imageAsResized:function(width, height) {
    },

    /**
     * <p>Generate a thumbnail version of an image, optionally with a border and rounded corners</p>
     * @param {Number} size <p>The size of the thumbnail, in either width or height</p>
     * @param {Number} borderSize <p>The width of the thumbnail's border.</p>
     * @param {Number} cornerRadius <p>The radius of the thumbnail's corners.</p>
     * @returns Ti.Blob The image thumbnail in a blob.
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    imageAsThumbnail:function(size, borderSize, cornerRadius) {
    },

    /**
     * <p>When this blob represents an image, this adds an alpha channel to the underlying image.</p>
     * @returns Ti.Blob The image with an alpha channel in a blob, or `null` if this blob is not an image.
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    imageWithAlpha:function() {
    },

    /**
     * <p>When this blob represents an image, this adds a rounded corner to the underlying image.</p>
     * @param {Number} cornerSize <p>The size of the rounded corners in pixels.</p>
     * @param {Number} borderSize <p>The size of the border in pixels.</p>
     * @returns Ti.Blob The image with a rounded corner in a blob, or `null` if this blob is not an image.
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    imageWithRoundedCorner:function(cornerSize, borderSize) {
    },

    /**
     * <p>When this blob represents an image, this adds a transparent border to the underlying image.</p>
     * @param {Number} size <p>The size of the transparent border.</p>
     * @returns Ti.Blob The image with a transparent border in a blob, or `null` if this blob is not an image.
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    imageWithTransparentBorder:function(size) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Converts this blob to a String</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    toString:function() {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Ti.BlobStream = function() {
};
Ti.BlobStream.prototype = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Closes this stream.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    close:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Indicates whether this stream is readable.</p>
     * @returns Boolean True if stream is readable, false otherwise.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    isReadable:function() {
    },

    /**
     * <p>Indicates whether this stream is writeable.</p>
     * @returns Boolean True if stream is writeable, false otherwise.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    isWriteable:function() {
    },

    /**
     * <p>Reads data from this stream into a buffer.</p>
     * @param {Ti.Buffer} buffer <p>Buffer to read stream data into.</p>
     * @param {Number} offset <p>Offset into the buffer to start writing stream data.
If specified, <code>length</code> must also be specified.</p>
     * @param {Number} length <p>Maximum number of bytes to read.
If specified, <code>offset</code> must also be specified.</p>
     * @returns Number Number of bytes read.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    read:function(buffer, offset, length) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Writes data from a buffer to this stream.</p>
     * @param {Ti.Buffer} buffer <p>Buffer to write to this stream.</p>
     * @param {Number} offset <p>Offset in the buffer of the first byte to write to the stream.
If specified, <code>length</code> must also be specified.</p>
     * @param {Number} length <p>Maximum number of bytes to write to the stream.
If specified, <code>offset</code> must also be specified.</p>
     * @returns Number Number of bytes written.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    write:function(buffer, offset, length) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>A <code>Buffer</code> works like a resizable array of byte values.</p>
<p>Use the {@link Ti.createBuffer} method to create a buffer.</p>
 */
Ti.Buffer = function() {
};
Ti.Buffer.prototype = {

    /**
     * <p>Byte order of this buffer.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    byteOrder:null,

    /**
     * <p>Length of the buffer in bytes.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    length:null,

    /**
     * <p>The type of data encoding to use with <code>value</code>.</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    type:null,

    /**
     * <p>Data to be encoded.</p>
     * @type Number|String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    value:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends <code>sourceBuffer</code> to the this buffer.</p>
     * @param {Ti.Buffer} sourceBuffer <p>Buffer to append to this buffer.</p>
     * @param {Number} sourceOffset <p>Offset to start reading buffer data from.
If specified, <code>sourceLength</code> must also be specified.</p>
     * @param {Number} sourceLength <p>Number of bytes to read from <code>sourceBuffer</code>.
If specified, <code>sourceOffset</code> must also be specified.</p>
     * @returns Number The number of bytes appended.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    append:function(sourceBuffer, sourceOffset, sourceLength) {
    },

    /**
     * <p>Clears this buffer's contents but does not change the size of the buffer.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    clear:function() {
    },

    /**
     * <p>Creates a complete or partial copy of this buffer.</p>
     * @param {Number} offset <p>Offset of first byte of this buffer to clone.
If specified, <code>length</code> must be specified as well.</p>
     * @param {Number} length <p>Number of bytes of data to clone.</p>
     * @returns Ti.Buffer
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    clone:function(offset, length) {
    },

    /**
     * <p>Copies data from <code>sourceBuffer</code> into the current buffer at <code>offset</code>.</p>
     * @param {Ti.Buffer} sourceBuffer <p>Buffer to copy data from.</p>
     * @param {Number} offset <p>Offset in this buffer for the first byte of the copied data.</p>
     * @param {Number} sourceOffset <p>Offset in <code>sourceBuffer</code> to copy data from.
If specified, <code>sourceLength</code> must be specified as well.</p>
     * @param {Number} sourceLength <p>Number of bytes to copy from <code>sourceBuffer</code>.
If specified, <code>sourceOffset</code> must be specified as well.</p>
     * @returns Number The number of bytes copied.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    copy:function(sourceBuffer, offset, sourceOffset, sourceLength) {
    },

    /**
     * <p>Fills this buffer with the specified byte value.</p>
     * @param {Number} fillByte <p>Byte to fill buffer with.</p>
     * @param {Number} offset <p>Offset of the first byte to set to <code>fillByte</code>.</p>
     * @param {Number} length <p>Number of bytes to fill.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    fill:function(fillByte, offset, length) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Buffer.byteOrder} property.</p>
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getByteOrder:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Buffer.length} property.</p>
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getLength:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Buffer.type} property.</p>
     * @returns String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Buffer.value} property.</p>
     * @returns Number
     * @returns String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getValue:function() {
    },

    /**
     * <p>Inserts data from <code>sourceBuffer</code> into this buffer at <code>offset</code>.</p>
     * @param {Ti.Buffer} sourceBuffer <p>Buffer holding data to insert into this buffer.</p>
     * @param {Number} offset <p>Offset in this buffer to insert the first byte copied from
<code>sourceBuffer</code>.</p>
     * @param {Number} sourceOffset <p>Offset in <code>sourceBuffer</code> of the first byte to insert.
If specified, <code>sourceLength</code> must be specified as well.</p>
     * @param {Number} sourceLength <p>Number of bytes to insert from <code>sourceBuffer</code>.
If specified, <code>sourceOffset</code> must be specified as well.</p>
     * @returns Number The number of bytes inserted.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    insert:function(sourceBuffer, offset, sourceOffset, sourceLength) {
    },

    /**
     * <p>Releases the space allocated to the buffer, and sets its length to 0.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    release:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Buffer.length} property.</p>
     * @param {Number} length <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setLength:function(length) {
    },

    /**
     * <p>Converts this buffer to a {@link Ti.Blob}.</p>
     * @returns Ti.Blob
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    toBlob:function() {
    },

    /**
     * <p>Converts this buffer to a String.</p>
     * @returns String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    toString:function() {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Ti.BufferStream = function() {
};
Ti.BufferStream.prototype = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Closes this stream.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    close:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Indicates whether this stream is readable.</p>
     * @returns Boolean True if stream is readable, false otherwise.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    isReadable:function() {
    },

    /**
     * <p>Indicates whether this stream is writeable.</p>
     * @returns Boolean True if stream is writeable, false otherwise.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    isWriteable:function() {
    },

    /**
     * <p>Reads data from this stream into a buffer.</p>
     * @param {Ti.Buffer} buffer <p>Buffer to read stream data into.</p>
     * @param {Number} offset <p>Offset into the buffer to start writing stream data.
If specified, <code>length</code> must also be specified.</p>
     * @param {Number} length <p>Maximum number of bytes to read.
If specified, <code>offset</code> must also be specified.</p>
     * @returns Number Number of bytes read.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    read:function(buffer, offset, length) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Writes data from a buffer to this stream.</p>
     * @param {Ti.Buffer} buffer <p>Buffer to write to this stream.</p>
     * @param {Number} offset <p>Offset in the buffer of the first byte to write to the stream.
If specified, <code>length</code> must also be specified.</p>
     * @param {Number} length <p>Maximum number of bytes to write to the stream.
If specified, <code>offset</code> must also be specified.</p>
     * @returns Number Number of bytes written.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    write:function(buffer, offset, length) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>The Cloud module is used for connecting your application with Appcelerator Cloud Services (ACS).</p>
<p>Note that this module is not included in the Titanium namespace, but it is bundled with the Titanium SDK as of
version 2.0.0. To use it, you must require it, like this:</p>
<pre><code>    var Cloud = require('ti.cloud');
</code></pre>
<p>See {@link http://cloud.appcelerator.com/docs/quickstart}
for required steps to set up your application for ACS.</p>
<p>Your app must prove that it is allowed to talk to ACS. This keeps your data secure by preventing anyone from
making requests to ACS that impersonate your app. ACS provides secure authentication via 2-Legged OAuth.
This is a process by which a key and secret are used to sign each request made by your app. When the ACS
server receives your request, the secret is used along with the data sent in the request to calculate another
signature. If sent signature and calculated signature match, the request will be processed.</p>
<p>An alternate method to authenticate API requests to ACS is to supply an app key with each request.</p>
<p>Titanium Studio will create a pair of keys (Development and Production) for each Titanium application depending on the
user preference specified during new project creation. This pair of keys will be stored in <code>tiapp.xml</code> and one of the
keys will be used during application build depending on the build type (development or production).</p>
<p>The supported properties in <code>tiapp.xml</code> are:</p>
<pre><code>&lt;property name="acs-api-key-development" type="string"&gt;YOUR DEVELOPMENT API KEY HERE&lt;/property&gt;
&lt;property name="acs-oauth-key-development" type="string"&gt;YOUR DEVELOPMENT OAUTH KEY HERE&lt;/property&gt;
&lt;property name="acs-oauth-secret-development" type="string"&gt;YOUR DEVELOPMENT OAUTH SECRET HERE&lt;/property&gt;

&lt;property name="acs-api-key-production" type="string"&gt;YOUR PRODUCTION API KEY HERE&lt;/property&gt;
&lt;property name="acs-oauth-key-production" type="string"&gt;YOUR PRODUCTION OAUTH KEY HERE&lt;/property&gt;
&lt;property name="acs-oauth-secret-production" type="string"&gt;YOUR PRODUCTION OAUTH SECRET HERE&lt;/property&gt;

&lt;property name="acs-api-key" type="string"&gt;YOUR API KEY HERE&lt;/property&gt;
&lt;property name="acs-oauth-key" type="string"&gt;YOUR OAUTH KEY HERE&lt;/property&gt;
&lt;property name="acs-oauth-secret" type="string"&gt;YOUR OAUTH SECRET HERE&lt;/property&gt;&lt;property name="acs-base-url" type="string"&gt;API URL HERE&lt;/property&gt;
</code></pre>
<p>The value for each setting that will be used is based on the following rules:</p>
<ul>
<li>OAuth is preferred over apiKey. If both the OAuth key and OAuth secret are provided then OAuth will be used; otherwise, apiKey will be used.</li>
<li>If a deployment-specific setting is provided (production or development) then that value will be used for the current deployment environment.</li>
</ul>
<p>There is also an optional setting to allow you to change the base URL for ACS requests. You will most likely never
need to specify this. It can be specified deployment-specific, or generic:</p>
<pre><code>&lt;property name="acs-base-url-development" type="string"&gt;DEVELOPMENT API URL HERE&lt;/property&gt;
&lt;property name="acs-base-url-production" type="string"&gt;PRODUCTION API URL HERE&lt;/property&gt;
&lt;property name="acs-base-url" type="string"&gt;API URL HERE&lt;/property&gt;
</code></pre>
 */
Ti.Cloud = {

    /**
     * <p>Indicates if internal debug logging should be output to the console.</p>
     * @type Boolean
     * @since 2.0 (Android), 2.0 (iPhone), 2.0 (iPad)
     */
    debug:null,

    /**
     * <p>Function to be called at regular intervals as the request data is being received.</p>
     * @type Callback<CloudStreamProgress>
     * @since 2.0 (Android), 2.0 (iPhone), 2.0 (iPad)
     */
    ondatastream:null,

    /**
     * <p>Function to be called at regular intervals as the request data is being transmitted.</p>
     * @type Callback<CloudStreamProgress>
     * @since 2.0 (Android), 2.0 (iPhone), 2.0 (iPad)
     */
    onsendstream:null,

    /**
     * <p>Indicates whether to use SSL when sending requests to ACS.</p>
     * @type Boolean
     * @since 2.0 (Android), 2.0 (iPhone), 2.0 (iPad)
     */
    useSecure:null,


    /**
     * <p>Gets the value of the {@link Ti.Cloud.debug} property.</p>
     * @returns Boolean
     * @since 2.0 (Android), 2.0 (iPhone), 2.0 (iPad)
     */
    getDebug:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Cloud.ondatastream} property.</p>
     * @returns Callback<CloudStreamProgress>
     * @since 2.0 (Android), 2.0 (iPhone), 2.0 (iPad)
     */
    getOndatastream:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Cloud.onsendstream} property.</p>
     * @returns Callback<CloudStreamProgress>
     * @since 2.0 (Android), 2.0 (iPhone), 2.0 (iPad)
     */
    getOnsendstream:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Cloud.useSecure} property.</p>
     * @returns Boolean
     * @since 2.0 (Android), 2.0 (iPhone), 2.0 (iPad)
     */
    getUseSecure:function() {
    },

    /**
     * <p>Sets the value of the {@link Ti.Cloud.debug} property.</p>
     * @param {Boolean} debug <p>New value for the property.</p>
     * @since 2.0 (Android), 2.0 (iPhone), 2.0 (iPad)
     */
    setDebug:function(debug) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Cloud.ondatastream} property.</p>
     * @param {Callback<CloudStreamProgress>} ondatastream <p>New value for the property.</p>
     * @since 2.0 (Android), 2.0 (iPhone), 2.0 (iPad)
     */
    setOndatastream:function(ondatastream) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Cloud.onsendstream} property.</p>
     * @param {Callback<CloudStreamProgress>} onsendstream <p>New value for the property.</p>
     * @since 2.0 (Android), 2.0 (iPhone), 2.0 (iPad)
     */
    setOnsendstream:function(onsendstream) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Cloud.useSecure} property.</p>
     * @param {Boolean} useSecure <p>New value for the property.</p>
     * @since 2.0 (Android), 2.0 (iPhone), 2.0 (iPad)
     */
    setUseSecure:function(useSecure) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * 
 * @example Create Chat Message Example
 * <p>This example sends a chat message to a list of users and checks the response.</p>
<pre><code>Cloud.Chats.create({
    to_ids: ids.join(','),
    message: 'Good morning'
}, function (e) {
    if (e.success) {
        for (var i = 0; i &lt; e.chats.length; i++) {
            var chat = e.chats[i];
            alert('Success:\\n' +
                'From: ' + chat.from.first_name + ' ' + chat.from.last_name + '\\n' +
                'Updated: ' + chat.updated_at + '\\n' +
                'Message: ' + chat.message);
        }
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Query for Chat Message Example
 * <p>This example requests a list of chat messages and checks the response.</p>
<pre><code>Cloud.Chats.query({
    participate_ids: ids.join(','),
    where: {
        updated_at: { '$gt': last_update_time }
    }
}, function (e) {
    if (e.success) {
        for (var i = 0; i &lt; e.chats.length; i++) {
            var chat = e.chats[i];
            alert('Success:\\n' +
                'From: ' + chat.from.first_name + ' ' + chat.from.last_name + '\\n' +
                'Updated: ' + chat.updated_at + '\\n' +
                'Message: ' + chat.message);
        }
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Get Chat Groups Example
 * <p>This example requests a lists of chat groups that the current user belongs to and checks the response.</p>
<pre><code>Cloud.Chats.getChatGroups(function (e) {
    if (e.success) {
        for (var i = 0; i &lt; e.chats.length; i++) {
            var group = e.chat_groups[i];
            alert('Success:\\n' +
                'id: ' + group.id + '\\n' +
                'created_at: ' + group.created_at + '\\n' +
                'number of users: ' + group.participate_users.length);
        }
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 */
Ti.Cloud.Chats = {


    /**
     * <p>Send a chat message to another user or a group of users.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudChatsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    create:function(parameters, callback) {
    },

    /**
     * <p>Retrieve a list of chat groups the current user belongs to.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudChatGroupsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getChatGroups:function(parameters, callback) {
    },

    /**
     * <p>Retrieve a list of chat messages with sorting and pagination.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudChatsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    query:function(parameters, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * 
 * @example Create a Checkin Example
 * <p>This example creates a checkin and checks the response.</p>
<pre><code>Cloud.Checkins.create({
    place_id: myPlaceId,
    message: 'What a great view!',
    photo: Ti.Filesystem.getFile('photo.jpg')
}, function (e) {
    if (e.success) {
        var checkin = e.checkins[0];
        alert('Success:\\n' +
            'id: ' + checkin.id + '\\n' +
            'place: ' + checkin.place.name);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Query for Checkins Example
 * <p>This example requests information about checkins and checks the response.</p>
<pre><code>Cloud.Checkins.query({
    page: 1,
    per_page: 20,
    order: '-updated_at'
}, function (e) {
    if (e.success) {
        for (var i = 0; i &lt; e.checkins.length; i++) {
            var checkin = e.checkins[i];
            alert('Success:\\n' +
               'id: ' + checkin.id + '\\n' +
               'place: ' + checkin.place.name + '\\n' +
               'updated_at: ' + checkin.updated_at + '\\n' +
               'user: ' + checkin.user.first_name + ' ' + checkin.user.last_name);
         }
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Show Checkin Example
 * <p>This example requests information about a checkin and checks the response.</p>
<pre><code>Cloud.Checkins.show({
    checkin_id: myCheckinId
}, function (e) {
    if (e.success) {
        var checkin = e.checkins[0];
        alert('Success:\\n' +
            'id: ' + checkin.id + '\\n' +
            'place: ' + checkin.place.name + '\\n' +
            'updated_at: ' + checkin.updated_at);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Remove Checkin Example
 * <p>This example deletes a checkin and checks the response.</p>
<pre><code>Cloud.Checkins.remove({
    checkin_id: myCheckinId
}, function (e) {
    if (e.success) {
        alert('Success');
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 */
Ti.Cloud.Checkins = {


    /**
     * <p>Check in to a place or event</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudCheckinsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    create:function(parameters, callback) {
    },

    /**
     * <p>Retrieve a list of checkins with sorting and pagination.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudCheckinsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    query:function(parameters, callback) {
    },

    /**
     * <p>Delete a checkin.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudCheckinsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(parameters, callback) {
    },

    /**
     * <p>Retrieve a checkin.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudCheckinsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function(parameters, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * 
 * @example Geolocate a Client Example
 * <p>This example locates a client and checks the response.</p>
<pre><code>Cloud.Clients.geolocate({
    ip_address: clientIPAddress
}, function (e) {
    if (e.success) {
        alert('Success:\\n' +
            'ip_address: ' + e.ip_address + '\\n' +
            'latitude: ' + e.location.latitude + '\\n' +
            'longitude: ' + e.location.longitude);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 */
Ti.Cloud.Clients = {


    /**
     * <p>Locate a mobile device based on the IP address of the device.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudClientsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    geolocate:function(parameters, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * 
 * @example Send Email Example
 * <p>This example sends an Email and checks the response.</p>
<pre><code>Cloud.Emails.send({
    template: 'welcome',
    recipients: 'joe@company.com'
}, function (e) {
    if (e.success) {
        alert('Success');
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 */
Ti.Cloud.Emails = {


    /**
     * <p>Send an email to a list of email adresses.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudEmailsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    send:function(parameters, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * 
 * @example Set a Key-Value Example
 * <p>This example sets a key-value and checks the response.</p>
<pre><code>Cloud.KeyValues.set({
    name: 'welcome_message',
    value: 'Welcome to Appcelerator Cloud Services'
}, function (e) {
    if (e.success) {
        alert('Success');
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Get a Key-Value Example
 * <p>This example gets a key-value and checks the response.</p>
<pre><code>Cloud.KeyValues.get({
    name: 'welcome_message'
}, function (e) {
    if (e.success) {
        var keyvalue = e.keyvalues[0];
        alert('Success:\\n' +
            'name: ' + keyvalue.name + '\\n' +
            'value: ' + keyvalue.value);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Append a Key-Value Example
 * <p>This example appends a value to a key-value and checks the response.</p>
<pre><code>Cloud.KeyValues.append({
    name: 'welcome_message',
    value: ', take a look around'
}, function (e) {
     if (e.success) {
         var keyvalue = e.keyvalues[0];
         alert('Success:\\n' +
             'name: ' + keyvalue.name + '\\n' +
             'value: ' + keyvalue.value);
     } else {
         alert('Error:\\n' +
             ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
     }

});
</code></pre>
 * 
 * @example Increment a Key-Value Example
 * <p>This example increments a key-value and checks the response.</p>
<pre><code>Cloud.KeyValues.increment({
    name: 'score',
    value: 1
}, function (e) {
     if (e.success) {
         var keyvalue = e.keyvalues[0];
         alert('Success:\\n' +
             'name: ' + keyvalue.name + '\\n' +
             'value: ' + keyvalue.value);
     } else {
         alert('Error:\\n' +
             ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
     }

});
</code></pre>
 * 
 * @example Remove a Key-Value Example
 * <p>This example deletes a key-value and checks the response.</p>
<pre><code>Cloud.KeyValues.remove({
    name: 'welcome_message'
}, function (e) {
     if (e.success) {
         alert('Success');
     } else {
         alert('Error:\\n' +
             ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
     }

});
</code></pre>
 */
Ti.Cloud.KeyValues = {


    /**
     * <p>Add the given value to the end of an existing value.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudKeyValuesResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    append:function(parameters, callback) {
    },

    /**
     * <p>Retrieve a string or binary value.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudKeyValuesResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    get:function(parameters, callback) {
    },

    /**
     * <p>Increment the value by the given value.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudKeyValuesResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    increment:function(parameters, callback) {
    },

    /**
     * <p>Delete a value.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudKeyValuesResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(parameters, callback) {
    },

    /**
     * <p>Sets a string or binary value referenced by the key name.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudKeyValuesResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    set:function(parameters, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * 
 * @example Create Custom Object Example
 * <p>This example creates a new custom object and checks the response.</p>
<pre><code>Cloud.Objects.create({
    classname: 'cars',
    fields: {
        make: 'nissan',
        color: 'blue',
        year: 2005
    }
}, function (e) {
    if (e.success) {
        var car = e.cars[0];
        alert('Success:\\n' +
            'id: ' + car.id + '\\n' +
            'make: ' + car.make + '\\n' +
            'color: ' + car.color + '\\n' +
            'year: ' + car.year + '\\n' +
            'created_at: ' + car.created_at);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Show Custom Objects Example
 * <p>This example requests information about custom objects and checks the response.</p>
<pre><code>Cloud.Objects.show({
    classname: 'cars',
    ids: [ savedCar1.id, savedCar2.id ]
}, function (e) {
    if (e.success) {
        alert('Success:\\n' +
            'Count: ' + e.cars.length);
        for (var i = 0; i &lt; e.cars.length; i++) {
            var car = e.cars[i];
            alert('id: ' + cars.id + '\\n' +
                'make: ' + car.make + '\\n' +
                'color: ' + car.color + '\\n' +
                'year: ' + car.year + '\\n' +
                'created_at: ' + car.created_at);
        }
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Update Custom Object Example
 * <p>This example updates a custom object and checks the response.</p>
<pre><code>Cloud.Objects.update({
    classname: 'cars',
    id: savedCar1.id,
    fields: {
        color: 'purple',
        mileage: 10000
    }
}, function (e) {
    if (e.success) {
        var car = e.cars[0];
        alert('Success:\\n' +
            'id: ' + car.id + '\\n' +
            'make: ' + car.make + '\\n' +
            'color: ' + car.color + '\\n' +
            'year: ' + car.year + '\\n' +
            'mileage: ' + car.mileage + '\\n' +
            'updated_at: ' + car.updated_at);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Remove Custom Object Example
 * <p>This example deletes a custom object and checks the response.</p>
<pre><code>Cloud.Objects.remove({
    classname: 'cars',
    id: savedCar1.id
}, function (e) {
    if (e.success) {
        alert('Success');
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Query for Custom Objects Example
 * <p>This example requests information about custom objects and checks the response.</p>
<pre><code>Cloud.Objects.query({
    classname: 'cars',
    page: 1,
    per_page: 10,
    where: {
        color: 'blue'
    }
}, function (e) {
    if (e.success) {
        alert('Success:\\n' +
            'Count: ' + e.cars.length);
        for (var i = 0; i &lt; e.cars.length; i++) {
            var car = e.cars[i];
            alert('id: ' + cars.id + '\\n' +
                'make: ' + car.make + '\\n' +
                'color: ' + car.color + '\\n' +
                'year: ' + car.year + '\\n' +
                'created_at: ' + car.created_at);
        }
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 */
Ti.Cloud.Objects = {


    /**
     * <p>Create a custom object of type <code>classname</code>.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass. A <code>classname</code> property is required.</p>
     * @param {Callback<CloudObjectsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    create:function(parameters, callback) {
    },

    /**
     * <p>Retrieve a list of custom objects of type <code>classname</code>.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass. A <code>classname</code> property is required.</p>
     * @param {Callback<CloudObjectsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    query:function(parameters, callback) {
    },

    /**
     * <p>Delete a custom object of type <code>classname</code>.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass. A <code>classname</code> property is required.</p>
     * @param {Callback<CloudObjectsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(parameters, callback) {
    },

    /**
     * <p>Retrieve a list of custom objects of type <code>classname</code>.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass. A <code>classname</code> property is required.</p>
     * @param {Callback<CloudObjectsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function(parameters, callback) {
    },

    /**
     * <p>Update the fields of a custom object of type <code>classname</code>.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass. A <code>classname</code> property is required.</p>
     * @param {Callback<CloudObjectsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    update:function(parameters, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * 
 * @example Create Photo Collection Example
 * <p>This example creates a new photo collection and checks the response.</p>
<pre><code>Cloud.PhotoCollections.create({
    name: 'Party Pictures'
}, function (e) {
    if (e.success) {
        var collection = e.collections[0];
        alert('Success:\\n' +
            'id: ' + collection.id + '\\n' +
            'name: ' + collection.name + '\\n' +
            'count: ' + collection.counts.total_photos + '\\n'
            'updated_at: ' + collection.updated_at);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Show a Photo Collection Example
 * <p>This example retrieves information about a photo collection and checks the response.</p>
<pre><code>Cloud.PhotoCollections.show({
    collection_id: savedPhotoCollectionId
}, function (e) {
    if (e.success) {
        var collection = e.collections[0];
        alert('Success:\\n' +
            'id: ' + collection.id + '\\n' +
            'name: ' + collection.name + '\\n' +
            'count: ' + collection.counts.total_photos + '\\n'
            'updated_at: ' + collection.updated_at);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Search for Photo Collections Example
 * <p>This example searches for collections and checks the response.</p>
<pre><code>Cloud.PhotoCollections.search({
    user_id: savedUserId
}, function (e) {
    if (e.success) {
        alert('Success:\\n' +
            'Count: ' + e.collections.length);
        for (var i = 0; i &lt; e.collections.length; i++) {
            var collection = e.collections[i];
            alert('Success:\\n' +
                'id: ' + collection.id + '\\n' +
                'name: ' + collection.name + '\\n' +
                'count: ' + collection.counts.total_photos + '\\n'
                'updated_at: ' + collection.updated_at);
        }
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Show Photo Subcollections Example
 * <p>This example requests a list of photo subcollections and checks the response.</p>
<pre><code>Cloud.PhotoCollections.showSubcollections({
    page: 1,
    per_page: 20,
    collection_id: savedCollectionId
}, function (e) {
    if (e.success) {
        alert('Success:\\n' +
            'Count: ' + e.collections.length);
        for (var i = 0; i &lt; e.collections.length; i++) {
            var collection = e.collections[i];
            alert('Success:\\n' +
                'id: ' + collection.id + '\\n' +
                'name: ' + collection.name + '\\n' +
                'count: ' + collection.counts.total_photos + '\\n'
                'updated_at: ' + collection.updated_at);
        }
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Show Photo Collection Photos Example
 * <p>This example requests a list of photos in a photo collections and checks the response.</p>
<pre><code>Cloud.PhotoCollections.showPhotos({
    page: 1,
    per_page: 20,
    collection_id: savedCollectionId
}, function (e) {
    if (e.success) {
        if (!e.photos) {
            alert('Success: No photos');
        } else {
            alert('Success:\\n' +
                'Count: ' + e.collections.length);
            for (var i = 0; i &lt; e.collections.length; i++) {
                var collection = e.collections[i];
                alert('Success:\\n' +
                    'id: ' + collection.id + '\\n' +
                    'name: ' + collection.name + '\\n' +
                    'count: ' + collection.counts.total_photos + '\\n'
                    'updated_at: ' + collection.updated_at);
            }
        }
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Update a Photo Collection Example
 * <p>This example updates a photo collection and checks the response.</p>
<pre><code>Cloud.PhotoCollections.update({
    collection_id: savedPhotoCollectionId,
    cover_photo_id: savedPhotoId
}, function (e) {
    if (e.success) {
        var collection = e.collections[0];
        alert('Success:\\n' +
            'id: ' + collection.id + '\\n' +
            'name: ' + collection.name + '\\n' +
            'count: ' + collection.counts.total_photos + '\\n'
            'updated_at: ' + collection.updated_at);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Remove a Photo Collection Example
 * <p>This example deletes a photo collection and checks the response.</p>
<pre><code>Cloud.PhotoCollections.remove({
    collection_id: savedPhotoCollectionId
}, function (e) {
    if (e.success) {
        alert('Success');
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 */
Ti.Cloud.PhotoCollections = {


    /**
     * <p>Creates a photo collection.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPhotoCollectionsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    create:function(parameters, callback) {
    },

    /**
     * <p>Deletes an empty collection.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPhotoCollectionsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(parameters, callback) {
    },

    /**
     * <p>Retrieves a list of top-level collections owned by a user.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPhotoCollectionsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    search:function(parameters, callback) {
    },

    /**
     * <p>Retrieves details about a photo collection.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPhotoCollectionsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function(parameters, callback) {
    },

    /**
     * <p>Retrieves photos in a collection.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPhotoCollectionsPhotosResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    showPhotos:function(parameters, callback) {
    },

    /**
     * <p>Retrieves a list of subcollections of a collection.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPhotoCollectionsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    showSubCollections:function(parameters, callback) {
    },

    /**
     * <p>Updates a photo collection.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPhotoCollectionsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    update:function(parameters, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * 
 * @example Create Photo Example
 * <p>This example creates a new photo and checks the response.</p>
<pre><code>Cloud.Photos.create({
    photo: Ti.Filesystem.getFile('photo.jpg')
}, function (e) {
    if (e.success) {
        var photo = e.photos[0];
        alert('Success:\\n' +
            'id: ' + photo.id + '\\n' +
            'filename: ' + photo.filename + '\\n' +
            'size: ' + photo.size,
            'updated_at: ' + photo.updated_at);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Show a Photo Example
 * <p>This example retrieves information about a photo and checks the response.</p>
<pre><code>Cloud.Photos.show({
    photo_id: savedPhotoId
}, function (e) {
    if (e.success) {
        var photo = e.photos[0];
        alert('Success:\\n' +
            'id: ' + photo.id + '\\n' +
            'filename: ' + photo.filename + '\\n' +
            'updated_at: ' + photo.updated_at);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Search for Photos Example
 * <p>This example searches for photos and checks the response.</p>
<pre><code>Cloud.Photos.search({
    user_id: savedUserId
}, function (e) {
    if (e.success) {
        alert('Success:\\n' +
            'Count: ' + e.photos.length);
        for (var i = 0; i &lt; e.photos.length; i++) {
            var photo = e.photos[i];
            alert('id: ' + photo.id + '\\n' +
                  'name: ' + photo.name + '\\n' +
                  'filename: ' + photo.filename + '\\n' +
                  'updated_at: ' + photo.updated_at);
        }
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Query for Photos Example
 * <p>This example requests a list of photos and checks the response.</p>
<pre><code>Cloud.Photos.query({
    page: 1,
    per_page: 20,
    where: {
        coordinates: {
            '$nearSphere': [-122.23,37.12],
            '$maxDistance': 0.00126
        }
    }
}, function (e) {
    if (e.success) {
        alert('Success:\\n' +
            'Count: ' + e.photos.length);
        for (var i = 0; i &lt; e.photos.length; i++) {
            var photo = e.photos[i];
            alert('id: ' + photo.id + '\\n' +
                  'name: ' + photo.name + '\\n' +
                  'filename: ' + photo.filename + '\\n' +
                  'updated_at: ' + photo.updated_at);
        }
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Update a Photo Example
 * <p>This example updates a photo and checks the response.</p>
<pre><code>Cloud.Photos.update({
    photo_id: savedPhotoId,
    photo: Ti.Filesystem.getFile('newphoto.jpg'),
    tags: 'mountains'
}, function (e) {
    if (e.success) {
        var photo = e.photos[0];
        alert('Success:\\n' +
            'id: ' + photo.id + '\\n' +
            'filename: ' + photo.filename + '\\n' +
            'updated_at: ' + photo.updated_at);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Remove a Photo Example
 * <p>This example deletes a photo and checks the response.</p>
<pre><code>Cloud.Photos.remove({
    photo_id: savedPhotoId
}, function (e) {
    if (e.success) {
        alert('Success');
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 */
Ti.Cloud.Photos = {


    /**
     * <p>Create, or upload, a new photo.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPhotosResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    create:function(parameters, callback) {
    },

    /**
     * <p>Retrieve a list of photos with sorting and pagination.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPhotosResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    query:function(parameters, callback) {
    },

    /**
     * <p>Delete a photo.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPhotosResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(parameters, callback) {
    },

    /**
     * <p>Retrieve a list of photos.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPhotosResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    search:function(parameters, callback) {
    },

    /**
     * <p>Retrieve information about a photo.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPhotosResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function(parameters, callback) {
    },

    /**
     * <p>Update a photo.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPhotosResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    update:function(parameters, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * 
 * @example Create Place Example
 * <p>This example creates a new place and checks the response.</p>
<pre><code>Cloud.Places.create({
    name: 'Appcelerator HQ',
    state: 'California',
    website: 'http://www.appcelerator.com'
}, function (e) {
    if (e.success) {
        var place = e.places[0];
        alert('Success:\\n' +
            'id: ' + place.id + '\\n' +
            'name: ' + place.name + '\\n' +
            'updated_at: ' + place.updated_at);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Show a Place Example
 * <p>This example retrieves information about a place and checks the response.</p>
<pre><code>Cloud.Places.show({
    place_id: savedPlaceId
}, function (e) {
    if (e.success) {
        var place = e.places[0];
        alert('Success:\\n' +
            'id: ' + place.id + '\\n' +
            'name: ' + place.name + '\\n' +
            'updated_at: ' + place.updated_at);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Search for Places Example
 * <p>This example searches for places and checks the response.</p>
<pre><code>Cloud.Places.search({
    latitude: lat,
    longitude: lon
}, function (e) {
    if (e.success) {
        alert('Success:\\n' +
            'Count: ' + e.places.length);
        for (var i = 0; i &lt; e.places.length; i++) {
            var place = e.places[i];
            alert('id: ' + place.id + '\\n' +
                  'name: ' + place.name + '\\n' +
                  'longitude: ' + place.longitude + '\\n' +
                  'latitude: ' + place.latitude + '\\n' +
                  'updated_at: ' + place.updated_at);
        }
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Query for Places Example
 * <p>This example requests a list of places and checks the response.</p>
<pre><code>Cloud.Places.query({
    page: 1,
    per_page: 20,
    where: {
        lnglat: {
            '$nearSphere': [-122.23,37.12],
            '$maxDistance': 0.00126
        }
    }
}, function (e) {
    if (e.success) {
        alert('Success:\\n' +
            'Count: ' + e.places.length);
        for (var i = 0; i &lt; e.places.length; i++) {
            var place = e.places[i];
            alert('id: ' + place.id + '\\n' +
                  'name: ' + place.name + '\\n' +
                  'longitude: ' + place.longitude + '\\n' +
                  'latitude: ' + place.latitude + '\\n' +
                  'updated_at: ' + place.updated_at);
        }
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Update a Place Example
 * <p>This example updates a place and checks the response.</p>
<pre><code>Cloud.Places.update({
    place_id: savedPlaceId,
    city: 'Mountain View'
}, function (e) {
    if (e.success) {
        var place = e.places[0];
        alert('Success:\\n' +
            'id: ' + place.id + '\\n' +
            'name: ' + place.name + '\\n' +
            'updated_at: ' + place.updated_at);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Remove a Place Example
 * <p>This example deletes a place and checks the response.</p>
<pre><code>Cloud.Places.remove({
    place_id: savedPlaceId
}, function (e) {
    if (e.success) {
        alert('Success');
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 */
Ti.Cloud.Places = {


    /**
     * <p>Create a new place.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPlacesResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    create:function(parameters, callback) {
    },

    /**
     * <p>Retrieve a list of places with sorting and pagination.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPlacesResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    query:function(parameters, callback) {
    },

    /**
     * <p>Delete a place.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPlacesResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(parameters, callback) {
    },

    /**
     * <p>Retrieve a list of places.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPlacesResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    search:function(parameters, callback) {
    },

    /**
     * <p>Retrieve information about a place.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPlacesResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function(parameters, callback) {
    },

    /**
     * <p>Update information about a place.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPlacesResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    update:function(parameters, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * 
 * @example Create Post Example
 * <p>This example creates a new post and checks the response.</p>
<pre><code>Cloud.Posts.create({
    content: 'Man Walks On Moon',
    title: 'News of the day',
    photo: Ti.Filesystem.getFile('photo.jpg')
}, function (e) {
    if (e.success) {
        var post = e.posts[0];
        alert('Success:\\n' +
            'id: ' + post.id + '\\n' +
            'title: ' + post.title + '\\n' +
            'content: ' + post.content + '\\n' +
            'updated_at: ' + post.updated_at);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Show a Post Example
 * <p>This example retrieves information about a post and checks the response.</p>
<pre><code>Cloud.Posts.show({
    post_id: savedPostId
}, function (e) {
    if (e.success) {
        var post = e.posts[0];
        alert('Success:\\n' +
            'id: ' + post.id + '\\n' +
            'title: ' + post.title + '\\n' +
            'content: ' + post.content + '\\n' +
            'updated_at: ' + post.updated_at);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Query for Posts Example
 * <p>This example requests a list of posts and checks the response.</p>
<pre><code>Cloud.Posts.query({
    page: 1,
    per_page: 20,
    where: {
        reviews_count: { '$gt': 1.0 }
    }
}, function (e) {
    if (e.success) {
        alert('Success:\\n' +
            'Count: ' + e.posts.length);
        for (var i = 0; i &lt; e.posts.length; i++) {
            var post = e.posts[i];
            alert('id: ' + post.id + '\\n' +
                'id: ' + post.id + '\\n' +
                'title: ' + post.title + '\\n' +
                'content: ' + post.content + '\\n' +
                'updated_at: ' + post.updated_at);
        }
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Update a Post Example
 * <p>This example updates a post and checks the response.</p>
<pre><code>Cloud.Posts.update({
    post_id: savedPostId,
    title: 'Lunar Eclipse'
}, function (e) {
    if (e.success) {
        var post = e.posts[0];
        alert('Success:\\n' +
            'id: ' + post.id + '\\n' +
            'title: ' + post.title + '\\n' +
            'content: ' + post.content + '\\n' +
            'updated_at: ' + post.updated_at);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Remove a Post Example
 * <p>This example deletes a post and checks the response.</p>
<pre><code>Cloud.Posts.remove({
    post_id: savedPostId
}, function (e) {
    if (e.success) {
        alert('Success');
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 */
Ti.Cloud.Posts = {


    /**
     * <p>Create a post.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPostsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    create:function(parameters, callback) {
    },

    /**
     * <p>Retrieve a list of posts with sorting and pagination.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPostsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    query:function(parameters, callback) {
    },

    /**
     * <p>Delete a post.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPostsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(parameters, callback) {
    },

    /**
     * <p>Retrieve information about a post.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPostsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function(parameters, callback) {
    },

    /**
     * <p>Update the information for a post.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPostsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    update:function(parameters, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>Please refer to {@link http://cloud.appcelerator.com/docs/ios#pushn}
and {@link http://cloud.appcelerator.com/docs/android#pushn} to 
set up your app for push notifications. To receive push notifications on Android, please refer to 
the {@link Ti.CloudPush} module.</p>
<p>The methods in this module are used to subscribe and unsubscribe from ACS push
notification channels, and to generate ACS push notifications. Push notifications
are received using platform-specific mechanisms:</p>
<ul>
<li>
<p>On iOS, push notifications are received through the standard iOS push notification
    mechanism. When you register for push notifications, incoming push notifications
    are passed to the <code>callback</code> callback. See
    {@link Ti.Network.registerForPushNotifications}
    for details.</p>
</li>
<li>
<p>On Android, push notifications are received through the {@link Ti.CloudPush} module.
    Add a listener for the {@link Ti.CloudPush.callback} event to receive push notifications.</p>
</li>
</ul>
<p>To register for push notifications, you need to obtain an application-specific <em>device
token</em>. To obtain a device token:</p>
<ul>
<li>
<p>On iOS, when you successfully register for push notifications, the device token is 
    passed to the <code>success</code> callback.</p>
</li>
<li>
<p>On Android, use
    {@link Ti.CloudPush.retrieveDeviceToken} to request
    a device token. The device token is passed to the <code>success</code> callback.</p>
</li>
</ul>
 * 
 * @example Subscribe to Channel Example
 * <p>This example subscribes to a push notification channel and checks the response.</p>
<pre><code>Cloud.PushNotifications.subscribe({
    channel: 'friend_request',
    device_token: myPushDeviceToken
}, function (e) {
    if (e.success) {
        alert('Success');
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Unsubscribe to Channel Example
 * <p>This example unsubscribes from a push notification channel and checks the response.</p>
<pre><code>Cloud.PushNotifications.unsubscribe({
    channel: 'friend_request',
    device_token: myPushDeviceToken
}, function (e) {
    if (e.success) {
        alert('Success');
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Notify Channel Example
 * <p>This example sends a push notification to a channel and checks the response.</p>
<pre><code>Cloud.PushNotifications.notify({
    channel: 'friend_request',
    payload: 'Welcome to push notifications'
}, function (e) {
    if (e.success) {
        alert('Success');
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 */
Ti.Cloud.PushNotifications = {


    /**
     * <p>Send a push notification to a channel.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPushNotificationsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    notify:function(parameters, callback) {
    },

    /**
     * <p>Subscribe a mobile device to a push notification channel.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPushNotificationsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    subscribe:function(parameters, callback) {
    },

    /**
     * <p>Unsubscribe a mobile device from a push notification channel.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudPushNotificationsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    unsubscribe:function(parameters, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * 
 * @example Create Review Example
 * <p>This example creates a new review and checks the response.</p>
<pre><code>Cloud.Reviews.create({
    post_id: savedPostId,
    rating: 1,
    content: 'Good'
}, function (e) {
    if (e.success) {
        var review = e.reviews[0];
        alert('Success:\\n' +
            'id: ' + review.id + '\\n' +
            'rating: ' + review.rating + '\\n' +
            'content: ' + review.content + '\\n' +
            'updated_at: ' + review.updated_at);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Show a Review Example
 * <p>This example retrieves information about a review and checks the response.</p>
<pre><code>Cloud.Reviews.show({
    post_id: savedPostId,
    review_id: savedReviewId
}, function (e) {
    if (e.success) {
        var review = e.reviews[0];
        alert('Success:\\n' +
            'id: ' + review.id + '\\n' +
            'rating: ' + review.rating + '\\n' +
            'content: ' + review.content + '\\n' +
            'updated_at: ' + review.updated_at);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Query for Reviews Example
 * <p>This example requests a list of reviews and checks the response.</p>
<pre><code>Cloud.Reviews.query({
    page: 1,
    per_page: 20,
    where: {
        rating: { '$gt': 5.0 }
    }
}, function (e) {
    if (e.success) {
        alert('Success:\\n' +
            'Count: ' + e.reviews.length);
        for (var i = 0; i &lt; e.reviews.length; i++) {
            var review = e.reviews[i];
            alert('id: ' + review.id + '\\n' +
                'id: ' + review.id + '\\n' +
                'rating: ' + review.rating + '\\n' +
                'content: ' + review.content + '\\n' +
                'updated_at: ' + review.updated_at);
        }
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Update a Review Example
 * <p>This example updates a review and checks the response.</p>
<pre><code>Cloud.Reviews.update({
    post_id: savedPostId,
    review_id: savedReviewId,
    rating: 100,
    content: 'Very good!'
}, function (e) {
    if (e.success) {
        var review = e.reviews[0];
        alert('Success:\\n' +
            'id: ' + review.id + '\\n' +
            'rating: ' + review.rating + '\\n' +
            'content: ' + review.content + '\\n' +
            'updated_at: ' + review.updated_at);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Remove a Review Example
 * <p>This example deletes a review and checks the response.</p>
<pre><code>Cloud.Reviews.remove({
    post_id: savedPostId,
    review_id: savedReviewId
}, function (e) {
    if (e.success) {
        alert('Success');
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 */
Ti.Cloud.Reviews = {


    /**
     * <p>Add a review, comment, rating, or like.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudReviewsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    create:function(parameters, callback) {
    },

    /**
     * <p>Retrieve a list of reviews with sorting and pagination.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudReviewsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    query:function(parameters, callback) {
    },

    /**
     * <p>Delete a review.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudReviewsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(parameters, callback) {
    },

    /**
     * <p>Retrieve details of a review.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudReviewsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function(parameters, callback) {
    },

    /**
     * <p>Update a review.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudReviewsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    update:function(parameters, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * 
 * @example Log in External Account Example
 * <p>This example logs a user in using an external account and checks the response</p>
<pre><code>Cloud.SocialIntegrations.externalAccountLogin({
    type: 'facebook',
    token: Ti.Facebook.accessToken
}, function (e) {
    if (e.success) {
        var user = e.users[0];
        alert('Success:\\n' +
            'id: ' + user.id + '\\n' +
            'first name: ' + user.first_name + '\\n' +
            'last name: ' + user.last_name);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Link in External Account Example
 * <p>This example links an external account and checks the response</p>
<pre><code>Cloud.SocialIntegrations.externalAccountLink({
    type: 'facebook',
    token: Ti.Facebook.accessToken
}, function (e) {
    if (e.success) {
        var user = e.users[0];
        alert('Success:\\n' +
            'id: ' + user.id + '\\n' +
            'first name: ' + user.first_name + '\\n' +
            'last name: ' + user.last_name);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Search for Facebook Friends Example
 * <p>This example retrieves a list of Facebook Friends and checks the response</p>
<pre><code>Cloud.SocialIntegrations.searchFacebookFriends({function (e) {
    if (e.success) {
        alert('Success:\\n' +
            'Count: ' + e.users.length);
        for (var i = 0; i &lt; e.users.length; i++) {
            var user = e.users[i];
            alert('id: ' + user.id + '\\n' +
                'first name: ' + user.first_name + '\\n' +
                'last name: ' + user.last_name);
         }
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 */
Ti.Cloud.SocialIntegrations = {


    /**
     * <p>Associate an external account with an existing ACS user account.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudSocialIntegrationsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    externalAccountLink:function(parameters, callback) {
    },

    /**
     * <p>Login to ACS using an external account such as Facebook, Twitter,LinkedIn, etc.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudSocialIntegrationsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    externalAccountLogin:function(parameters, callback) {
    },

    /**
     * <p>Disassociate an external account from a ACS user account.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudSocialIntegrationsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    externalAccountUnlink:function(parameters, callback) {
    },

    /**
     * <p>Returns a list of the current user's Facebook friends who are also using this application.</p>
     * @param {Callback<CloudSocialIntegrationsResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    searchFacebookFriends:function(callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * 
 * @example Create a Status Example
 * <p>This example creates a status and checks the response.</p>
<pre><code>Cloud.Statuses.create({
    place_id: myPlaceId,
    message: 'What a great view!',
    photo: Ti.Filesystem.getFile('photo.jpg')
}, function (e) {
    if (e.success) {
        var status = e.statuses[0];
        alert('Success:\\n' +
            'id: ' + status.id + '\\n' +
            'place: ' + status.place.name);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Search Status Example
 * <p>This example requests information about a user's status and checks the response.</p>
<pre><code>Cloud.Statuses.search({
    user_id: someUserId
}, function (e) {
    if (e.success) {
        alert('Success:\\n' +
            'Count: ' + e.statuses.length);
        for (var i = 0; i &lt; e.statuses.length; i++) {
            var status = e.statuses[i];
            alert('id: ' + status.id + '\\n' +
                  'message: ' + status.message + '\\n' +
                  'updated_at: ' + status.updated_at);
        }
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Query Status Example
 * <p>This example requests information about statuses and checks the response.</p>
<pre><code>Cloud.Statuses.query({
    page: 1,
    per_page: 20,
    order: '-updated_at'
}, function (e) {
    if (e.success) {
        for (var i = 0; i &lt; e.statuses.length; i++) {
            var status = e.statuses[i];
            alert('Success:\\n' +
               'id: ' + status.id + '\\n' +
               'message: ' + status.message + '\\n' +
               'updated_at: ' + status.updated_at);
         }
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 */
Ti.Cloud.Statuses = {


    /**
     * <p>Creates a status for the currently logged in user.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudStatusesResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    create:function(parameters, callback) {
    },

    /**
     * <p>Retrieve a list of statuses with sorting and pagination.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudStatusesResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    query:function(parameters, callback) {
    },

    /**
     * <p>Retrieve the statuses for a user.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudStatusesResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    search:function(parameters, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * 
 * @example Create User Example
 * <p>This example creates a new user and checks the response.</p>
<pre><code>Cloud.Users.create({
    email: 'test@mycompany.com',
    first_name: 'test_firstname',
    last_name: 'test_lastname',
    password: 'test_password',
    password_confirmation: 'test_password'
}, function (e) {
    if (e.success) {
        var user = e.users[0];
        alert('Success:\\n' +
            'id: ' + user.id + '\\n' +
            'first name: ' + user.first_name + '\\n' +
            'last name: ' + user.last_name);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Log in User Example
 * <p>This example logs a user in and checks the response.</p>
<pre><code>Cloud.Users.login({
    login: 'test@mycompany.com',
    password: 'test_password'
}, function (e) {
    if (e.success) {
        var user = e.users[0];
        alert('Success:\\n' +
            'id: ' + user.id + '\\n' +
            'first name: ' + user.first_name + '\\n' +
            'last name: ' + user.last_name);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Show User Example
 * <p>This example requests information about a user and checks the response.</p>
<pre><code>Cloud.Users.show({
    user_id: savedUserInfo.id
}, function (e) {
    if (e.success) {
        var user = e.users[0];
        alert('Success:\\n' +
            'id: ' + user.id + '\\n' +
            'first name: ' + user.first_name + '\\n' +
            'last name: ' + user.last_name);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Show Current User Example
 * <p>This example requests information about the currently logged in user and checks the response.</p>
<pre><code>Cloud.Users.showMe(function (e) {
    if (e.success) {
        var user = e.users[0];
        alert('Success:\\n' +
            'id: ' + user.id + '\\n' +
            'first name: ' + user.first_name + '\\n' +
            'last name: ' + user.last_name);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Search for Users Example
 * <p>This example requests information about particular users and checks the response.</p>
<pre><code>Cloud.Users.search({
    q: 'test'
}, function (e) {
    if (e.success) {
        alert('Success:\\n' +
            'Count: ' + e.users.length);
        for (var i = 0; i &lt; e.users.length; i++) {
            var user = e.users[i];
            alert('id: ' + user.id + '\\n' +
                'first name: ' + user.first_name + '\\n' +
                'last name: ' + user.last_name);
         }
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Query for Users Example
 * <p>This example requests information about specific users and checks the response.</p>
<pre><code>Cloud.Users.query({
    page: 1,
    per_page: 10,
    where: {
        age: { '$gt': 28 },
        favorite_color: 'blue',
        first_name: 'joe'
    }
}, function (e) {
    if (e.success) {
        alert('Success:\\n' +
            'Count: ' + e.users.length);
        for (var i = 0; i &lt; e.users.length; i++) {
            var user = e.users[i];
            alert('id: ' + user.id + '\\n' +
                'first name: ' + user.first_name + '\\n' +
                'last name: ' + user.last_name);
         }
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Update User Example
 * <p>This example updates information about the currently logged in user and checks the response.</p>
<pre><code>Cloud.Users.update({
    email: 'joeuser@mycompany.com',
    first_name: 'joe',
    last_name: 'user',
    custom_fields: {
        favorite_color: 'blue',
        age: 25
    }
}, function (e) {
    if (e.success) {
        var user = e.users[0];
        alert('Success:\\n' +
            'id: ' + user.id + '\\n' +
            'first name: ' + user.first_name + '\\n' +
            'last name: ' + user.last_name);
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Logout User Example
 * <p>This example logs out the current user and checks the response.</p>
<pre><code>Cloud.Users.logout(function (e) {
    if (e.success) {
        alert('Success: Logged out');
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Remove User Example
 * <p>This example deletes the current user and checks the response.</p>
<pre><code>Cloud.Users.remove(function (e) {
    if (e.success) {
        alert('Success: Removed');
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 * 
 * @example Request Reset Password User Example
 * <p>This example requests a password reset for a user and checks the response.</p>
<pre><code>Cloud.Users.requestResetPassword({
    email: 'joeuser@mycompany.com'
}, function (e) {
    if (e.success) {
        alert('Success: Reset Request Sent');
    } else {
        alert('Error:\\n' +
            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));
    }
});
</code></pre>
 */
Ti.Cloud.Users = {


    /**
     * <p>Create a new user.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudUsersResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    create:function(parameters, callback) {
    },

    /**
     * <p>Log in a user.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudUsersResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    login:function(parameters, callback) {
    },

    /**
     * <p>Log out the current user.</p>
     * @param {Callback<CloudUsersResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    logout:function(callback) {
    },

    /**
     * <p>Retrieve a list of users with sorting and pagination.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudUsersResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    query:function(parameters, callback) {
    },

    /**
     * <p>Delete the current user.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudUsersResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(parameters, callback) {
    },

    /**
     * <p>Send an email to user to recover lost password.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudUsersResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    requestResetPassword:function(parameters, callback) {
    },

    /**
     * <p>Retrieve a list of users based on the specified search criteria.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudUsersResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    search:function(parameters, callback) {
    },

    /**
     * <p>Show public user information.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudUsersResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function(parameters, callback) {
    },

    /**
     * <p>Show both public and private information about the user currently logged in.</p>
     * @param {Callback<CloudUsersResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    showMe:function(callback) {
    },

    /**
     * <p>Update the current user.</p>
     * @param {Object} parameters <p>An ordinary JavaScript object which contains parameters to pass.</p>
     * @param {Callback<CloudUsersResponse>} callback <p>Callback function to execute when the method completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    update:function(parameters, callback) {
    }
};

/**
 * platforms: Android
 * @namespace <p>The MQTT protocol is a very lightweight, long lived connection to a server. It is perfect for keeping mobile devices
in connection with a server, while not significantly degrading their battery life.</p>
<p>In addition to communicating with an MQTT server, this module can also present tray notifications to the user.
Please refer to the {@link Ti.CloudPush.showTrayNotification} property to see more information
about this.</p>
<p>Note that this module is not included in the Titanium namespace, but it is bundled with the Titanium SDK as of
version 2.0.0. To use it, you must require it, like this:</p>
<pre><code>var CloudPush = require('ti.cloudpush');
</code></pre>
<p>This module must also be added to the modules section in your tiapp.xml. This can be done using the Modules list in
the Titanium Studio TiApp Editor, or by editing the XML directly and adding the following line to the modules
element:</p>
<pre><code>&lt;module platform="android"&gt;ti.cloudpush&lt;/module&gt;
</code></pre>
<p>Your app must prove that it is allowed to talk to ACS. This keeps your data secure by preventing anyone from
making requests to ACS that impersonate your app.</p>
<p>Titanium Studio will create a pair of keys (Development and Production) for each Titanium application depending on the
user preference specified during new project creation. This pair of keys will be stored in <code>tiapp.xml</code> and one of the
keys will be used during application build depending on the build type (development or production).</p>
<p>The supported properties in <code>tiapp.xml</code> are:</p>
<pre><code>&lt;property name="acs-api-key-development" type="string"&gt;YOUR DEVELOPMENT API KEY HERE&lt;/property&gt;

&lt;property name="acs-api-key-production" type="string"&gt;YOUR PRODUCTION API KEY HERE&lt;/property&gt;

&lt;property name="acs-api-key" type="string"&gt;YOUR API KEY HERE&lt;/property&gt;
</code></pre>
<p>The value for each setting that will be used is based on the following rules:</p>
<ul>
<li>If a deployment-specific setting is provided (production or development) then that value will be used for the current deployment environment.</li>
</ul>
<p><em>WARNING</em>: The default properties of this module are used until you set a property for the first time. Because the
properties are persisted to the device settings (via {@link Ti.App.Properties}), the most recent value you set will
always be used.</p>
 * 
 * @example Listening for Push Notifications
 * <p>This example lets the user choose if push notifications should be enabled, and listens for several events.
    var CloudPush = require('ti.cloudpush');
    CloudPush.retrieveDeviceToken({
        success: function deviceTokenSuccess(e) {
            Ti.API.info('Device Token: ' + e.deviceToken);
        },
        error: function deviceTokenError(e) {
            alert('Failed to register for push! ' + e.error);
        }
    });
    var win = Ti.UI.createWindow({
        layout: 'vertical',
        backgroundColor: 'white'
    });
    var enablePush = Ti.UI.createButton({
        title: 'Enable Push Notifications'
    });
    enablePush.addEventListener('click', function () {
        CloudPush.enabled = true;
    });
    win.add(enablePush);
    CloudPush.addEventListener('callback', function (evt) {
        alert(evt.payload);
    });
    CloudPush.addEventListener('trayClickLaunchedApp', function (evt) {
        Ti.API.info('Tray Click Launched App (app was not running)');
    });
    CloudPush.addEventListener('trayClickFocusedApp', function (evt) {
        Ti.API.info('Tray Click Focused App (app was already running)');
    });
    win.open();</p>
 */
Ti.CloudPush = {

    /**
     * <p>Whether or not this device will receive push notifications.</p>
     * @type Boolean
     * @since 2.0.0 (Android)
     */
    enabled:null,

    /**
     * <p>Whether or not your application is brought to the foreground whenever a new push is received.</p>
     * @type Boolean
     * @since 2.0.0 (Android)
     */
    focusAppOnPush:null,

    /**
     * <p>Whether or not clicking the tray notification will bring your application to the foreground.</p>
     * @type Boolean
     * @since 2.0.0 (Android)
     */
    showAppOnTrayClick:null,

    /**
     * <p>Whether or not to show a tray notification when a new push is received.</p>
     * @type Boolean
     * @since 2.0.0 (Android)
     */
    showTrayNotification:null,

    /**
     * <p>Whether or not to show tray notifications when your application is in the foreground.</p>
     * @type Boolean
     * @since 2.0.0 (Android)
     */
    showTrayNotificationsWhenFocused:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 2.0.0 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 2.0.0 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.CloudPush.enabled} property.</p>
     * @returns Boolean
     * @since 2.0.0 (Android)
     */
    getEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.CloudPush.focusAppOnPush} property.</p>
     * @returns Boolean
     * @since 2.0.0 (Android)
     */
    getFocusAppOnPush:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.CloudPush.showAppOnTrayClick} property.</p>
     * @returns Boolean
     * @since 2.0.0 (Android)
     */
    getShowAppOnTrayClick:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.CloudPush.showTrayNotification} property.</p>
     * @returns Boolean
     * @since 2.0.0 (Android)
     */
    getShowTrayNotification:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.CloudPush.showTrayNotificationsWhenFocused} property.</p>
     * @returns Boolean
     * @since 2.0.0 (Android)
     */
    getShowTrayNotificationsWhenFocused:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 2.0.0 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Asynchronously retrieves the application specific device token.</p>
     * @param {CloudPushNotificationConfig} config <p>Dictionary specifying token retrieval related options.</p>
     * @since 2.0.0 (Android)
     */
    retrieveDeviceToken:function(config) {
    },

    /**
     * <p>Sets the value of the {@link Ti.CloudPush.enabled} property.</p>
     * @param {Boolean} enabled <p>New value for the property.</p>
     * @since 2.0.0 (Android)
     */
    setEnabled:function(enabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.CloudPush.focusAppOnPush} property.</p>
     * @param {Boolean} focusAppOnPush <p>New value for the property.</p>
     * @since 2.0.0 (Android)
     */
    setFocusAppOnPush:function(focusAppOnPush) {
    },

    /**
     * <p>Sets the value of the {@link Ti.CloudPush.showAppOnTrayClick} property.</p>
     * @param {Boolean} showAppOnTrayClick <p>New value for the property.</p>
     * @since 2.0.0 (Android)
     */
    setShowAppOnTrayClick:function(showAppOnTrayClick) {
    },

    /**
     * <p>Sets the value of the {@link Ti.CloudPush.showTrayNotification} property.</p>
     * @param {Boolean} showTrayNotification <p>New value for the property.</p>
     * @since 2.0.0 (Android)
     */
    setShowTrayNotification:function(showTrayNotification) {
    },

    /**
     * <p>Sets the value of the {@link Ti.CloudPush.showTrayNotificationsWhenFocused} property.</p>
     * @param {Boolean} showTrayNotificationsWhenFocused <p>New value for the property.</p>
     * @since 2.0.0 (Android)
     */
    setShowTrayNotificationsWhenFocused:function(showTrayNotificationsWhenFocused) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Ti.Codec = {

    /**
     * <p>Big Endian (network) byte order, i.e. most significant byte first.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    BIG_ENDIAN:null,

    /**
     * <p>The {@link http://en.wikipedia.org/wiki/ASCII}</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    CHARSET_ASCII:null,

    /**
     * <p>The {@link http://en.wikipedia.org/wiki/ISO/IEC_8859}</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    CHARSET_ISO_LATIN_1:null,

    /**
     * <p>The {@link http://en.wikipedia.org/wiki/UTF}</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    CHARSET_UTF16:null,

    /**
     * <p>The {@link http://en.wikipedia.org/wiki/UTF} with Big Endian byte order</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    CHARSET_UTF16BE:null,

    /**
     * <p>The {@link http://en.wikipedia.org/wiki/UTF} with Little Endian byte order</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    CHARSET_UTF16LE:null,

    /**
     * <p>The {@link http://en.wikipedia.org/wiki/UTF}</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    CHARSET_UTF8:null,

    /**
     * <p>Little Endian byte order, i.e. least significant byte first.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    LITTLE_ENDIAN:null,

    /**
     * <p>8 bit integer encoding type</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    TYPE_BYTE:null,

    /**
     * <p>64 bit double precision floating-point type</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    TYPE_DOUBLE:null,

    /**
     * <p>32 bit single precision floating-point type</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    TYPE_FLOAT:null,

    /**
     * <p>32 bit integer encoding type</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    TYPE_INT:null,

    /**
     * <p>64 bit integer encoding type</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    TYPE_LONG:null,

    /**
     * <p>16 bit integer encoding type</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    TYPE_SHORT:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Decodes the <code>source</code> buffer (starting at the optional <code>position</code>) using the passed in data <code>type</code>.
Throws an Exception if <code>source</code> is null, or <code>position</code> is greater than <code>source.length</code></p>
     * @param {Dictionary<DecodeNumberDict>} options <p>decodeNumber named options</p>
     * @returns Number The Number decoded from `source`.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    decodeNumber:function(options) {
    },

    /**
     * <p>Decodes the <code>source</code> buffer into a String starting at <code>position</code>, with <code>length</code> bytes,
using the supplied character set <code>charset</code>. Throws an Exception if <code>charset</code> is not
a valid character set, <code>source</code> is null, or either <code>position</code>, <code>length</code>, or
<code>position</code>+<code>length</code> is greater than <code>source.length</code>.</p>
     * @param {Dictionary<DecodeStringDict>} options <p>decodeString named options</p>
     * @returns String The decoded string
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    decodeString:function(options) {
    },

    /**
     * <p>Encodes the Number <code>source</code> into <code>dest</code> using the passed in data <code>type</code>.</p>
     * @param {Dictionary<EncodeNumberDict>} options <p>encodeNumber named options</p>
     * @returns Number The position after the encoded number in `dest`.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    encodeNumber:function(options) {
    },

    /**
     * <p>Encodes the String <code>source</code> into <code>dest</code> using <code>charset</code>.
Throws an Exception if <code>charset</code> is not a valid character set,
<code>source</code> is null, or either <code>sourcePosition</code>, <code>sourceLength</code>, or
<code>sourcePosition</code>+<code>sourceLength</code> is greater than <code>source.length</code>.</p>
     * @param {Dictionary<EncodeStringDict>} options <p>encodeString named options</p>
     * @returns Number The position after the encoded String inside `dest`.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    encodeString:function(options) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Get the OS native byte order (either {@link Ti.Codec.BIG_ENDIAN} or {@link Ti.Codec.LITTLE_ENDIAN})</p>
     * @returns Number The OS native byte order
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getNativeByteOrder:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>On Android, contacts are currently read-only, and so methods such as <code>createPerson</code> and<code>removePerson</code> are not supported.</p>
<p>See examples for more information.</p>
 * 
 * @example Query Existing System Address Book Records
 * <p>Output to the console all properties of all people.</p>
<pre><code>var singleValue = [
  'recordId', 'firstName', 'middleName', 'lastName', 'fullName', 'prefix', 'suffix', 
  'nickname', 'firstPhonetic', 'middlePhonetic', 'lastPhonetic', 'organization', 
  'jobTitle', 'department', 'note', 'birthday', 'created', 'modified', 'kind'
];
var multiValue = [
  'email', 'address', 'phone', 'instantMessage', 'relatedNames', 'date', 'url'
];
var people = Ti.Contacts.getAllPeople();
Ti.API.info('Total contacts: ' + people.length);
for (var i=0, ilen=people.length; i&lt;ilen; i++){
  Ti.API.info('---------------------');
  var person = people[i];
  for (var j=0, jlen=singleValue.length; j&lt;jlen; j++){
    Ti.API.info(singleValue[j] + ': ' + person[singleValue[j]]);
  }
  for (var j=0, jlen=multiValue.length; j&lt;jlen; j++){
    Ti.API.info(multiValue[j] + ': ' + JSON.stringify(person[multiValue[j]]));
  }
}
</code></pre>
 * 
 * @example Add New System Address Book Records
 * <p>Create two new records in the system address book. Note that the {@link Ti.Contacts.Person} 
object is queried in the same way that it is created (as shown in previous example.)</p>
<pre><code>Ti.API.info('Saving contact...');
Ti.Contacts.createPerson({
  firstName: 'Paul',
  lastName: 'Dowsett',
  address:{
    work:[
      {
        CountryCode: 'gb', // determines how the address is displayed
        Street: '200 Brook Drive\nGreen Park',
        City: 'Reading',
        County: 'Berkshire',
        Country: 'England',
        ZIP: 'RG2 6UB'
      },
      {
        CountryCode: 'gb', // determines how the address is displayed
        Street: '1 St Pauls Road\nClerkenwell',
        City: 'City of London',
        State: 'London',
        Country: 'England',
        ZIP: 'EC1 1AA'
      }
    ],
    home:[
      {
        CountryCode: 'gb', // determines how the address is displayed
        Street: '2 Boleyn Court',
        City: 'London',
        State: 'Greenwich',
        Country: 'England',
        ZIP: 'SE10'
      }
    ]
  },
  birthday: '2012-01-01T12:00:00.000+0000',
  instantMessage:{
    home:[
      {
        service: 'AIM',
        username: 'leisureAIM'
      },
      {
        service: 'MSN',
        username: 'no_paul_here@msn.com'
      }
    ],
    work:[
      {
        service: 'AIM',
        username: 'seriousAIM'
      }
    ]
  },
  organization: 'Appcelerator',
  phone:{
    mobile: ['07900 000001', '07900 000002'],
    work: ['+44 (0)118 925 6128', '+44 (0)118 000 0000']
  },
  url:{
    homepage: ['www.google.com'],
    work: ['www.appcelerator.com', 'www.example.com']
  }
});
Ti.API.info('Contact saved');

Ti.API.info('Saving contact...');
var workAddress1 = {
  'CountryCode': 'us',
  'Street':  '440 N. Bernardo Avenue',
  'City': 'Mountain View',
  'State': 'California',
  'Country': 'United States',
  'ZIP': '94043'
};

Ti.Contacts.createPerson({
  firstName:'Arthur',
  lastName:'Evans',
  address:{
    'work':[workAddress1]
  }
});
Ti.API.info('Contact saved');
</code></pre>
 */
Ti.Contacts = {

    /**
     * <p>Specifies that a contact is an organization.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    CONTACTS_KIND_ORGANIZATION:null,

    /**
     * <p>Specifies that a contact is a person.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    CONTACTS_KIND_PERSON:null,

    /**
     * <p>Specifies that group members will be sorted by first name.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    CONTACTS_SORT_FIRST_NAME:null,

    /**
     * <p>Specifies that group members will be sorted by last name.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    CONTACTS_SORT_LAST_NAME:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.Contacts.Group}.</p>
     * @param {Dictionary<Ti.Contacts.Group>} parameters <p>Properties to set on a new object, including any in {@link Ti.Contacts.Group} except 
those marked as non-creation or read-only.</p>
     * @returns Ti.Contacts.Group
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    createGroup:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.Contacts.Person}, and commits all pending 
changes to the underlying contacts database.</p>
     * @param {Dictionary<Ti.Contacts.Person>} parameters <p>Properties to set on a new object, including any in {@link Ti.Contacts.Person} except 
those marked as non-creation or read-only.</p>
     * @returns Ti.Contacts.Person
     * @since 0.8 (iPad), 0.8 (iPhone)
     */
    createPerson:function(parameters) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets all groups.</p>
     * @returns Array<Ti.Contacts.Group>
     * @since 0.8 (iPad), 0.8 (iPhone)
     */
    getAllGroups:function() {
    },

    /**
     * <p>Gets all people, unless a limit is specified.</p>
     * @param {Number} limit <p>Maximum number of people. Android only.</p>
     * @returns Array<Ti.Contacts.Person>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAllPeople:function(limit) {
    },

    /**
     * <p>Gets the group with the specified identifier.</p>
     * @param {Number} id <p>Group identifier.</p>
     * @returns Ti.Contacts.Group
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getGroupByID:function(id) {
    },

    /**
     * <p>Gets people with a <code>firstName</code>, <code>middleName</code> or <code>lastName</code> field, or a combination 
of these fields, that match the specified name.</p>
     * @param {String} name <p>Name to match.</p>
     * @returns Array<Ti.Contacts.Person>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getPeopleWithName:function(name) {
    },

    /**
     * <p>Gets the person with the specified identifier.</p>
     * @param {Number} id <p>Contact identifier.</p>
     * @returns Ti.Contacts.Person
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getPersonByID:function(id) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Removes a group from the address book.</p>
     * @param {Ti.Contacts.Group} group <p>Contact group.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removeGroup:function(group) {
    },

    /**
     * <p>Removes a contact from the address book.</p>
     * @param {Ti.Contacts.Person} person <p>Contact.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removePerson:function(person) {
    },

    /**
     * <p>Reverts all changes made by the previous save to the address book.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    revert:function() {
    },

    /**
     * <p>Commits all pending changes to the underlying contacts database.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    save:function() {
    },

    /**
     * <p>Displays a picker that allows a person to be selected.</p>
     * @param {showContactsParams} params <p>Argument containing parameters for this method. Optional on Android.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    showContacts:function(params) {
    }
};

/**
 * platforms: iPhone, iPad
 * @namespace <p>See examples in {@link Ti.Contacts} for more information.</p>
 */
Ti.Contacts.Group = function() {
};
Ti.Contacts.Group.prototype = {

    /**
     * <p>Name of this group.</p>
     * @type String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    name:null,

    /**
     * <p>Record identifier of the group. Single value.</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    recordId:null,


    /**
     * <p>Adds a person to this group.</p>
     * @param {Ti.Contacts.Person} person <p>Person to add.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    add:function(person) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Group.name} property.</p>
     * @returns String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Group.recordId} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getRecordId:function() {
    },

    /**
     * <p>Gets people that are members of this group.</p>
     * @returns Array<Ti.Contacts.Person>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    members:function() {
    },

    /**
     * <p>Removes a person from this group.</p>
     * @param {Ti.Contacts.Person} person <p>Person to remove.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    remove:function(person) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Group.name} property.</p>
     * @param {String} name <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setName:function(name) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Group.recordId} property.</p>
     * @param {Number} recordId <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setRecordId:function(recordId) {
    },

    /**
     * <p>Gets people that are members of this group, sorted in the specified order.</p>
     * @param {Number} sortBy <p>Method for sorting. One of 
{@link Ti.Contacts.CONTACTS_SORT_FIRST_NAME}, 
or {@link Ti.Contacts.CONTACTS_SORT_LAST_NAME}.</p>
     * @returns Array<Ti.Contacts.Person>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    sortedMembers:function(sortBy) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>A person object is created using {@link Ti.Contacts.createPerson}.</p>
<p>The following two kinds of properties exist for this object:</p>
<ul>
<li>single value - contains either a <code>string</code> or <code>number</code> type value, an array of <code>string</code> type 
values, or <code>null</code> if unset.</li>
<li>multi-value - contains a dictionary with typical keys of <code>home</code>, <code>work</code> and/or <code>other</code>. Each 
key contains either a <code>string</code> type value, an array of <code>string</code> type values, or a dictionary 
containing key/value pairs with <code>string</code> type values.</li>
</ul>
<h4>Adding and Modifying Properties</h4>
<p>Support for adding and modifying properties is currently only supported on iOS.</p>
<h4>Keys as Address Book UI Labels</h4>
<p>Keys act as labels in the address book user interface.</p>
<p>Although there is limited support for custom, arbitrarily-named, keys when used with multi-value 
properties, there is no support them with single value properties.</p>
<p>On iOS, creating custom keys is not recommended, and will lead to undefined results.</p>
<p>If a label has been created by the user of the device and used with a multi-value property, it 
will exist as a key with the same name.</p>
<p>See examples in {@link Ti.Contacts} for more information.</p>
 */
Ti.Contacts.Person = function() {
};
Ti.Contacts.Person.prototype = {

    /**
     * <p>Addresses for the person. Multi-value. Read-only on Android.</p>
     * @type Dictionary
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    address:null,

    /**
     * <p>Date of birth of the person. Single value.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    birthday:null,

    /**
     * <p>Date and time that the person record was created. Single value.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    created:null,

    /**
     * <p>Dates associated with the person. Multi-value.</p>
     * @type Dictionary
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    date:null,

    /**
     * <p>Department of the person. Single value.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    department:null,

    /**
     * <p>Email addresses for the person. Multi-value. Read-only on Android.</p>
     * @type Dictionary
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    email:null,

    /**
     * <p>First name of the person. Single value.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    firstName:null,

    /**
     * <p>Phonetic first name of the person.  Single value.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    firstPhonetic:null,

    /**
     * <p>Localized full name of the person. Single value. Read-only on Android.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fullName:null,

    /**
     * <p>Record identifier of the person. Single value.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    id:null,

    /**
     * <p>Image for the person. Single value.</p>
     * @type Ti.Blob
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    image:null,

    /**
     * <p>Instant messenger names of the person. Multi-value.</p>
     * @type Dictionary
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    instantMessage:null,

    /**
     * <p>Job title of the person. Single value.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    jobTitle:null,

    /**
     * <p>Determines the type of information the person record contains; either person or organization. 
Read-only on Android.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    kind:null,

    /**
     * <p>Last name of the person. Single value.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    lastName:null,

    /**
     * <p>Phonetic last name of the person. Single value.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    lastPhonetic:null,

    /**
     * <p>Middle name of the person. Single value.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    middleName:null,

    /**
     * <p>Phonetic middle name of the person. Single value.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    middlePhonetic:null,

    /**
     * <p>Date and time that the person record was last modified. Single value.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    modified:null,

    /**
     * <p>Nickname of the person. Single value.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    nickname:null,

    /**
     * <p>Notes for the person. Single value.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    note:null,

    /**
     * <p>Organization to which the person belongs. Single value.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    organization:null,

    /**
     * <p>Phone numbers for the person. Multi-value. Read-only on Android.</p>
     * @type Dictionary
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    phone:null,

    /**
     * <p>Prefix for the person. Single value.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    prefix:null,

    /**
     * <p>Record identifier of the person. Single value.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    recordId:null,

    /**
     * <p>Names of people to which the person is related. Multi-value.</p>
     * @type Dictionary
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    relatedNames:null,

    /**
     * <p>Suffix for the person. Single value. Read-only on Android.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    suffix:null,

    /**
     * <p>URLs of webpages associated with the person. Multi-value.</p>
     * @type Dictionary
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    url:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.address} property.</p>
     * @returns Dictionary
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAddress:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.birthday} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBirthday:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.created} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getCreated:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.date} property.</p>
     * @returns Dictionary
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getDate:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.department} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getDepartment:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.email} property.</p>
     * @returns Dictionary
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getEmail:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.firstName} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getFirstName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.firstPhonetic} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getFirstPhonetic:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.fullName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getFullName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.id} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getId:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.image} property.</p>
     * @returns Ti.Blob
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.instantMessage} property.</p>
     * @returns Dictionary
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getInstantMessage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.jobTitle} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getJobTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.kind} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getKind:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.lastName} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLastName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.lastPhonetic} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLastPhonetic:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.middleName} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getMiddleName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.middlePhonetic} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getMiddlePhonetic:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.modified} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getModified:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.nickname} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getNickname:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.note} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNote:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.organization} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getOrganization:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.phone} property.</p>
     * @returns Dictionary
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getPhone:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.prefix} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getPrefix:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.recordId} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getRecordId:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.relatedNames} property.</p>
     * @returns Dictionary
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getRelatedNames:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.suffix} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getSuffix:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Contacts.Person.url} property.</p>
     * @returns Dictionary
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getUrl:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.address} property.</p>
     * @param {Dictionary} address <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setAddress:function(address) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.birthday} property.</p>
     * @param {String} birthday <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBirthday:function(birthday) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.date} property.</p>
     * @param {Dictionary} date <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setDate:function(date) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.department} property.</p>
     * @param {String} department <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setDepartment:function(department) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.email} property.</p>
     * @param {Dictionary} email <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setEmail:function(email) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.firstName} property.</p>
     * @param {String} firstName <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setFirstName:function(firstName) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.firstPhonetic} property.</p>
     * @param {String} firstPhonetic <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setFirstPhonetic:function(firstPhonetic) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.id} property.</p>
     * @param {Number} id <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setId:function(id) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.image} property.</p>
     * @param {Ti.Blob} image <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setImage:function(image) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.instantMessage} property.</p>
     * @param {Dictionary} instantMessage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setInstantMessage:function(instantMessage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.jobTitle} property.</p>
     * @param {String} jobTitle <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setJobTitle:function(jobTitle) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.kind} property.</p>
     * @param {Number} kind <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setKind:function(kind) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.lastName} property.</p>
     * @param {String} lastName <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLastName:function(lastName) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.lastPhonetic} property.</p>
     * @param {String} lastPhonetic <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLastPhonetic:function(lastPhonetic) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.middleName} property.</p>
     * @param {String} middleName <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setMiddleName:function(middleName) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.middlePhonetic} property.</p>
     * @param {String} middlePhonetic <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setMiddlePhonetic:function(middlePhonetic) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.nickname} property.</p>
     * @param {String} nickname <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setNickname:function(nickname) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.note} property.</p>
     * @param {String} note <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setNote:function(note) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.organization} property.</p>
     * @param {String} organization <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setOrganization:function(organization) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.phone} property.</p>
     * @param {Dictionary} phone <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setPhone:function(phone) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.recordId} property.</p>
     * @param {Number} recordId <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setRecordId:function(recordId) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.relatedNames} property.</p>
     * @param {Dictionary} relatedNames <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setRelatedNames:function(relatedNames) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.suffix} property.</p>
     * @param {String} suffix <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setSuffix:function(suffix) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Contacts.Person.url} property.</p>
     * @param {Dictionary} url <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setUrl:function(url) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 */
Ti.Database = {

    /**
     * <p>Constant for requesting a column's value returned in double form.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    FIELD_TYPE_DOUBLE:null,

    /**
     * <p>Constant for requesting a column's value returned in float form.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    FIELD_TYPE_FLOAT:null,

    /**
     * <p>Constant for requesting a column's value returned in integer form.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    FIELD_TYPE_INT:null,

    /**
     * <p>Constant for requesting a column's value returned in string form.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    FIELD_TYPE_STRING:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Installs an SQLite database to device's internal storage.</p>
     * @param {String} path <p>Path and filename of the database file to copy to internal storage.
File location is relative to the script's context unless an absolute
path, such as one constructed with a {@link Ti.Filesystem} 
constant, is used.</p>
     * @param {String} dbName <p>Destination filename, which will subsequently be passed to
{@link Ti.Database.open}.</p>
     * @returns Ti.Database.DB
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    install:function(path, dbName) {
    },

    /**
     * <p>Opens an SQLite database.</p>
     * @param {String} dbName <p>The dbname previously passed to {@link Ti.Database.install}. On Android, 
an absolute path to the file, including one that is constructed with a 
{@link Ti.Filesystem} constant, may be used.</p>
     * @returns Ti.Database.DB
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    open:function(dbName) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 */
Ti.Database.DB = function() {
};
Ti.Database.DB.prototype = {

    /**
     * <p>A <code>File</code> object representing the file where this database is stored. Must only be used for 
setting file properties.</p>
     * @type Ti.Filesystem.File
     * @since 1.9 (iPhone), 1.9 (iPad)
     */
    file:null,

    /**
     * <p>The identifier of the last populated row.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    lastInsertRowId:null,

    /**
     * <p>The name of the database.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    name:null,

    /**
     * <p>The number of rows affected by the last query.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    rowsAffected:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Closes the database and releases resources from memory. Once closed, this instance is no 
longer valid and should not be used. On iOS, also closes all {@link Ti.Database.ResultSet} 
instances that exist.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    close:function() {
    },

    /**
     * <p>Executes an SQL statement against the database and returns a <code>ResultSet</code>.</p>
     * @param {String} sql <p>SQL to execute. May include placeholders for parameter substitution.</p>
     * @param {String|Array<String>|Object|Array<Object>} vararg <p>Either a variable ordered list of zero or more values, or an array of values,
to be substituted with the respective <code>?</code> placeholder of the query.</p>
     * @returns Ti.Database.ResultSet
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    execute:function(sql, vararg) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Database.DB.file} property.</p>
     * @returns Ti.Filesystem.File
     * @since 1.9 (iPhone), 1.9 (iPad)
     */
    getFile:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Database.DB.lastInsertRowId} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    getLastInsertRowId:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Database.DB.name} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    getName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Database.DB.rowsAffected} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    getRowsAffected:function() {
    },

    /**
     * <p>Removes the database files for this instance from disk. WARNING: this is a destructive 
operation and cannot be reversed. All data in the database will be lost; use with caution.</p>
     * @since 0.1 (Android)
     */
    remove:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Database.DB.lastInsertRowId} property.</p>
     * @param {Number} lastInsertRowId <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    setLastInsertRowId:function(lastInsertRowId) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Database.DB.name} property.</p>
     * @param {String} name <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    setName:function(name) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Database.DB.rowsAffected} property.</p>
     * @param {Number} rowsAffected <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    setRowsAffected:function(rowsAffected) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>A result set represents the results returned by a database query.</p>
<p>The {@link Ti.Database.ResultSet.rowCount} property identifies the number of
rows in the result set. The <code>ResultSet</code> object maintains an internal record of the 
current row. As shown in the example, you can use the 
{@link Ti.Database.ResultSet.next} method to iterate through the rows in the set.</p>
<p>Use the {@link Ti.Database.ResultSet.field} or
{@link Ti.Database.ResultSet.fieldByName} methods to query the fields for
the current row.</p>
<h4>Platform Implementation Notes</h4>
<p>Note that <code>fieldCount</code> is exposed as a <em>method</em> on iOS, but as a <em>property</em> on
Android. This is a known parity issue
({@link https://jira.appcelerator.org/browse/TIMOB}).</p>
 * 
 * @example Using ResultSet
 * <p>The following code will create a database and execute SQL statements that will create a 
table, insert data into it, query the table and iterate through the returned
<code>ResultSet</code>.</p>
<pre><code>var db = Ti.Database.open('mydb1Installed');
db.execute('CREATE TABLE IF NOT EXISTS people (name TEXT, phone_number TEXT, city TEXT)');
db.execute('DELETE FROM people');

var thisName = 'Arthur';
var thisPhoneNo = '1-617-000-0000';
var thisCity = 'Mountain View';
db.execute('INSERT INTO people (name, phone_number, city) VALUES (?, ?, ?)', thisName, thisPhoneNo, thisCity);

var personArray = ['Paul','020 7000 0000', 'London'];
db.execute('INSERT INTO people (name, phone_number, city) VALUES (?, ?, ?)', personArray);

var rows = db.execute('SELECT rowid,name,phone_number,city FROM people');
db.close();

Ti.API.info('Row count: ' + rows.rowCount);
var fieldCount;
// fieldCount is a property on Android.
if (Ti.Platform.name === 'android') {
    fieldCount = rows.fieldCount;
} else {
    fieldCount = rows.fieldCount();
}
Ti.API.info('Field count: ' + fieldCount);

while (rows.isValidRow()){
  Ti.API.info('Person ---&gt; ROWID: ' + rows.fieldByName('rowid') + ', name:' + rows.field(1) + ', phone_number: ' + rows.fieldByName('phone_number') + ', city: ' + rows.field(3));
  rows.next();
}
rows.close();
</code></pre>
<p>Note that the above <code>SELECT</code> query contains the {@link http://www.sqlite.org/lang_createtable.html#rowid}
field, which contains an SQLite-specific unique identifier for each row.</p>
 */
Ti.Database.ResultSet = function() {
};
Ti.Database.ResultSet.prototype = {

    /**
     * <p>The number of columns in this result set.</p>
     * @type Number
     * @since 0.1 (Android)
     */
    fieldCount:null,

    /**
     * <p>The number of rows in this result set.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    rowCount:null,

    /**
     * <p>Indicates whether the current row is valid.</p>
     * @type Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    validRow:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Closes this result set and release resources. Once closed, the result set must no longer 
be used.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    close:function() {
    },

    /**
     * <p>Retrieves the value for the specified field in the current row, 
and casts it to the specified type (String, Integer, Float or Double.)</p>
     * @param {Number} index <p>A zero-based column index.</p>
     * @param {Number} type <p>One of ({@link Ti.Database.FIELD_TYPE_STRING} | {@link Ti.Database.FIELD_TYPE_INT} | 
{@link Ti.Database.FIELD_TYPE_FLOAT} | {@link Ti.Database.FIELD_TYPE_DOUBLE})</p>
     * @returns String
     * @returns Number
     * @returns Ti.Blob
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    field:function(index, type) {
    },

    /**
     * <p>Retrieves the value for the specified field in the current row, 
and casts it to the specified type (String, Integer, Float or Double.)</p>
     * @param {String} name <p>A column name or alias used in the SQL query.</p>
     * @param {Number} type <p>One of ({@link Ti.Database.FIELD_TYPE_STRING} | {@link Ti.Database.FIELD_TYPE_INT} | 
{@link Ti.Database.FIELD_TYPE_FLOAT} | {@link Ti.Database.FIELD_TYPE_DOUBLE})</p>
     * @returns String
     * @returns Number
     * @returns Ti.Blob
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    fieldByName:function(name, type) {
    },

    /**
     * <p>Returns the number of columns in this result set.</p>
     * @returns Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    fieldCount:function() {
    },

    /**
     * <p>Returns the field name for the specified field index.</p>
     * @param {Number} index <p>A zero-based column index for the field.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    fieldName:function(index) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Database.ResultSet.fieldCount} property.</p>
     * @returns Number
     * @since 0.1 (Android)
     */
    getFieldCount:function() {
    },

    /**
     * <p>Returns the field name for the specified field index.</p>
     * @param {Number} index <p>A zero-based column index for the field.</p>
     * @returns String
     * @since 0.1 (Android)
     */
    getFieldName:function(index) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Database.ResultSet.rowCount} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    getRowCount:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Database.ResultSet.validRow} property.</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getValidRow:function() {
    },

    /**
     * <p>Returns whether the current row is valid.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    isValidRow:function() {
    },

    /**
     * <p>Advances to the next row in the result set and returns <code>true</code> if one exists, 
or <code>false</code> otherwise.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    next:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 */
Ti.Event = function() {
};
Ti.Event.prototype = {

    /**
     * <p>Source object that fired the event.</p>
     * @type Object
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    source:null,

    /**
     * <p>Name of the event fired.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    type:null,



};

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>The Facebook module is used for connecting your application with 
Facebook. This module supports the following features:</p>
<ul>
<li>
<p>Logging in to Facebook and authorizing your application.</p>
</li>
<li>
<p>Making requests through the Facebook Graph API using
  {@link Ti.Facebook.requestWithGraphPath}.</p>
</li>
<li>
<p>Making requests through the legacy Facebook REST API using
  {@link Ti.Facebook.request}. </p>
</li>
<li>
<p>Posting Facebook dialogs.</p>
</li>
</ul>
<h4>Facebook Login and Authorization</h4>
<p>To use Facebook, a user must log in to Facebook and explicitly authorize the
application to perform certain actions, such as accessing profile information or 
posting status messages. </p>
<p>There are two ways to initiate the login process:</p>
<ul>
<li>
<p>Call {@link Ti.Facebook.authorize} prompt the user to login and authorize
  the application.</p>
</li>
<li>
<p>Create a Facebook {@link Ti.Facebook.LoginButton} to allow the user to 
  log in if desired.</p>
</li>
</ul>
<p>Which approach you take depends on your UI and how central Facebook is to your
application.</p>
<p>Before calling <code>authorize</code> or creating a login button, you must set the
{@link Ti.Facebook.appid} and {@link Ti.Facebook.permissions}
properties. </p>
<p>To create a Facebook App ID, go to the Facebook Developer App:</p>
<p>{@link https://developers.facebook.com/apps}</p>
<p>For a complete list of permissions, see the 
{@link http://developers.facebook.com/docs/reference/api/permissions/}</p>
<h4>Facebook Graph API</h4>
<p>The Facebook Graph API is the preferred method for getting information about a user's friends, 
news feed, and so on. Each object in the Facebook social graph is represented by a
graph API <em>object</em>, such as a user, photo, or status message. </p>
<p>The Graph API allows you to make requests on behalf of the user, such as posting a
picture or status message. </p>
<p>Use the {@link Ti.Facebook.requestWithGraphPath} method to make a 
request to the Graph API.</p>
<p>For details on each of the Graph API objects and the supported operations, see the 
{@link http://developers.facebook.com/docs/reference/api/}.</p>
<h4>Facebook REST API</h4>
<p>The Facebook REST API is in the process of being deprecated, and should not be used 
unless your application relies on an API that doesn't exist in the Graph API.</p>
<p>Use the {@link Ti.Facebook.request} method to make a request to the REST API.</p>
<p>For details on the REST API, see the 
{@link http://developers.facebook.com/docs/reference/rest/}.</p>
<h4>Facebook Dialogs</h4>
<p>Facebook dialogs are standard user-interface components for used to prompt users to
interact with Facebook in a specific way, such as:</p>
<ul>
<li>
<p>Sending an application request</p>
</li>
<li>
<p>Sending a status update</p>
</li>
<li>
<p>Adding a friend</p>
</li>
</ul>
<p>Because dialogs require user interaction, they do not require Facebook permissions.</p>
<p>For details on different dialogs see the 
{@link http://developers.facebook.com/docs/reference/dialogs/}.<br />
</p>
<h4>iOS Platform Implementation Notes</h4>
<p>Due to how the facebook login process works on iOS, your app will need to have the following 
in your tiapp.xml if you target those platforms:</p>
<pre><code>&lt;property name="ti.facebook.appid"&gt;your_facebook_app_id_here&lt;/property &gt;
</code></pre>
<p>You must still set Ti.Facebook.appid within your app itself to use the facebook module.<br />
This property is used only for configuring your app to interface with the facebook 
login process.</p>
<h4>Previous Versions</h4>
<p>Titanium Mobile SDK 1.6.0 marked a significant change for this module.  Older versions of 
the module were not compatible with the new Graph API.  Applications written for the 
pre-1.6.0 version of this module will <strong>not</strong> work with the 1.6.0 and higher versions.<br />
Nor is the code shown in the examples here backwards-compatible with pre-1.6.0 Titanium 
Mobile SDK.</p>
 * 
 * @example Authorize
 * <p>Shows official Facebook dialog for logging in the user and prompting the user to approve your 
requested permissions.  Listen for the module's {@link Ti.Facebook.login} event to 
determine whether the request succeeded.</p>
<pre><code>Ti.Facebook.appid = '[YOUR APPID]';
Ti.Facebook.permissions = ['publish_stream']; // Permissions your app needs
Ti.Facebook.addEventListener('login', function(e) {
    if (e.success) {
        alert('Logged In');
    } else if (e.error) {
        alert(e.error);
    } else if (e.cancelled) {
        alert("Canceled");
    }
});
Ti.Facebook.authorize();
</code></pre>
 * 
 * @example Logout
 * <p>Logout the user and forget the authorization token.  The 
{@link Ti.Facebook.logout} event is fired after the user is logged out.</p>
<pre><code>Ti.Facebook.addEventListener('logout', function(e) {
    alert('Logged out');
});
Ti.Facebook.logout();
</code></pre>
 * 
 * @example Authorize/Logout Using the Facebook LoginButton
 * <p>You can use the the Facebook-themed {@link Ti.Facebook.LoginButton}
to allow the user to log in as required. The button updates its state automatically depending 
on whether the user is logged in or not.  When the user is logged in, then the button 
will show "Logout", and vice-versa.</p>
<p>Note that you don't need to set a click listener or anything else on the button. 
It "just works".  To be notified when the user logs in or out, add event listeners for the 
{@link Ti.Facebook.login} and {@link Ti.Facebook.logout} events
provided by the Titanium Facebook module, as in the example below.</p>
<pre><code>// Don't forget to set your appid and requested permissions, else the login button
// won't be effective.
Ti.Facebook.appid = '[your appid]';
Ti.Facebook.permissions = ['publish_stream'];
Ti.Facebook.addEventListener('login', function(e) {
    if (e.success) {
        alert('Logged in');
    }
});
Ti.Facebook.addEventListener('logout', function(e) {
    alert('Logged out');
});

// Add the button.  Note that it doesn't need a click event listener.
win2.add(Ti.Facebook.createLoginButton({
    top : 50,
    style : Ti.Facebook.BUTTON_STYLE_WIDE
}));
</code></pre>
<p>The specified button style ('wide' or <code>BUTTON_STYLE_WIDE</code>) shows a wide version of the 
button that displays "Connect with Facebook" instead of just "Connect".</p>
 * 
 * @example Simple Graph API Call
 * <p>This example makes a call to the "me" graph path, which represents the current
user. The JSON results are simply displayed in an alert.  This example assumes 
the user is already logged in (you can check this with {@link Ti.Facebook.loggedIn}).</p>
<pre><code>Ti.Facebook.requestWithGraphPath('me', {}, 'GET', function(e) {
    if (e.success) {
        alert(e.result);
    } else if (e.error) {
        alert(e.error);
    } else {
        alert('Unknown response');
    }
});
</code></pre>
 * 
 * @example Create an Event Using the Graph API
 * <p>This example uses the Graph API to create an event<br />
in the logged-on user's Facebook account. This requires the "create_event" permission.</p>
<pre><code>// First make sure this permission exists
Ti.Facebook.permissions = ['create_event'];
Ti.Facebook.authorize();

// ...
// ...

// Now create the event after you've confirmed authorize() was successful.
var starttime = new Date(2012, 4, 31, 17, 0);
var endtime = new Date(2012, 4, 31, 19, 0);
var title = "Barry's Birthday Celebration";
var description = "Barry will have a great party";
var data = {
    start_time: JSON.stringify(starttime), // API expects a JSON stringified date
    end_time: JSON.stringify(endtime),
    summary: description,
    name: title
};
Ti.Facebook.requestWithGraphPath('me/events', data, 'POST', function(e) {
    if (e.success) {
        alert("Success! Returned from FB: " + e.result);
    } else {
        if (e.error) {
            alert(e.error);
        } else {
            alert("Unknown result");
        }
    }
});
</code></pre>
<p>For more information on the Event object, see:</p>
<ul>
<li>{@link http://developers.facebook.com/docs/reference/api/event/}.</li>
</ul>
 * 
 * @example Set a User's Facebook Status Using the Graph API
 * <p>This example uses the Graph API to set the user's Facebook status, which requires the 
"publish_stream" permission.</p>
<pre><code>// First make sure this permission exists
Ti.Facebook.permissions = ['publish_stream'];
Ti.Facebook.authorize();

// ...
// ...

// Now create the status message after you've confirmed that authorize() succeeded
Ti.Facebook.requestWithGraphPath('me/feed', {message: "Trying out FB Graph API and it's fun!"}, 
         "POST", function(e) {
    if (e.success) {
        alert("Success!  From FB: " + e.result);
    } else {
        if (e.error) {
            alert(e.error);
        } else {
            alert("Unkown result");
        }
    }
});
</code></pre>
<p>For more information on the Staus object, see:</p>
<ul>
<li>{@link http://developers.facebook.com/docs/reference/api/status/}.<br />
</li>
</ul>
 * 
 * @example Post a Photo Using the Graph API
 * <p>This example posts a photo to the user's account using the Graph API.
Another example below shows how to do this with the REST API, if desired. 
This requires the "publish_stream" permission.</p>
<pre><code>// First make sure this permission exists
Ti.Facebook.permissions = ['publish_stream'];
Ti.Facebook.authorize();

// ...
// ...

// Now post the photo after you've confirmed that authorize() succeeded
var f = Ti.Filesystem.getFile('pumpkin.jpg');
var blob = f.read();
var data = {
    message: 'This is a pumpkin',
    picture: blob
};
Ti.Facebook.requestWithGraphPath('me/photos', data, 'POST', function(e){
    if (e.success) {
        alert("Success!  From FB: " + e.result);
    } else {
        if (e.error) {
            alert(e.error);
        } else {
            alert("Unkown result");
        }
    }
});
</code></pre>
<p>For more information on posting photos, see:</p>
<ul>
<li>{@link http://developers.facebook.com/docs/reference/api/photo/} </li>
</ul>
 * 
 * @example Post a photo using the REST API
 * <p>This example posts a photo to the user's account using the REST API. Another example above shows 
how to do this with the Graph API.  This requires the "publish_stream" permission.</p>
<pre><code>// First make sure this permission exists
Ti.Facebook.permissions = ['publish_stream'];
Ti.Facebook.authorize();

// ...
// ...

// Now post the photo after you've confirmed that authorize() succeeded
var f = Ti.Filesystem.getFile('pumpkin.jpg');
var blob = f.read();
var data = {
    caption: 'This is a pumpkin',
    picture: blob
};
Ti.Facebook.request('photos.upload', data, function(e){
    if (e.success) {
        alert("Success!  From FB: " + e.result);
    } else {
        if (e.error) {
            alert(e.error);
        } else {
            alert("Unkown result");
        }
    }
});
</code></pre>
<p>For more information on posting photos using the REST API, see:</p>
<ul>
<li>{@link http://developers.facebook.com/docs/reference/rest/photos.upload/} </li>
</ul>
 * 
 * @example Show the Facebook Feed Dialog
 * <p>This example shows how to display the offical Facebook Feed Dialog, for adding a
post to the user's wall. In this example, we'll prefill some of the feed fields by 
passing a data dictionary to the {@link Ti.Facebook.dialog} method; this is not required.</p>
<pre><code>var data = {
    link : "http://www.appcelerator.com",
    name : "Appcelerator Titanium Mobile",
    message : "Checkout this cool open source project for creating mobile apps",
    caption : "Appcelerator Titanium Mobile",
    picture : "http://developer.appcelerator.com/assets/img/DEV_titmobile_image.png",
    description : "You've got the ideas, now you've got the power. Titanium translates " +
                  "your hard won web skills into native applications..."
};
Ti.Facebook.dialog("feed", data, function(e) {
    if(e.success &amp;&amp; e.result) {
        alert("Success! New Post ID: " + e.result);
    } else {
        if(e.error) {
            alert(e.error);
        } else {
            alert("User canceled dialog.");
        }
    }
});
</code></pre>
<p>For more information on Facebook Dialogs, see:</p>
<ul>
<li>{@link http://developers.facebook.com/docs/reference/dialogs/} </li>
</ul>
 */
Ti.Facebook = {

    /**
     * <p>Use with {@link Ti.Facebook.LoginButton.style} to specify
the default login button reading "Connect" or "Login".</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    BUTTON_STYLE_NORMAL:null,

    /**
     * <p>Use with {@link Ti.Facebook.LoginButton.style} to specify
a wide login button reading "Connect with Facebook" or "Login with Facebook".</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    BUTTON_STYLE_WIDE:null,

    /**
     * <p>OAuth token set after a successful <code>authorize</code>.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    accessToken:null,

    /**
     * <p>Your Facebook application id. You need to set this for anything to work.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    appid:null,

    /**
     * <p>Time at which the <code>accessToken</code> expires.</p>
     * @type Date
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    expirationDate:null,

    /**
     * <p>Indicates whether the login should use the traditional dialog-based
authentication.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    forceDialogAuth:null,

    /**
     * <p>Indicates if the user is logged in.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    loggedIn:null,

    /**
     * <p>Array of permissions to request for your app.</p>
     * @type Array<String>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    permissions:null,

    /**
     * <p>Unique user ID returned from Facebook.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    uid:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Prompts the user to log in (if not already logged in) and authorize your application.<br />
</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    authorize:function() {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.Facebook.LoginButton}.</p>
     * @param {Dictionary<Ti.Facebook.LoginButton>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.Facebook.LoginButton} except those marked not-creation or read-only.</p>
     * @returns Ti.Facebook.LoginButton
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    createLoginButton:function(parameters) {
    },

    /**
     * <p>Opens a supported Facebook dialog.</p>
     * @param {String} action <p>Specifies which dialog to show, such as "feed".</p>
     * @param {Object} params <p>A dictionary object for pre-filling some of the dialog's fields.<br />
See {@link Ti.Facebook}.</p>
     * @param {Callback<FacebookDialogResponse>} callback <p>Callback to invoke  when the user completes or cancels the dialog.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    dialog:function(action, params, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.accessToken} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAccessToken:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.appid} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAppid:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.expirationDate} property.</p>
     * @returns Date
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getExpirationDate:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.forceDialogAuth} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getForceDialogAuth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.loggedIn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLoggedIn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.permissions} property.</p>
     * @returns Array<String>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getPermissions:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.uid} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getUid:function() {
    },

    /**
     * <p>Clears the OAuth <code>accessToken</code> and logs out the user.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    logout:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Makes a request to the legacy Facebook REST API.</p>
     * @param {String} method <p>The REST API method to call.</p>
     * @param {Object} params <p>A dictionary object for setting parameters required by the call, if any.
See {@link Ti.Facebook}.</p>
     * @param {Callback<FacebookRESTResponse>} callback <p>Callback to invoke  when the request completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    request:function(method, params, callback) {
    },

    /**
     * <p>Makes a Facebook Graph API request.</p>
     * @param {String} path <p>Graph API path to request.</p>
     * @param {Dictionary} params <p>A dictionary object for setting parameters required by the call, if any.<br />
See {@link Ti.Facebook}.</p>
     * @param {String} httpMethod <p>The HTTP method (GET/POST/DELETE) to use for the call.</p>
     * @param {Callback<FacebookGraphResponse>} callback <p>Callback to invoke  when the request completes.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    requestWithGraphPath:function(path, params, httpMethod, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.accessToken} property.</p>
     * @param {String} accessToken <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setAccessToken:function(accessToken) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.appid} property.</p>
     * @param {String} appid <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setAppid:function(appid) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.expirationDate} property.</p>
     * @param {Date} expirationDate <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setExpirationDate:function(expirationDate) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.forceDialogAuth} property.</p>
     * @param {Boolean} forceDialogAuth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setForceDialogAuth:function(forceDialogAuth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.loggedIn} property.</p>
     * @param {Boolean} loggedIn <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLoggedIn:function(loggedIn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.permissions} property.</p>
     * @param {Array<String>} permissions <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setPermissions:function(permissions) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.uid} property.</p>
     * @param {String} uid <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setUid:function(uid) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>The Login Button created by {@link Ti.Facebook.createLoginButton}.  This is a 
Facebook-themed button that does not require a click event handler or any listeners.<br />
Click events on the button are automatically handled by the Facebook module.</p>
<p>The button changes its label to reflect the current state of the Facebook 
session.  For example, if the user is already logged in, this button will show "Logout".</p>
<p>See the examples in the {@link Ti.Facebook} documentation.</p>
 */
Ti.Facebook.LoginButton = function() {
};
Ti.Facebook.LoginButton.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    children:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    right:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Sets the login button style.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    style:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.size} property.</p>
     * @returns Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.style} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Facebook.LoginButton.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.style} property.</p>
     * @param {String} style <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setStyle:function(style) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Facebook.LoginButton.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Ti.Filesystem = {

    /**
     * <p>Constant for append mode for file operations.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    MODE_APPEND:null,

    /**
     * <p>Constant for read mode for file operations.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    MODE_READ:null,

    /**
     * <p>Constant for write mode for file operations.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    MODE_WRITE:null,

    /**
     * <p>Path to the application's internal cache directory.</p>
     * @type String
     * @since 1.8.3 (Android), 1.8.3 (iPhone), 1.8.3 (iPad)
     */
    applicationCacheDirectory:null,

    /**
     * <p>Path to the application's data directory.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    applicationDataDirectory:null,

    /**
     * <p>Path to the iOS application directory.</p>
     * @type String
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    applicationDirectory:null,

    /**
     * <p>Path to the application support directory.</p>
     * @type String
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    applicationSupportDirectory:null,

    /**
     * <p>Path to a directory on removable storage, such as SD card.</p>
     * @type String
     * @since 0.1 (Android)
     */
    externalStorageDirectory:null,

    /**
     * <p>Platform-specific line ending constant.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    lineEnding:null,

    /**
     * <p>Path to the application's resource directory.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    resourcesDirectory:null,

    /**
     * <p>Platform-specific path separator constant.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    separator:null,

    /**
     * <p>Path for the application's temporary directory.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    tempDirectory:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Creates a temporary directory and returns a {@link Ti.Filesystem.File} object representing the new directory.</p>
     * @returns Ti.Filesystem.File
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    createTempDirectory:function() {
    },

    /**
     * <p>Creates a temporary file and returns a {@link Ti.Filesystem.File} object representing the new file.</p>
     * @returns Ti.Filesystem.File
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    createTempFile:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Filesystem.applicationCacheDirectory} property.</p>
     * @returns String
     * @since 1.8.3 (Android), 1.8.3 (iPhone), 1.8.3 (iPad)
     */
    getApplicationCacheDirectory:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Filesystem.applicationDataDirectory} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getApplicationDataDirectory:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Filesystem.applicationDirectory} property.</p>
     * @returns String
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getApplicationDirectory:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Filesystem.applicationSupportDirectory} property.</p>
     * @returns String
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getApplicationSupportDirectory:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Filesystem.externalStorageDirectory} property.</p>
     * @returns String
     * @since 0.1 (Android)
     */
    getExternalStorageDirectory:function() {
    },

    /**
     * <p>Returns a <code>File</code> object representing the file identified by the path arguments.</p>
     * @param {String} path <p>One or more path components. Path arguments are joined together using the platform specific path separator to form the full path.</p>
     * @returns Ti.Filesystem.File
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getFile:function(path) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Filesystem.lineEnding} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getLineEnding:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Filesystem.resourcesDirectory} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getResourcesDirectory:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Filesystem.separator} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getSeparator:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Filesystem.tempDirectory} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getTempDirectory:function() {
    },

    /**
     * <p>Returns <code>true</code> if the device supports external storage <em>and</em> the external storage device is mounted.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    isExternalStoragePresent:function() {
    },

    /**
     * <p>Opens file using the {@link Ti.IOStream} interface.</p>
     * @param {Number} mode <p>Access mode. Either {@link Ti.Filesystem.MODE_READ}, {@link Ti.Filesystem.MODE_WRITE}, or 
{@link Ti.Filesystem.MODE_APPEND}.</p>
     * @param {String} path <p>One or more path components. Path arguments are joined together using the 
platform-specific path separator to form the full path. </p>
     * @returns Ti.Filesystem.FileStream
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    openStream:function(mode, path) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Use the {@link Ti.Filesystem.getFile} method to get a handle to a <code>File</code> object,
which represents a given path.  There does not need to be an existing file or directory 
does not need to exist before <code>getFile</code> is called. If the file doesn't exist, and 
the file path identifies a file in a writable directory, writing to the file 
creates the file implicitly. </p>
<p>See {@link Ti.Filesystem} for constants identifying commonly-used device directories.</p>
<p>Use the {@link Ti.Filesystem.File.exists} method to test whether the file exists.</p>
<p>A file object can point to an ordinary file, a directory or a symbolic link.
Use {@link Ti.Filesystem.File.createDirectory} to create a directory.
Use the {@link Ti.Filesystem.File.getDirectoryListing} method to
retrieve a list of the directory's contents.</p>
<p>The <code>File</code> object doesn't provide methods for random access into the file.
The <code>read</code> method reads the file's entire contents into a <code>Blob</code> object.
The <code>write</code> method can either overwrite the entire file or append to an
existing file. </p>
<p>For random access to a file, such as accessing a small portion of a larger file, 
you can open a file as a {@link Ti.Filesystem.FileStream} object. Use the 
{@link Ti.Filesystem.File.open} method to get a <code>FileStream</code> for an 
existing <code>File</code> object, or use the {@link Ti.Filesystem.openStream} method 
to get a <code>FileStream</code> directly without calling <code>getFile</code> first.</p>
<p>The {@link Ti.Filesystem} module defines a number of properties and methods related to 
filesystem access, including properties that specify paths for application-specific 
directories, and methods for creating temporary files and directories.</p>
<p>On Android, files may be stored on external storage (that is, removable media such as 
SD Cards).</p>
<p>Note that once created with <code>getFile</code>, the path associated with a file object is
immutable. If you move the underlying file using {@link Ti.Filesystem.File.move} 
or {@link Ti.Filesystem.File.rename}, you can no longer access it with the 
original <code>File</code> object. You must use <code>getFile</code> to get a handle to the new path.</p>
<h4>Resource Files</h4>
<p>The <code>Resources</code> directory and all the files in it are read-only. On Android, resource
files are stored in the resource bundle and do not have all of the properties of
normal files. In particular, they do not have creation or modification timestamps.</p>
 * 
 * @example Reading a File
 * <p>Data files shipped with the application are stored in the resources directory.</p>
<p>This example reads string data from a text file.</p>
<pre><code>// resourcesDirectory is actually the default location, so the first 
// argument could be omitted here.
file = Ti.Filesystem.getFile(Ti.Filesystem.resourcesDirectory, "textfile.txt");
var blob = file.read();
var readText = blob.text;
// dispose of file handle &amp; blob.
file = null;
blob = null;
</code></pre>
 * 
 * @example Creating a Subdirectory
 * <p>Files that the application writes to need to be stored outside of the 
resources directory, since that directory is read-only.</p>
<p>This example creates a subdirectory to store downloaded images.
The example assumes that two variables are defined elsewhere in the code:
myImageID, a string containing some kind of ID for the downloaded image, 
and myImageData, a <code>Blob</code> containing JPEG image data.</p>
<pre><code>var imageDir = Ti.Filesystem.getFile(Ti.Filesystem.applicationDataDirectory,            
    'downloaded_images');
if (! imageDir.exists()) {
    imageDir.createDirectory();
}

// .resolve() provides the resolved native path for the directory.
var imageFile  = Ti.Filesystem.getFile(imageDir.resolve(), myImageID + '.jpg');
Ti.API.info("ImageFile path is: " + imageFile.resolve());
if (imageFile.write(myImageData)===false) {
    // handle write error
}
// dispose of file handles
imageFile = null;
imageDir = null;
</code></pre>
 */
Ti.Filesystem.File = function() {
};
Ti.Filesystem.File.prototype = {

    /**
     * <p><code>true</code> if the file is executable.</p>
     * @type Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    executable:null,

    /**
     * <p>Set to <code>true</code> if the file is hidden.</p>
     * @type Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    hidden:null,

    /**
     * <p>Name of the file.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    name:null,

    /**
     * <p>Native path associated with this file object, as a file URL.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    nativePath:null,

    /**
     * <p>A <code>File</code> object representing the parent directory of the file identified by this object.</p>
     * @type Ti.Filesystem.File
     * @since 0.1 (Android), 1.8 (Mobile Web)
     */
    parent:null,

    /**
     * <p><code>true</code> if the file identified by this object is read-only.</p>
     * @type Boolean
     * @since 0.1 (Android), 1.8 (Mobile Web)
     */
    readonly:null,

    /**
     * <p>Value indicating whether or not to back up to a cloud service.</p>
     * @type Boolean
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    remoteBackup:null,

    /**
     * <p>Size, in bytes, of the file identified by this object.</p>
     * @type Number
     * @since 0.1 (Android), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p><code>true</code> if the file identified by this object is a symbolic link.</p>
     * @type Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    symbolicLink:null,

    /**
     * <p><code>true</code> if the file identified by this object is writable.</p>
     * @type Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    writable:null,

    /**
     * <p>Use {@link Ti.Filesystem.File.writable} instead.</p>
     * @type Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    writeable:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends data to the file identified by this file object.</p>
     * @param {String|Ti.Blob|Ti.Filesystem.File} data <p>Data to append.</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    append:function(data) {
    },

    /**
     * <p>Copies the file identified by this file object to a new path.</p>
     * @param {String} destinationPath <p>Destination path to copy to.</p>
     * @returns Boolean
     * @since 0.1 (Android), 1.8 (Mobile Web)
     */
    copy:function(destinationPath) {
    },

    /**
     * <p>Creates a directory at the path identified by this file object.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    createDirectory:function() {
    },

    /**
     * <p>Creates a file at the path identified by this file object.</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    createFile:function() {
    },

    /**
     * <p>Returns the creation timestamp for the file identified by this file object.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    createTimestamp:function() {
    },

    /**
     * <p>Deletes the directory identified by this file object.</p>
     * @param {Boolean} recursive <p>Pass <code>true</code> to recursively delete any directory contents.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    deleteDirectory:function(recursive) {
    },

    /**
     * <p>Deletes the file identified by this file object.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    deleteFile:function() {
    },

    /**
     * <p>Returns <code>true</code> if the file or directory identified by this file object exists on the device.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    exists:function() {
    },

    /**
     * <p>Returns the extension for the file identified by this file object.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    extension:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Returns a listing of the directory identified by this file object, or <code>null</code>
if this object doesn't identify a directory.</p>
     * @returns Array<String>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getDirectoryListing:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Filesystem.File.executable} property.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getExecutable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Filesystem.File.hidden} property.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getHidden:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Filesystem.File.name} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Filesystem.File.nativePath} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getNativePath:function() {
    },

    /**
     * <p>Returns the path of the parent directory holding the file identified by this file object, as a String <strong>or</strong> as a <code>File</code> object.</p>
     * @returns String
     * @returns Ti.Filesystem.File
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getParent:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Filesystem.File.readonly} property.</p>
     * @returns Boolean
     * @since 0.1 (Android), 1.8 (Mobile Web)
     */
    getReadonly:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Filesystem.File.remoteBackup} property.</p>
     * @returns Boolean
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    getRemoteBackup:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Filesystem.File.size} property.</p>
     * @returns Number
     * @since 0.1 (Android), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Filesystem.File.symbolicLink} property.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getSymbolicLink:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Filesystem.File.writable} property.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getWritable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Filesystem.File.writeable} property.</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getWriteable:function() {
    },

    /**
     * <p>Returns <code>true</code> if this file object represents a directory.</p>
     * @returns Boolean
     * @since 0.1 (Android), 1.8 (Mobile Web)
     */
    isDirectory:function() {
    },

    /**
     * <p>Returns <code>true</code> if this file object represents an ordinary file.</p>
     * @returns Boolean
     * @since 0.1 (Android), 1.8 (Mobile Web)
     */
    isFile:function() {
    },

    /**
     * <p>Returns the last modification time for this file.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    modificationTimestamp:function() {
    },

    /**
     * <p>Moves the file identified by this file object to another path.</p>
     * @param {String} newpath <p>New location for the file.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    move:function(newpath) {
    },

    /**
     * <p>Opens the file identified by this file object for random access.</p>
     * @param {Number} mode <p>Mode to open the file in: <code>MODE_READ</code>, <code>MODE_WRITE</code>, or <code>MODE_APPEND</code>.</p>
     * @returns Ti.Filesystem.FileStream
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    open:function(mode) {
    },

    /**
     * <p>Returns the contents of the file identified by this file object as a <code>Blob</code>.</p>
     * @returns Ti.Blob
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    read:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Renames the file identified by this file object.</p>
     * @param {String} newname <p>New name for the file.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    rename:function(newname) {
    },

    /**
     * <p>Returns the fully-resolved native path associated with this file object.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    resolve:function() {
    },

    /**
     * <p>Sets the value of the {@link Ti.Filesystem.File.hidden} property.</p>
     * @param {Boolean} hidden <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setHidden:function(hidden) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Filesystem.File.remoteBackup} property.</p>
     * @param {Boolean} remoteBackup <p>New value for the property.</p>
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    setRemoteBackup:function(remoteBackup) {
    },

    /**
     * <p>Returns the amount of free space available on the device where the file identified by this file object is stored.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    spaceAvailable:function() {
    },

    /**
     * <p>Writes the specified data to the file identified by this file object.</p>
     * @param {String|Ti.Filesystem.File|Ti.Blob} data <p>Data to write, as a String, <code>Blob</code> or <code>File</code> object.</p>
     * @param {Boolean} append <p>If <code>true</code>, append the data to the end of the file.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    write:function(data, append) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Ti.Filesystem.FileStream = function() {
};
Ti.Filesystem.FileStream.prototype = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>closes file stream, exception is thrown on error</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    close:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Indicates whether this stream is readable.</p>
     * @returns Boolean True if stream is readable, false otherwise.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    isReadable:function() {
    },

    /**
     * <p>Indicates whether this stream is writeable.</p>
     * @returns Boolean True if stream is writeable, false otherwise.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    isWriteable:function() {
    },

    /**
     * <p>Reads data from this stream into a buffer.</p>
     * @param {Ti.Buffer} buffer <p>Buffer to read stream data into.</p>
     * @param {Number} offset <p>Offset into the buffer to start writing stream data.
If specified, <code>length</code> must also be specified.</p>
     * @param {Number} length <p>Maximum number of bytes to read.
If specified, <code>offset</code> must also be specified.</p>
     * @returns Number Number of bytes read.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    read:function(buffer, offset, length) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Writes data from a buffer to this stream.</p>
     * @param {Ti.Buffer} buffer <p>Buffer to write to this stream.</p>
     * @param {Number} offset <p>Offset in the buffer of the first byte to write to the stream.
If specified, <code>length</code> must also be specified.</p>
     * @param {Number} length <p>Maximum number of bytes to write to the stream.
If specified, <code>offset</code> must also be specified.</p>
     * @returns Number Number of bytes written.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    write:function(buffer, offset, length) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>This module combines two sets of features:</p>
<ul>
<li>
<p>Location services. Determining the location of the device.</p>
</li>
<li>
<p>Geocoding and reverse geocoding. Converting geographic  coordinates into
    addresses, and converting addresses into geographic  coordinates.</p>
</li>
</ul>
<p>Using location services can have a significant impact on a device's battery life, 
so it's important to use them in the most efficient manner possible. Power consumption
is strongly influenced by the accuracy and frequency of location updates required by 
your application. </p>
<p>The location services systems of the underlying platforms are very different, so there
are significant implementation differences between the platforms.</p>
<p>The basic methods of requesting location information and receiving location updates
are essentially the same on all platforms. However, the method of configuring the 
accuracy and frequency of location updates is different for each platform.</p>
<h4>Getting Location Information</h4>
<p>There are two ways to get location information:</p>
<ul>
<li>
<p>Make a one-time request with {@link Ti.Geolocation.getCurrentPosition}.</p>
</li>
<li>
<p>Register to receive location updates by adding an event listener for the
    {@link Ti.Geolocation.location} event.</p>
</li>
</ul>
<p><strong>NOTE:</strong> Location services stay enabled for as long as a listener is registered for the
<code>location</code> event, so be sure to remove the event listener when you do not require
location updates.</p>
<h4>Configurating Location Updates on iOS</h4>
<p>In iOS, the accuracy (and power consumption) of location services is primarily
determined by the {@link Ti.Geolocation.accuracy} setting. This can be set
to one of the following values:</p>
<ul>
<li>{@link Ti.Geolocation.ACCURACY_BEST} (highest accuracy and power consumption)</li>
<li>{@link Ti.Geolocation.ACCURACY_HIGH}</li>
<li>{@link Ti.Geolocation.ACCURACY_NEAREST_TEN_METERS} </li>
<li>{@link Ti.Geolocation.ACCURACY_HUNDRED_METERS} </li>
<li>{@link Ti.Geolocation.ACCURACY_KILOMETER} </li>
<li>{@link Ti.Geolocation.ACCURACY_LOW}</li>
<li>{@link Ti.Geolocation.ACCURACY_THREE_KILOMETERS} (lowest
    accuracy and power consumption). </li>
</ul>
<p>Based on the accuracy you choose, iOS uses its own logic to select location providers
and filter location updates to provide location updates that meet your accuracy
requirements.</p>
<p>You can further limit power consumption on iOS by setting the
{@link Ti.Geolocation.distanceFilter} property to eliminate position
updates when the user is not moving.</p>
<h4>Configurating Location Updates on Android</h4>
<p>Prior to Titanium Mobile 2.0, Titanium attempted to follow the iOS model on Android,
but this didn't fit the native Android model well. In Release 2.0, three different
location service mode are supported on Android: <em>legacy</em>, <em>manual</em>, and <em>simple</em>.</p>
<ul>
<li>
<p><em>Legacy mode</em> is the mode that existed prior to 2.0. Legacy mode is 
    used when you set the <code>accuracy</code> property to one of the iOS 
    <code>ACCURACY</code> constants:</p>
<ul>
<li>{@link Ti.Geolocation.ACCURACY_BEST} (highest accuracy and power consumption)</li>
<li>{@link Ti.Geolocation.ACCURACY_NEAREST_TEN_METERS} </li>
<li>{@link Ti.Geolocation.ACCURACY_HUNDRED_METERS} </li>
<li>{@link Ti.Geolocation.ACCURACY_KILOMETER} </li>
<li>{@link Ti.Geolocation.ACCURACY_THREE_KILOMETERS} (lowest
    accuracy and power consumption). </li>
</ul>
<p>This mode is deprecated and should not be used for new development. </p>
<p>In this mode, the specified <code>accuracy</code> value determines the 
<em>minimum distance between location updates</em>. If <code>accuracy</code> is set to
<code>ACCURACY_BEST</code>, no distance filter is used on updates.</p>
<p>In legacy mode, only a single location provider (GPS, network, or passive) is
enabled at a time. You can specify a the location provider using the 
{@link Ti.Geolocation.preferredProvider} property.</p>
<p>You can also specifying a desired update frequency using the
{@link Ti.Geolocation.frequency} property. The <code>preferredProvider</code>
and <code>frequency</code> properties are not used in any other mode.</p>
</li>
<li>
<p><em>Manual mode</em> gives developers low-level control of location updates, including
    enabling individual location providers and filtering updates, for the best
    combination of accuracy and battery life. </p>
<p>Manual mode is used when the {@link Ti.Geolocation.Android.manualMode} flag is set
to <code>true</code>. In manual mode, the <code>accuracy</code> property is not used, and all
configuration is done through the {@link Ti.Geolocation.Android} module.</p>
</li>
<li>
<p><em>Simple mode</em> provides a compromise mode that provides adaquate support for 
    undemanding location applications without requiring developers to
    write a lot of Android-specific code. </p>
<p>Setting the {@link Ti.Geolocation.accuracy} property to 
either {@link Ti.Geolocation.ACCURACY_HIGH} or 
{@link Ti.Geolocation.ACCURACY_LOW} enables simple mode.</p>
<p>In this mode the platform handles enabling and disabling location providers and
filtering location updates.</p>
</li>
</ul>
<h4>Configuring Location Updates on Mobile Web</h4>
<p>Location services on Mobile Web operate similarly to the <em>simple mode</em> operations on
Android. Setting {@link Ti.Geolocation.accuracy} property to 
{@link Ti.Geolocation.ACCURACY_HIGH} yeilds the best available location
updates, with the hightest power consumption.
Using {@link Ti.Geolocation.ACCURACY_LOW} provides lower-quality location
updates with lower power consumption.</p>
<p>In addition to the accuracy setting, there are several Mobile Web-specific settings.
See {@link Ti.Geolocation.MobileWeb} for details.</p>
 */
Ti.Geolocation = {

    /**
     * <p>Use with {@link Ti.Geolocation.accuracy} to request the best
accuracy available.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    ACCURACY_BEST:null,

    /**
     * <p>Use with {@link Ti.Geolocation.accuracy} to request more
accurate location updates with higher battery usage.</p>
     * @type Number
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    ACCURACY_HIGH:null,

    /**
     * <p>Use with {@link Ti.Geolocation.accuracy} to request location
updates accurate to the nearest 100 meters.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    ACCURACY_HUNDRED_METERS:null,

    /**
     * <p>Use with {@link Ti.Geolocation.accuracy} to request location
updates accurate to the nearest kilometer.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    ACCURACY_KILOMETER:null,

    /**
     * <p>Use with {@link Ti.Geolocation.accuracy} to request less
accurate location updates with lower battery usage.</p>
     * @type Number
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    ACCURACY_LOW:null,

    /**
     * <p>Use with {@link Ti.Geolocation.accuracy} to request location
updates accurate to the nearest 10 meters.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    ACCURACY_NEAREST_TEN_METERS:null,

    /**
     * <p>Use with {@link Ti.Geolocation.accuracy} to request location
updates accurate to the nearest three kilometers.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    ACCURACY_THREE_KILOMETERS:null,

    /**
     * <p>A {@link Ti.Geolocation.locationServicesAuthorization} value 
indicating that the application is authorized to use location services.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUTHORIZATION_AUTHORIZED:null,

    /**
     * <p>A {@link Ti.Geolocation.locationServicesAuthorization} value 
indicating that the application is not authorized to use location services, <em>or</em>
location services are disabled.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUTHORIZATION_DENIED:null,

    /**
     * <p>A {@link Ti.Geolocation.locationServicesAuthorization} value 
indicating that the application is not authorized to use location servies <em>and</em>
the user cannot change this application's status.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUTHORIZATION_RESTRICTED:null,

    /**
     * <p>A {@link Ti.Geolocation.locationServicesAuthorization} value 
indicating that the authorization state is unknown.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUTHORIZATION_UNKNOWN:null,

    /**
     * <p>Error code indicating that the user denied access to the location service.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    ERROR_DENIED:null,

    /**
     * <p>Error code indicating that the heading could not be determined.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    ERROR_HEADING_FAILURE:null,

    /**
     * <p>Error code indicating that the user's location could not be determined.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    ERROR_LOCATION_UNKNOWN:null,

    /**
     * <p>Error code indicating that the network was unavailable.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    ERROR_NETWORK:null,

    /**
     * <p>Error code indicating that region monitoring is delayed.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    ERROR_REGION_MONITORING_DELAYED:null,

    /**
     * <p>Error code indicating that region monitoring is denied.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    ERROR_REGION_MONITORING_DENIED:null,

    /**
     * <p>Error code indicating a region monitoring failure.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    ERROR_REGION_MONITORING_FAILURE:null,

    /**
     * <p>Error indicating a timeout.</p>
     * @type Number
     * @since 1.8 (Mobile Web)
     */
    ERROR_TIMEOUT:null,

    /**
     * <p>Specifies the GPS location provider.</p>
     * @type String
     * @since 0.1 (Android)
     */
    PROVIDER_GPS:null,

    /**
     * <p>Specifies the network location provider.</p>
     * @type String
     * @since 0.1 (Android)
     */
    PROVIDER_NETWORK:null,

    /**
     * <p>Specifies the passive location provider.</p>
     * @type String
     * @since 0.1 (Android)
     */
    PROVIDER_PASSIVE:null,

    /**
     * <p>Specifies the requested accuracy for location updates.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    accuracy:null,

    /**
     * <p>The minimum change of position (in meters) before a 'location' event is fired.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    distanceFilter:null,

    /**
     * <p>Requested frequency for location updates, in milliseconds.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    frequency:null,

    /**
     * <p>Minimum heading change (in degrees) before a <code>heading</code> event is fired.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    headingFilter:null,

    /**
     * <p>Returns an authorization constant indicating if the application has access to location services.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    locationServicesAuthorization:null,

    /**
     * <p>Indicates if the user has enabled or disabled location services for the device (not the application).</p>
     * @type Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    locationServicesEnabled:null,

    /**
     * <p>Determines the preferred location provider, either
{@link Ti.Geolocation.PROVIDER_GPS},
[PROVIDER_NETWORK](Ti.Geolocation.PROVIDER_NETWORK],
or {@link Ti.Geolocation.PROVIDER_PASSIVE}.</p>
     * @type String
     * @since 0.1 (Android)
     */
    preferredProvider:null,

    /**
     * <p>Text to display in the permission dialog when requesting location
services.</p>
     * @type String
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    purpose:null,

    /**
     * <p>Determines whether the compass calibration UI is shown if needed.</p>
     * @type Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    showCalibration:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Resolves an address to a location.</p>
     * @param {String} address <p>address to resolve.</p>
     * @param {Callback<ForwardGeocodeResponse>} callback <p>Function to invoke on success or failure.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    forwardGeocoder:function(address, callback) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Geolocation.accuracy} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getAccuracy:function() {
    },

    /**
     * <p>Retrieves the current compass heading.</p>
     * @param {Callback<HeadingResponse>} callback <p>Function to invoke on success or failure of obtaining the current heading.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getCurrentHeading:function(callback) {
    },

    /**
     * <p>Retrieves the last known location from the device.</p>
     * @param {Callback<Object>} callback <p>Function to invoke on success or failure of obtaining the current location.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getCurrentPosition:function(callback) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Geolocation.distanceFilter} property.</p>
     * @returns Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getDistanceFilter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Geolocation.frequency} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getFrequency:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Geolocation.headingFilter} property.</p>
     * @returns Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getHeadingFilter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Geolocation.locationServicesAuthorization} property.</p>
     * @returns Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getLocationServicesAuthorization:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Geolocation.locationServicesEnabled} property.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getLocationServicesEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Geolocation.preferredProvider} property.</p>
     * @returns String
     * @since 0.1 (Android)
     */
    getPreferredProvider:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Geolocation.purpose} property.</p>
     * @returns String
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getPurpose:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Geolocation.showCalibration} property.</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getShowCalibration:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Tries to resolve a location to an address.</p>
     * @param {Number} latitude <p>Latitude to search, specified in decimal degrees.</p>
     * @param {Number} longitude <p>Longitude to search, specified in decimal degrees.</p>
     * @param {Callback<ReverseGeocodeResponse>} callback <p>Function to invoke on success or failure.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    reverseGeocoder:function(latitude, longitude, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Geolocation.accuracy} property.</p>
     * @param {Number} accuracy <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setAccuracy:function(accuracy) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Geolocation.distanceFilter} property.</p>
     * @param {Number} distanceFilter <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setDistanceFilter:function(distanceFilter) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Geolocation.frequency} property.</p>
     * @param {Number} frequency <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setFrequency:function(frequency) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Geolocation.headingFilter} property.</p>
     * @param {Number} headingFilter <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setHeadingFilter:function(headingFilter) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Geolocation.locationServicesAuthorization} property.</p>
     * @param {Number} locationServicesAuthorization <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setLocationServicesAuthorization:function(locationServicesAuthorization) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Geolocation.preferredProvider} property.</p>
     * @param {String} preferredProvider <p>New value for the property.</p>
     * @since 0.1 (Android)
     */
    setPreferredProvider:function(preferredProvider) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Geolocation.purpose} property.</p>
     * @param {String} purpose <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setPurpose:function(purpose) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Geolocation.showCalibration} property.</p>
     * @param {Boolean} showCalibration <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setShowCalibration:function(showCalibration) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>This module is used for manually configuring geolocation settings on Android. 
Manual configuration involves managing <em>providers</em> and <em>rules</em>:</p>
<ul>
<li>
<p><em>Location providers</em>, such as GPS, provide location updates.</p>
</li>
<li>
<p><em>Location rules</em> filter the results returned by location providers. </p>
</li>
</ul>
<p>Configuring geolocation manually involves three steps:</p>
<ol>
<li>
<p>Enabling manual mode.</p>
</li>
<li>
<p>Enabling location providers.</p>
</li>
<li>
<p>Adding location rules (optional).</p>
</li>
</ol>
<p>As with the other modes, you register for location updates using the main
{@link Ti.Geolocation} module. Location updates are generated as long as 
an event listener is registered for the <code>location</code> event.  When you are not 
using location updates, you should remove any registered event listeners.</p>
<p>In manual mode, the application is responsible for dynamically updating the settings
to acheive its required accuracy while limiting battery usage. For example, an
application might do any of the following:</p>
<ul>
<li>
<p>If the application isn't getting updates frequently enough, it can adjust its
    provider settings to provide more updates, or relax its location rules to allow
    less accurate updates through. </p>
</li>
<li>
<p>If the application isn't receiving accurate enough updates from one provider, it 
    can add another provider to try to improve results.</p>
</li>
<li>
<p>If the application is getting sufficiently accurate results from the network 
    provider, it can disable the GPS provider to save power.</p>
</li>
</ul>
<h4>Enabling Manual Configuration Mode</h4>
<p>To enable manual configuration mode, set the {@link Ti.Geolocation.Android.manualMode} 
property to <code>true</code>. In manual configuration mode, the location providers and location
rules set through this module control the generation of location updates.</p>
<p>When <code>manualMode</code> is <code>true</code>, the following configuration settings in the
{@link Ti.Geolocation} module are ignored:</p>
<ul>
<li>{@link Ti.Geolocation.accuracy}</li>
<li>{@link Ti.Geolocation.frequency}</li>
<li>{@link Ti.Geolocation.preferredProvider}</li>
</ul>
<p>When <code>manualMode</code> is <code>false</code>, the <code>accuracy</code>, <code>frequency</code> and <code>preferredProvider</code> 
settings from {@link Ti.Geolocation} are used to configure location updates.
Any location providers and location rules set in {@link Ti.Geolocation.Android} 
are retained, but they have no effect.</p>
<h4>Location Providers</h4>
<p>Android supports three kinds of location providers: GPS, network, and the 
"passive" location provider, which provides only cached information. </p>
<p>Each location provider represents a different tradeoff between accuracy and
battery power. For most accurate results, you can use a combination of location
providers. Your application can also dynamically change providers to optimize
battery life (for example, if the network provider is providing good enough
location updates, you can disable the GPS provider).</p>
<p>Location providers are represented by the
{@link Ti.Geolocation.Android.LocationProvider} object. 
To specify a location provider, create a new provider object, then register it
with {@link Ti.Geolocation.Android.createLocationProvider}:</p>
<pre><code>gpsProvider = Ti.Geolocation.Android.createLocationProvider({
    name: Ti.Geolocation.PROVIDER_GPS,
    minUpdateTime: 60, 
    minUpdateDistance: 100
});
Ti.Geolocation.Android.addProvider(gpsProvider);
</code></pre>
<p>As shown above, when you create a location provider, you can specify two
properties to limit update frequency:</p>
<ul>
<li>
<p><code>minUpdateTime</code>. Limits the frequency of location updates to no more 
    than one per <code>minUpdateTime</code> seconds.</p>
</li>
<li>
<p><code>minUpdateDistance</code>. Don't send location updates until the location changes
    at least <code>minUpdateDistance</code> meters.</p>
</li>
</ul>
<p>Only one provider of each type (GPS, network, passive) can be registered at a
time. Adding a new location provider with the same <code>name</code> value replaces any
existing provider with the same <code>name</code>.</p>
<p>Once a location provider is added, changes made to the location provider object itself
(such as changing its <code>minUpdateTime</code> value) change the active configuration of the 
location system.</p>
<h4>Location Rules</h4>
<p><em>Location Rules</em> filter the results returned by location providers. You use
location rules to reduce the number of location update events, and ensure that 
the events you do receive are as accurate and recent as your application requires.</p>
<p>You are not required to set any location rules. However, by reducing the number of 
location events that are passed from the native code
to the JavaScript layer, location rules can improve both performance and battery
life.</p>
<p>Location rules are represented by the
{@link Ti.Geolocation.Android.LocationProvider} object. To
specify a location rule, create a new rule object, then register it with 
{@link Ti.Geolocation.Android.createLocationProvider}:</p>
<pre><code>var gpsRule = Ti.Geolocation.Android.createLocationRule({
    provider: Ti.Geolocation.PROVIDER_GPS,
    // Updates should be accurate to 100m
    accuracy: 100,
    // Updates should be no older than 5m
    maxAge: 300000
    // But  no more frequent than once per 10 seconds
    minAge: 10000
});
Ti.Geolocation.Android.addRule(gpsRule);
</code></pre>
<p>Each rule can specify any combination of the following criteria:</p>
<ul>
<li>
<p><code>provider</code>. If specified, this rule only applies to updates generated
    by the specified provider. If not specified, this rule applies to all updates.</p>
</li>
<li>
<p><code>accuracy</code>. Minimum accuracy required for a location update. Accuracy is
    expressed as the maximum allowable error, in meters. Updates with reported
    accuracy values greater than this are filtered out. </p>
</li>
<li>
<p><code>minAge</code>. Controls the frequency of location updates. Do not forward an update unless
     at least <code>minAge</code> milliseconds have passed since the last good location
     update.</p>
</li>
<li>
<p><code>maxAge</code>. Controls the freshness of location updates. Do not forward an update
    unless it is newer than <code>maxAge</code> milliseconds.</p>
</li>
</ul>
<p>You can specify as many location rules as you like. The order in which location rules
are added is not significant. For a <code>location</code> event to be generated, the location
update must pass all of the active rules.</p>
<p>Note that some combinations of rules may make it very difficult to get location
updates. In particular, very low values for either <code>accuracy</code> or <code>maxAge</code> may prevent 
results from getting through. </p>
 */
Ti.Geolocation.Android = {

    /**
     * <p>Set to <code>true</code> to enable manual configuration of location updates through this module.</p>
     * @type Boolean
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    manualMode:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Adds and enables the specified location provider, possibly replacing an existing one.</p>
     * @param {Ti.Geolocation.Android.LocationProvider} provider <p>The location provider to add.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    addLocationProvider:function(provider) {
    },

    /**
     * <p>Adds and enables the specified location rule.</p>
     * @param {Ti.Geolocation.Android.LocationRule} rule <p>The location rule to add.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    addLocationRule:function(rule) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.Geolocation.Android.LocationProvider}.</p>
     * @param {Dictionary<Ti.Geolocation.Android.LocationProvider>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.Geolocation.Android.LocationProvider} except those marked not-creation or read-only.</p>
     * @returns Ti.Geolocation.Android.LocationProvider
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    createLocationProvider:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.Geolocation.Android.LocationRule}.</p>
     * @param {Dictionary<Ti.Geolocation.Android.LocationRule>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.Geolocation.Android.LocationRule} except those marked not-creation or read-only.</p>
     * @returns Ti.Geolocation.Android.LocationRule
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    createLocationRule:function(parameters) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Geolocation.Android.manualMode} property.</p>
     * @returns Boolean
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getManualMode:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Disables and removes the specified location provider.</p>
     * @param {Ti.Geolocation.Android.LocationProvider} provider <p>The location provider to remove.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    removeLocationProvider:function(provider) {
    },

    /**
     * <p>Disables and removes the specified location rule.</p>
     * @param {Ti.Geolocation.Android.LocationRule} rule <p>The location rule to remove.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    removeLocationRule:function(rule) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Geolocation.Android.manualMode} property.</p>
     * @param {Boolean} manualMode <p>New value for the property.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    setManualMode:function(manualMode) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>See {@link Ti.Geolocation.Android} for details on using <code>LocationProviders</code> to 
manually configure location updates.</p>
 */
Ti.Geolocation.Android.LocationProvider = function() {
};
Ti.Geolocation.Android.LocationProvider.prototype = {

    /**
     * <p>Don't send a location update unless the location has changed at least <code>minUpdateDistance</code> 
meters since the previous update.</p>
     * @type Number
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    minUpdateDistance:null,

    /**
     * <p>Limits the frequency of location updates to no more than one per <code>minUpdateTime</code> seconds.</p>
     * @type Number
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    minUpdateTime:null,

    /**
     * <p>Type of location provider: {@link Ti.Geolocation.PROVIDER_GPS}, 
{@link Ti.Geolocation.PROVIDER_NETWORK}, or 
{@link Ti.Geolocation.PROVIDER_PASSIVE}.</p>
     * @type String
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    name:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Geolocation.Android.LocationProvider.minUpdateDistance} property.</p>
     * @returns Number
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getMinUpdateDistance:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Geolocation.Android.LocationProvider.minUpdateTime} property.</p>
     * @returns Number
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getMinUpdateTime:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Geolocation.Android.LocationProvider.name} property.</p>
     * @returns String
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getName:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Geolocation.Android.LocationProvider.minUpdateDistance} property.</p>
     * @param {Number} minUpdateDistance <p>New value for the property.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    setMinUpdateDistance:function(minUpdateDistance) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Geolocation.Android.LocationProvider.minUpdateTime} property.</p>
     * @param {Number} minUpdateTime <p>New value for the property.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    setMinUpdateTime:function(minUpdateTime) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Geolocation.Android.LocationProvider.name} property.</p>
     * @param {String} name <p>New value for the property.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    setName:function(name) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>All of the properties are optional.</p>
<p>See {@link Ti.Geolocation.Android} for details on using <code>LocationProviders</code> to 
manually configure location updates.</p>
 */
Ti.Geolocation.Android.LocationRule = function() {
};
Ti.Geolocation.Android.LocationRule.prototype = {

    /**
     * <p>Minimum accuracy required for a location update.</p>
     * @type Number
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    accuracy:null,

    /**
     * <p>Controls the freshness of location updates. Do not forward an update
unless it is newer than <code>maxAge</code> milliseconds.</p>
     * @type Number
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    maxAge:null,

    /**
     * <p>Controls the frequency of location updates.</p>
     * @type Number
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    minAge:null,

    /**
     * <p>If specified, this rule only applies to updates generated
by the specified provider. If <code>null</code>, this rule applies to all updates.</p>
     * @type String
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    name:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Geolocation.Android.LocationRule.accuracy} property.</p>
     * @returns Number
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getAccuracy:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Geolocation.Android.LocationRule.maxAge} property.</p>
     * @returns Number
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getMaxAge:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Geolocation.Android.LocationRule.minAge} property.</p>
     * @returns Number
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getMinAge:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Geolocation.Android.LocationRule.name} property.</p>
     * @returns String
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getName:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Geolocation.Android.LocationRule.accuracy} property.</p>
     * @param {Number} accuracy <p>New value for the property.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    setAccuracy:function(accuracy) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Geolocation.Android.LocationRule.maxAge} property.</p>
     * @param {Number} maxAge <p>New value for the property.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    setMaxAge:function(maxAge) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Geolocation.Android.LocationRule.minAge} property.</p>
     * @param {Number} minAge <p>New value for the property.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    setMinAge:function(minAge) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Geolocation.Android.LocationRule.name} property.</p>
     * @param {String} name <p>New value for the property.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    setName:function(name) {
    }
};

/**
 * platforms: Mobile Web
 */
Ti.Geolocation.MobileWeb = {

    /**
     * <p>The time within which forward geocoder requests must succeed, in milliseconds.</p>
     * @type Number
     * @since 1.9 (Mobile Web)
     */
    forwardGeocoderTimeout:null,

    /**
     * <p>The time within which location requests must succeed, in milliseconds.</p>
     * @type Number
     * @since 1.9 (Mobile Web)
     */
    locationTimeout:null,

    /**
     * <p>The maximum age of cached locations acceptible for heading requests, in milliseconds.</p>
     * @type Number
     * @since 1.9 (Mobile Web)
     */
    maximumHeadingAge:null,

    /**
     * <p>The maximum age of cached locations acceptible for location requests, in milliseconds.</p>
     * @type Number
     * @since 1.9 (Mobile Web)
     */
    maximumLocationAge:null,

    /**
     * <p>The time within which reverse geocoder requests must succeed, in milliseconds.</p>
     * @type Number
     * @since 1.9 (Mobile Web)
     */
    reverseGeocoderTimeout:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.9 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.9 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Geolocation.MobileWeb.forwardGeocoderTimeout} property.</p>
     * @returns Number
     * @since 1.9 (Mobile Web)
     */
    getForwardGeocoderTimeout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Geolocation.MobileWeb.locationTimeout} property.</p>
     * @returns Number
     * @since 1.9 (Mobile Web)
     */
    getLocationTimeout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Geolocation.MobileWeb.maximumHeadingAge} property.</p>
     * @returns Number
     * @since 1.9 (Mobile Web)
     */
    getMaximumHeadingAge:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Geolocation.MobileWeb.maximumLocationAge} property.</p>
     * @returns Number
     * @since 1.9 (Mobile Web)
     */
    getMaximumLocationAge:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Geolocation.MobileWeb.reverseGeocoderTimeout} property.</p>
     * @returns Number
     * @since 1.9 (Mobile Web)
     */
    getReverseGeocoderTimeout:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.9 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Geolocation.MobileWeb.forwardGeocoderTimeout} property.</p>
     * @param {Number} forwardGeocoderTimeout <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setForwardGeocoderTimeout:function(forwardGeocoderTimeout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Geolocation.MobileWeb.locationTimeout} property.</p>
     * @param {Number} locationTimeout <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setLocationTimeout:function(locationTimeout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Geolocation.MobileWeb.maximumHeadingAge} property.</p>
     * @param {Number} maximumHeadingAge <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setMaximumHeadingAge:function(maximumHeadingAge) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Geolocation.MobileWeb.maximumLocationAge} property.</p>
     * @param {Number} maximumLocationAge <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setMaximumLocationAge:function(maximumLocationAge) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Geolocation.MobileWeb.reverseGeocoderTimeout} property.</p>
     * @param {Number} reverseGeocoderTimeout <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setReverseGeocoderTimeout:function(reverseGeocoderTimeout) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Ti.Gesture = {

    /**
     * <p>True if current window is considered landscape by the device, false otherwise.</p>
     * @type Boolean
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    landscape:null,

    /**
     * <p>Orientation of the current window.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    orientation:null,

    /**
     * <p>True if current window is considered portrait by the device, false otherwise.</p>
     * @type Boolean
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    portrait:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Gesture.orientation} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOrientation:function() {
    },

    /**
     * <p>Returns true if current window is considered lanscape by the device, false
otherwise.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    isLandscape:function() {
    },

    /**
     * <p>Returns true if current window is considered portrait by the device, false
otherwise.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    isPortrait:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>See the {@link Ti.Stream} module for related utility methods that support asynchronous
I/O.</p>
 * 
 * @example Write Data to a Stream
 * <p>This example demonstrates writing data to a stream.</p>
<pre><code>var outBuffer = Ti.createBuffer({data: "write me"});
var outStream = // stream object could be socket, file, buffer or blob

var bytesWritten = outStream.write(outBuffer);  // writes entire buffer to stream
Ti.API.info("Bytes written:" + bytesWritten);  // should be 8

bytesWritten = outStream.write(outBuffer, 2, 5);  // only writes "ite m" to stream
Ti.API.info("Bytes written:" + bytesWritten);  // should be 5
</code></pre>
 * 
 * @example Read Data From a Stream
 * <p>This shows a simple example of reading data from a stream, one buffer full at a
time. </p>
<pre><code>var size = 0;
// read data one buffer full at a time
while ((size = instream.read(buffer)) &gt; -1) {
    // do something with the data here ...
    Ti.API.info("Read " + size + " bytes.");
}
</code></pre>
 * 
 * @example Read Data With Offset and Length
 * <p>This example shows how to read data from a stream into a buffer. We assume that
the <code>inStream</code> variable holds a previously initialized stream that contains the 
string, "World Titanium".</p>
<pre><code>var inBuffer = Ti.createBuffer({ value: "Hello [           ]" });

// Read the first 6 bytes from the stream to the buffer, starting at position 10.
var bytesRead = inStream.read(inBuffer, 10, 6);

Ti.API.info("Bytes read: " + bytesRead);
Ti.API.info(inBuffer.toString());

// Read the next 8  bytes from the stream to the buffer, starting at position 8.
bytesRead = inStream.read(inBuffer, 8, 8);

Ti.API.info("Bytes read: " + bytesRead);
Ti.API.info(inBuffer.toString());
</code></pre>
<p>The second <code>read</code> overwrites the data from the first <code>read</code>, so the output looks
like this:</p>
<pre><code>[INFO] Bytes read: 6
[INFO] Hello [   World   ]
[INFO] Bytes read: 8
[INFO] Hello [ Titanium  ]
</code></pre>
 */
Ti.IOStream = function() {
};
Ti.IOStream.prototype = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Closes this stream.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    close:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Indicates whether this stream is readable.</p>
     * @returns Boolean True if stream is readable, false otherwise.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    isReadable:function() {
    },

    /**
     * <p>Indicates whether this stream is writeable.</p>
     * @returns Boolean True if stream is writeable, false otherwise.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    isWriteable:function() {
    },

    /**
     * <p>Reads data from this stream into a buffer.</p>
     * @param {Ti.Buffer} buffer <p>Buffer to read stream data into.</p>
     * @param {Number} offset <p>Offset into the buffer to start writing stream data.
If specified, <code>length</code> must also be specified.</p>
     * @param {Number} length <p>Maximum number of bytes to read.
If specified, <code>offset</code> must also be specified.</p>
     * @returns Number Number of bytes read.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    read:function(buffer, offset, length) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Writes data from a buffer to this stream.</p>
     * @param {Ti.Buffer} buffer <p>Buffer to write to this stream.</p>
     * @param {Number} offset <p>Offset in the buffer of the first byte to write to the stream.
If specified, <code>length</code> must also be specified.</p>
     * @param {Number} length <p>Maximum number of bytes to write to the stream.
If specified, <code>offset</code> must also be specified.</p>
     * @returns Number Number of bytes written.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    write:function(buffer, offset, length) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>The <code>Locale</code> module works with localization files to which are generated during compilation 
into the operating system specific localization formats. The <code>Locale</code> module provides 
locale-specific strings which can be referenced at runtime.  Additionally, the module 
contains a few methods and properties for querying device locale information.</p>
<p>The macro <code>L</code> can be used as an alias for the {@link Ti.Locale.getString} method.</p>
 */
Ti.Locale = {

    /**
     * <p>Country of the current system locale, as an ISO 2-letter code.</p>
     * @type String
     * @since 1.5 (Android), 1.8 (Mobile Web)
     */
    currentCountry:null,

    /**
     * <p>Language of the current system locale, as an ISO 2-letter code.</p>
     * @type String
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    currentLanguage:null,

    /**
     * <p>Current system locale, as a combination of ISO 2-letter language and country codes.</p>
     * @type String
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    currentLocale:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Formats a telephone number according to the current system locale.</p>
     * @param {String} number <p>Phone number.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    formatTelephoneNumber:function(number) {
    },

    /**
     * <p>Returns the ISO 3-letter currency code for the specified locale.</p>
     * @param {String} locale <p>Locale, as a combination of ISO 2-letter language and country codes. For example, 
<code>en-US</code> or <code>en-GB</code>. See the 
{@link http://en.wikipedia.org/wiki/ISO_639} and 
{@link http://en.wikipedia.org/wiki/ISO_3166} 
sections of wikipedia for reference.</p>
     * @returns String
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad)
     */
    getCurrencyCode:function(locale) {
    },

    /**
     * <p>Returns the currency symbol for the specified currency code.</p>
     * @param {String} currencyCode <p>Currency, as an ISO 3-letter code. For example, <code>USD</code> or <code>GBP</code>. See the 
{@link http://www.xe.com/iso4217.php#section2} section of the <code>www.xe.com</code> website for 
reference.</p>
     * @returns String
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad)
     */
    getCurrencySymbol:function(currencyCode) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Locale.currentCountry} property.</p>
     * @returns String
     * @since 1.5 (Android), 1.8 (Mobile Web)
     */
    getCurrentCountry:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Locale.currentLanguage} property.</p>
     * @returns String
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    getCurrentLanguage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Locale.currentLocale} property.</p>
     * @returns String
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    getCurrentLocale:function() {
    },

    /**
     * <p>Returns the currency symbol for the specified locale.</p>
     * @param {String} locale <p>Locale, as a combination of ISO 2-letter language and country codes. For example, 
<code>en-US</code> or <code>en-GB</code>. See the 
{@link http://en.wikipedia.org/wiki/ISO_639} and 
{@link http://en.wikipedia.org/wiki/ISO_3166} 
sections of wikipedia for reference.</p>
     * @returns String
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad)
     */
    getLocaleCurrencySymbol:function(locale) {
    },

    /**
     * <p>Returns a string, localized according to the current system locale using the appropriate 
<code>/i18n/LANG/strings.xml</code> localization file.</p>
     * @param {String} key <p>Key of string.</p>
     * @param {String} hint <p>Text to return if key does not exist in the localization file.</p>
     * @returns String
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    getString:function(key, hint) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * 
 * @example Map Example
 * <p>This is a basic map example that places a custom annotation on the map, and 
listens for click events on the annotation. </p>
<p>In this example, a custom property (<code>myid</code>) is added to the annotation objct.
While adding custom members to a Titanium object is not generally recommended,
in this case it provides a mechanism for uniquely identifying an annotation. This
can be useful, for example, if the annotations are dynamically generated 
and it is not practical to identify them by title.</p>
<pre><code>var mountainView = Ti.Map.createAnnotation({
    latitude:37.390749,
    longitude:-122.081651,
    title:"Appcelerator Headquarters",
    subtitle:'Mountain View, CA',
    pincolor:Ti.Map.ANNOTATION_RED,
    animate:true,
    leftButton: '../images/appcelerator_small.png',
    myid:1 // Custom property to uniquely identify this annotation.
});

var mapview = Ti.Map.createView({
    mapType: Ti.Map.STANDARD_TYPE,
    region: {latitude:33.74511, longitude:-84.38993, 
            latitudeDelta:0.01, longitudeDelta:0.01},
    animate:true,
    regionFit:true,
    userLocation:true,
    annotations:[mountainView]
});

win.add(mapview);
// Handle click events on any annotations on this map.
mapview.addEventListener('click', function(evt) {

    Ti.API.info("Annotation " + evt.title + " clicked, id: " + evt.annotation.myid);

    // Check for all of the possible names that clicksouce
    // can report for the left button/view.
    if (evt.clicksource == 'leftButton' || evt.clicksource == 'leftPane' ||
        evt.clicksource == 'leftView') {
        Ti.API.info("Annotation " + evt.title + ", left button clicked.");
    }
});
</code></pre>
 */
Ti.Map = {

    /**
     * <p>Color constant used to set a map annotation to green via the 
{@link Ti.Map.Annotation.pincolor} property.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ANNOTATION_GREEN:null,

    /**
     * <p>Color constant used to set a map annotation to purple via the 
{@link Ti.Map.Annotation.pincolor} property.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ANNOTATION_PURPLE:null,

    /**
     * <p>Color constant used to set a map annotation to red via the 
{@link Ti.Map.Annotation.pincolor} property.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ANNOTATION_RED:null,

    /**
     * <p>Used with {@link Ti.Map.View.mapType} to display a satellite image of the area with road and road name information layered on top.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    HYBRID_TYPE:null,

    /**
     * <p>Used with {@link Ti.Map.View.mapType} to display satellite imagery of the area.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    SATELLITE_TYPE:null,

    /**
     * <p>Used with {@link Ti.Map.View.mapType} to display a street map that shows the position of all roads and some road names.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    STANDARD_TYPE:null,

    /**
     * <p>Used with {@link Ti.Map.View.mapType} to display the terrain that shows the position of all roads and some road names.</p>
     * @type Number
     * @since 1.8 (Mobile Web)
     */
    TERRAIN_TYPE:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.Map.Annotation}.</p>
     * @param {Dictionary<Ti.Map.Annotation>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.Map.Annotation} except those marked not-creation or read-only.</p>
     * @returns Ti.Map.Annotation
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createAnnotation:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.Map.View}.</p>
     * @param {Dictionary<Ti.Map.View>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.Map.View} except those marked not-creation or read-only.</p>
     * @returns Ti.Map.View
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createView:function(parameters) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>The <code>Annotation</code> object gives you low-level control over annotations that can be added to 
{@link Ti.Map.View}. An annotation must have its <code>latitude</code> and <code>longitude</code>
properties set to appear on a map.</p>
<p>An annotation can also have a title, a subtitle, and two inset buttons or views on the left
and right side of the title. All of these items are optional.</p>
<p>The controls on the left and right side of the annotation can be specified in one of two
ways:</p>
<ul>
<li>
<p>To display an image, set the {@link Ti.Map.Annotation.leftButton} or 
  {@link Ti.Map.Annotation.rightButton} property to an image URL. (On 
  iOS, you can also use a {@link Ti.UI.iPhone.SystemButton} constant 
  to use one of the native system button icons.) </p>
</li>
<li>
<p>To add another type of view to the annotation, set the 
  {@link Ti.Map.Annotation.leftView} or 
  {@link Ti.Map.Annotation.rightView} property to a {@link Ti.UI.View}
  object.</p>
</li>
</ul>
<p><code>leftButton</code> and <code>leftView</code> are mutually exclusive, as are <code>rightButton</code> and
<code>rightView</code>. </p>
<p>An annotation has two states: selected and deselected. A deselected annotation
is marked by a pin image. When the user selects the pin, the full annotation is 
displayed.</p>
<p>You can specify a custom image for the map pin by setting the
{@link Ti.Map.Annotation.image} property. </p>
<p>When the user clicks on an annotation, a <code>click</code> event is generated. </p>
<p>On iOS, You can add a click event listener to a specific annotation, or add a 
click event listener to the map view to receive click events from all annotations 
on the map.</p>
<p>On Android, you must add the click event listener to the map view; the annotation
itself does not generate these events. </p>
<p>Use the {@link Ti.Map.createAnnotation} method to create an annotation.</p>
 */
Ti.Map.Annotation = function() {
};
Ti.Map.Annotation.prototype = {

    /**
     * <p>Boolean to indicate whether the pin should animate when dropped.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    animate:null,

    /**
     * <p>Image to use for the the pin.</p>
     * @type String|Ti.Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    image:null,

    /**
     * <p>Latitude of the annotation, in decimal degrees.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    latitude:null,

    /**
     * <p>Left button image on the annotation, specified as an image URL or an iOS
button constant.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    leftButton:null,

    /**
     * <p>Left view that is displayed on the annotation.</p>
     * @type Ti.UI.View
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    leftView:null,

    /**
     * <p>Longitude of the annotation, in decimal degrees.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    longitude:null,

    /**
     * <p>Use {@link Ti.Map.Annotation.image} property instead.</p>
     * @type String
     * @since 0.9 (Android)
     */
    pinImage:null,

    /**
     * <p>Pin color. Specify one of: {@link Ti.Map.ANNOTATION_GREEN}, {@link Ti.Map.ANNOTATION_PURPLE} 
or {@link Ti.Map.ANNOTATION_RED}.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    pincolor:null,

    /**
     * <p>Right button image on the annotation, specified as an image URL or an iOS
button constant.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    rightButton:null,

    /**
     * <p>Right view that is displayed on the annotation.</p>
     * @type Ti.UI.View
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    rightView:null,

    /**
     * <p>Secondary title of the annotation view.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    subtitle:null,

    /**
     * <p>Key in the locale file to use for the subtitle property.</p>
     * @type String
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    subtitleid:null,

    /**
     * <p>Primary title of the annotation view.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    title:null,

    /**
     * <p>Key in the locale file to use for the title property.</p>
     * @type String
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    titleid:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.Annotation.animate} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getAnimate:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.Annotation.image} property.</p>
     * @returns String
     * @returns Ti.Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.Annotation.latitude} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLatitude:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.Annotation.leftButton} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeftButton:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.Annotation.leftView} property.</p>
     * @returns Ti.UI.View
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getLeftView:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.Annotation.longitude} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLongitude:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.Annotation.pinImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getPinImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.Annotation.pincolor} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getPincolor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.Annotation.rightButton} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRightButton:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.Annotation.rightView} property.</p>
     * @returns Ti.UI.View
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getRightView:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.Annotation.subtitle} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSubtitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.Annotation.subtitleid} property.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSubtitleid:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.Annotation.title} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.Annotation.titleid} property.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTitleid:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.Annotation.animate} property.</p>
     * @param {Boolean} animate <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setAnimate:function(animate) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.Annotation.image} property.</p>
     * @param {String|Ti.Blob} image <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setImage:function(image) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.Annotation.latitude} property.</p>
     * @param {Number} latitude <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLatitude:function(latitude) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.Annotation.leftButton} property.</p>
     * @param {Number|String} leftButton <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeftButton:function(leftButton) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.Annotation.leftView} property.</p>
     * @param {Ti.UI.View} leftView <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setLeftView:function(leftView) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.Annotation.longitude} property.</p>
     * @param {Number} longitude <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLongitude:function(longitude) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.Annotation.pinImage} property.</p>
     * @param {String} pinImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setPinImage:function(pinImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.Annotation.pincolor} property.</p>
     * @param {Number} pincolor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setPincolor:function(pincolor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.Annotation.rightButton} property.</p>
     * @param {Number|String} rightButton <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRightButton:function(rightButton) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.Annotation.rightView} property.</p>
     * @param {Ti.UI.View} rightView <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setRightView:function(rightView) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.Annotation.subtitle} property.</p>
     * @param {String} subtitle <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setSubtitle:function(subtitle) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.Annotation.subtitleid} property.</p>
     * @param {String} subtitleid <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setSubtitleid:function(subtitleid) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.Annotation.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTitle:function(title) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.Annotation.titleid} property.</p>
     * @param {String} titleid <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTitleid:function(titleid) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>With native maps, you can control the mapping location, the type of map, the zoom level 
and you can add custom annotations directly to the map. Once the map view is
displayed, the user can pan and zoom the map using the native control gestures.</p>
<p>Use the {@link Ti.Map.createView} method to create a map view.</p>
<p>All latitude and longitude values are specified in decimal degrees. Values in degrees,
minutes and seconds (DMS) must be converted to decimal degrees before being passed to
the map view.</p>
<p>You can add {@link Ti.Map.Annotation} objects to the map to mark points of
interest. An annotation has two states: selected and deselected. A deselected annotation 
is marked by a pin image. When selected, the full annotation is displayed, typically
including a title, an optional subtitle, and one or more images.</p>
<h4>Android Platform Notes</h4>
<p>For Android, you must obtain an Android Maps API key from Google before using maps in a production
application. You can sign up for the Maps API key on the Google Code web site:</p>
<ul>
<li>{@link http://code.google.com/android/maps} </li>
</ul>
<p>When you get a Maps API key, edit your <code>tiapp.xml</code> file and add your new key as the
value for the  <code>ti.android.google.map.api.key.production</code> property.</p>
<p>A development API key is included in the default <code>tiapp.xml</code> file. You can use this
key for development and testing as long as you are building your application with the 
default Titanium development keystore.</p>
<h4>iOS Platform Notes</h4>
<p>On iOS, you cannot call any methods on a map view until it has been added to a view.</p>
<p>In addition to annotations, iOS supports adding routes to a map view, using
{@link Ti.Map.View.addRoute}.</p>
<h4>Mobile Web Platform Notes</h4>
<p>For Mobile Web, the default map provider is Google. Google Maps does not require you to obtain an API key,
however it is encouraged that you use an API key so that you can monitor your Maps API usage. You can sign
up for the Maps API key on the Google Code web site:</p>
<ul>
<li>{@link https://developers.google.com/maps/signup}</li>
</ul>
<p>If you get a Maps API key, edit your <code>tiapp.xml</code> file and add your new key as the
value for the <code>&lt;mobileweb&gt;&lt;map&gt;&lt;apikey&gt;</code> tag.</p>
<pre><code>&lt;mobileweb&gt;
    &lt;map&gt;
        &lt;apikey&gt;[key goes here]&lt;/apikey&gt;
    &lt;/map&gt;
&lt;/mobileweb&gt;
</code></pre>
 */
Ti.Map.View = function() {
};
Ti.Map.View.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Indicates if changes to the mapping region should be animated.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animate:null,

    /**
     * <p>Indicates if changes to the mapping region should be animated.</p>
     * @type Boolean
     * @since 1.8 (Mobile Web)
     */
    animated:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>An array of annotations to add to the map.</p>
     * @type Array<Ti.Map.Annotation>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    annotations:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    children:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>The amount of north-to-south distance displayed on the map, measured in decimal degrees.</p>
     * @type Number
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    latitudeDelta:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>The amount of east-to-west distance displayed on the map, measured in decimal degrees.</p>
     * @type Number
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    longitudeDelta:null,

    /**
     * <p>Map type, either: {@link Ti.Map.STANDARD_TYPE}, {@link Ti.Map.SATELLITE_TYPE} or {@link Ti.Map.HYBRID_TYPE}.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    mapType:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>A dictionary specifying the location and zoom level of the map.</p>
     * @type MapRegionType
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    region:null,

    /**
     * <p>Boolean indicating if the map region should be modified 
to fit the map view's aspect ratio.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    regionFit:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>Boolean indicating if the user's current device location should be shown on the
map.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    userLocation:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds a new annotation to the map.</p>
     * @param {Dictionary<Ti.Map.Annotation>|Ti.Map.Annotation} annotation <p>Either a dictionary of properties for the annotation or a {@link Ti.Map.Annotation} instance.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addAnnotation:function(annotation) {
    },

    /**
     * <p>Adds one or more new annotations to the map.</p>
     * @param {Array<Ti.Map.Annotation>|Array<Dictionary<Ti.Map.Annotation>>} annotations <p>Array of {@link Ti.Map.Annotation} objects, or an array of
dictionaries describing of properties for the annotation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addAnnotations:function(annotations) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Adds a route to the map.</p>
     * @param {MapRouteType} route <p>Simple dictionary object describing the route.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addRoute:function(route) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Deselects the specified annotation, so the main annotation is hidden and only
a pin image is shown.</p>
     * @param {String|Ti.Map.Annotation} annotation <p>Annotation to deselect, identified by an annotation title or a {@link Ti.Map.Annotation} reference.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    deselectAnnotation:function(annotation) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.animate} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimate:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.animated} property.</p>
     * @returns Boolean
     * @since 1.8 (Mobile Web)
     */
    getAnimated:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.annotations} property.</p>
     * @returns Array<Ti.Map.Annotation>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getAnnotations:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.latitudeDelta} property.</p>
     * @returns Number
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    getLatitudeDelta:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.longitudeDelta} property.</p>
     * @returns Number
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    getLongitudeDelta:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.mapType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getMapType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.region} property.</p>
     * @returns MapRegionType
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRegion:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.regionFit} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRegionFit:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.size} property.</p>
     * @returns Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.userLocation} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getUserLocation:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Map.View.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes all annotations from the map.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeAllAnnotations:function() {
    },

    /**
     * <p>Removes an existing annotation from the map.</p>
     * @param {String|Ti.Map.Annotation} annotation <p>Annotation to remove, identified by an annotation title or a {@link Ti.Map.Annotation} reference.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeAnnotation:function(annotation) {
    },

    /**
     * <p>Removes one or more existing annotations from the map.</p>
     * @param {Array<String>|Array<Ti.Map.Annotation>} annotations <p>Array of annotations to remove.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeAnnotations:function(annotations) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Remove a previously added route.</p>
     * @param {MapRouteType} route <p>Same route object passed to {@link Ti.Map.View.addRoute}.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeRoute:function(route) {
    },

    /**
     * <p>Selects the annoation, showing the full annotation.</p>
     * @param {String|Ti.Map.Annotation} annotation <p>Annotation to show, identified by an annotation title or a {@link Ti.Map.Annotation} reference.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    selectAnnotation:function(annotation) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.animate} property.</p>
     * @param {Boolean} animate <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setAnimate:function(animate) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.animated} property.</p>
     * @param {Boolean} animated <p>New value for the property.</p>
     * @since 1.8 (Mobile Web)
     */
    setAnimated:function(animated) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.annotations} property.</p>
     * @param {Array<Ti.Map.Annotation>} annotations <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setAnnotations:function(annotations) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the map location and zoom level.</p>
     * @param {MapLocationType} location <p>Dictionary specifying the location and the zoom level for the map.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLocation:function(location) {
    },

    /**
     * <p>Sets the type of map (satellite, hybrid, or standard).</p>
     * @param {Number} mapType <p>Map type constant, either {@link Ti.Map.STANDARD_TYPE}, {@link Ti.Map.SATELLITE_TYPE} or 
{@link Ti.Map.HYBRID_TYPE}.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setMapType:function(mapType) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.region} property.</p>
     * @param {MapRegionType} region <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRegion:function(region) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.regionFit} property.</p>
     * @param {Boolean} regionFit <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRegionFit:function(regionFit) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.userLocation} property.</p>
     * @param {Boolean} userLocation <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setUserLocation:function(userLocation) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Map.View.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    },

    /**
     * <p>Zooms in or out of the map.</p>
     * @param {Number} level <p>Relative zoom level (positive to zoom in, negative to zoom out).</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zoom:function(level) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>The Media module is used accessing the device's media related  functionality such 
as playing audio or recording video.</p>
 */
Ti.Media = {

    /**
     * <p>Audio file format 3GPP2.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FILEFORMAT_3GP2:null,

    /**
     * <p>Audio file format 3GPP.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FILEFORMAT_3GPP:null,

    /**
     * <p>Audio file format Audio Interchange File Format (AIFF).</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FILEFORMAT_AIFF:null,

    /**
     * <p>Audio file format Adaptive Multi-Rate (AMR).</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FILEFORMAT_AMR:null,

    /**
     * <p>Audio file format Apple Compressed Audio Format (CAF).</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FILEFORMAT_CAF:null,

    /**
     * <p>Audio file format MP3.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FILEFORMAT_MP3:null,

    /**
     * <p>Audio file format MP4.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FILEFORMAT_MP4:null,

    /**
     * <p>Audio file format MP4A.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FILEFORMAT_MP4A:null,

    /**
     * <p>Audio file format WAVE.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FILEFORMAT_WAVE:null,

    /**
     * <p>Audio format MPEG4 AAC encoding.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FORMAT_AAC:null,

    /**
     * <p>Audio format 8-bit aLaw encoding.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FORMAT_ALAW:null,

    /**
     * <p>Audio format Apple lossless encoding.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FORMAT_APPLE_LOSSLESS:null,

    /**
     * <p>Audio format iLBC encoding.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FORMAT_ILBC:null,

    /**
     * <p>Audio format Apple IMA4 encoding.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FORMAT_IMA4:null,

    /**
     * <p>Audio format 16-bit, linear PCM encoding.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FORMAT_LINEAR_PCM:null,

    /**
     * <p>Audio format 8-bit muLaw encoding.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FORMAT_ULAW:null,

    /**
     * <p>Line-type constant for headphones.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_HEADPHONES:null,

    /**
     * <p>Line-type constant for headphones and microphone.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_HEADPHONES_AND_MIC:null,

    /**
     * <p>Line-type constant for headset in/out.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_HEADSET_INOUT:null,

    /**
     * <p>Line-type constant for line-out.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_LINEOUT:null,

    /**
     * <p>Line-type constant for microphone.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_MICROPHONE:null,

    /**
     * <p>Line-type constant indicated mute switch is on.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_MUTED:null,

    /**
     * <p>Line-type constant indicating receiver and microphone.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_RECEIVER_AND_MIC:null,

    /**
     * <p>For long-duration sounds such as rain, car engine noise, and so on.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_SESSION_MODE_AMBIENT:null,

    /**
     * <p>Session mode for playing recorded music or other sounds that are central to the successful use of your application.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_SESSION_MODE_PLAYBACK:null,

    /**
     * <p>Session mode for recording (input) and playback (output) of audio, such as for a VOIP (voice over IP) application.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_SESSION_MODE_PLAY_AND_RECORD:null,

    /**
     * <p>Session mode for recording audio; it silences playback audio.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_SESSION_MODE_RECORD:null,

    /**
     * <p>Session mode for long-duration sounds such as rain, car engine noise, and so on.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_SESSION_MODE_SOLO_AMBIENT:null,

    /**
     * <p>Line-type constant for speaker output.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_SPEAKER:null,

    /**
     * <p>Line-type constant indicating that audio is unavailable.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_UNAVAILABLE:null,

    /**
     * <p>Line-type constant indicating that line-type is unknown or not determined.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_UNKNOWN:null,

    /**
     * <p>Constant for media device busy error.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    DEVICE_BUSY:null,

    /**
     * <p>Media type constant for photo media.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    MEDIA_TYPE_PHOTO:null,

    /**
     * <p>Media type constant for video media.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    MEDIA_TYPE_VIDEO:null,

    /**
     * <p>Constant for grouping query results by album.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_GROUP_ALBUM:null,

    /**
     * <p>Constant for grouping query results by album and artist.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_GROUP_ALBUM_ARTIST:null,

    /**
     * <p>Constant for grouping query results by artist.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_GROUP_ARTIST:null,

    /**
     * <p>Constant for grouping query results by composer.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_GROUP_COMPOSER:null,

    /**
     * <p>Constant for grouping query results by genre.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_GROUP_GENRE:null,

    /**
     * <p>Constant for grouping query results by playlist.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_GROUP_PLAYLIST:null,

    /**
     * <p>Constant for grouping query results by podcast title.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_GROUP_PODCAST_TITLE:null,

    /**
     * <p>Constant for grouping query results by title.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_GROUP_TITLE:null,

    /**
     * <p>Music library media containing any type of content.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_TYPE_ALL:null,

    /**
     * <p>Music library media containing any type of audio content.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_TYPE_ANY_AUDIO:null,

    /**
     * <p>Music library media containing audiobook content.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_TYPE_AUDIOBOOK:null,

    /**
     * <p>Music library media containing music content.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_TYPE_MUSIC:null,

    /**
     * <p>Music library media containing podcast content.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_TYPE_PODCAST:null,

    /**
     * <p>Constant for "Repeat All" setting.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_REPEAT_ALL:null,

    /**
     * <p>Constant for user's default repeat setting.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_REPEAT_DEFAULT:null,

    /**
     * <p>Constant for "No Repeat" setting.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_REPEAT_NONE:null,

    /**
     * <p>Constant for "Repeat one item" setting.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_REPEAT_ONE:null,

    /**
     * <p>Constant for shuffling complete albums setting.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_SHUFFLE_ALBUMS:null,

    /**
     * <p>Constant for user's default shuffle setting.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_SHUFFLE_DEFAULT:null,

    /**
     * <p>Constant for "no shuffle" setting.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_SHUFFLE_NONE:null,

    /**
     * <p>Constant for shuffling songs setting.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_SHUFFLE_SONGS:null,

    /**
     * <p>Constant for interrupted state.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_STATE_INTERRUPTED:null,

    /**
     * <p>Constant for paused state.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_STATE_PAUSED:null,

    /**
     * <p>Constant for playing state.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_STATE_PLAYING:null,

    /**
     * <p>Constant for backward seek state.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_STATE_SEEK_BACKWARD:null,

    /**
     * <p>Constant for forward seek state.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_STATE_SEEK_FORWARD:null,

    /**
     * <p>Constant for stopped state.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_STATE_STOPPED:null,

    /**
     * <p>Constant for media no camera error.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    NO_CAMERA:null,

    /**
     * <p>Constant for media no video error.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    NO_VIDEO:null,

    /**
     * <p>Media type constant for high-quality video recording.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    QUALITY_HIGH:null,

    /**
     * <p>Media type constant for low-quality video recording.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    QUALITY_LOW:null,

    /**
     * <p>Media type constant for medium-quality video recording.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    QUALITY_MEDIUM:null,

    /**
     * <p>Constant for unknown media error.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    UNKNOWN_ERROR:null,

    /**
     * <p>Constant for default video controls.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    VIDEO_CONTROL_DEFAULT:null,

    /**
     * <p>Constant for video controls for an embedded view.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_CONTROL_EMBEDDED:null,

    /**
     * <p>Constant for fullscreen video controls.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_CONTROL_FULLSCREEN:null,

    /**
     * <p>Constant for video controls hidden.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_CONTROL_HIDDEN:null,

    /**
     * <p>Constant for no video controls.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    VIDEO_CONTROL_NONE:null,

    /**
     * <p>Constant for video controls volume only.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_CONTROL_VOLUME_ONLY:null,

    /**
     * <p>Video playback ended normally.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_FINISH_REASON_PLAYBACK_ENDED:null,

    /**
     * <p>Video playback ended abnormally.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_FINISH_REASON_PLAYBACK_ERROR:null,

    /**
     * <p>Video playback ended by user action (such as clicking the <code>Done</code> button).</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_FINISH_REASON_USER_EXITED:null,

    /**
     * <p>Current media is playable.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    VIDEO_LOAD_STATE_PLAYABLE:null,

    /**
     * <p>Playback will be automatically started in this state when <code>autoplay</code> is true.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    VIDEO_LOAD_STATE_PLAYTHROUGH_OK:null,

    /**
     * <p>Playback will be automatically paused in this state, if started.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    VIDEO_LOAD_STATE_STALLED:null,

    /**
     * <p>Current load state is not known.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    VIDEO_LOAD_STATE_UNKNOWN:null,

    /**
     * <p>A audio type of media in the movie returned by {@link Ti.Media.VideoPlayer} <code>mediaTypes</code> property.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_MEDIA_TYPE_AUDIO:null,

    /**
     * <p>An unknown type of media in the movie returned by {@link Ti.Media.VideoPlayer} <code>mediaTypes</code> property.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_MEDIA_TYPE_NONE:null,

    /**
     * <p>A video type of media in the movie returned by {@link Ti.Media.VideoPlayer} <code>mediaTypes</code> property.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_MEDIA_TYPE_VIDEO:null,

    /**
     * <p>Video playback has been interrupted.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_PLAYBACK_STATE_INTERRUPTED:null,

    /**
     * <p>Video playback is paused.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    VIDEO_PLAYBACK_STATE_PAUSED:null,

    /**
     * <p>Video is being played.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    VIDEO_PLAYBACK_STATE_PLAYING:null,

    /**
     * <p>Video playback is rewinding.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_PLAYBACK_STATE_SEEKING_BACKWARD:null,

    /**
     * <p>Video playback is seeking forward.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_PLAYBACK_STATE_SEEKING_FORWARD:null,

    /**
     * <p>Video playback is stopped.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    VIDEO_PLAYBACK_STATE_STOPPED:null,

    /**
     * <p>Constant for disabling repeat on video playback.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    VIDEO_REPEAT_MODE_NONE:null,

    /**
     * <p>Constant for repeating one video (i.e., the one video will repeat constantly) during playback.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    VIDEO_REPEAT_MODE_ONE:null,

    /**
     * <p>Scale video to fill the screen, clipping edges if necessary.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_SCALING_ASPECT_FILL:null,

    /**
     * <p>Scale video to fit the screen, letterboxing if necessary.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    VIDEO_SCALING_ASPECT_FIT:null,

    /**
     * <p>Video is scaled until both dimensions fit the screen exactly, stretching if necessary.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_SCALING_MODE_FILL:null,

    /**
     * <p>Video scaling is disabled.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    VIDEO_SCALING_NONE:null,

    /**
     * <p>Video source type is a file.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_SOURCE_TYPE_FILE:null,

    /**
     * <p>Video source type is a remote stream.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_SOURCE_TYPE_STREAMING:null,

    /**
     * <p>Video source type is unknown.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_SOURCE_TYPE_UNKNOWN:null,

    /**
     * <p>Use the exact time.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_TIME_OPTION_EXACT:null,

    /**
     * <p>Use the closest keyframe in the time.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_TIME_OPTION_NEAREST_KEYFRAME:null,

    /**
     * <p>An instance of {@link Ti.Media.MusicPlayer} representing the app-specific music player.</p>
     * @type Ti.Media.MusicPlayer
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    appMusicPlayer:null,

    /**
     * <p>Returns the line type constant for the current line type.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    audioLineType:null,

    /**
     * <p>Returns <code>true</code> if the device is playing audio.</p>
     * @type Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    audioPlaying:null,

    /**
     * <p>A constant for the audio session mode to be used.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    audioSessionMode:null,

    /**
     * <p>Array of media type constants supported for the camera.</p>
     * @type Array<Object>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    availableCameraMediaTypes:null,

    /**
     * <p>Array of media type constants supported for saving to the device's camera roll or saved images album.</p>
     * @type Array<Object>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    availablePhotoGalleryMediaTypes:null,

    /**
     * <p>Array of media type constants supported for the photo library.</p>
     * @type Array<Object>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    availablePhotoMediaTypes:null,

    /**
     * <p>Current average microphone level in dB or -1 if microphone monitoring is disabled.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    averageMicrophonePower:null,

    /**
     * <p><code>true</code> if the device has a recording input device available.</p>
     * @type Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    canRecord:null,

    /**
     * <p><code>true</code> if the device has camera support.</p>
     * @type Boolean
     * @since 0.1 (iPhone), 0.1 (iPad), 0.1 (Android)
     */
    isCameraSupported:null,

    /**
     * <p>Current microphone level peak power in dB or -1 if microphone monitoring is disabled.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    peakMicrophonePower:null,

    /**
     * <p>An instance of {@link Ti.Media.MusicPlayer} representing the system-wide music player.</p>
     * @type Ti.Media.MusicPlayer
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    systemMusicPlayer:null,

    /**
     * <p>Current volume of the playback device.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    volume:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Plays a device beep notification.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    beep:function() {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.Media.AudioPlayer}.</p>
     * @param {Dictionary<Ti.Media.AudioPlayer>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.Media.AudioPlayer} except those marked not-creation or read-only.</p>
     * @returns Ti.Media.AudioPlayer
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    createAudioPlayer:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.Media.AudioRecorder}.</p>
     * @param {Dictionary<Ti.Media.AudioRecorder>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.Media.AudioRecorder} except those marked not-creation or read-only.</p>
     * @returns Ti.Media.AudioRecorder
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    createAudioRecorder:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.Media.Item}.</p>
     * @param {Dictionary<Ti.Media.Item>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.Media.Item} except those marked not-creation or read-only.</p>
     * @returns Ti.Media.Item
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    createItem:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.Media.MusicPlayer}.</p>
     * @param {Dictionary<Ti.Media.MusicPlayer>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.Media.MusicPlayer} except those marked not-creation or read-only.</p>
     * @returns Ti.Media.MusicPlayer
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    createMusicPlayer:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.Media.Sound}.</p>
     * @param {Dictionary<Ti.Media.Sound>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.Media.Sound} except those marked not-creation or read-only.</p>
     * @returns Ti.Media.Sound
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    createSound:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.Media.VideoPlayer}.</p>
     * @param {Dictionary<Ti.Media.VideoPlayer>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.Media.VideoPlayer} except those marked not-creation or read-only.</p>
     * @returns Ti.Media.VideoPlayer
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createVideoPlayer:function(parameters) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.appMusicPlayer} property.</p>
     * @returns Ti.Media.MusicPlayer
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getAppMusicPlayer:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.audioLineType} property.</p>
     * @returns Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getAudioLineType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.audioPlaying} property.</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getAudioPlaying:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.audioSessionMode} property.</p>
     * @returns Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getAudioSessionMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.availableCameraMediaTypes} property.</p>
     * @returns Array<Object>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getAvailableCameraMediaTypes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.availablePhotoGalleryMediaTypes} property.</p>
     * @returns Array<Object>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getAvailablePhotoGalleryMediaTypes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.availablePhotoMediaTypes} property.</p>
     * @returns Array<Object>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getAvailablePhotoMediaTypes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.averageMicrophonePower} property.</p>
     * @returns Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getAverageMicrophonePower:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.canRecord} property.</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getCanRecord:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.isCameraSupported} property.</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad), 0.1 (Android)
     */
    getIsCameraSupported:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.peakMicrophonePower} property.</p>
     * @returns Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getPeakMicrophonePower:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.systemMusicPlayer} property.</p>
     * @returns Ti.Media.MusicPlayer
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getSystemMusicPlayer:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.volume} property.</p>
     * @returns Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getVolume:function() {
    },

    /**
     * <p>Hides the device camera UI.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    hideCamera:function() {
    },

    /**
     * <p>Hides the music library.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    hideMusicLibrary:function() {
    },

    /**
     * <p>Returns <code>true</code> if the source supports the specified media type.</p>
     * @param {String} source <p>Media source specified as a string: <code>camera</code> for Camera or <code>photo</code> for Photo Library.</p>
     * @param {String} type <p>Media type to check, either <code>MEDIA_TYPE_PHOTO</code> or <code>MEDIA_TYPE_VIDEO</code>.</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    isMediaTypeSupported:function(source, type) {
    },

    /**
     * <p>Opens the photo gallery image picker.</p>
     * @param {PhotoGalleryOptionsType} options <p>Photo gallery options as described in {@link PhotoGalleryOptionsType}.</p>
     * @since 0.1 (iPhone), 0.1 (iPad), 0.1 (Android)
     */
    openPhotoGallery:function(options) {
    },

    /**
     * <p>Displays the given image.</p>
     * @param {Dictionary<PreviewImageOptions>} options <p>Dictionary containing the image and callback functions.</p>
     * @since 0.1 (Android)
     */
    previewImage:function(options) {
    },

    /**
     * <p>Searches the music library for items matching the specified search predicates.</p>
     * @param {MediaQueryType} query <p>The query object to extract information from.</p>
     * @returns Array<MediaItemType>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    queryMusicLibrary:function(query) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Saves media to the device's photo gallery / camera roll.</p>
     * @param {Ti.Blob|Ti.Filesystem.File} media <p>Media to save to the camera roll or media gallery.</p>
     * @param {Object} callbacks <p>Pass a dictionary with the following supported keys: <code>success</code> a function that 
will be called when the save succeeds, and <code>error</code> a function that will be 
called upon receiving an error.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    saveToPhotoGallery:function(media, callbacks) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.audioSessionMode} property.</p>
     * @param {Number} audioSessionMode <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setAudioSessionMode:function(audioSessionMode) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.availableCameraMediaTypes} property.</p>
     * @param {Array<Object>} availableCameraMediaTypes <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setAvailableCameraMediaTypes:function(availableCameraMediaTypes) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.availablePhotoGalleryMediaTypes} property.</p>
     * @param {Array<Object>} availablePhotoGalleryMediaTypes <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setAvailablePhotoGalleryMediaTypes:function(availablePhotoGalleryMediaTypes) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.availablePhotoMediaTypes} property.</p>
     * @param {Array<Object>} availablePhotoMediaTypes <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setAvailablePhotoMediaTypes:function(availablePhotoMediaTypes) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.averageMicrophonePower} property.</p>
     * @param {Number} averageMicrophonePower <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setAverageMicrophonePower:function(averageMicrophonePower) {
    },

    /**
     * <p>Shows the camera.</p>
     * @param {CameraOptionsType} options <p>A dictionary of camera options as described in {@link CameraOptionsType}.</p>
     * @since 0.1 (iPhone), 0.1 (iPad), 0.1 (Android)
     */
    showCamera:function(options) {
    },

    /**
     * <p>Shows the music library and allows the user to select one or more tracks.</p>
     * @param {MusicLibraryOptionsType} options <p>A dictionary of options as described in {@link MusicLibraryOptionsType}.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    showMusicLibrary:function(options) {
    },

    /**
     * <p>Starts monitoring the microphone sound level.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    startMicrophoneMonitor:function() {
    },

    /**
     * <p>Stops monitoring the microphone sound level.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    stopMicrophoneMonitor:function() {
    },

    /**
     * <p>Uses the device camera to capture a photo.</p>
     * @since 0.1 (iPhone), 0.1 (iPad), 0.1 (Android)
     */
    takePicture:function() {
    },

    /**
     * <p>Takes a screen shot of the visible UI on the device.</p>
     * @param {Callback<ScreenshotResult>} callback <p>Function to call upon capture.</p>
     * @since 0.1 (iPhone), 0.1 (iPad), 0.1 (Android)
     */
    takeScreenshot:function(callback) {
    },

    /**
     * <p>Makes the device vibrate.</p>
     * @param {Array<Number>} pattern <p>Array of values identifying a vibrate pattern (only used on Android).</p>
     * @since 0.1 (iPhone), 0.1 (iPad), 0.1 (Android), 1.8 (Mobile Web)
     */
    vibrate:function(pattern) {
    }
};

/**
 * platforms: Android
 */
Ti.Media.Android = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.7.0 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.7.0 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.7.0 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Scans newly created or downloaded media files to make them available to other
Android media providers, such as the Gallery.</p>
     * @param {Array<String>} paths <p>Array of paths to the files you want to scan.</p>
     * @param {Array<String>} mimeTypes <p>Array of MIME types for the files in the paths parameter. If <code>null</code>, MIME type will 
be inferred from the file names.</p>
     * @param {Callback<MediaScannerResponse>} callback <p>Function to call when each file is done being scanned. </p>
     * @since 1.7.0 (Android)
     */
    scanMediaFiles:function(paths, mimeTypes, callback) {
    },

    /**
     * <p>Set the system homescreen wallpaper.</p>
     * @param {Ti.Blob} image <p>Image to use as the wallpaper, as a <code>Blob</code> object.</p>
     * @param {Boolean} scale <p>If <code>true</code>, the image is scaled to fit the width of the system wallpaper. If
<code>false</code>, the image is not scaled.</p>
     * @since 1.7.0 (Android)
     */
    setSystemWallpaper:function(image, scale) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>On Android, when you are done playing a given audio file, you must call the 
{@link Ti.Media.AudioPlayer.release} method to stop buffering audio data and 
release associated system resources.</p>
<p>On iOS, you can control how the audio stream interacts with other system sounds
by setting {@link Ti.Media.audioSessionMode}.</p>
<p>Use the {@link Ti.Media.createAudioPlayer} method to create an audio player.</p>
 * 
 * @example Audio Streaming
 * <p>The following example demonstrates using the <code>AudioPlayer</code> object to stream audio.</p>
<pre><code>var win = Ti.UI.createWindow({  
    title:'Audio Test',
    backgroundColor:'#fff',
    layout: 'vertical'
});

var startStopButton = Ti.UI.createButton({
    title:'Start/Stop Streaming',
    top:10,
    width:200,
    height:40
});

var pauseResumeButton = Ti.UI.createButton({
    title:'Pause/Resume Streaming',
    top:10,
    width:200,
    height:40,
    enabled:false
});

win.add(startStopButton);
win.add(pauseResumeButton);

// allowBackground: true on Android allows the 
// player to keep playing when the app is in the 
// background.
var audioPlayer = Ti.Media.createAudioPlayer({ 
    url: 'www.example.com/podcast.mp3',
    allowBackground: true
});

startStopButton.addEventListener('click',function() {
    // When paused, playing returns false.
    // If both are false, playback is stopped.
    if (audioPlayer.playing || audioPlayer.paused)
    {
        audioPlayer.stop();
        pauseResumeButton.enabled = false;
        if (Ti.Platform.name === 'android')
        { 
            audioPlayer.release();
        }   
    }
    else
    {
        audioPlayer.start();
        pauseResumeButton.enabled = true;
    }
});

pauseResumeButton.addEventListener('click', function() {
    if (audioPlayer.paused) {
        audioPlayer.start();
    }
    else {
        audioPlayer.pause();
    }
});

audioPlayer.addEventListener('progress',function(e) {
    Ti.API.info('Time Played: ' + Math.round(e.progress) + ' milliseconds');
});

audioPlayer.addEventListener('change',function(e)
{
    Ti.API.info('State: ' + e.description + ' (' + e.state + ')');
});

win.addEventListener('close',function() {
    audioPlayer.stop();
    if (Ti.Platform.osname === 'android')
    { 
        audioPlayer.release();
    }
});

win.open();
</code></pre>
 */
Ti.Media.AudioPlayer = function() {
};
Ti.Media.AudioPlayer.prototype = {

    /**
     * <p>Audio data is being buffered from the network.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    STATE_BUFFERING:null,

    /**
     * <p>Audio playback is being initialized.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    STATE_INITIALIZED:null,

    /**
     * <p>Playback is paused.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    STATE_PAUSED:null,

    /**
     * <p>Audio playback is active.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    STATE_PLAYING:null,

    /**
     * <p>Audio playback is starting.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    STATE_STARTING:null,

    /**
     * <p>Audio playback is stopped.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    STATE_STOPPED:null,

    /**
     * <p>Audio playback is stopping.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    STATE_STOPPING:null,

    /**
     * <p>Player is waiting for audio data from the network.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    STATE_WAITING_FOR_DATA:null,

    /**
     * <p>Player is waiting for audio data to fill the queue.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    STATE_WAITING_FOR_QUEUE:null,

    /**
     * <p>Boolean to indicate if audio should continue playing even if the associated
Android {@link Ti.Android.Activity} is paused.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    allowBackground:null,

    /**
     * <p>Bit rate of the current playback stream.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    bitRate:null,

    /**
     * <p>Size of the buffer used for streaming, in bytes.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    bufferSize:null,

    /**
     * <p>Boolean indicating if the player is idle.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    idle:null,

    /**
     * <p>Boolean indicating if audio playback is paused.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    paused:null,

    /**
     * <p>Boolean indicating if audio is currently playing.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    playing:null,

    /**
     * <p>Current playback progress, in milliseconds.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    progress:null,

    /**
     * <p>Current state of playback, specified using one of the <code>STATE</code> constants defined on this object.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    state:null,

    /**
     * <p>URL for the audio stream.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    url:null,

    /**
     * <p>Boolean indicating if the playback is waiting for audio data from the network.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    waiting:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.AudioPlayer.allowBackground} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getAllowBackground:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.AudioPlayer.bitRate} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBitRate:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.AudioPlayer.bufferSize} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBufferSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.AudioPlayer.idle} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getIdle:function() {
    },

    /**
     * <p>Returns the value of the {@link Ti.Media.AudioPlayer.paused} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getPaused:function() {
    },

    /**
     * <p>Returns the value of the {@link Ti.Media.AudioPlayer.playing} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getPlaying:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.AudioPlayer.progress} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getProgress:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.AudioPlayer.state} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getState:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.AudioPlayer.url} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getUrl:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.AudioPlayer.waiting} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getWaiting:function() {
    },

    /**
     * <p>Returns the value of the {@link Ti.Media.AudioPlayer.paused} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    isPaused:function() {
    },

    /**
     * <p>Returns the value of the {@link Ti.Media.AudioPlayer.playing} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    isPlaying:function() {
    },

    /**
     * <p>Pauses audio playback.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    pause:function() {
    },

    /**
     * <p>Starts or resumes audio playback.</p>
     * @since 0.9 (Android)
     */
    play:function() {
    },

    /**
     * <p>Stops buffering audio data and releases audio resources.</p>
     * @since 0.9 (Android)
     */
    release:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.AudioPlayer.bitRate} property.</p>
     * @param {Number} bitRate <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBitRate:function(bitRate) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.AudioPlayer.bufferSize} property.</p>
     * @param {Number} bufferSize <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBufferSize:function(bufferSize) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.AudioPlayer.paused} property.</p>
     * @param {Boolean} paused <p>Pass <code>true</code> to pause the current playback temporarily, <code>false</code> to unpause it.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setPaused:function(paused) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.AudioPlayer.url} property.</p>
     * @param {String} url <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setUrl:function(url) {
    },

    /**
     * <p>Starts or resumes audio playback.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    start:function() {
    },

    /**
     * <p>Converts a {@link Ti.Media.AudioPlayer.state} value into a text description
suitable for display.</p>
     * @param {Number} state <p>State value to convert.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    stateDescription:function(state) {
    },

    /**
     * <p>Stops audio playback.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    stop:function() {
    }
};

/**
 * platforms: iPhone, iPad
 * @namespace <p>Use the {@link Ti.Media.createAudioRecorder} method to create an audio recorder. </p>
 */
Ti.Media.AudioRecorder = function() {
};
Ti.Media.AudioRecorder.prototype = {

    /**
     * <p>Audio compression to be used for the recording.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    compression:null,

    /**
     * <p>Audio format to be used for the recording.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    format:null,

    /**
     * <p>Indicates if the audio recorder is paused.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    paused:null,

    /**
     * <p>Indicates if the audio recorder is recording.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    recording:null,

    /**
     * <p>Indicates if the audio recorder is stopped.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    stopped:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.AudioRecorder.compression} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getCompression:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.AudioRecorder.format} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getFormat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.AudioRecorder.paused} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getPaused:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.AudioRecorder.recording} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getRecording:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.AudioRecorder.stopped} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getStopped:function() {
    },

    /**
     * <p>Pauses the current audio recording.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    pause:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Resumes a paused recording.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    resume:function() {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.AudioRecorder.compression} property.</p>
     * @param {Number} compression <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setCompression:function(compression) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.AudioRecorder.format} property.</p>
     * @param {Number} format <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setFormat:function(format) {
    },

    /**
     * <p>Starts an audio recording.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    start:function() {
    },

    /**
     * <p>Stops the current audio recording and returns the recorded audio file.</p>
     * @returns Ti.Filesystem.File
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    stop:function() {
    }
};

/**
 * platforms: iPhone, iPad
 */
Ti.Media.Item = function() {
};
Ti.Media.Item.prototype = {

    /**
     * <p>the artist for the album of the item</p>
     * @type String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    albumArtist:null,

    /**
     * <p>the album title of the item</p>
     * @type String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    albumTitle:null,

    /**
     * <p>the number of tracks for the album of the item</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    albumTrackCount:null,

    /**
     * <p>the track number of the item</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    albumTrackNumber:null,

    /**
     * <p>the artist of the item</p>
     * @type String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    artist:null,

    /**
     * <p>a blob object containing the image for the item's artwork, or null if none</p>
     * @type Object
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    artwork:null,

    /**
     * <p>the composer of the item</p>
     * @type String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    composer:null,

    /**
     * <p>the total number of discs of the item</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    discCount:null,

    /**
     * <p>the disc number of the item</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    discNumber:null,

    /**
     * <p>the genre of the item</p>
     * @type String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    genre:null,

    /**
     * <p>true if the item is part of a compilation album</p>
     * @type Boolean
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    isCompilation:null,

    /**
     * <p>the lyrics of the item</p>
     * @type String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    lyrics:null,

    /**
     * <p>the type of the item</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    mediaType:null,

    /**
     * <p>the number of times the item has been played</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    playCount:null,

    /**
     * <p>the length (in seconds) of the item</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    playbackDuration:null,

    /**
     * <p>the title of a podcast item.  Only for media types of {@link Ti.Media.MUSIC_MEDIA_TYPE_PODCAST}.</p>
     * @type String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    podcastTitle:null,

    /**
     * <p>the rating of the item</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    rating:null,

    /**
     * <p>the number of times the item has been skipped</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    skipCount:null,

    /**
     * <p>the title of the item</p>
     * @type String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    title:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Item.albumArtist} property.</p>
     * @returns String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getAlbumArtist:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Item.albumTitle} property.</p>
     * @returns String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getAlbumTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Item.albumTrackCount} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getAlbumTrackCount:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Item.albumTrackNumber} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getAlbumTrackNumber:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Item.artist} property.</p>
     * @returns String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getArtist:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Item.artwork} property.</p>
     * @returns Object
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getArtwork:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Item.composer} property.</p>
     * @returns String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getComposer:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Item.discCount} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getDiscCount:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Item.discNumber} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getDiscNumber:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Item.genre} property.</p>
     * @returns String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getGenre:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Item.isCompilation} property.</p>
     * @returns Boolean
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getIsCompilation:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Item.lyrics} property.</p>
     * @returns String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getLyrics:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Item.mediaType} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getMediaType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Item.playCount} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getPlayCount:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Item.playbackDuration} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getPlaybackDuration:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Item.podcastTitle} property.</p>
     * @returns String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getPodcastTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Item.rating} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getRating:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Item.skipCount} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getSkipCount:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Item.title} property.</p>
     * @returns String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getTitle:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Item.albumArtist} property.</p>
     * @param {String} albumArtist <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setAlbumArtist:function(albumArtist) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Item.albumTitle} property.</p>
     * @param {String} albumTitle <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setAlbumTitle:function(albumTitle) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Item.albumTrackCount} property.</p>
     * @param {Number} albumTrackCount <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setAlbumTrackCount:function(albumTrackCount) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Item.albumTrackNumber} property.</p>
     * @param {Number} albumTrackNumber <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setAlbumTrackNumber:function(albumTrackNumber) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Item.artist} property.</p>
     * @param {String} artist <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setArtist:function(artist) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Item.artwork} property.</p>
     * @param {Object} artwork <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setArtwork:function(artwork) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Item.composer} property.</p>
     * @param {String} composer <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setComposer:function(composer) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Item.discCount} property.</p>
     * @param {Number} discCount <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setDiscCount:function(discCount) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Item.discNumber} property.</p>
     * @param {Number} discNumber <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setDiscNumber:function(discNumber) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Item.genre} property.</p>
     * @param {String} genre <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setGenre:function(genre) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Item.isCompilation} property.</p>
     * @param {Boolean} isCompilation <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setIsCompilation:function(isCompilation) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Item.lyrics} property.</p>
     * @param {String} lyrics <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setLyrics:function(lyrics) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Item.mediaType} property.</p>
     * @param {Number} mediaType <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setMediaType:function(mediaType) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Item.playCount} property.</p>
     * @param {Number} playCount <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setPlayCount:function(playCount) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Item.playbackDuration} property.</p>
     * @param {Number} playbackDuration <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setPlaybackDuration:function(playbackDuration) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Item.podcastTitle} property.</p>
     * @param {String} podcastTitle <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setPodcastTitle:function(podcastTitle) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Item.rating} property.</p>
     * @param {Number} rating <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setRating:function(rating) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Item.skipCount} property.</p>
     * @param {Number} skipCount <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setSkipCount:function(skipCount) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Item.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setTitle:function(title) {
    }
};

/**
 * platforms: iPhone, iPad
 */
Ti.Media.MusicPlayer = function() {
};
Ti.Media.MusicPlayer.prototype = {

    /**
     * <p>the current point in song playback</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    currentPlaybackTime:null,

    /**
     * <p>an Item object which indicates the currently playing media</p>
     * @type Object
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    nowPlaying:null,

    /**
     * <p>the playback state; one of {@link Ti.Media.MUSIC_PLAYER_STATE_STOPPED}, {@link Ti.Media.MUSIC_PLAYER_STATE_PLAYING}, {@link Ti.Media.MUSIC_PLAYER_STATE_PAUSED}, {@link Ti.Media.MUSIC_PLAYER_STATE_INTERRUPTED}, {@link Ti.Media.MUSIC_PLAYER_STATE_SEEK_FORWARD}, {@link Ti.Media.MUSIC_PLAYER_STATE_SEEK_BACKWARD}</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    playbackState:null,

    /**
     * <p>the repeat setting; one of {@link Ti.Media.MUSIC_PLAYER_REPEAT_DEFAULT}, {@link Ti.Media.MUSIC_PLAYER_REPEAT_NONE}, {@link Ti.Media.MUSIC_PLAYER_REPEAT_ONE}, {@link Ti.Media.MUSIC_PLAYER_REPEAT_ALL}</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    repeatMode:null,

    /**
     * <p>the shuffle setting; one of {@link Ti.Media.MUSIC_PLAYER_SHUFFLE_DEFAULT}, {@link Ti.Media.MUSIC_PLAYER_SHUFFLE_NONE}, {@link Ti.Media.MUSIC_PLAYER_SHUFFLE_SONGS}, {@link Ti.Media.MUSIC_PLAYER_SHUFFLE_ALBUMS}</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    shuffleMode:null,

    /**
     * <p>a value between 0.0 and 1.0 indicating the volume level for the music player</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    volume:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.MusicPlayer.currentPlaybackTime} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getCurrentPlaybackTime:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.MusicPlayer.nowPlaying} property.</p>
     * @returns Object
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getNowPlaying:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.MusicPlayer.playbackState} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getPlaybackState:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.MusicPlayer.repeatMode} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getRepeatMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.MusicPlayer.shuffleMode} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getShuffleMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.MusicPlayer.volume} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getVolume:function() {
    },

    /**
     * <p>pause playback</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    pause:function() {
    },

    /**
     * <p>begin playback</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    play:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>seek backward in the currently playing media</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    seekBackward:function() {
    },

    /**
     * <p>seek forward in the currently playing media</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    seekForward:function() {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.MusicPlayer.currentPlaybackTime} property.</p>
     * @param {Number} currentPlaybackTime <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setCurrentPlaybackTime:function(currentPlaybackTime) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.MusicPlayer.nowPlaying} property.</p>
     * @param {Object} nowPlaying <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setNowPlaying:function(nowPlaying) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.MusicPlayer.playbackState} property.</p>
     * @param {Number} playbackState <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setPlaybackState:function(playbackState) {
    },

    /**
     * <p>set the media queue</p>
     * @param {Object} queue <p>a queue representation to set the player queue to.  Can be any of: A dictionary with an <code>items</code> key that is an array of {@link Ti.Media.Item} objects, an array of {@link Ti.Media.Item} objects, or a single {@link Ti.Media.Item} object.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setQueue:function(queue) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.MusicPlayer.repeatMode} property.</p>
     * @param {Number} repeatMode <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setRepeatMode:function(repeatMode) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.MusicPlayer.shuffleMode} property.</p>
     * @param {Number} shuffleMode <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setShuffleMode:function(shuffleMode) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.MusicPlayer.volume} property.</p>
     * @param {Number} volume <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setVolume:function(volume) {
    },

    /**
     * <p>skip to the beginning of the currently playing media</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    skipToBeginning:function() {
    },

    /**
     * <p>skip to the next media in the queue</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    skipToNext:function() {
    },

    /**
     * <p>skip to the previous media in the queue</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    skipToPrevious:function() {
    },

    /**
     * <p>stop playback</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    stop:function() {
    },

    /**
     * <p>end a seek operation</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    stopSeeking:function() {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>The <code>Sound</code> object loads the entire media resource in memory before playing.  If you need to 
support streaming, use the {@link Ti.Media.AudioPlayer} API.</p>
<p>Use the {@link Ti.Media.createSound} method to create a <code>Sound</code> object.</p>
 * 
 * @example Simple Example
 * <p>Simple example of playing a WAVE file from the Resources directory.</p>
<pre><code>var player = Ti.Media.createSound({url:"sound.wav"});
player.play();
</code></pre>
 */
Ti.Media.Sound = function() {
};
Ti.Media.Sound.prototype = {

    /**
     * <p>Determines whether the audio should continue playing even when its activity is paused.</p>
     * @type Boolean
     * @since 1.3.0 (Android)
     */
    allowBackground:null,

    /**
     * <p>Duration of the audio resource.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    duration:null,

    /**
     * <p>Determines whether the audio should loop upon completion.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    looping:null,

    /**
     * <p>Indicates if the audio is paused.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    paused:null,

    /**
     * <p>Indicates if the audio is playing.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    playing:null,

    /**
     * <p>Current playback position of the audio.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    time:null,

    /**
     * <p>URL identifying the audio resource.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    url:null,

    /**
     * <p>Volume of the audio, from 0.0 (muted) to 1.0 (loudest).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    volume:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Sound.duration} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getDuration:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Sound.time} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTime:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Sound.url} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getUrl:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.Sound.volume} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getVolume:function() {
    },

    /**
     * <p>Returns the value of the {@link Ti.Media.Sound.looping} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    isLooping:function() {
    },

    /**
     * <p>Returns the value of the {@link Ti.Media.Sound.paused} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    isPaused:function() {
    },

    /**
     * <p>Returns the value of the {@link Ti.Media.Sound.playing} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    isPlaying:function() {
    },

    /**
     * <p>Pauses the audio.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    pause:function() {
    },

    /**
     * <p>Starting playing the sound, or resume playing a paused sound.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    play:function() {
    },

    /**
     * <p>Releases all internal resources.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    release:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Resets the audio playback position to the beginning.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    reset:function() {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Sound.looping} property.</p>
     * @param {Boolean} looping <p>New value for the <code>looping</code> property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLooping:function(looping) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Sound.paused} property.</p>
     * @param {Boolean} paused <p>Pass <code>true</code> to pause the current playback temporarily, <code>false</code> to unpause it.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setPaused:function(paused) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Sound.time} property.</p>
     * @param {Number} time <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTime:function(time) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Sound.url} property.</p>
     * @param {String} url <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setUrl:function(url) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.Sound.volume} property.</p>
     * @param {Number} volume <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setVolume:function(volume) {
    },

    /**
     * <p>Stops playing the audio and resets the playback position to the beginning of the clip.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    stop:function() {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>The video player is a native view that can be used to play videos, either stored
locally or streamed from a web server. The player can occupy the full screen, or can
be used as a view that can be added to other views.</p>
<p>Use the {@link Ti.Media.createVideoPlayer} method to create a video player.</p>
<h4>Platform Implementation Notes</h4>
<p>All platforms support specifying the video content as a URL, either to a local file or
a remote stream. This is done by setting the {@link Ti.Media.VideoPlayer.url} property.</p>
<p>On iOS, video content can also be specified as a {@link Ti.Blob} or
{@link Ti.Filesystem.File} object using the
{@link Ti.Media.VideoPlayer.media} property.</p>
<p>On iOS, a video player can dynamically switch back and forth between fullscreen mode
and standard mode. If the native video controls are displayed, the user can use them
to switch between standard and fullscreen mode. </p>
<p>On Android, the video player cannot switch modes. To create a fullscreen player, you
must specify <code>fullscreen: true</code> when you create the player. This fullscreen player
creates its own Android {@link Ti.Android.Activity} on top of the activity stack.
Unlike a normal view, this fullscreen video player appears as soon as it is created. 
The user can close the player by pressing the <strong>Back</strong> button. See the code examples for 
a sample using the fullscreen player on Android.</p>
<p>There are several known issues with clipping on the Android video player. </p>
<ul>
<li>
<p>When used with <code>scalingMode</code> set to VIDEO_SCALING_ASPECT_FILL or VIDEO_SCALING_NONE,
  the video content is not correctly clipped to the boundaries of the view.<br />
  ({@link https://jira.appcelerator.org/browse/TIMOB})</p>
</li>
<li>
<p>When a border is set on the view, the video content does not take the border width
  into account, so the video content covers the border.
  ({@link https://jira.appcelerator.org/browse/TIMOB})</p>
</li>
<li>
<p>If a borderRadius is specified, the video content is not clipped to the rounded
  corners. ({@link https://jira.appcelerator.org/browse/TIMOB})</p>
</li>
</ul>
 * 
 * @example Simple Video Player Example
 * <p>The following code creates a simple video player to play a local video file.</p>
<pre><code>var vidWin = Ti.UI.createWindow({
    title : 'Video View Demo',
    backgroundColor : '#fff'
});

var videoPlayer = Ti.Media.createVideoPlayer({
    top : 2,
    autoplay : true,
    backgroundColor : 'blue',
    height : 300,
    width : 300,
    mediaControlStyle : Ti.Media.VIDEO_CONTROL_DEFAULT,
    scalingMode : Ti.Media.VIDEO_SCALING_ASPECT_FIT
});

videoPlayer.url = 'movie.mp4';
vidWin.add(videoPlayer);
vidWin.open();
</code></pre>
 * 
 * @example Android Fullscreen Video Player
 * <p>The Android fullscreen video player operates differently from other video players.
The following example shows how to create, show, and close a fullscreen video
player. </p>
<p>Note that in this example, a button is included to close the player, to
demonstrate a method for dismissing the player programmatically. In practice, the user
can always dismiss the player by using the <strong>Back</strong> button, so an on-screen
control would not be required.</p>
<pre><code>Ti.UI.setBackgroundColor('#000');
var win = Ti.UI.createWindow({
    title : 'Test',
    backgroundColor : '#fff',
    exitOnClose : true
});

// Change to a valid URL
var contentURL = "http://www.example.com/stream.mp4";

var openButton = Ti.UI.createButton({
    title : "Start Video",
    top : "0dp",
    height : "40dp",
    left : "10dp",
    right : "10dp"
});

openButton.addEventListener('click', function() {
    var activeMovie = Ti.Media.createVideoPlayer({
        url : contentURL,
        backgroundColor : 'blue',
        movieControlMode : Ti.Media.VIDEO_CONTROL_DEFAULT,
        scalingMode : Ti.Media.VIDEO_SCALING_ASPECT_FILL,
        fullscreen : true,
        autoplay : true
    });

    var closeButton = Ti.UI.createButton({
        title : "Exit Video",
        top : "0dp",
        height : "40dp",
        left : "10dp",
        right : "10dp"
    });

    closeButton.addEventListener('click', function() {
        activeMovie.hide();
        activeMovie.release();
        activeMovie = null;
    });

    activeMovie.add(closeButton);
});
win.add(openButton);
win.open();
</code></pre>
 */
Ti.Media.VideoPlayer = function() {
};
Ti.Media.VideoPlayer.prototype = {

    /**
     * <p>Whether or not the current movie can be played on a remote device.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    allowsAirPlay:null,

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Indicates if a movie should automatically start playback.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    autoplay:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    children:null,

    /**
     * <p>Use the {@link Ti.Media.VideoPlayer.url} property instead.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    contentURL:null,

    /**
     * <p>Current playback time of the current movie in milliseconds.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    currentPlaybackTime:null,

    /**
     * <p>The duration of the current movie in milliseconds, or 0.0 if not known.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    duration:null,

    /**
     * <p>The end time of movie playback, in milliseconds.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    endPlaybackTime:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    focusable:null,

    /**
     * <p>Determines if the movie is presented in the entire screen (obscuring all other application content). </p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fullscreen:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>The start time of movie playback, in milliseconds.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    initialPlaybackTime:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Returns the network load state of the movie player.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    loadState:null,

    /**
     * <p>Media object to play, as either a <code>File</code>,  a <code>Blob</code>, or a URL.</p>
     * @type Ti.Blob|Ti.Filesystem.File|String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    media:null,

    /**
     * <p>The style of the playback controls.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    mediaControlStyle:null,

    /**
     * <p>The types of media in the movie, or {@link Ti.Media.VIDEO_MEDIA_TYPE_NONE} if not known.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    mediaTypes:null,

    /**
     * <p>Use <code>mediaControlStyle</code> instead.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    movieControlMode:null,

    /**
     * <p>Returns the natural size of the movie.</p>
     * @type MovieSize
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    naturalSize:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>The currently playable duration of the movie, for progressively downloaded network content.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    playableDuration:null,

    /**
     * <p>Current playback state of the video player.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    playbackState:null,

    /**
     * <p>Boolean to indicate if the player has started playing.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    playing:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>Determines how the movie player repeats when reaching the end of playback.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    repeatMode:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Determines how the content scales to fit the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    scalingMode:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The playback type of the movie.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    sourceType:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>URL of the media to play.</p>
     * @type String|Array<String>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    url:null,

    /**
     * <p>Indicates if the movie player should inherit the application's audio session
instead of creating a new session. </p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    useApplicationAudioSession:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Cancels all pending asynchronous thumbnail requests.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    cancelAllThumbnailImageRequests:function() {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.allowsAirPlay} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAllowsAirPlay:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.anchorPoint} property.</p>
     * @returns Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.autoplay} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getAutoplay:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.backgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.backgroundImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.borderColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.borderRadius} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.borderWidth} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.center} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.contentURL} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getContentURL:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.currentPlaybackTime} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCurrentPlaybackTime:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.duration} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getDuration:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.endPlaybackTime} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getEndPlaybackTime:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.focusable} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.fullscreen} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getFullscreen:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.initialPlaybackTime} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getInitialPlaybackTime:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.layout} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.loadState} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLoadState:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.mediaControlStyle} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getMediaControlStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.mediaTypes} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getMediaTypes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.movieControlMode} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getMovieControlMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.naturalSize} property.</p>
     * @returns MovieSize
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getNaturalSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.opacity} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.playableDuration} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getPlayableDuration:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.playbackState} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getPlaybackState:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.playing} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getPlaying:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.repeatMode} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRepeatMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.scalingMode} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getScalingMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.size} property.</p>
     * @returns Dimension
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.sourceType} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getSourceType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.url} property.</p>
     * @returns String
     * @returns Array<String>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getUrl:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.useApplicationAudioSession} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getUseApplicationAudioSession:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.visible} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Media.VideoPlayer.zIndex} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Pauses playing the video.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    pause:function() {
    },

    /**
     * <p>Starts playing the video.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    play:function() {
    },

    /**
     * <p>Releases the internal video resources immediately.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    release:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Asynchronously request thumbnail images for one or more points in time in the video.</p>
     * @param {Array<Number>} times <p>Array of time values, representing offsets into the video, in seconds.</p>
     * @param {Number} option <p>Either {@link Ti.Media.VIDEO_TIME_OPTION_NEAREST_KEYFRAME} or 
{@link Ti.Media.VIDEO_TIME_OPTION_EXACT}.</p>
     * @param {Callback<ThumbnailResponse>} callback <p>Callback to invoke when a thumbnail is available.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    requestThumbnailImagesAtTimes:function(times, option, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.allowsAirPlay} property.</p>
     * @param {Boolean} allowsAirPlay <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAllowsAirPlay:function(allowsAirPlay) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.autoplay} property.</p>
     * @param {Boolean} autoplay <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setAutoplay:function(autoplay) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the background view for customization which is always displayed behind movie content.</p>
     * @param {Ti.UI.View} view <p>View to set.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundView:function(view) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.contentURL} property.</p>
     * @param {String} contentURL <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setContentURL:function(contentURL) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.duration} property.</p>
     * @param {Number} duration <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setDuration:function(duration) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.endPlaybackTime} property.</p>
     * @param {Number} endPlaybackTime <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setEndPlaybackTime:function(endPlaybackTime) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.fullscreen} property.</p>
     * @param {Boolean} fullscreen <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setFullscreen:function(fullscreen) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.initialPlaybackTime} property.</p>
     * @param {Number} initialPlaybackTime <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setInitialPlaybackTime:function(initialPlaybackTime) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.media} property.</p>
     * @param {Ti.Blob|Ti.Filesystem.File|String} media <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setMedia:function(media) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.mediaControlStyle} property.</p>
     * @param {Number} mediaControlStyle <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setMediaControlStyle:function(mediaControlStyle) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.mediaTypes} property.</p>
     * @param {Number} mediaTypes <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setMediaTypes:function(mediaTypes) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.movieControlMode} property.</p>
     * @param {Number} movieControlMode <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setMovieControlMode:function(movieControlMode) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.naturalSize} property.</p>
     * @param {MovieSize} naturalSize <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setNaturalSize:function(naturalSize) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.repeatMode} property.</p>
     * @param {Number} repeatMode <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRepeatMode:function(repeatMode) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.scalingMode} property.</p>
     * @param {Number} scalingMode <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setScalingMode:function(scalingMode) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.sourceType} property.</p>
     * @param {Number} sourceType <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setSourceType:function(sourceType) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.url} property.</p>
     * @param {String|Array<String>} url <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setUrl:function(url) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.useApplicationAudioSession} property.</p>
     * @param {Boolean} useApplicationAudioSession <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setUseApplicationAudioSession:function(useApplicationAudioSession) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Media.VideoPlayer.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Stops playing the video.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    stop:function() {
    },

    /**
     * <p>Returns a thumbnail image for the video at the specified time.</p>
     * @param {Number} time <p>Playback time, in <strong>seconds</strong>.</p>
     * @param {Number} option <p>Either {@link Ti.Media.VIDEO_TIME_OPTION_NEAREST_KEYFRAME} or
{@link Ti.Media.VIDEO_TIME_OPTION_EXACT}.</p>
     * @returns Ti.Blob
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    thumbnailImageAtTime:function(time, option) {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 */
Ti.Module = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>The <code>Network</code> module is used to access networking related functionality.</p>
<p>For TCP sockets, see {@link Ti.Network.Socket.TCP}.</p>
<p>The legacy {@link Ti.Network.TCPSocket} object is still required
by the {@link Ti.Network.BonjourBrowser} and
{@link Ti.Network.BonjourService} objects.</p>
<p>For all other socket needs, use {@link Ti.Network.Socket.TCP}.</p>
 */
Ti.Network = {

    /**
     * <p>Special hostname value for listening sockets, representing all
locally available network interfaces.</p>
     * @type String
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    INADDR_ANY:null,

    /**
     * <p>A {@link Ti.Network.networkType} value indicating that the device is
communicating over a local-area network.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    NETWORK_LAN:null,

    /**
     * <p>A {@link Ti.Network.networkType} value indicating that the device is
communicating over a mobile network.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    NETWORK_MOBILE:null,

    /**
     * <p>A {@link Ti.Network.networkType} value indicating that no 
network is available.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    NETWORK_NONE:null,

    /**
     * <p>A {@link Ti.Network.networkType} value indicating that the<br />
current network type is unknown.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    NETWORK_UNKNOWN:null,

    /**
     * <p>A {@link Ti.Network.networkType} value indicating that the<br />
device is communicating over a WiFi network.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    NETWORK_WIFI:null,

    /**
     * <p>Constant value for an Alert style push notification.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    NOTIFICATION_TYPE_ALERT:null,

    /**
     * <p>Constant value for a Badge style push notification.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    NOTIFICATION_TYPE_BADGE:null,

    /**
     * <p>Constant value for a Newsstand style push notification. Only available on iOS5 and later</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    NOTIFICATION_TYPE_NEWSSTAND:null,

    /**
     * <p>Constant value for a Sound style push notification.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    NOTIFICATION_TYPE_SOUND:null,

    /**
     * <p>Constant value specifying read-only mode for sockets.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    READ_MODE:null,

    /**
     * <p>Constant value specifying read-write mode for sockets.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    READ_WRITE_MODE:null,

    /**
     * <p>Constant value representing a socket in the CLOSED state.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    SOCKET_CLOSED:null,

    /**
     * <p>Constant value representing a socket in the CONNECTED state.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    SOCKET_CONNECTED:null,

    /**
     * <p>Constant value representing a socket in the ERROR state.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    SOCKET_ERROR:null,

    /**
     * <p>Constant value representing a socket in the INITIALIZED state.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    SOCKET_INITIALIZED:null,

    /**
     * <p>Constant value representing a socket in the LISTENING state.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    SOCKET_LISTENING:null,

    /**
     * <p>Constant value specifying TLS version 1.0 for SSL.</p>
     * @type Number
     * @since 1.8.0.1 (iPhone), 1.8.0.1 (iPad)
     */
    TLS_VERSION_1_0:null,

    /**
     * <p>Constant value specifying TLS version 1.1 for SSL.</p>
     * @type Number
     * @since 1.8.0.1 (iPhone), 1.8.0.1 (iPad)
     */
    TLS_VERSION_1_1:null,

    /**
     * <p>Constant value specifying TLS version 1.2 for SSL.</p>
     * @type Number
     * @since 1.8.0.1 (iPhone), 1.8.0.1 (iPad)
     */
    TLS_VERSION_1_2:null,

    /**
     * <p>Constant value specifying write-only mode for sockets.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    WRITE_MODE:null,

    /**
     * <p>User-defined function that is called everytime HTTPClient connects to a remote resource.</p>
     * @type Callback<String>
     * @since 1.8 (Mobile Web)
     */
    httpURLFormatter:null,

    /**
     * <p>Network type value as a constant.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    networkType:null,

    /**
     * <p>Network type as a String. Returns one of <code>NONE</code>, <code>WIFI</code>, <code>LAN</code>, <code>MOBILE</code>, or <code>UNKNOWN</code>.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    networkTypeName:null,

    /**
     * <p>Boolean value indicating if the device can reach the Internet.</p>
     * @type Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    online:null,

    /**
     * <p>Remote device UUID if the device is registered with the Apple Push Notification
Service, or null if it is not registered.</p>
     * @type String
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    remoteDeviceUUID:null,

    /**
     * <p>Array of push notification type constants enabled for the application.</p>
     * @type Array<Number>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    remoteNotificationTypes:null,

    /**
     * <p>Indicates whether push  notifications have been enabled using 
{@link Ti.Network.registerForPushNotifications}.</p>
     * @type Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    remoteNotificationsEnabled:null,


    /**
     * <p>Use the {@link Ti.Network.change} event to monitor connectivity changes.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke upon network connectivity changes.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    addConnectivityListener:function(callback) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Creates and returns a <code>BonjourBrowser</code> object.</p>
     * @param {String} serviceType <p>Service to search for, must include the protocol type suffix (._tcp).</p>
     * @param {String} domain <p>Bonjour service domain to conduct the search in.</p>
     * @param {Dictionary<Ti.Network.BonjourBrowser>} parameters <p>A dictionary object of properties defined in {@link Ti.Network.BonjourBrowser}.</p>
     * @returns Ti.Network.BonjourBrowser
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    createBonjourBrowser:function(serviceType, domain, parameters) {
    },

    /**
     * <p>Creates and returns a <code>BonjourService</code> object.</p>
     * @param {String} name <p>Name of the service. Must be a unique identifier for this service type and domain.</p>
     * @param {String} type <p>Type of service.  Must include the protocol identifier (._tcp).</p>
     * @param {String} domain <p>Domain to publish the service in.</p>
     * @param {Dictionary<Ti.Network.BonjourService>} parameters <p>Dictionary object of properties defined in {@link Ti.Network.BonjourService}.</p>
     * @returns Ti.Network.BonjourService
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    createBonjourService:function(name, type, domain, parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.Network.HTTPClient}.</p>
     * @param {Dictionary<Ti.Network.HTTPClient>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.Network.HTTPClient} except those marked not-creation or read-only.</p>
     * @returns Ti.Network.HTTPClient
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    createHTTPClient:function(parameters) {
    },

    /**
     * <p>Use {@link Ti.Network.Socket.createTCP} instead.</p>
     * @param {String} hostName <p>Host name to connect to/listen on.</p>
     * @param {Number} port <p>Port for the socket.</p>
     * @param {Number} mode <p>Socket's mode; one of {@link Ti.Network.READ_MODE}, {@link Ti.Network.WRITE_MODE}, 
{@link Ti.Network.READ_WRITE_MODE}.</p>
     * @param {Dictionary<Ti.Network.TCPSocket>} parameters <p>Dictionary object with properties defined in {@link Ti.Network.TCPSocket}.</p>
     * @returns Ti.Network.TCPSocket
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    createTCPSocket:function(hostName, port, mode, parameters) {
    },

    /**
     * <p>Returns a decoded version of a URI encoded value.</p>
     * @param {String} value <p>URI encoded input value to be decoded.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    decodeURIComponent:function(value) {
    },

    /**
     * <p>Returns a URI encoded version of the specified URI component.</p>
     * @param {String} value <p>Input value to be encoded.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    encodeURIComponent:function(value) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.httpURLFormatter} property.</p>
     * @returns Callback<String>
     * @since 1.8 (Mobile Web)
     */
    getHttpURLFormatter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.networkType} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getNetworkType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.networkTypeName} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getNetworkTypeName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.online} property.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getOnline:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.remoteDeviceUUID} property.</p>
     * @returns String
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getRemoteDeviceUUID:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.remoteNotificationTypes} property.</p>
     * @returns Array<Number>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getRemoteNotificationTypes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.remoteNotificationsEnabled} property.</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getRemoteNotificationsEnabled:function() {
    },

    /**
     * <p>Registers for push notifications with the Apple Push Notification Service.</p>
     * @param {PushNotificationConfig} config <p>Dictionary specifying push-notification related options.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    registerForPushNotifications:function(config) {
    },

    /**
     * <p>Use the {@link Ti.Network.change} event to monitor connectivity changes.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    removeConnectivityListener:function(callback) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.httpURLFormatter} property.</p>
     * @param {Callback<String>} httpURLFormatter <p>New value for the property.</p>
     * @since 1.8 (Mobile Web)
     */
    setHttpURLFormatter:function(httpURLFormatter) {
    },

    /**
     * <p>Unregisters the application for push notifications.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    unregisterForPushNotifications:function() {
    }
};

/**
 * platforms: iPhone, iPad
 * @namespace <p>Use the {@link Ti.Network.createBonjourBrowser} method to create a <code>BonjourBrowser</code> instance.</p>
<p>If your application publishes Bonjour services itself, that service will be discovered 
by the browser if necessary; be prepared to perform a check if you do not want to list 
local services as available.  Bonjour service browsing is an asynchronous operation, 
meaning that you should be extremely careful when caching values from the <code>services</code> 
property returned by the <code>updatedServices</code> event.  In particular, if you maintain a 
local copy of available services and a user tries to connect to one, you should be prepared 
to handle failures gracefully; the next <code>updatedServices</code> event should provide the new 
services list, but you should not rely on it being delivered before user input.  When 
a window which uses Bonjour browsing is closed, if you do not want to continue searching, 
you must call the stop() method.</p>
 */
Ti.Network.BonjourBrowser = function() {
};
Ti.Network.BonjourBrowser.prototype = {

    /**
     * <p>The domain the browser is searching in</p>
     * @type String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    domain:null,

    /**
     * <p>Whether or not the browser is currently searching</p>
     * @type Boolean
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    isSearching:null,

    /**
     * <p>The type of the service the browser searches for</p>
     * @type String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    serviceType:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.BonjourBrowser.domain} property.</p>
     * @returns String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    getDomain:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.BonjourBrowser.isSearching} property.</p>
     * @returns Boolean
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    getIsSearching:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.BonjourBrowser.serviceType} property.</p>
     * @returns String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    getServiceType:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Conduct a search for Bonjour services matching the type and domain specified during creation</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    search:function() {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.BonjourBrowser.domain} property.</p>
     * @param {String} domain <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    setDomain:function(domain) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.BonjourBrowser.isSearching} property.</p>
     * @param {Boolean} isSearching <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    setIsSearching:function(isSearching) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.BonjourBrowser.serviceType} property.</p>
     * @param {String} serviceType <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    setServiceType:function(serviceType) {
    },

    /**
     * <p>Halt an ongoing search</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    stopSearch:function() {
    }
};

/**
 * platforms: iPhone, iPad
 * @namespace <p>You can obtain a <code>BonjourService</code> instance by calling {@link Ti.Network.createBonjourService} 
or from the <code>service</code> list from a {@link Ti.Network.BonjourBrowser}<br />
<code>updatedServices</code> event. <br />
</p>
<p>You can only publish Bonjour services attached to a socket which is currently listening; 
you cannot publish a service for a remotely connected socket.  If you stop the Bonjour 
service and wish to close the socket it uses, it is strongly recommended that you stop 
the service first.  When a window which publishes a Bonjour service is closed, you must 
stop the service if the associated socket is also to be closed, or if it is no longer 
necessary to publish.  Unlike other network operations, Bonjour service resolution and 
publishing is synchronous, so be aware that your code may block while resolution is going 
on.  In particular, you may wish to display UI elements indicating background activity 
before beginning resolution.</p>
 */
Ti.Network.BonjourService = function() {
};
Ti.Network.BonjourService.prototype = {

    /**
     * <p>the domain of the service</p>
     * @type String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    domain:null,

    /**
     * <p>whether or not the service is local to the device</p>
     * @type Boolean
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    isLocal:null,

    /**
     * <p>the name of the service</p>
     * @type String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    name:null,

    /**
     * <p>the TCPSocket object that is used to connect to the service</p>
     * @type Object
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    socket:null,

    /**
     * <p>the type of the service</p>
     * @type String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    type:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.BonjourService.domain} property.</p>
     * @returns String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    getDomain:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.BonjourService.isLocal} property.</p>
     * @returns Boolean
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    getIsLocal:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.BonjourService.name} property.</p>
     * @returns String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    getName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.BonjourService.socket} property.</p>
     * @returns Object
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    getSocket:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.BonjourService.type} property.</p>
     * @returns String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    getType:function() {
    },

    /**
     * <p>Publish a Bonjour service to the network.  Only works if isLocal is TRUE</p>
     * @param {Object} socket <p>a TCPSocket object to associate with the Bonjour service.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    publish:function(socket) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Resolve a Bonjour service from the network.  Must be done before attempting to access the service's socket information, if a remote service.  You cannot resolve a locally published service.</p>
     * @param {Number} timeout <p>the timeout for service resolution, in seconds.  Optional, default is 120s.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    resolve:function(timeout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.BonjourService.domain} property.</p>
     * @param {String} domain <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    setDomain:function(domain) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.BonjourService.isLocal} property.</p>
     * @param {Boolean} isLocal <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    setIsLocal:function(isLocal) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.BonjourService.name} property.</p>
     * @param {String} name <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    setName:function(name) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.BonjourService.socket} property.</p>
     * @param {Object} socket <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    setSocket:function(socket) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.BonjourService.type} property.</p>
     * @param {String} type <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    setType:function(type) {
    },

    /**
     * <p>Halts publication of a service.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    stop:function() {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Use {@link Ti.Network.createHTTPClient} to create a new <code>HTTPClient</code> object.</p>
<p>An <code>HTTPClient</code> object is intended to be used for a single request. It may be 
possible to re-use an <code>HTTPClient</code> object, but this use case is not tested. </p>
<p>There are three steps in making a typical HTTP request:</p>
<ul>
<li>Creating an <code>HTTPClient</code> object.</li>
<li>Opening the <code>HTTPClient</code> object.</li>
<li>Sending the request.</li>
</ul>
<p>Before opening the request, you must define one or more callbacks to handle
the HTTP response, as well as errors, progress updates, and other conditions.</p>
<p>The <code>HTTPClient</code> callbacks operate somewhat differently from other
Titanium callbacks, in accordance with the XMLHttpRequest specification.</p>
<p>When the callbacks are invoked, the <code>this</code> value is set to either the 
original <code>HTTPClient</code> object itself, or a response object that holds all
of the response-related properties defined for the <code>HTTPClient</code> object. So the 
callbacks can use code like this to access the response values:</p>
<pre><code>httpResponse = this.responseText;
status = this.status;
</code></pre>
<h4>Mobile Web Platform Implementation Notes</h4>
<p>Mobile Web is limited by the same-origin policy. According to W3C: "User agents 
commonly apply same-origin restrictions to network requests. These restrictions 
prevent a client-side Web application running from one origin from obtaining 
data retrieved from another origin, and also limit unsafe HTTP requests that can 
be automatically launched toward destinations that differ from the running 
application's origin."  This means that browsers cannot request information from 
a domain that the app itself does not reside on. If you are hosting the app at 
foo.example.com, then requests to any domain other than *.example.com will fail.</p>
<p>There are two solutions to get around this problem:</p>
<ul>
<li>Configure the destination server to support Cross-Origin Resource Sharing.</li>
<li>Use {@link Ti.Network.httpURLFormatter} in conjunction 
  with a proxy on the server hosting the application.</li>
</ul>
<p>More information about Cross-Origin Resource Sharing can be found on the 
{@link http://www.w3.org/TR/cors/} specification page.</p>
 * 
 * @example Simple GET Request
 * <p>The following code excerpt does a simple GET request and logs the response text.</p>
<pre><code> var url = "http://www.appcelerator.com";
 var client = Ti.Network.createHTTPClient({
     // function called when the response data is available
     onload : function(e) {
         Ti.API.info("Received text: " + this.responseText);
         alert('success');
     },
     // function called when an error occurs, including a timeout
     onerror : function(e) {
         Ti.API.debug(e.error);
         alert('error');
     },
     timeout : 5000  /* in milliseconds */
 });
 // Prepare the connection.
 client.open("GET", url);
 // Send the request.
 client.send();
</code></pre>
 */
Ti.Network.HTTPClient = function() {
};
Ti.Network.HTTPClient.prototype = {

    /**
     * <p>Ready state constant indicating that the request is complete.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    DONE:null,

    /**
     * <p>Ready state constant indicating that response headers have been received.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    HEADERS_RECEIVED:null,

    /**
     * <p>Ready state constant indicating that response data is being received from the remote server.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    LOADING:null,

    /**
     * <p>Ready state constant indicating that the connection has been opened, but the request has not yet been sent.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    OPENED:null,

    /**
     * <p>Ready state constant indicating that HTTPClient request has not been opened or sent.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    UNSENT:null,

    /**
     * <p>All of the response headers as a single string, or an empty string if no headers are available.</p>
     * @type String
     * @since 0.1 (Android)
     */
    allResponseHeaders:null,

    /**
     * <p>Set to <code>false</code> to suppress URL-encoding of the specified URL.</p>
     * @type Boolean
     * @since 0.1 (Android)
     */
    autoEncodeUrl:null,

    /**
     * <p>Set to <code>false</code> to disable automatic handling of HTTP redirects.</p>
     * @type Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    autoRedirect:null,

    /**
     * <p>Controls whether or not HTTP responses are cached.</p>
     * @type Boolean
     * @since 1.9.0 (iPhone), 1.9.0 (iPad)
     */
    cache:null,

    /**
     * <p>boolean to indicate that the response was successful</p>
     * @type Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    connected:null,

    /**
     * <p>Connection type, normally either <code>GET</code> or <code>POST</code>.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    connectionType:null,

    /**
     * <p>Determines whether the client should attempt to keep a persistent connection.</p>
     * @type Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    enableKeepAlive:null,

    /**
     * <p>File to download contents to.  Can only be set <strong>after</strong> calling
{@link Ti.Network.HTTPClient.open}.</p>
     * @type String
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    file:null,

    /**
     * <p>Absolute URL of the request.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    location:null,

    /**
     * <p>Function to be called at regular intervals as the request data is being received.</p>
     * @type Callback<Object>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    ondatastream:null,

    /**
     * <p>Function to be called upon a error response.</p>
     * @type Callback<Object>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    onerror:null,

    /**
     * <p>Function to be called upon a successful response.</p>
     * @type Callback<Object>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    onload:null,

    /**
     * <p>Function to be called for each {@link Ti.Network.HTTPClient.readyState} change.</p>
     * @type Callback<Object>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    onreadystatechange:null,

    /**
     * <p>Function to be called at regular intervals as the request data is being transmitted.</p>
     * @type Callback<Object>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    onsendstream:null,

    /**
     * <p>The current ready state of this HTTP request.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    readyState:null,

    /**
     * <p>Response data as a <code>Blob</code> object.</p>
     * @type Ti.Blob
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    responseData:null,

    /**
     * <p>Response as text or <code>null</code> if an error was received or no data was returned.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    responseText:null,

    /**
     * <p>Response object as an XML DOM Document object.</p>
     * @type Ti.XML.Document
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    responseXML:null,

    /**
     * <p>Response HTTP status code.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    status:null,

    /**
     * <p>Human-readable status message associated with the status code.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    statusText:null,

    /**
     * <p>Timeout in milliseconds when the connection should be aborted</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    timeout:null,

    /**
     * <p>Sets the TLS version to use for handshakes.</p>
     * @type Number
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    tlsVersion:null,

    /**
     * <p>Controls how SSL certification validation is performed on connection.</p>
     * @type Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    validatesSecureCertificate:null,

    /**
     * <p>Tells the request to include any cookies and HTTP authentication information.</p>
     * @type Boolean
     * @since 1.8 (Mobile Web)
     */
    withCredentials:null,


    /**
     * <p>Cancels a pending request.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    abort:function() {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Clears any cookies stored for the host.</p>
     * @param {String} host <p>The URL of the host/domain to clear cookies for.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    clearCookies:function(host) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.allResponseHeaders} property.</p>
     * @returns String
     * @since 0.1 (Android)
     */
    getAllResponseHeaders:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.autoEncodeUrl} property.</p>
     * @returns Boolean
     * @since 0.1 (Android)
     */
    getAutoEncodeUrl:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.autoRedirect} property.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    getAutoRedirect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.cache} property.</p>
     * @returns Boolean
     * @since 1.9.0 (iPhone), 1.9.0 (iPad)
     */
    getCache:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.connected} property.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getConnected:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.connectionType} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getConnectionType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.enableKeepAlive} property.</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getEnableKeepAlive:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.file} property.</p>
     * @returns String
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getFile:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.location} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getLocation:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.ondatastream} property.</p>
     * @returns Callback<Object>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getOndatastream:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.onerror} property.</p>
     * @returns Callback<Object>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getOnerror:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.onload} property.</p>
     * @returns Callback<Object>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getOnload:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.onreadystatechange} property.</p>
     * @returns Callback<Object>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getOnreadystatechange:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.onsendstream} property.</p>
     * @returns Callback<Object>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getOnsendstream:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.readyState} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getReadyState:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.responseData} property.</p>
     * @returns Ti.Blob
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getResponseData:function() {
    },

    /**
     * <p>Returns the value of the specified response header.</p>
     * @param {String} name <p>Name of the header to retrieve.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getResponseHeader:function(name) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.responseText} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getResponseText:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.responseXML} property.</p>
     * @returns Ti.XML.Document
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getResponseXML:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.status} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getStatus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.statusText} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getStatusText:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.timeout} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getTimeout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.tlsVersion} property.</p>
     * @returns Number
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    getTlsVersion:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.validatesSecureCertificate} property.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    getValidatesSecureCertificate:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.HTTPClient.withCredentials} property.</p>
     * @returns Boolean
     * @since 1.8 (Mobile Web)
     */
    getWithCredentials:function() {
    },

    /**
     * <p>Opens the request and readies the connection.</p>
     * @param {String} method <p>HTTP method for this request, such as 'GET' or 'POST'.</p>
     * @param {String} url <p>URL for the request.</p>
     * @param {Boolean} async <p>Whether the request should be made asynchronously. Only used on iOS.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    open:function(method, url, async) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sends the request.</p>
     * @param {Object|String|Ti.Filesystem.File|Ti.Blob} data <p>Data to send with a POST request.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    send:function(data) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.HTTPClient.autoEncodeUrl} property.</p>
     * @param {Boolean} autoEncodeUrl <p>New value for the property.</p>
     * @since 0.1 (Android)
     */
    setAutoEncodeUrl:function(autoEncodeUrl) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.HTTPClient.autoRedirect} property.</p>
     * @param {Boolean} autoRedirect <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    setAutoRedirect:function(autoRedirect) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.HTTPClient.cache} property.</p>
     * @param {Boolean} cache <p>New value for the property.</p>
     * @since 1.9.0 (iPhone), 1.9.0 (iPad)
     */
    setCache:function(cache) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.HTTPClient.enableKeepAlive} property.</p>
     * @param {Boolean} enableKeepAlive <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setEnableKeepAlive:function(enableKeepAlive) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.HTTPClient.file} property.</p>
     * @param {String} file <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setFile:function(file) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.HTTPClient.ondatastream} property.</p>
     * @param {Callback<Object>} ondatastream <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setOndatastream:function(ondatastream) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.HTTPClient.onerror} property.</p>
     * @param {Callback<Object>} onerror <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setOnerror:function(onerror) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.HTTPClient.onload} property.</p>
     * @param {Callback<Object>} onload <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setOnload:function(onload) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.HTTPClient.onreadystatechange} property.</p>
     * @param {Callback<Object>} onreadystatechange <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setOnreadystatechange:function(onreadystatechange) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.HTTPClient.onsendstream} property.</p>
     * @param {Callback<Object>} onsendstream <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setOnsendstream:function(onsendstream) {
    },

    /**
     * <p>Sets the value for the specified request header. Must be called after <code>open</code> but before <code>send</code>.</p>
     * @param {String} name <p>Name of the header to set.</p>
     * @param {String} value <p>Value to assign to the header. May be <code>null</code> to clear a default header value, such as X-Requested-With.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setRequestHeader:function(name, value) {
    },

    /**
     * <p>Sets the request timeout.</p>
     * @param {Number} timeout <p>Timeout in milliseconds.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setTimeout:function(timeout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.HTTPClient.tlsVersion} property.</p>
     * @param {Number} tlsVersion <p>New value for the property.</p>
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    setTlsVersion:function(tlsVersion) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.HTTPClient.validatesSecureCertificate} property.</p>
     * @param {Boolean} validatesSecureCertificate <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    setValidatesSecureCertificate:function(validatesSecureCertificate) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.HTTPClient.withCredentials} property.</p>
     * @param {Boolean} withCredentials <p>New value for the property.</p>
     * @since 1.8 (Mobile Web)
     */
    setWithCredentials:function(withCredentials) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 */
Ti.Network.Socket = {

    /**
     * <p>State value representing a closed socket.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    CLOSED:null,

    /**
     * <p>State value representing a connected socket.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    CONNECTED:null,

    /**
     * <p>State value indicating an error has occurred on the socket.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    ERROR:null,

    /**
     * <p>State value representing an initialized socket.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    INITIALIZED:null,

    /**
     * <p>State value representing a socket that is listening for connections.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    LISTENING:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Returns a new TCP socket object.</p>
     * @param {Dictionary<Ti.Network.Socket.TCP>} params <p>Creation parameters.</p>
     * @returns Ti.Network.Socket.TCP New TCP socket.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    createTCP:function(params) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>Most socket operations are asynchronous. When you create a socket, you can define
callback funtions to receive the results of API calls, as well as to handle incoming
data.</p>
<p>For example, for a client-side socket, you define 
{@link Ti.Network.Socket.TCP.connected} and
{@link Ti.Network.Socket.TCP.error} callback functions.</p>
<p>To connect to a remote host, call the socket's
{@link Ti.Network.Socket.TCP.connect} method. If the socket connects
successfully, your <code>connected</code> callback is invoked, and you can send and receive data
on the socket. If the socket connection fails, your <code>error</code> callback is invoked. </p>
<p>After a socket is connected, you can access it like any other {@link Ti.IOStream}.
Note that the socket's <code>read</code> and <code>write</code> methods may block, so in most cases
you should use the asynchronous {@link Ti.Stream.read}, {@link Ti.Stream.write} 
and {@link Ti.Stream.pump} methods provided by the {@link Ti.Stream} module,
rather than using the socket object's <code>read</code> and <code>write</code> methods directly.</p>
<p>A familiarity with the basics of BSD socket programming is a recommended before using 
sockets with Ti.</p>
<p>Use the {@link Ti.Network.Socket.createTCP} method to create a TCP socket.</p>
 * 
 * @example Simple Socket IO using Stream.pump
 * <p>The following example uses the {@link Ti.Stream.pump} method from the {@link Ti.Stream} 
module to read data from a socket. The <code>pump</code> method registers a callback that is 
called repeatedly to process incoming data from the socket.</p>
<pre><code>var socket = Ti.Network.Socket.createTCP({
    host: 'blog.example.com', port: 80,
    connected: function (e) {
        Ti.API.info('Socket opened!');
        Ti.Stream.pump(e.socket, readCallback, 1024, true);
        Ti.Stream.write(socket, Ti.createBuffer({
            value: 'GET http://blog.example.com/index.html HTTP/1.1\r\n\r\n'
        }), writeCallback);
    },
        error: function (e) {
        Ti.API.info('Error (' + e.errorCode + '): ' + e.error);
    },
});
socket.connect();

function writeCallback(e) {
    Ti.API.info('Successfully wrote to socket.');
}

function readCallback(e) {
    if (e.bytesProcessed == -1)
    {
        // Error / EOF on socket. Do any cleanup here.
        ...
    }
    try {
        if(e.buffer) {
            var received = e.buffer.toString();
            Ti.API.info('Received: ' + received);
        } else {
            Ti.API.error('Error: read callback called with no buffer!');
        }
    } catch (ex) {
        Ti.API.error(ex);
    }
}
</code></pre>
 * 
 * @example Listening Socket Example
 * <p>The following sample shows a trivial example of using a listening 
socket. In this case, the application simply sends messages to itself,
using the loopback address.</p>
<pre><code>// Hostname to listen on/connect to. Here we use the loopback
// address. iOS also supports Ti.Platform.address (the address of
// the WiFi interface).
// Android supports only the loopback address.

var hostname = '127.0.0.1';

var clientSocket = Ti.Network.Socket.createTCP({
    host : hostname,
    port : 40404,
    connected : function(e) {
        Ti.API.info('Client socket connected!');
        Ti.Stream.pump(e.socket, pumpCallback, 1024, true);
        e.socket.write(Ti.createBuffer({
            value : 'A message from a connecting socket.'
        }));
    },
    error : function(e) {
        Ti.API.info('Error (' + e.errorCode + '): ' + e.error);
    }
});

function writeCallback(e) {
    Ti.API.info('Successfully wrote to socket.');
}

function pumpCallback(e) {
    // Has the remote socket closed its end?
    if (e.bytesProcessed &lt; 0) {
        Ti.API.info("Closing client socket.");
        clientSocket.close();
        return;
    }
    try {
        if(e.buffer) {
            var received = e.buffer.toString();
            Ti.API.info('Received: ' + received);
        } else {
            Ti.API.error('Error: read callback called with no buffer!');
        }
    } catch (ex) {
        Ti.API.error(ex);
    }
}

//Create a socket and listen for incoming connections
var listenSocket = Ti.Network.Socket.createTCP({
    host : hostname,
    port : 40404,
    accepted : function(e) {
        // This where you would usually store the newly-connected socket, e.inbound
        // so it can be used for read / write operations elsewhere in the app.
        // In this case, we simply send a message then close the socket.
        Ti.API.info("Listening socket &lt;" + e.socket + "&gt; accepted incoming connection &lt;" + e.inbound + "&gt;");
        e.inbound.write(Ti.createBuffer({
            value : 'You have been connected to a listening socket.\r\n'
        }));
        e.inbound.close();
        // close the accepted socket

    },
    error : function(e) {
        Ti.API.error("Socket &lt;" + e.socket + "&gt; encountered error when listening");
        Ti.API.error(" error code &lt;" + e.errorCode + "&gt;");
        Ti.API.error(" error description &lt;" + e.error + "&gt;");
    }
});
// Starts the socket listening for connections, does not accept them
listenSocket.listen();
Ti.API.info("Listening now...");

// Tells socket to accept the next inbound connection. listenSocket.accepted gets
// called when a connection is accepted via accept()
Ti.API.info("Calling accept.");
listenSocket.accept({
    timeout : 10000
});

// Call connect after a short timeout to ensure the listening socket is ready to go.
Ti.API.info("Setting timer to connect.");
setTimeout(function(e)
{
    Ti.API.info("Calling connect on client socket.");
   clientSocket.connect();
}, 500);
</code></pre>
 */
Ti.Network.Socket.TCP = function() {
};
Ti.Network.Socket.TCP.prototype = {

    /**
     * <p>Callback to be fired when a listener accepts a connection.</p>
     * @type Callback<AcceptedCallbackArgs>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    accepted:null,

    /**
     * <p>Callback to be fired when the socket enters the "connected" state.</p>
     * @type Callback<ConnectedCallbackArgs>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    connected:null,

    /**
     * <p>Callback to be fired when the socket enters the {@link Ti.Network.Socket.ERROR} state.</p>
     * @type Callback<ErrorCallbackArgs>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    error:null,

    /**
     * <p>The host to connect to or listen on.</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    host:null,

    /**
     * <p>Max number of pending incoming connections to be allowed when the socket is in the {@link Ti.Network.Socket.LISTENING} state.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    listenQueueSize:null,

    /**
     * <p>The port to connect to or listen on.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    port:null,

    /**
     * <p>Current state of the socket.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    state:null,

    /**
     * <p>Timeout, in milliseconds, for <code>connect</code> and all <code>write</code> operations.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    timeout:null,


    /**
     * <p>Tells a {@link Ti.Network.Socket.LISTENING} socket to accept a connection request at the top of a listener's request queue when one becomes available.</p>
     * @param {AcceptDict} options <p>Options to be set on next accepted socket.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    accept:function(options) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Closes a socket.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    close:function() {
    },

    /**
     * <p>Attempts to connect the socket to its host/port.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    connect:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.Socket.TCP.accepted} property.</p>
     * @returns Callback<AcceptedCallbackArgs>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getAccepted:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.Socket.TCP.connected} property.</p>
     * @returns Callback<ConnectedCallbackArgs>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getConnected:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.Socket.TCP.error} property.</p>
     * @returns Callback<ErrorCallbackArgs>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getError:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.Socket.TCP.host} property.</p>
     * @returns String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getHost:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.Socket.TCP.listenQueueSize} property.</p>
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getListenQueueSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.Socket.TCP.port} property.</p>
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getPort:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.Socket.TCP.state} property.</p>
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getState:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.Socket.TCP.timeout} property.</p>
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getTimeout:function() {
    },

    /**
     * <p>Indicates whether this stream is readable.</p>
     * @returns Boolean True if stream is readable, false otherwise.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    isReadable:function() {
    },

    /**
     * <p>Indicates whether this stream is writeable.</p>
     * @returns Boolean True if stream is writeable, false otherwise.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    isWriteable:function() {
    },

    /**
     * <p>Attempts to start listening on the socket's host/port.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    listen:function() {
    },

    /**
     * <p>Reads data from this stream into a buffer.</p>
     * @param {Ti.Buffer} buffer <p>Buffer to read stream data into.</p>
     * @param {Number} offset <p>Offset into the buffer to start writing stream data.
If specified, <code>length</code> must also be specified.</p>
     * @param {Number} length <p>Maximum number of bytes to read.
If specified, <code>offset</code> must also be specified.</p>
     * @returns Number Number of bytes read.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    read:function(buffer, offset, length) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.Socket.TCP.accepted} property.</p>
     * @param {Callback<AcceptedCallbackArgs>} accepted <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    setAccepted:function(accepted) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.Socket.TCP.connected} property.</p>
     * @param {Callback<ConnectedCallbackArgs>} connected <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    setConnected:function(connected) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.Socket.TCP.error} property.</p>
     * @param {Callback<ErrorCallbackArgs>} error <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    setError:function(error) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.Socket.TCP.host} property.</p>
     * @param {String} host <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    setHost:function(host) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.Socket.TCP.listenQueueSize} property.</p>
     * @param {Number} listenQueueSize <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    setListenQueueSize:function(listenQueueSize) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.Socket.TCP.port} property.</p>
     * @param {Number} port <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    setPort:function(port) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.Socket.TCP.timeout} property.</p>
     * @param {Number} timeout <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    setTimeout:function(timeout) {
    },

    /**
     * <p>Writes data from a buffer to this stream.</p>
     * @param {Ti.Buffer} buffer <p>Buffer to write to this stream.</p>
     * @param {Number} offset <p>Offset in the buffer of the first byte to write to the stream.
If specified, <code>length</code> must also be specified.</p>
     * @param {Number} length <p>Maximum number of bytes to write to the stream.
If specified, <code>offset</code> must also be specified.</p>
     * @returns Number Number of bytes written.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    write:function(buffer, offset, length) {
    }
};

/**
 * platforms: iPhone, iPad
 * @namespace <p>Sockets are nontrivial; it is recommended that anyone using them be familiar with the basics of BSD sockets.  All sockets use TCP connections, and are asynchronous for read operations, so your program should be ready to receive 'read' events at any point.  Socket references cannot be transferred to socket objects, and vice-versa - socket references are an internal mechanism which is used only to determine which sockets to send data to and read data from.  For listening sockets, it is highly recommended that you use the {@link Ti.Network.INADDR_ANY} constant as the host name.  If a window containing a socket is closed, the socket MUST be closed also unless you intend to continue to receive data, otherwise the socket will consume resources (and potentially cause conflicts with opening the window again, if a listener) until the program is restarted.  Be aware of the differences between the listen() and connect() functions; attempting to use one when you mean the other may result in errors, unpredictable behavior, or both.</p>
 */
Ti.Network.TCPSocket = function() {
};
Ti.Network.TCPSocket.prototype = {

    /**
     * <p>the host name to connect to.  Must be {@link Ti.Network.INADDR_ANY} or an identifier for the local device in order to listen</p>
     * @type String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    hostName:null,

    /**
     * <p>whether or not the socket is valid</p>
     * @type Boolean
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    isValid:null,

    /**
     * <p>the socket's mode</p>
     * @type Number
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    mode:null,

    /**
     * <p>the port to connect/listen on</p>
     * @type Number
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    port:null,

    /**
     * <p>strip terminating null character when sending string data; default is false</p>
     * @type Boolean
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    stripTerminator:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>close the socket</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    close:function() {
    },

    /**
     * <p>connect the scocket to a TCP server</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    connect:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.TCPSocket.hostName} property.</p>
     * @returns String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    getHostName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.TCPSocket.isValid} property.</p>
     * @returns Boolean
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    getIsValid:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.TCPSocket.mode} property.</p>
     * @returns Number
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    getMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.TCPSocket.port} property.</p>
     * @returns Number
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    getPort:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Network.TCPSocket.stripTerminator} property.</p>
     * @returns Boolean
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    getStripTerminator:function() {
    },

    /**
     * <p>set up the socket to receive connections</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    listen:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.TCPSocket.hostName} property.</p>
     * @param {String} hostName <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    setHostName:function(hostName) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.TCPSocket.isValid} property.</p>
     * @param {Boolean} isValid <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    setIsValid:function(isValid) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.TCPSocket.mode} property.</p>
     * @param {Number} mode <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    setMode:function(mode) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.TCPSocket.port} property.</p>
     * @param {Number} port <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    setPort:function(port) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Network.TCPSocket.stripTerminator} property.</p>
     * @param {Boolean} stripTerminator <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    setStripTerminator:function(stripTerminator) {
    },

    /**
     * <p>write data to the socket, if the mode is WRITE_MODE or READ_WRITE_MODE</p>
     * @param {Object|String} data <p>either a string or blob object representing the data to be transferred</p>
     * @param {Number} sendTo <p>the socket reference to send the data to.  Default is to send to all connected sockets</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    write:function(data, sendTo) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * 
 * @example Battery Event Example
 * <p>Obtaining battery data when the battery state changes.</p>
<pre><code>Ti.Platform.addEventListener('battery', function(e){
  Ti.API.info('The battery state has changed to ' + e.state);
  Ti.API.info('The battery level is ' + e.level);
  Ti.API.info('The battery event source is ' + e.source);
  Ti.API.info('The battery event name ' + e.type);
});
</code></pre>
 */
Ti.Platform = {

    /**
     * <p>Constant to indicate that the system is plugged in and currently being charged.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    BATTERY_STATE_CHARGING:null,

    /**
     * <p>Constant to indicate that the battery is fully charged.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    BATTERY_STATE_FULL:null,

    /**
     * <p>Constant to indicate that the battery state is not known or monitoring is disabled.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    BATTERY_STATE_UNKNOWN:null,

    /**
     * <p>Constant to indicate that the system is unplugged.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    BATTERY_STATE_UNPLUGGED:null,

    /**
     * <p>The system's WIFI IP address. No other network types are supported.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    address:null,

    /**
     * <p>The system's processor architecture.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    architecture:null,

    /**
     * <p>The system's unused memory, measured in megabytes on iOS and bytes on Android.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    availableMemory:null,

    /**
     * <p>The battery level in percent, accessible only when <code>batteryMonitoring</code> is enabled. Measured 
in 5% increments on iPhone/iPad.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    batteryLevel:null,

    /**
     * <p>Determines whether battery monitoring is enabled.</p>
     * @type Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    batteryMonitoring:null,

    /**
     * <p>Indicates the state of the battery. Accessible only when <code>batteryMonitoring</code> is enabled.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    batteryState:null,

    /**
     * <p>Returns the DisplayCaps object.</p>
     * @type Ti.Platform.DisplayCaps
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    displayCaps:null,

    /**
     * <p>The applications's globally-unique ID (UUID).</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    id:null,

    /**
     * <p>The system's default language.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    locale:null,

    /**
     * <p>The system's network interface mac address, or app UUID.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    macaddress:null,

    /**
     * <p>The model of the device.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    model:null,

    /**
     * <p>The name of the platform.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    name:null,

    /**
     * <p>The system's WIFI network mask. No other network types are supported.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    netmask:null,

    /**
     * <p>The short name of the system's Operating System. For example, iPhone will return <code>iphone</code>, 
iPad will return <code>ipad</code>, Android will return <code>android</code> and Mobile Web will return <code>mobileweb</code>.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    osname:null,

    /**
     * <p>The Operating System architecture. On Android, this is <code>32bit</code>.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    ostype:null,

    /**
     * <p>The number of processing cores.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    processorCount:null,

    /**
     * <p>The short name of the JavaScript runtime in use.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    runtime:null,

    /**
     * <p>The system name, if set. On iOS, this can be found in Settings &gt; General &gt; About &gt; Name.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    username:null,

    /**
     * <p>The system's OS version.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    version:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Returns whether the system is configured with a default application to handle the URL's protocol.</p>
     * @param {String} url <p>The url to check.</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    canOpenURL:function(url) {
    },

    /**
     * <p>Creates a globally-unique identifier.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    createUUID:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.address} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getAddress:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.architecture} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getArchitecture:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.availableMemory} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getAvailableMemory:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.batteryLevel} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getBatteryLevel:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.batteryMonitoring} property.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getBatteryMonitoring:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.batteryState} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getBatteryState:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.displayCaps} property.</p>
     * @returns Ti.Platform.DisplayCaps
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getDisplayCaps:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.id} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getId:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.locale} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getLocale:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.macaddress} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getMacaddress:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.model} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    getModel:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.name} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.netmask} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getNetmask:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.osname} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getOsname:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.ostype} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getOstype:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.processorCount} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getProcessorCount:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.runtime} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getRuntime:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.username} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getUsername:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.version} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getVersion:function() {
    },

    /**
     * <p>Returns whether the system settings are configured to show times in 24-hour format.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    is24HourTimeFormat:function() {
    },

    /**
     * <p>Opens this URL using the system's default application for its protocol.</p>
     * @param {String} url <p>The url to open.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    openURL:function(url) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Platform.batteryMonitoring} property.</p>
     * @param {Boolean} batteryMonitoring <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setBatteryMonitoring:function(batteryMonitoring) {
    }
};

/**
 * platforms: Android
 */
Ti.Platform.Android = {

    /**
     * <p>Android API level identifier of the Operating System.</p>
     * @type Number
     * @since 1.8.2 (Android)
     */
    API_LEVEL:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.8.2 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.8.2 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.8.2 (Android)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>On iPhone and iPod devices with retina display, the <code>density</code> property is <code>high</code> and the <code>dpi</code> 
property is <code>320</code>. For other iPhone and iPod devices, <code>density</code> is <code>medium</code> and <code>dpi</code> is <code>160</code>.</p>
<p>On iPad devices with retina display, the <code>density</code> property is <code>high</code> and the <code>dpi</code> 
property is <code>260</code>. For other iPad devices, <code>density</code> is <code>medium</code> and <code>dpi</code> is <code>130</code>.</p>
<p>Note that Xcode versions prior to 4.3.1 do not have the correct tools to detect the iPad 3 
retina display. Apps must be built with Xcode 4.3.1 or later to detect iPad 3 retina display.</p>
<p>Note that the <code>displayCaps</code> property begins with a lowercase letter, which differentiates it 
from the <code>DisplayCaps</code> object that it returns. Refer to the example to understand how it should 
be called.</p>
 * 
 * @example System Display Information
 * <p>Output the display properties to the system log.</p>
<pre><code>Ti.API.info('Ti.Platform.displayCaps.density: ' + Ti.Platform.displayCaps.density);
Ti.API.info('Ti.Platform.displayCaps.dpi: ' + Ti.Platform.displayCaps.dpi);
Ti.API.info('Ti.Platform.displayCaps.platformHeight: ' + Ti.Platform.displayCaps.platformHeight);
Ti.API.info('Ti.Platform.displayCaps.platformWidth: ' + Ti.Platform.displayCaps.platformWidth);
if(Ti.Platform.osname === 'android'){
  Ti.API.info('Ti.Platform.displayCaps.xdpi: ' + Ti.Platform.displayCaps.xdpi);
  Ti.API.info('Ti.Platform.displayCaps.ydpi: ' + Ti.Platform.displayCaps.ydpi);
  Ti.API.info('Ti.Platform.displayCaps.logicalDensityFactor: ' + Ti.Platform.displayCaps.logicalDensityFactor);
}
</code></pre>
 */
Ti.Platform.DisplayCaps = function() {
};
Ti.Platform.DisplayCaps.prototype = {

    /**
     * <p>Logical density of the display.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    density:null,

    /**
     * <p>Display density expressed as dots-per-inch.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    dpi:null,

    /**
     * <p>Logical density of the display, as a scaling factor for the Density Independent Pixel (dip) 
unit.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    logicalDensityFactor:null,

    /**
     * <p>Absolute height of the display in relation to UI orientation. Measured in platform-specific 
units; pixels on Android and density-independent pixels (dip) on iOS.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    platformHeight:null,

    /**
     * <p>Absolute width of the display in relation to UI orientation. Measured in platform-specific 
units; pixels on Android and density-independent pixels (dip) on iOS.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    platformWidth:null,

    /**
     * <p>Physical pixels per inch of the display in the X dimension.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    xdpi:null,

    /**
     * <p>Physical pixels per inch of the display in the Y dimension.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    ydpi:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.DisplayCaps.density} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getDensity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.DisplayCaps.dpi} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getDpi:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.DisplayCaps.logicalDensityFactor} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getLogicalDensityFactor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.DisplayCaps.platformHeight} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPlatformHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.DisplayCaps.platformWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPlatformWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.DisplayCaps.xdpi} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getXdpi:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.Platform.DisplayCaps.ydpi} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getYdpi:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Platform.DisplayCaps.density} property.</p>
     * @param {String} density <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setDensity:function(density) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Platform.DisplayCaps.dpi} property.</p>
     * @param {Number} dpi <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setDpi:function(dpi) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Platform.DisplayCaps.logicalDensityFactor} property.</p>
     * @param {Number} logicalDensityFactor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setLogicalDensityFactor:function(logicalDensityFactor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Platform.DisplayCaps.platformHeight} property.</p>
     * @param {Number} platformHeight <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setPlatformHeight:function(platformHeight) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Platform.DisplayCaps.platformWidth} property.</p>
     * @param {Number} platformWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setPlatformWidth:function(platformWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Platform.DisplayCaps.xdpi} property.</p>
     * @param {Number} xdpi <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setXdpi:function(xdpi) {
    },

    /**
     * <p>Sets the value of the {@link Ti.Platform.DisplayCaps.ydpi} property.</p>
     * @param {Number} ydpi <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setYdpi:function(ydpi) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Ti.Proxy = function() {
};
Ti.Proxy.prototype = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>This module provides a set of methods for interacting with
{@link Ti.IOStream} objects, including asynchronous versions of the 
<code>read</code> and <code>write</code> methods offered by all stream objects. These 
methods should be used in any place where reading from or writing
to a stream might block.</p>
<p>See also:</p>
<ul>
<li>{@link Ti.IOStream}</li>
<li>{@link Ti.BlobStream}</li>
<li>{@link Ti.BufferStream}</li>
<li>{@link Ti.Filesystem.FileStream}</li>
<li>{@link Ti.Network.Socket.TCP}</li>
</ul>
 * 
 * @example Stream.pump Example
 * <p>The following example shows how to use the {@link Ti.Stream.pump} method.</p>
<pre><code>var pumpCallback = function(arg) {
    if(arg.bytesProcessed == -1) {
        Ti.API.info("At end of stream.");
    } else {
        Ti.API.info(String.format("Received %.0f bytes. Total: %.0f bytes.", 
                    arg.bytesProcessed, arg.totalBytesProcessed));
        // do something useful with the data in arg.buffer
    }
}
Ti.Stream.pump(inputStream, pumpCallback, 1024);
</code></pre>
 * 
 * @example Write Stream to File
 * <p>The following example uses the {@link Ti.Stream.writeStream} method
to copy the contents of an input stream to a file. This can be used for any kind
of input stream -- <code>BufferStream</code>, <code>FileStream</code>, or <code>Socket.TCP</code>.</p>
<pre><code>var outFileStream = Ti.Filesystem.getFile('outfile.txt').open(Ti.Filesystem.MODE_WRITE);

// writes all data from inputStream to outFileStream in chunks of 1024 bytes
var bytesWritten = Ti.Stream.writeStream(inputStream, outFileStream, 1024);
Ti.API.info('Wrote ' + bytesWritten + ' bytes, closing both streams.');

inputStream.close();
outFileStream.close();
</code></pre>
 */
Ti.Stream = {

    /**
     * <p>Use with {@link Ti.Stream.createStream} to open a stream in append
mode.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    MODE_APPEND:null,

    /**
     * <p>Use with {@link Ti.Stream.createStream} to open a stream in read
mode.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    MODE_READ:null,

    /**
     * <p>Use with {@link Ti.Stream.createStream} to open a stream in write
mode.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    MODE_WRITE:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Creates stream from a <code>Buffer</code> or <code>Blob</code> object.</p>
     * @param {CreateStreamArgs} params <p>Parameter object, for specifying the source object and mode.</p>
     * @returns Ti.IOStream
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    createStream:function(params) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Reads data from input stream and passes it to a handler method.</p>
     * @param {Ti.IOStream} inputStream <p>Stream to pump from.</p>
     * @param {Callback<PumpCallbackArgs>} handler <p>Handler method that will receive data from <code>inputStream</code>.</p>
     * @param {Number} maxChunkSize <p>Maximum number of bytes to pass to <code>handler</code> in a single call.</p>
     * @param {Boolean} isAsync <p>Specifies if the <code>pump</code> operation should run asynchronously.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    pump:function(inputStream, handler, maxChunkSize, isAsync) {
    },

    /**
     * <p>Asynchronously reads data from an {@link Ti.IOStream} into a buffer.</p>
     * @param {Ti.IOStream} sourceStream <p>Stream to read from.</p>
     * @param {Ti.Buffer} buffer <p>Buffer to read into.</p>
     * @param {Number} offset <p>Offset to start reading stream data from, in bytes.
If specified, <code>length</code> must be specified as well.</p>
     * @param {Number} length <p>Number of bytes of data to read from the stream.
If specified, <code>offset</code> must be specified as well.</p>
     * @param {Callback<ReadCallbackArgs>} resultsCallback <p>Function to call with the results of the read operation.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    read:function(sourceStream, buffer, offset, length, resultsCallback) {
    },

    /**
     * <p>Reads all data from the specified {@link Ti.IOStream}.</p>
     * @param {Ti.IOStream} sourceStream <p>Stream to read from.</p>
     * @param {Ti.Buffer} buffer <p>Buffer to read into. If specified, <code>resultsCallback</code> must be specified as
well.</p>
     * @param {Callback<ReadCallbackArgs>} resultsCallback <p>Function to call with the results of the read operation.
If specified, <code>resultsCallback</code> must be specified as well.</p>
     * @returns Ti.Buffer
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    readAll:function(sourceStream, buffer, resultsCallback) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Asynchronously writes data from a buffer to an {@link Ti.IOStream}.</p>
     * @param {Ti.IOStream} outputStream <p>Stream to write to.</p>
     * @param {Ti.Buffer} buffer <p>Buffer to write from.</p>
     * @param {Number} offset <p>Offset to start writing buffer data from.
If specified, <code>length</code> must be specified as well.</p>
     * @param {Number} length <p>Bytes of data to write. If specified, <code>offset</code> must be specified as well.</p>
     * @param {Callback<WriteCallbackArgs>} resultsCallback <p>Function to call with the results of the write operation.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    write:function(outputStream, buffer, offset, length, resultsCallback) {
    },

    /**
     * <p>Writes all data from an input stream to an output stream.</p>
     * @param {Ti.IOStream} inputStream <p>Stream to read from.</p>
     * @param {Ti.IOStream} outputStream <p>Stream to write to.</p>
     * @param {Number} maxChunkSize <p>Maximum number of bytes to copy from <code>inputStream</code> to <code>outputStream</code> in a 
single operation.</p>
     * @param {Callback<WriteStreamCallbackArgs>} resultsCallback <p>Function to call with the results of the <code>writeStream</code> operation.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    writeStream:function(inputStream, outputStream, maxChunkSize, resultsCallback) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>The UI module is responsible for native user-interface components and interaction inside 
Ti.  The goal of the UI module is to provide a native experience along with native 
performance by compiling Javascript code into their native counterparts as part of the 
build process.</p>
<h4>Design</h4>
<p>The UI module is broken down into 3 major area:</p>
<ul>
<li>
<p><strong>Views</strong> - {@link Ti.UI.View} are containers that host visual elements such as 
controls or other views.  Views can have their properties customized, such as their border color 
and radius, can fire events such as swipe events or touches, and can optionally contain a 
hierarchy or other views as children. In Titanium, most views are specialized to perform both a 
visual function and set of interaction behaviors such as {@link Ti.UI.TableView} or
{@link Ti.UI.CoverFlowView}.  Views are always named with the suffix <code>View</code>.</p>
</li>
<li>
<p><strong>Controls</strong> - controls, or sometimes referred as widgets, are visual elements such as 
{@link Ti.UI.Slider},  {@link Ti.UI.Button} and {@link Ti.UI.Switch}. 
They provide a visual element which has a defined behavior and typical have special 
configuration and special events.  Controls themselves are views and also inherit a views 
properties, functions and events.</p>
</li>
<li>
<p><strong>Windows</strong> - {@link Ti.UI.Window} are typically top-level visual constructs that are 
the main part of your interface. An application will always have at least one window and windows 
can take different shapes and sizes, can have display and interaction properties such as 
fullscreen or modal and can be customized, such as changing their opacity or background color. 
Windows themselves are views and also inherit a views properties, functions and events. There 
are a few specialization of Windows such as a {@link Ti.UI.TabGroup} which offer 
additional behavior beyond the basic Window.</p>
</li>
</ul>
<p>Titanium uses the {@link http://en.wikipedia.org/wiki/Factory_method_pattern} for 
constructing objects and a general naming pattern for APIs.  For example, to construct a 
{@link Ti.UI.AlertDialog}, you call the method {@link Ti.UI.createAlertDialog}.<br />
To create a {@link Ti.UI.TextArea}, you call the method {@link Ti.UI.createTextArea}.<br />
Once an object is created, it will be available until it goes out of scope.</p>
<h4>Optimizations</h4>
<p>UI objects are optimized by Titanium to not be realized into the drawing context and placed into 
the device UI surface until needed.  That means that you can create UI objects, set their 
properties and add them to their hierarchy without much worry about memory or performance.<br />
When the native drawing surface needs to render a specific view or control, Titanium will 
automatically create the view as needed.  Additionally, Titanium is optimized to also release 
memory once the view is no longer needed, on screen or in low memory situations.  However, it's 
a good idea to help Titanium along in certain cases where you are no longer using objects.  For 
example, you should call <code>close</code> on a {@link Ti.UI.Window} instance when you are no 
longer using it.  You can safely call <code>open</code> on the window again to re-open it.</p>
<h4>Global Context and Threading</h4>
<p>Be careful with the objects that are created in <code>app.js</code> but only used once. Since the <code>app.js</code> 
context is global and generally is not garbage collected until the application exits, you 
should think about the design of your application as it relates to this fact.</p>
<p>{@link Ti.UI.Window} objects that are opened up with the <code>url</code> property to another 
JavaScript file provide a nice way to decompose your application into smaller units.</p>
<p>Additionally, Window objects created with a <code>url</code> value run in a separate JavaScript context 
and thread. While all UI processing is done on the main UI thread, other processing inside 
a Window or the <code>app.js</code> that does not have UI interaction will run in its own thread.</p>
<p>The other benefit of using the <code>url</code> property is that when the window is closed, resources 
allocated in the window's context can be immediately cleaned up, saving resources such as 
memory and CPU.</p>
<p>For more information, see the sections "Sub-contexts" and "Passing Data Between Contexts" on the 
{@link Ti.UI.Window} reference page.</p>
<h4>Portability</h4>
<p>Titanium components are designed to be portable across as many platforms as it supports.<br />
However, there are cases where a device either does not support a specific feature or capability 
or where it support additional functionality.  For cases where the device OS supports 
capabilities that other platforms do not, we attempt to place those capabilities in a separate 
namespace, such as {@link Ti.UI.iPhone}. However, in cases where the control is in a common 
namespace and support additional features, we continue to place that functionality directly on 
the object.</p>
<h4>Events</h4>
<p>Event listeners must be defined before their respective events are likely to be fired, otherwise 
they are not guaranteed to be called. The open and focus {@link Ti.UI.Window} event 
listeners, for instance, must be defined before the window is opened.</p>
<p>Evaluating events as late as possible while bearing the above consideration in mind, however, 
can significantly improve application responsiveness. For example, an event listener for a 
click event may be defined after the parent window has been opened.</p>
<h4>Colors</h4>
<p>Many UI components have properties that control their color.</p>
<p>Colors may be specified as a hex triplet to determine the red, green and blue channels. Thus, 
<code>'#000000'</code> is specified for black, <code>'#ff0000'</code> for red, <code>'#00ff00'</code> for green, <code>'#0000ff'</code> for 
blue, and <code>'#ffffff'</code> for white, etc. A channel may be abbreviated when its two hex digits are 
identical, such as <code>'#000'</code>, <code>'#f00'</code>, <code>'#0f0#'</code>, <code>'#00f'</code> and <code>'#fff'</code> for the above colors, 
respectively.</p>
<p>An additional alpha channel is supported as a prefix to the hex triplet. So, to make 
the purple-like color <code>'#ff00ff'</code> semi-opaque, you could use an alpha value of <code>'55'</code>, giving, 
<code>'#55ff00ff'</code> or <code>'#5f0f'</code>.</p>
<p>Note that while the pound symbol, <code>#</code>, is not mandatory on iOS when using the hex triplet format, 
it is recommended to include it to provide compatibility with other platforms.</p>
<p>iOS also accepts colors specified in the form, <code>rgb(R,G,B)</code> and <code>rgba(R,G,B,A)</code>, with the color 
channels inside the parethesis represented by integer numbers between <code>0</code> and <code>255</code> and the 
alpha channel by a float number between <code>0</code> and <code>1.0</code> (transparent to opaque, respectively). 
For example, an opaque purple could be obtained using <code>'rgb(255,0,255)'</code> and a semi-opaque purple 
using <code>'rgba(255,0,255,0.3)'</code>. Note that although this format will work if the <code>rgb</code> or <code>rgba</code> 
prefix is omitted, this is not officially supported and thus not recommended.</p>
<p>Alternatively, the following set of color names are recognized.</p>
<p><code>'aqua'</code>, <code>'black'</code>, <code>'blue'</code>, <code>'brown'</code>, <code>'cyan'</code>, <code>'darkgray'</code>, <code>'fuchsia'</code>, <code>'gray'</code>, 
<code>'green'</code>, <code>'lightgray'</code>, <code>'lime'</code>, <code>'magenta'</code>, <code>'maroon'</code>, <code>'navy'</code>, <code>'olive'</code>, <code>'orange'</code>, 
<code>'pink'</code>, <code>'purple'</code>, <code>'red'</code>, <code>'silver'</code>, <code>'teal'</code>, <code>'white'</code>, <code>'yellow'</code>.</p>
<p>Currently, Android does not support the color name <code>'brown'</code> and iOS does not support <code>'aqua'</code>, 
<code>'fuchsia'</code>, <code>'lime'</code> or <code>'maroon'</code>.</p>
<p>All color properties also accept a value of <code>'transparent'</code>.</p>
<p>If a color property is undefined, the default color of the particular UI element is applied. 
If a color value is not valid on iOS, the default color is applied, whereas, on Android, the 
color yellow is applied.</p>
 * 
 * @example Color Demo
 * <p>The following example demonstrates all the color formats, and color names, that are intended 
to be supported by Ti. See the {@link Ti.UI} section for details.</p>
<pre><code>var colorArray = [
  '#ff00ff', '#f0f', 'rgb(255,0,255)',
  'transparent', '#55ff00ff', '#5f0f', 'rgba(255,0,255,0.3)',
  'aqua', 'black', 'blue', 'brown', 'cyan', 'darkgray', 'fuchsia', 'gray', 'green', 'lightgray', 'lime',
  'magenta', 'maroon', 'navy', 'olive', 'orange', 'pink', 'purple', 'red', 'silver', 'teal', 'white', 'yellow',
];
var win = Ti.UI.createWindow({
  backgroundColor: 'black',
  exitOnClose: true,
  fullscreen: false,
  layout: 'vertical',
  title: 'Color Demo'
});
var rows = [];
var row;
for (var i=0, ilen = colorArray.length; i &lt; ilen; i++){
  row = Ti.UI.createTableViewRow({
    color:'black',
    backgroundColor: colorArray[i],
    title: colorArray[i],
    height: 40
  });
  rows.push(row);
}
var table = Ti.UI.createTableView({
  data: rows,
  backgroundColor: 'white'
});
win.add(table);
win.open();
</code></pre>
 */
Ti.UI = {

    /**
     * <p>Use the animation curve constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    ANIMATION_CURVE_EASE_IN:null,

    /**
     * <p>Use the animation curve constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    ANIMATION_CURVE_EASE_IN_OUT:null,

    /**
     * <p>Use the animation curve constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    ANIMATION_CURVE_EASE_OUT:null,

    /**
     * <p>Use the animation curve constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    ANIMATION_CURVE_LINEAR:null,

    /**
     * <p>Use the text auto-detection constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    AUTODETECT_ADDRESS:null,

    /**
     * <p>Use the text auto-detection constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    AUTODETECT_ALL:null,

    /**
     * <p>Use the text auto-detection constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    AUTODETECT_CALENDAR:null,

    /**
     * <p>Use the text auto-detection constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    AUTODETECT_LINK:null,

    /**
     * <p>Use the text auto-detection constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    AUTODETECT_NONE:null,

    /**
     * <p>Use the text auto-detection constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    AUTODETECT_PHONE:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_CLEAR:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_COLOR:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_COLOR_BURN:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_COLOR_DODGE:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_COPY:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_DARKEN:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_DESTINATION_ATOP:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_DESTINATION_IN:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_DESTINATION_OUT:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_DESTINATION_OVER:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_DIFFERENCE:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_EXCLUSION:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_HARD_LIGHT:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_HUE:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_LIGHTEN:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_LUMINOSITY:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_MULTIPLY:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_NORMAL:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_OVERLAY:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_PLUS_DARKER:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_PLUS_LIGHTER:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_SATURATION:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_SCREEN:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_SOFT_LIGHT:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_SOURCE_ATOP:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_SOURCE_IN:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_SOURCE_OUT:null,

    /**
     * <p>Use the blend mode constants in {@link Ti.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_XOR:null,

    /**
     * <p>Constant value for face-down orientation.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    FACE_DOWN:null,

    /**
     * <p>Constant value for face-up orientation.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    FACE_UP:null,

    /**
     * <p>FILL behavior for UI layout.</p>
     * @type String
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    FILL:null,

    /**
     * <p>INHERIT behavior for UI layout.</p>
     * @type String
     * @since 2.0.0 (Mobile Web)
     */
    INHERIT:null,

    /**
     * <p>Use a bezel-style border on the input field.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    INPUT_BORDERSTYLE_BEZEL:null,

    /**
     * <p>Use a simple line border on the input field.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    INPUT_BORDERSTYLE_LINE:null,

    /**
     * <p>Use no border on the input field.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    INPUT_BORDERSTYLE_NONE:null,

    /**
     * <p>Use a rounded-rectangle border on the input field.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    INPUT_BORDERSTYLE_ROUNDED:null,

    /**
     * <p>Always show buttons on the input field.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    INPUT_BUTTONMODE_ALWAYS:null,

    /**
     * <p>Never show buttons on the input field.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    INPUT_BUTTONMODE_NEVER:null,

    /**
     * <p>Show buttons on the input field when it loses focus.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    INPUT_BUTTONMODE_ONBLUR:null,

    /**
     * <p>Show buttons on the input field when it gains focus.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    INPUT_BUTTONMODE_ONFOCUS:null,

    /**
     * <p>Use a keyboard appearance suitable for entering text on an alert.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    KEYBOARD_APPEARANCE_ALERT:null,

    /**
     * <p>Use the platform-specific default keyboard appearance.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    KEYBOARD_APPEARANCE_DEFAULT:null,

    /**
     * <p>Use an ASCII keyboard, with the standard keyboard layout.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    KEYBOARD_ASCII:null,

    /**
     * <p>Use a keyboard with decimal numbers only, with the pad keyboard layout.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    KEYBOARD_DECIMAL_PAD:null,

    /**
     * <p>Use the default keyboard, depending on the platform.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    KEYBOARD_DEFAULT:null,

    /**
     * <p>Use a keyboard suitable for composing email, with the standard keyboard layout.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    KEYBOARD_EMAIL:null,

    /**
     * <p>Use a keyboard suitable for entering names and phone numbers, with the pad keyboard layout.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    KEYBOARD_NAMEPHONE_PAD:null,

    /**
     * <p>Use a keyboard with numbers and punctuation only, with the standard keyboard layout.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    KEYBOARD_NUMBERS_PUNCTUATION:null,

    /**
     * <p>Use a keyboard with a number pad only, with the pad keyboard layout.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    KEYBOARD_NUMBER_PAD:null,

    /**
     * <p>Use a keyboard with a phone-style number pad, with the pad keyboard layout.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    KEYBOARD_PHONE_PAD:null,

    /**
     * <p>Use an keyboard optimized for entering URLs, with the standard keyboard layout.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    KEYBOARD_URL:null,

    /**
     * <p>Standard landscape orientation (home button on left).</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    LANDSCAPE_LEFT:null,

    /**
     * <p>Reverse landscape orientation (home button on right).</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    LANDSCAPE_RIGHT:null,

    /**
     * <p>Specifies a long duration for an Android Toast notification ({@link Ti.UI.Notification}).</p>
     * @type Number
     * @since 0.4 (Android)
     */
    NOTIFICATION_DURATION_LONG:null,

    /**
     * <p>Specifies a short duration for an Android Toast notification ({@link Ti.UI.Notification}).</p>
     * @type Number
     * @since 0.4 (Android)
     */
    NOTIFICATION_DURATION_SHORT:null,

    /**
     * <p>Use a picker with a countdown timer appearance, showing hours and minutes.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    PICKER_TYPE_COUNT_DOWN_TIMER:null,

    /**
     * <p>Use a date picker.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    PICKER_TYPE_DATE:null,

    /**
     * <p>Use a date and time picker.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    PICKER_TYPE_DATE_AND_TIME:null,

    /**
     * <p>Use a plain picker (for values other than date or time).</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    PICKER_TYPE_PLAIN:null,

    /**
     * <p>Use a time picker.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    PICKER_TYPE_TIME:null,

    /**
     * <p>Orientation constant for portrait mode orientation.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    PORTRAIT:null,

    /**
     * <p>Use the default return key on the virtual keyboard.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    RETURNKEY_DEFAULT:null,

    /**
     * <p>Set the return key text to "Done".</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    RETURNKEY_DONE:null,

    /**
     * <p>Set the return key text to "Emergency Call".</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    RETURNKEY_EMERGENCY_CALL:null,

    /**
     * <p>Set the return key text to "Go".</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    RETURNKEY_GO:null,

    /**
     * <p>Set the return key text to "Google".</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    RETURNKEY_GOOGLE:null,

    /**
     * <p>Set the return key text to "Join".</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    RETURNKEY_JOIN:null,

    /**
     * <p>Set the return key text to "Next".</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    RETURNKEY_NEXT:null,

    /**
     * <p>Set the return key text to "Route".</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    RETURNKEY_ROUTE:null,

    /**
     * <p>Set the return key text to "Search".</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    RETURNKEY_SEARCH:null,

    /**
     * <p>Set the return key text to "Send".</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    RETURNKEY_SEND:null,

    /**
     * <p>Set the return key text to "Yahoo".</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    RETURNKEY_YAHOO:null,

    /**
     * <p>SIZE behavior for UI layout.</p>
     * @type String
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    SIZE:null,

    /**
     * <p>Center align text.</p>
     * @type Number|String
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    TEXT_ALIGNMENT_CENTER:null,

    /**
     * <p>Left align text.</p>
     * @type Number|String
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    TEXT_ALIGNMENT_LEFT:null,

    /**
     * <p>Right align text.</p>
     * @type Number|String
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    TEXT_ALIGNMENT_RIGHT:null,

    /**
     * <p>Auto-capitalize all text in the input field.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    TEXT_AUTOCAPITALIZATION_ALL:null,

    /**
     * <p>Do not auto-capitalize.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    TEXT_AUTOCAPITALIZATION_NONE:null,

    /**
     * <p>Use sentence-style auto-capitalization in the input field.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    TEXT_AUTOCAPITALIZATION_SENTENCES:null,

    /**
     * <p>Auto-capitalize the first letter of each word in the input field.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    TEXT_AUTOCAPITALIZATION_WORDS:null,

    /**
     * <p>Align text to the bottom of the view.</p>
     * @type Number|String
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    TEXT_VERTICAL_ALIGNMENT_BOTTOM:null,

    /**
     * <p>Vertically align text to the center of the view.</p>
     * @type Number|String
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    TEXT_VERTICAL_ALIGNMENT_CENTER:null,

    /**
     * <p>Align text to the top of the view.</p>
     * @type Number|String
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    TEXT_VERTICAL_ALIGNMENT_TOP:null,

    /**
     * <p>Unit constant representing units in centimeters.</p>
     * @type String
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    UNIT_CM:null,

    /**
     * <p>Unit constant representing units in density-independent pixels.</p>
     * @type String
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    UNIT_DIP:null,

    /**
     * <p>Unit constant representing units in inches.</p>
     * @type String
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    UNIT_IN:null,

    /**
     * <p>Unit constant representing units in millimeters.</p>
     * @type String
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    UNIT_MM:null,

    /**
     * <p>Unit constant representing units in pixels.</p>
     * @type String
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    UNIT_PX:null,

    /**
     * <p>Orientation constant representing an unknown orientation.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    UNKNOWN:null,

    /**
     * <p>Orientation constant for inverted portait orientation.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    UPSIDE_PORTRAIT:null,

    /**
     * <p>Sets the background color of the master view (when there are no windows or other top-level 
controls displayed).</p>
     * @type String
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Local path or URL to an image file for setting a background for the master view (when there 
are no windows or other top-level controls displayed).</p>
     * @type String
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>The currently active tab, if a tab group is open.</p>
     * @type Ti.UI.Tab
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    currentTab:null,

    /**
     * <p>The active window associated with the executing JavaScript context.</p>
     * @type Ti.UI.Window
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    currentWindow:null,

    /**
     * <p>Use {@link Ti.UI.Window.orientationModes} instead.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    orientation:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Converts one type of unit to another using the metrics of the main Display.</p>
     * @param {String} convertFromValue <p>A measurement and optional unit to convert from, i.e. 160, "120dip".  Percentages are 
not allowed.</p>
     * @param {String} convertToUnits <p>The desired unit for the conversion result. Use one of the unit constants in {@link Ti.UI}.</p>
     * @returns Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    convertUnits:function(convertFromValue, convertToUnits) {
    },

    /**
     * <p>Creates are returns an instance of {@link Ti.UI.D2Matrix}.</p>
     * @param {MatrixCreationDict} parameters <p>A dictionary object specifying the initial transformation of the object.</p>
     * @returns Ti.UI.D2Matrix
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    create2DMatrix:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.D3Matrix}.</p>
     * @param {Dictionary<Ti.UI.D3Matrix>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.D3Matrix} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.D3Matrix
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    create3DMatrix:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.ActivityIndicator}.</p>
     * @param {Dictionary<Ti.UI.ActivityIndicator>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.ActivityIndicator} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.ActivityIndicator
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createActivityIndicator:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.AlertDialog}.</p>
     * @param {Dictionary<Ti.UI.AlertDialog>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.AlertDialog} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.AlertDialog
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createAlertDialog:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.Animation}.</p>
     * @param {Dictionary<Ti.UI.Animation>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.Animation} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.Animation
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createAnimation:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.Button}.</p>
     * @param {Dictionary<Ti.UI.Button>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.Button} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.Button
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createButton:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.ButtonBar}.</p>
     * @param {Dictionary<Ti.UI.ButtonBar>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.ButtonBar} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.ButtonBar
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    createButtonBar:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.CoverFlowView}.</p>
     * @param {Dictionary<Ti.UI.CoverFlowView>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.CoverFlowView} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.CoverFlowView
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    createCoverFlowView:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.DashboardItem}.</p>
     * @param {Dictionary<Ti.UI.DashboardItem>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.DashboardItem} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.DashboardItem
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    createDashboardItem:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.DashboardView}.</p>
     * @param {Dictionary<Ti.UI.DashboardView>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.DashboardView} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.DashboardView
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    createDashboardView:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.EmailDialog}.</p>
     * @param {Dictionary<Ti.UI.EmailDialog>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.EmailDialog} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.EmailDialog
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createEmailDialog:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.ImageView}.</p>
     * @param {Dictionary<Ti.UI.ImageView>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.ImageView} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.ImageView
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createImageView:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.Label}.</p>
     * @param {Dictionary<Ti.UI.Label>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.Label} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.Label
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createLabel:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.MaskedImage}.</p>
     * @param {Dictionary<Ti.UI.MaskedImage>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.MaskedImage} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.MaskedImage
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    createMaskedImage:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.Notification}.</p>
     * @param {Dictionary<Ti.UI.Notification>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.Notification} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.Notification
     * @since 0.8 (Android)
     */
    createNotification:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.OptionDialog}.</p>
     * @param {Dictionary<Ti.UI.OptionDialog>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.OptionDialog} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.OptionDialog
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createOptionDialog:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.Picker}.</p>
     * @param {Dictionary<Ti.UI.Picker>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.Picker} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.Picker
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createPicker:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.PickerColumn}.</p>
     * @param {Dictionary<Ti.UI.PickerColumn>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.PickerColumn} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.PickerColumn
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createPickerColumn:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.PickerRow}.</p>
     * @param {Dictionary<Ti.UI.PickerRow>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.PickerRow} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.PickerRow
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createPickerRow:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.ProgressBar}.</p>
     * @param {Dictionary<Ti.UI.ProgressBar>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.ProgressBar} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.ProgressBar
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createProgressBar:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.ScrollView}.</p>
     * @param {Dictionary<Ti.UI.ScrollView>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.ScrollView} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.ScrollView
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createScrollView:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.ScrollableView}.</p>
     * @param {Dictionary<Ti.UI.ScrollableView>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.ScrollableView} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.ScrollableView
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    createScrollableView:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.SearchBar}.</p>
     * @param {Dictionary<Ti.UI.SearchBar>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.SearchBar} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.SearchBar
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    createSearchBar:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.Slider}.</p>
     * @param {Dictionary<Ti.UI.Slider>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.Slider} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.Slider
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createSlider:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.Switch}.</p>
     * @param {Dictionary<Ti.UI.Switch>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.Switch} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.Switch
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createSwitch:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.Tab}.</p>
     * @param {Dictionary<Ti.UI.Tab>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.Tab} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.Tab
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createTab:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.TabGroup}.</p>
     * @param {Dictionary<Ti.UI.TabGroup>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.TabGroup} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.TabGroup
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createTabGroup:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.TabbedBar}.</p>
     * @param {Dictionary<Ti.UI.TabbedBar>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.TabbedBar} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.TabbedBar
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    createTabbedBar:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.TableView}.</p>
     * @param {Dictionary<Ti.UI.TableView>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.TableView} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.TableView
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createTableView:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.TableViewRow}.</p>
     * @param {Dictionary<Ti.UI.TableViewRow>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.TableViewRow} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.TableViewRow
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createTableViewRow:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.TableViewSection}.</p>
     * @param {Dictionary<Ti.UI.TableViewSection>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.TableViewSection} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.TableViewSection
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createTableViewSection:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.TextArea}.</p>
     * @param {Dictionary<Ti.UI.TextArea>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.TextArea} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.TextArea
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createTextArea:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.TextField}.</p>
     * @param {Dictionary<Ti.UI.TextField>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.TextField} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.TextField
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createTextField:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.Toolbar}.</p>
     * @param {Dictionary<Ti.UI.Toolbar>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.Toolbar} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.Toolbar
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createToolbar:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.View}.</p>
     * @param {Dictionary<Ti.UI.View>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.View} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.View
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createView:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.WebView}.</p>
     * @param {Dictionary<Ti.UI.WebView>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.WebView} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.WebView
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createWebView:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.Window}.</p>
     * @param {Dictionary<Ti.UI.Window>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.Window} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.Window
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createWindow:function(parameters) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.backgroundColor} property.</p>
     * @returns String
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.backgroundImage} property.</p>
     * @returns String
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.currentTab} property.</p>
     * @returns Ti.UI.Tab
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    getCurrentTab:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.currentWindow} property.</p>
     * @returns Ti.UI.Window
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    getCurrentWindow:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.orientation} property.</p>
     * @returns Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    getOrientation:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.currentTab} property.</p>
     * @param {Ti.UI.Tab} currentTab <p>New value for the property.</p>
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    setCurrentTab:function(currentTab) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.orientation} property.</p>
     * @param {Number} orientation <p>New value for the property.</p>
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    setOrientation:function(orientation) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>A 2D matrix is used to rotate, scale, translate, or skew the objects in a two-dimensional space. 
A 2D affine transformation can be  represented by a 3 by 3 matrix:</p>
<table>
<tr><td><i>a</i></td><td><i>b</i></td><td>0</td></tr>
<tr><td><i>c</i></td><td><i>d</i></td><td>0</td></tr>
<tr><td><i>tx</i></td><td><i>ty</i></td><td>1</td></tr>
</table>

<p>The third column is constant (0,0,1). </p>
<p>On iOS, the matrix terms, <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, <code>tx</code>, and <code>ty</code>, are available as
properties. On Android, the matrix terms are not available as properties. </p>
<p>Use the {@link Ti.UI.create2DMatrix} method to create a new 2D matrix. You can 
pass an optional {@link MatrixCreationDict} dictionary to the method to initialize the 
matrix. For example:</p>
<p>var m = Ti.UI.D2Matrix({ rotate: 45 });</p>
<p>Produces a new matrix with a 45 degree rotation.  If you pass no arguments, 
<code>create2DMatrix</code> returns an identity matrix.</p>
 */
Ti.UI.D2Matrix = function() {
};
Ti.UI.D2Matrix.prototype = {

    /**
     * <p>The entry at position [1,1] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    a:null,

    /**
     * <p>The entry at position [1,2] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    b:null,

    /**
     * <p>The entry at position [2,1] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    c:null,

    /**
     * <p>The entry at position [2,2] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    d:null,

    /**
     * <p>The entry at position [3,1] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    tx:null,

    /**
     * <p>The entry at position [3,2] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    ty:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.D2Matrix.a} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getA:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.D2Matrix.b} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getB:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.D2Matrix.c} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getC:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.D2Matrix.d} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getD:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.D2Matrix.tx} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getTx:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.D2Matrix.ty} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getTy:function() {
    },

    /**
     * <p>Returns a matrix constructed by inverting this matrix.</p>
     * @returns Ti.UI.D2Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    invert:function() {
    },

    /**
     * <p>Returns a matrix constructed by combining two existing matrices.</p>
     * @param {Ti.UI.D2Matrix} t2 <p>The second matrix.</p>
     * @returns Ti.UI.D2Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    multiply:function(t2) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Returns a matrix constructed by rotating this matrix.</p>
     * @param {Number} angle <p>Angle to rotate to, in degrees. On Android, if <code>angleTo</code> is specified, this specifies
the starting angle for a rotation animation.</p>
     * @param {Number} toAngle <p>Ending angle for a rotation animation, in degrees. Android only.</p>
     * @returns Ti.UI.D2Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    rotate:function(angle, toAngle) {
    },

    /**
     * <p>Returns a <code>2DMatrix</code> object that specifies a scaling animation from one scale to another.</p>
     * @param {Number} sx <p>Horizontal scaling factor. If <code>toSx</code> and <code>toSy</code> are specified, 
this specifies the starting horizontal scaling factor, at the beginning 
of an animation.</p>
     * @param {Number} sy <p>Vertical scaling factor. If <code>toSx</code> and <code>toSy</code> are specified, 
this specifies the starting vertical scaling factor, at the beginning of 
an animation.</p>
     * @param {Number} toSx <p>Ending horizontal scaling factor, at the end of an animation.
If specified, <code>toSy</code> must be specified as well. Android only.</p>
     * @param {Number} toSy <p>Ending vertical scaling factor, at the end of an animation.
If specified, <code>toSx</code> must be specified as well. Android only.</p>
     * @returns Ti.UI.D2Matrix
     * @since 0.9 (Android)
     */
    scale:function(sx, sy, toSx, toSy) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.D2Matrix.a} property.</p>
     * @param {Number} a <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setA:function(a) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.D2Matrix.b} property.</p>
     * @param {Number} b <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setB:function(b) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.D2Matrix.c} property.</p>
     * @param {Number} c <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setC:function(c) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.D2Matrix.d} property.</p>
     * @param {Number} d <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setD:function(d) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.D2Matrix.tx} property.</p>
     * @param {Number} tx <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setTx:function(tx) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.D2Matrix.ty} property.</p>
     * @param {Number} ty <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setTy:function(ty) {
    },

    /**
     * <p>Returns a matrix constructed by applying a translation transform to this matrix.</p>
     * @param {Number} tx <p>Horizontal component of the translation.</p>
     * @param {Number} ty <p>Vertical component of the translation.</p>
     * @returns Ti.UI.D2Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    translate:function(tx, ty) {
    }
};

/**
 * platforms: iPhone, iPad
 * @namespace <p>The 3D Matrix is an object for holding values for an affine transformation matrix. </p>
<p>The 3DMatrix is created by {@link Ti.UI.create3DMatrix}. A 3D matrix is
used to rotate, scale, translate, or skew the objects in a three-dimensional
space. A 3D matrix is represented by a 4 by 4 matrix. </p>
<p>You create an <code>identity matrix</code> by creating a 3D Matrix with an empty
constructor.</p>
 */
Ti.UI.D3Matrix = function() {
};
Ti.UI.D3Matrix.prototype = {

    /**
     * <p>The entry at position [1,1] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m11:null,

    /**
     * <p>The entry at position [1,2] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m12:null,

    /**
     * <p>The entry at position [1,3] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m13:null,

    /**
     * <p>The entry at position [1,4] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m14:null,

    /**
     * <p>The entry at position [2,1] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m21:null,

    /**
     * <p>The entry at position [2,2] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m22:null,

    /**
     * <p>The entry at position [2,3] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m23:null,

    /**
     * <p>The entry at position [2,4] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m24:null,

    /**
     * <p>The entry at position [3,1] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m31:null,

    /**
     * <p>The entry at position [3,2] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m32:null,

    /**
     * <p>The entry at position [3,3] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m33:null,

    /**
     * <p>The entry at position [3,4] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m34:null,

    /**
     * <p>The entry at position [4,1] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m41:null,

    /**
     * <p>The entry at position [4,2] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m42:null,

    /**
     * <p>The entry at position [4,3] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m43:null,

    /**
     * <p>The entry at position [4,4] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m44:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.D3Matrix.m11} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM11:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.D3Matrix.m12} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM12:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.D3Matrix.m13} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM13:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.D3Matrix.m14} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM14:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.D3Matrix.m21} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM21:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.D3Matrix.m22} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM22:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.D3Matrix.m23} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM23:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.D3Matrix.m24} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM24:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.D3Matrix.m31} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM31:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.D3Matrix.m32} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM32:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.D3Matrix.m33} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM33:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.D3Matrix.m34} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM34:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.D3Matrix.m41} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM41:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.D3Matrix.m42} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM42:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.D3Matrix.m43} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM43:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.D3Matrix.m44} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM44:function() {
    },

    /**
     * <p>Returns a matrix constructed by inverting an existing matrix</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    invert:function() {
    },

    /**
     * <p>Returns a matrix constructed by combining two existing matrix.</p>
     * @param {Ti.UI.D3Matrix} t2 <p>The second matrix. This matrix is concatenated to the matrix instance against which the function is invoked.  The result of this function is the first matrix multiplied by the second matrix. You might perform several multiplications in order to create a single matrix that contains the cumulative effects of several transformations. Note that matrix operations are not commutative - the order in which you concatenate matrices is important. That is, the result of multiplying matrix t1 by matrix t2 does not necessarily equal the result of multiplying matrix t2 by matrix t1.</p>
     * @returns Ti.UI.D3Matrix
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    multiply:function(t2) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Returns a matrix constructed by rotating an existing matrix</p>
     * @param {Number} angle <p>The angle, in degrees, by which to rotate the matrix. A positive value specifies counterclockwise rotation and a negative value specifies clockwise rotation.</p>
     * @param {Number} x <p>The x part of the vector about which to rotate</p>
     * @param {Number} y <p>The y part of the vector about which to rotate</p>
     * @param {Number} z <p>The z part of the vector about which to rotate</p>
     * @returns Ti.UI.D3Matrix
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    rotate:function(angle, x, y, z) {
    },

    /**
     * <p>Returns a matrix constructed by scaling an existing matrix</p>
     * @param {Number} sx <p>The value by which to scale x values of the matrix</p>
     * @param {Number} sy <p>The value by which to scale y values of the matrix</p>
     * @param {Number} sz <p>The value by which to scale z values of the matrix</p>
     * @returns Ti.UI.D3Matrix
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    scale:function(sx, sy, sz) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.D3Matrix.m11} property.</p>
     * @param {Number} m11 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM11:function(m11) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.D3Matrix.m12} property.</p>
     * @param {Number} m12 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM12:function(m12) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.D3Matrix.m13} property.</p>
     * @param {Number} m13 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM13:function(m13) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.D3Matrix.m14} property.</p>
     * @param {Number} m14 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM14:function(m14) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.D3Matrix.m21} property.</p>
     * @param {Number} m21 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM21:function(m21) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.D3Matrix.m22} property.</p>
     * @param {Number} m22 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM22:function(m22) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.D3Matrix.m23} property.</p>
     * @param {Number} m23 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM23:function(m23) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.D3Matrix.m24} property.</p>
     * @param {Number} m24 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM24:function(m24) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.D3Matrix.m31} property.</p>
     * @param {Number} m31 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM31:function(m31) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.D3Matrix.m32} property.</p>
     * @param {Number} m32 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM32:function(m32) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.D3Matrix.m33} property.</p>
     * @param {Number} m33 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM33:function(m33) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.D3Matrix.m34} property.</p>
     * @param {Number} m34 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM34:function(m34) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.D3Matrix.m41} property.</p>
     * @param {Number} m41 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM41:function(m41) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.D3Matrix.m42} property.</p>
     * @param {Number} m42 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM42:function(m42) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.D3Matrix.m43} property.</p>
     * @param {Number} m43 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM43:function(m43) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.D3Matrix.m44} property.</p>
     * @param {Number} m44 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM44:function(m44) {
    },

    /**
     * <p>Returns a matrix constructed by translating an existing matrix</p>
     * @param {Number} tx <p>The value by which to move x values with the matrix</p>
     * @param {Number} ty <p>The value by which to move y values with the matrix</p>
     * @param {Number} tz <p>The value by which to move z values with the matrix</p>
     * @returns Ti.UI.D3Matrix
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    translate:function(tx, ty, tz) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>An activity indicator can be used to show the progress of an operation in the UI to let the 
user know that some action is taking place. An activity indicator consists of a spinning 
animation and an optional text message, and is used to indicate an ongoing activity of 
indeterminate length. To show progress, use {@link Ti.UI.ProgressBar} instead.</p>
<p>Use the {@link Ti.UI.createActivityIndicator} method to create an Activity Indicator. </p>
<p>Activity indicators must be used differently on Android and iOS:</p>
<ul>
<li>
<p>On Android, the activity indicator is a modal dialog that blocks the UI. Calling <code>show</code> 
displays the indicator, and calling <code>hide</code> removes it. </p>
</li>
<li>
<p>On iOS and Mobile Web, the activity indicator is a view like any other view, and must be 
added to a window or other top-level view before it can be shown. Note that, unlike most views, 
the activity indicator is hidden by default and must be shown explicitly.</p>
</li>
</ul>
 * 
 * @example Simple Activity Indicator
 * <p>Open a yellow window immediately after a blue window. Show an activity indicator while 
some code executes and hide it on completion. Then close the yellow window.</p>
<pre><code>Ti.UI.backgroundColor = 'white';

var win1 = Ti.UI.createWindow({
  backgroundColor: 'blue'
});

var win2 = Ti.UI.createWindow({
  backgroundColor: 'yellow',
  fullscreen: true
});

var activityIndicator = Ti.UI.createActivityIndicator({
  color: 'green',
  font: {fontFamily:'Helvetica Neue', fontSize:26, fontWeight:'bold'},
  message: 'Loading...',
  style:Ti.UI.iPhone.ActivityIndicatorStyle.DARK,
  top:10,
  left:10,
  height:'auto',
  width:'auto'
});

// On iOS, the activity indicator must be added to a window or view for it to appear
if (Ti.Platform.name === 'iPhone OS'){
  win2.add(activityIndicator);
}

// eventListeners must always be loaded before the event is likely to fire
// hence, the open() method must be positioned before the window is opened
win2.addEventListener('open', function (e) {
  activityIndicator.show();
  // do some work that takes 6 seconds
  // ie. replace the following setTimeout block with your code
  setTimeout(function(){
    e.source.close();
    activityIndicator.hide();
  }, 6000);
});

win1.open();
win2.open();
</code></pre>
 */
Ti.UI.ActivityIndicator = function() {
};
Ti.UI.ActivityIndicator.prototype = {

    /**
     * <p>Bottom position of the view.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    bottom:null,

    /**
     * <p>Color of the message text, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    color:null,

    /**
     * <p>Font used for the message text.</p>
     * @type Font
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    font:null,

    /**
     * <p>Width of the view. Only accepts value of <code>auto</code>, which must be explicitly set in order to 
display the message and to position the view correctly.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    height:null,

    /**
     * <p>Left position of the view.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    left:null,

    /**
     * <p>Message text.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>Key identifying a string in the locale file to use for the message text.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    messageid:null,

    /**
     * <p>Right position of the view.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    right:null,

    /**
     * <p>The style for the activity indicator.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    style:null,

    /**
     * <p>Top position of the view.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    top:null,

    /**
     * <p>Width of the view. Only accepts value of <code>auto</code>, which must be explicitly set in order to 
display the message and to position the view correctly.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    width:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ActivityIndicator.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ActivityIndicator.color} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ActivityIndicator.font} property.</p>
     * @returns Font
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFont:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ActivityIndicator.height} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ActivityIndicator.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ActivityIndicator.message} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getMessage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ActivityIndicator.messageid} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getMessageid:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ActivityIndicator.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ActivityIndicator.style} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ActivityIndicator.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ActivityIndicator.width} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Hides the activity indicator and stops the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ActivityIndicator.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ActivityIndicator.color} property.</p>
     * @param {String} color <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setColor:function(color) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ActivityIndicator.font} property.</p>
     * @param {Font} font <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setFont:function(font) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ActivityIndicator.height} property.</p>
     * @param {String} height <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ActivityIndicator.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ActivityIndicator.message} property.</p>
     * @param {String} message <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setMessage:function(message) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ActivityIndicator.messageid} property.</p>
     * @param {String} messageid <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setMessageid:function(messageid) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ActivityIndicator.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ActivityIndicator.style} property.</p>
     * @param {Number} style <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setStyle:function(style) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ActivityIndicator.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ActivityIndicator.width} property.</p>
     * @param {String} width <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Shows the activity indicator and starts the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>An alert dialog is created using {@link Ti.UI.createAlertDialog}.</p>
<p>Although this dialog always appears in the middle of the display (not touching the edges), 
other aspects of its aesthetics and the way the user interacts with it are different for each 
platform, as described below.</p>
<h4>Android</h4>
<p>On Android, the default alert dialog displays text information, via a title and message, without 
any buttons. As the user can use the system hardware <code>back</code> button to dismiss it, a button is 
optional.</p>
<p>Buttons are shown if the <code>buttonNames</code> property is defined, and are rendered horizontally below 
the message.</p>
<p>To create a custom layout, a view may be added and, in turn, a hierarchy of views added to that 
child view.</p>
<h4>iOS</h4>
<p>On iOS, the default alert dialog displays text information, via a title and message, with 
a single button to allow it to be dismissed.</p>
<p>Buttons are defined using the <code>buttonNames</code> property and are rendered vertically below 
the message.</p>
<p>On iOS 4.0 and later, alert dialogs are automatically cancelled when the application is 
paused/suspended.</p>
<h4>Global Alias</h4>
<p>A global method <code>alert()</code> is aliased to this object, and can be invoked with a single message. 
For example</p>
<pre><code>alert('this is a message');
</code></pre>
<p>This will generate an alert with a title of "Alert" and an "OK" button.</p>
<h4>Caveats</h4>
<p>Multiple alerts should not be shown at once.</p>
<p>The <code>title</code> and <code>ok</code> properties cannot be changed while the alert dialog is being displayed. On
Android only, you can change the <code>message</code> property while the alert dialog is being displayed.</p>
 * 
 * @example Single-button Alert Dialog (using alias)
 * <p>Create a single-button alert dialog using the global <code>alert()</code> alias.</p>
<pre><code>Ti.UI.setBackgroundColor('white');
var win = Ti.UI.createWindow({  
  title: 'Click window to test',
  backgroundColor: 'white',
  exitOnClose: true,
  fullscreen: false
});

win.addEventListener('click', function(e){
  alert('The file has been deleted');
});
win.open();
</code></pre>
 * 
 * @example Single-button Alert Dialog (standard)
 * <p>Create a single-button alert dialog, without explicitly defining it using the <code>buttonNames</code> 
property, which is invoked when the app window is clicked.</p>
<pre><code>Ti.UI.setBackgroundColor('white');
var win = Ti.UI.createWindow({  
  title: 'Click window to test',
  backgroundColor: 'white',
exitOnClose: true,
fullscreen: false
});

win.addEventListener('click', function(e){
  var dialog = Ti.UI.createAlertDialog({
    message: 'The file has been deleted',
    ok: 'Okay',
    title: 'File Deleted'
  }).show();
});
win.open();
</code></pre>
 * 
 * @example Three-button Alert Dialog
 * <p>Create a three-button alert dialog, which is invoked when the app window is clicked.      <br />
</p>
<pre><code>Ti.UI.setBackgroundColor('white');
var win = Ti.UI.createWindow({  
  title: 'Click window to test',
  backgroundColor: 'white',
  exitOnClose: true,
  fullscreen: false
});

win.addEventListener('click', function(e){
  var dialog = Ti.UI.createAlertDialog({
    cancel: 1,
    buttonNames: ['Confirm', 'Cancel', 'Help'],
    message: 'Would you like to delete the file?',
    title: 'Delete'
  }).show();
});
win.open();
</code></pre>
 */
Ti.UI.AlertDialog = function() {
};
Ti.UI.AlertDialog.prototype = {

    /**
     * <p>View to load inside the message area, to create a custom layout.</p>
     * @type Ti.UI.View
     * @since 0.8 (Android)
     */
    androidView:null,

    /**
     * <p>Name of each button to create.</p>
     * @type Array<String>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    buttonNames:null,

    /**
     * <p>Index to define the button cancel button, returned by the <code>click</code> event.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    cancel:null,

    /**
     * <p>Dialog message.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>Key identifying a string in the locale file to use for the message text.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    messageid:null,

    /**
     * <p>Text for the <code>OK</code> button.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ok:null,

    /**
     * <p>Key identifying a string in the locale file to use for the <code>ok</code> text.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    okid:null,

    /**
     * <p>Title of the dialog.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    title:null,

    /**
     * <p>Key identifying a string in the locale file to use for the title text.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    titleid:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.AlertDialog.androidView} property.</p>
     * @returns Ti.UI.View
     * @since 0.8 (Android)
     */
    getAndroidView:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.AlertDialog.buttonNames} property.</p>
     * @returns Array<String>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getButtonNames:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.AlertDialog.cancel} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCancel:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.AlertDialog.message} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getMessage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.AlertDialog.ok} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOk:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.AlertDialog.title} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTitle:function() {
    },

    /**
     * <p>Hides this dialog.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.AlertDialog.androidView} property.</p>
     * @param {Ti.UI.View} androidView <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setAndroidView:function(androidView) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.AlertDialog.cancel} property.</p>
     * @param {Number} cancel <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCancel:function(cancel) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.AlertDialog.message} property.</p>
     * @param {String} message <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setMessage:function(message) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.AlertDialog.ok} property.</p>
     * @param {String} ok <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOk:function(ok) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.AlertDialog.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTitle:function(title) {
    },

    /**
     * <p>Shows this dialog.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    }
};

/**
 * platforms: Android
 * 
 * @example Android Preferences Example
 * <p>Create preferences interface for the application.</p>
<h4><code>app.js</code></h4>
<pre><code>var button = Ti.UI.createButton({
  title:    'Click to Open Preferences'
});
button.addEventListener('click', function() {
  Ti.UI.Android.openPreferences();
});
Ti.UI.currentWindow.add(button);
</code></pre>
<h4><code>platform/android/res/xml/preferences.xml</code></h4>
<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
    android:title="Preferences"&gt;
  &lt;PreferenceScreen
      android:title="Misc. Preferences"
      android:summary="Click to see more options"&gt;
    &lt;EditTextPreference
      android:title="Edit Text Preference"
      android:summary="You may enter a string"
      android:defaultValue=""
      android:key="editText" /&gt;
  &lt;/PreferenceScreen&gt;
  &lt;PreferenceCategory android:title="Category One"&gt;
    &lt;CheckBoxPreference
      android:title="CheckBox Preference"
      android:defaultValue="false"
      android:summary="You may enter a boolean"
      android:key="checkbox" /&gt;
    &lt;RingtonePreference
      android:title="Ringtone Preference"
      android:summary="You may pick a ringtone"
      android:defaultValue=""
      android:key="ringtone" /&gt;
  &lt;/PreferenceCategory&gt;
  &lt;PreferenceCategory android:title="Category Two"&gt;
    &lt;ListPreference
      android:title="List Preference"
      android:summary="You may chose from multiple choices"
      android:key="list" 
    android:entries="@array/listNames"
    android:entryValues="@array/listValues" 
    /&gt;
  &lt;/PreferenceCategory&gt;
&lt;/PreferenceScreen&gt;
</code></pre>
<h4><code>platform/android/res/values/array/array.xml</code></h4>
<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;
  &lt;string-array name="listNames"&gt;
    &lt;item&gt;5 Minutes&lt;/item&gt;
    &lt;item&gt;10 Minutes&lt;/item&gt;
    &lt;item&gt;15 Minutes&lt;/item&gt;
    &lt;item&gt;30 Minutes&lt;/item&gt;
    &lt;item&gt;60 Minutes&lt;/item&gt;
  &lt;/string-array&gt;
  &lt;string-array name="listValues"&gt;
    &lt;item&gt;5&lt;/item&gt;
    &lt;item&gt;10&lt;/item&gt;
    &lt;item&gt;15&lt;/item&gt;
    &lt;item&gt;30&lt;/item&gt;
    &lt;item&gt;60&lt;/item&gt;
  &lt;/string-array&gt;
&lt;/resources&gt;
</code></pre>
 */
Ti.UI.Android = {

    /**
     * <p>Auto-link all supported types for {@link Ti.UI.Label}.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    LINKIFY_ALL:null,

    /**
     * <p>Auto-link email addresses for {@link Ti.UI.Label}.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    LINKIFY_EMAIL_ADDRESSES:null,

    /**
     * <p>Auto-link physical addresses for {@link Ti.UI.Label}.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    LINKIFY_MAP_ADDRESSES:null,

    /**
     * <p>Auto-link phone numbers for {@link Ti.UI.Label}.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    LINKIFY_PHONE_NUMBERS:null,

    /**
     * <p>Auto-link web urls for {@link Ti.UI.Label}.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    LINKIFY_WEB_URLS:null,

    /**
     * <p>Android A_8 pixel format for {@link Ti.UI.Window}. Selecting the correct pixel format 
can improve image clarity and performance.</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_A_8:null,

    /**
     * <p>Android LA_88 pixel format for {@link Ti.UI.Window}. Selecting the correct pixel format 
can improve image clarity and performance.</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_LA_88:null,

    /**
     * <p>Android L_8 pixel format for {@link Ti.UI.Window}. Selecting the correct pixel format 
can improve image clarity and performance.</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_L_8:null,

    /**
     * <p>Android OPAQUE pixel format for {@link Ti.UI.Window}. Selecting the correct pixel format 
can improve image clarity and performance.</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_OPAQUE:null,

    /**
     * <p>Android RGBA_4444 pixel format for {@link Ti.UI.Window}. Selecting the correct pixel format 
can improve image clarity and performance.</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_RGBA_4444:null,

    /**
     * <p>Android RGBA_5551 pixel format for {@link Ti.UI.Window}. Selecting the correct pixel format 
can improve image clarity and performance.</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_RGBA_5551:null,

    /**
     * <p>Android RGBA_8888 pixel format for {@link Ti.UI.Window}. Selecting the correct pixel format 
can improve image clarity and performance.</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_RGBA_8888:null,

    /**
     * <p>Android RGBX_8888 pixel format for {@link Ti.UI.Window}. Selecting the correct pixel format 
can improve image clarity and performance.</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_RGBX_8888:null,

    /**
     * <p>Android RGB_332 pixel format for {@link Ti.UI.Window}. Selecting the correct pixel format 
can improve image clarity and performance.</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_RGB_332:null,

    /**
     * <p>Android RGB_565 pixel format for {@link Ti.UI.Window}. Selecting the correct pixel format 
can improve image clarity and performance.</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_RGB_565:null,

    /**
     * <p>Android RGB_888 pixel format for {@link Ti.UI.Window}. Selecting the correct pixel format 
can improve image clarity and performance.</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_RGB_888:null,

    /**
     * <p>Android TRANSLUCENT pixel format for {@link Ti.UI.Window}. Selecting the correct pixel format 
can improve image clarity and performance.</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_TRANSLUCENT:null,

    /**
     * <p>Android A_8 pixel format for {@link Ti.UI.Window}. Selecting the correct pixel format can 
improve image clarity and performance.</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_TRANSPARENT:null,

    /**
     * <p>Android UNKNOWN pixel format for {@link Ti.UI.Window}. Selecting the correct pixel format 
can improve image clarity and performance.</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_UNKNOWN:null,

    /**
     * <p>Pan the current heavyweight window when the input method (ie software keyboard) is shown, to 
ensure that its contents are not obscured.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SOFT_INPUT_ADJUST_PAN:null,

    /**
     * <p>Resize the current heavyweight window when the input method (ie software keyboard) is shown, 
to ensure that its contents are not obscured.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SOFT_INPUT_ADJUST_RESIZE:null,

    /**
     * <p>Use the system-default behavior to determine how the soft input area (ie software keyboard) 
is accomodated by the current heavyweight window when it receives focus (default.)</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SOFT_INPUT_ADJUST_UNSPECIFIED:null,

    /**
     * <p>Always hide the soft input area (ie software keyboard) when the current heavyweight window 
receives focus.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SOFT_INPUT_STATE_ALWAYS_HIDDEN:null,

    /**
     * <p>Always show the soft input area (ie software keyboard) when the current heavyweight window 
receives focus.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SOFT_INPUT_STATE_ALWAYS_VISIBLE:null,

    /**
     * <p>Attempt to hide the soft input area (ie software keyboard) when the current heavyweight 
window receives focus.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SOFT_INPUT_STATE_HIDDEN:null,

    /**
     * <p>Use the system-default behavior to determine whether to show the soft input area 
(ie software keyboard) when the current heavyweight window receives focus.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SOFT_INPUT_STATE_UNSPECIFIED:null,

    /**
     * <p>Attempt to show the soft input area (ie software keyboard) when the current heavyweight 
window receives focus.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SOFT_INPUT_STATE_VISIBLE:null,

    /**
     * <p>Use Android default behavior to handle keyboard visibility when a view receives focus. 
(default)</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SOFT_KEYBOARD_DEFAULT_ON_FOCUS:null,

    /**
     * <p>Attempt to hide the soft keyboard when a view receives focus. Note: system can override 
request.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SOFT_KEYBOARD_HIDE_ON_FOCUS:null,

    /**
     * <p>Attempt to show the soft keyboard when a view receives focus. Note: system can override 
request.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SOFT_KEYBOARD_SHOW_ON_FOCUS:null,

    /**
     * <p>Display {@link Ti.UI.Switch} as a checkbox.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SWITCH_STYLE_CHECKBOX:null,

    /**
     * <p>Display {@link Ti.UI.Switch} as a toggle button. (default)</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SWITCH_STYLE_TOGGLEBUTTON:null,

    /**
     * <p>Use with {@link Ti.UI.WebView.pluginState} to disable plugins in a web view.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    WEBVIEW_PLUGINS_OFF:null,

    /**
     * <p>Use with {@link Ti.UI.WebView.pluginState} to enable plugins in a web view.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    WEBVIEW_PLUGINS_ON:null,

    /**
     * <p>Display a placeholder and only load plugins when user selects it.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    WEBVIEW_PLUGINS_ON_DEMAND:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.0 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.0 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Hides the soft keyboard.</p>
     * @since 1.0 (Android)
     */
    hideSoftKeyboard:function() {
    },

    /**
     * <p>Opens an application preferences dialog, using the native Android system settings interface, 
defined by the platform-specific <code>preferences.xml</code> and <code>array.xml</code> files.</p>
     * @since 1.0 (Android)
     */
    openPreferences:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.0 (Android)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>An animation object describes the properties of an animation. At its 
most basic, an animation object represents a single-phase animation with an 
end state and a duration. </p>
<p>When {@link Ti.UI.View.animate} is called on a {@link Ti.UI.View},
the view is animated from its current state to the state described by the 
animation object. The properties that can be animated include the view's 
position, size, colors, transformation matrix and opacity. </p>
<p>Animations can be set to reverse themselves automatically on completion,
and to repeat a given number of times. For more complicated effects, 
multiple animations can be combined in sequence, starting one animation 
when the previous animation completes.</p>
<p>Use the {@link Ti.UI.createAnimation} method to create an animation object.</p>
<p>Note that when you animate a view's size or position, the actual layout properties
(such as <code>top</code>, <code>left</code>, <code>width</code>, <code>height</code>) are not changed by the animation.
See the description of the {@link Ti.UI.View.animate} method for more information.</p>
<h4>iOS Platform Notes</h4>
<p>iOS supports both 2D and 3D matrix transformations in animations.</p>
<p>In iOS, you can also specify an animation curve or <em>easing function</em> to control
the pace of the animation. To use an easing function, set the animation's 
<code>curve</code> property to one of the <code>ANIMATION_CURVE</code> constants defined in
{@link Ti.UI.iOS}. For example, 
{@link Ti.UI.iOS.ANIMATION_CURVE_EASE_IN} specifies 
an animation that starts slowly and then speeds up.</p>
<p>Finally, iOS also supports <em>transitions</em> between windows or views. You can create a 
transition by creating an animation object and setting the <code>view</code> property to the 
view you want to transition to. The <code>transition</code> property specifies the transition
effect to apply. Use one of the transition style constants defined in 
{@link Ti.UI.iPhone.AnimationStyle}.</p>
<h4>Android Platform Notes</h4>
<p>Android supports 2D matrix transformations. Note that the
{@link Ti.UI.D2Matrix.rotate} method operates differently
on Android. Called with a single argument, it rotates from zero to the specified 
angle. That is, it ignores any existing rotation. Called with two arguments, 
it interprets the first argument as a "from" angle and the second argument as a 
"to" angle. </p>
<p>Android doesn't support any animation curves or easing functions. Animations
always interpolate linearly between the start state and the end state.</p>
 * 
 * @example Simple Animation Applied to a View
 * <p>Create a simple animation and apply it to the view.  In this example, the view will animate from red to black to orange over 2 seconds.</p>
<pre><code>var view = Ti.UI.createView({
   backgroundColor:'red'
});
var animation = Ti.UI.createAnimation();
animation.backgroundColor = 'black';
animation.duration = 1000;
var animationHandler = function() {
   animation.removeEventListener('complete',animationHandler);
   animation.backgroundColor = 'orange';
   view.animate(animation);
};
animation.addEventListener('complete',animationHandler);
view.animate(animation);
</code></pre>
 * 
 * @example Animation Using Matrix Transforms
 * <p>The following example uses a transformation matrix to animate
a view when the view is clicked. The animation rotates and scales
the view, then returns it to its original size and position. The
entire animation is repeated three times.</p>
<p>var box = Ti.UI.createView({
        backgroundColor : 'red',
        height : '100',
        width : '100'
    });
    win.add(box);</p>
<pre><code>box.addEventListener('click', function() {
    var matrix = Ti.UI.create2DMatrix()
    matrix = matrix.rotate(180);
    matrix = matrix.scale(2, 2);
    var a = Ti.UI.createAnimation({
            transform : matrix,
            duration : 2000,
            autoreverse : true,
            repeat : 3
        });
    box.animate(a);
});
</code></pre>
 */
Ti.UI.Animation = function() {
};
Ti.UI.Animation.prototype = {

    /**
     * <p>Specifies if the animation should be replayed in reverse upon completion.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    autoreverse:null,

    /**
     * <p>Value of the <code>backgroundColor</code> property at the end of the animation, as a color name 
or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Value of the <code>bottom</code> property at the end of the animation.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>Value of the <code>center</code> property at the end of the animation.</p>
     * @type Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Value of the <code>color</code> property at the end of the animation, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    color:null,

    /**
     * <p>Animation curve or easing function to apply to the animation.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    curve:null,

    /**
     * <p>Delay, in milliseconds before starting the animation.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    delay:null,

    /**
     * <p>Duration of the animation, in milliseconds.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    duration:null,

    /**
     * <p>Value of the <code>height</code> property at the end of the animation.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Value of the <code>left</code> property at the end of the animation.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Value of the <code>opacity</code> property at the end of the animation.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>Value of the <code>opaque</code> property at the end of the animation.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    opaque:null,

    /**
     * <p>Number of times the animation should be performed.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    repeat:null,

    /**
     * <p>Value of the <code>right</code> property at the end of the animation.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Value of the <code>top</code> property at the end of the animation.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Animate the view from its current tranform to the specified transform.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>Transition type to use during a transition animation.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    transition:null,

    /**
     * <p>Value of the <code>visible</code> property at the end of the animation.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>Value of the <code>width</code> property at the end of the animation.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Value of the <code>zIndex</code> property at the end of the animation.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Animation.autoreverse} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getAutoreverse:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Animation.backgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Animation.bottom} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Animation.center} property.</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Animation.color} property.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Animation.curve} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCurve:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Animation.delay} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getDelay:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Animation.duration} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getDuration:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Animation.height} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Animation.left} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Animation.opacity} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Animation.opaque} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getOpaque:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Animation.repeat} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Animation.right} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Animation.top} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Animation.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Animation.transition} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getTransition:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Animation.visible} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Animation.width} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Animation.zIndex} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Animation.autoreverse} property.</p>
     * @param {Boolean} autoreverse <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setAutoreverse:function(autoreverse) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Animation.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Animation.bottom} property.</p>
     * @param {Number} bottom <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Animation.center} property.</p>
     * @param {Object} center <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Animation.color} property.</p>
     * @param {String} color <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setColor:function(color) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Animation.curve} property.</p>
     * @param {Number} curve <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCurve:function(curve) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Animation.delay} property.</p>
     * @param {Number} delay <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setDelay:function(delay) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Animation.duration} property.</p>
     * @param {Number} duration <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setDuration:function(duration) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Animation.height} property.</p>
     * @param {Number} height <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Animation.left} property.</p>
     * @param {Number} left <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Animation.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Animation.opaque} property.</p>
     * @param {Boolean} opaque <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setOpaque:function(opaque) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Animation.repeat} property.</p>
     * @param {Number} repeat <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRepeat:function(repeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Animation.right} property.</p>
     * @param {Number} right <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Animation.top} property.</p>
     * @param {Number} top <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Animation.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Animation.transition} property.</p>
     * @param {Number} transition <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setTransition:function(transition) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Animation.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Animation.width} property.</p>
     * @param {Number} width <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Animation.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>A button widget that has four states, normal, disabled, focused and selected. (Note
that the focused state is only used on Android devices that have navigation keys or a
keyboard.)</p>
<p>You can specify background images for each state, as well as button text and a button 
icon. On iOS, there are button styles which define appearance for each 
state, even if no button images are set.</p>
<p>Use the {@link Ti.UI.createButton} method to create a button. </p>
<h4>Android and Mobile Web Platform Notes</h4>
<p>Android and Mobile Web use default button images for the normal, focused, selected and disabled
states. If you use a custom button image, you should specify versions for the focused
and selected states (and the disabled state, if the button is ever disabled).</p>
<p>Android and Mobile Web also support setting the background color for each of the states. These are not
supported on iOS.</p>
<h4>iOS Platform Notes</h4>
<p>iOS buttons have two special properties, <code>style</code> and <code>systemButton</code>.</p>
<p>The <code>style</code> property specifies the type of button decoration, and can be set to one 
of the values described in {@link Ti.UI.iPhone.SystemButtonStyle}. </p>
<p>Unlike Android and Mobile Web, iOS doesn't supply any default background images for buttons--
system button styles serve this purpose.</p>
<p>Button style decorations are drawn above the background gradient and background color, 
and below any background images. </p>
<p>To use a custom button style, for example using a background gradient,
you may need to explicitly set <code>style</code> to <code>PLAIN</code>, to prevent the button style from<br />
overriding any background color or gradient. In addition, the <code>backgroundImage</code> must be 
partially or wholly transparent for the background color or background gradient to be visible.</p>
<p>In order for a background gradient to show through, the <code>backgroundColor</code> may need to be
set to 'transparent'.</p>
<p>The <code>systemButton</code> property lets you create a predefined system-defined button, 
such as the <strong>Camera</strong> or <strong>Add</strong> buttons, for use in toolbars and nav bars.
Specifically, system buttons may be used in the following locations:</p>
<ul>
<li>{@link Ti.UI.iOS.Toolbar}. The <code>items</code> array can contain system buttons.</li>
<li>{@link Ti.UI.iPad.Popover}. The <code>leftNavButton</code> and <code>rightNavButton</code> properties can
  refer to system buttons</li>
<li>{@link Ti.UI.iPad.SplitWindow}. The <code>toolbar</code> array can contain system buttons.</li>
<li>{@link Ti.UI.TextField}. The <code>keyboardToolbar</code> array can contain system buttons.</li>
<li>{@link Ti.UI.TextArea}. The <code>keyboardToolbar</code> array can contain system buttons.</li>
<li>{@link Ti.UI.Window}. The <code>leftNavButton</code> and <code>rightNavButton</code> properties can refer to 
  system buttons and the <code>toolbar</code> array can contain system buttons.</li>
</ul>
<p>Use the constants in {@link Ti.UI.iPhone.SystemButton} 
to specify a button type. The size, style and decoration of system buttons is set
automatically, so you can create a button by setting only the <code>systemButton</code> property.</p>
<p>For example:</p>
<pre><code>cancelButton = Ti.UI.createButton({ systemButton: Ti.UI.iPhone.SystemButton.CANCEL });
</code></pre>
<p>Note that the <code>systemButton</code> property specifies <em>appearance</em>, not behavior. For
example, to bring up the camera when the user presses the <strong>Camera</strong> button, you must 
add an event listener to the button and call {@link Ti.Media.showCamera} when the 
button is clicked.</p>
 * 
 * @example Simple Button Example
 * <p>var button = Ti.UI.createButton({
   title: 'Hello',
   top: 10,
   width: 100,
   height: 50
});
button.addEventListener('click',function(e)
{
   Ti.API.info("You clicked the button");
});</p>
 */
Ti.UI.Button = function() {
};
Ti.UI.Button.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Background image for the button in its disabled state, specified as a local file path 
or URL. </p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Background image for the button in its focused state, specified as a local file path 
or URL. </p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the button in its normal state, specified as a local file path or URL. </p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Background image for the button in its selected state, specified as a local file 
path or URL. </p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    children:null,

    /**
     * <p>Default button text color, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    color:null,

    /**
     * <p>Set to <code>true</code> to enable the button, <code>false</code> to disable the button.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    enabled:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>Font to use for the button text.</p>
     * @type Font
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    font:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Image to display on the button, specified as a local path, URL or (on iOS only) a <code>Blob</code>.</p>
     * @type String|Ti.Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    image:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Button text color used to indicate the selected state, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    selectedColor:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Style constant for the button, as defined in {@link Ti.UI.iPhone.SystemButtonStyle}.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    style:null,

    /**
     * <p>Specifies an iOS system button appearance, as defined in {@link Ti.UI.iPhone.SystemButton}.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    systemButton:null,

    /**
     * <p>Text alignment, specified using one of the {@link Ti.UI} text alignment constants: {@link Ti.UI.TEXT_ALIGNMENT_LEFT}, {@link Ti.UI.TEXT_ALIGNMENT_CENTER}, or {@link Ti.UI.TEXT_ALIGNMENT_RIGHT}.</p>
     * @type String|Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    textAlign:null,

    /**
     * <p>Button title.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    title:null,

    /**
     * <p>Key identifying a string from the locale file to use for the button title.</p>
     * @type String
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    titleid:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>Vertical alignment for the text field, specified using one of the 
vertical alignment constants from {@link Ti.UI}: 
{@link Ti.UI.TEXT_VERTICAL_ALIGNMENT_BOTTOM}, 
{@link Ti.UI.TEXT_VERTICAL_ALIGNMENT_CENTER}, or 
{@link Ti.UI.TEXT_VERTICAL_ALIGNMENT_TOP}.</p>
     * @type Number|String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    verticalAlign:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.color} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.enabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.font} property.</p>
     * @returns Font
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFont:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.image} property.</p>
     * @returns String
     * @returns Ti.Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.selectedColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.size} property.</p>
     * @returns Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.style} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.systemButton} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getSystemButton:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.textAlign} property.</p>
     * @returns String
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTextAlign:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.title} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.titleid} property.</p>
     * @returns String
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    getTitleid:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.verticalAlign} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getVerticalAlign:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Button.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.color} property.</p>
     * @param {String} color <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setColor:function(color) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.enabled} property.</p>
     * @param {Boolean} enabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setEnabled:function(enabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.font} property.</p>
     * @param {Font} font <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setFont:function(font) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.image} property.</p>
     * @param {String|Ti.Blob} image <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setImage:function(image) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.selectedColor} property.</p>
     * @param {String} selectedColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSelectedColor:function(selectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.style} property.</p>
     * @param {Number} style <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setStyle:function(style) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.systemButton} property.</p>
     * @param {Number} systemButton <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setSystemButton:function(systemButton) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.textAlign} property.</p>
     * @param {String|Number} textAlign <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTextAlign:function(textAlign) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTitle:function(title) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.titleid} property.</p>
     * @param {String} titleid <p>New value for the property.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    setTitleid:function(titleid) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.verticalAlign} property.</p>
     * @param {Number|String} verticalAlign <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setVerticalAlign:function(verticalAlign) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Button.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: iPhone, iPad
 * @namespace <p>The button bar is a set of buttons joined into a single control. Each button in a
button bar can have a text label or an icon, but not both. </p>
<p>The {@link Ti.UI.iOS.TabbedBar} control is a button bar where the 
last selected button mantains a pressed or selected state. The following discussion
applies to both button bar and tabbed bar.</p>
<p>The buttons share a common style, defined by the <code>style</code> property. This can be 
set to one of the constants defined in 
{@link Ti.UI.iPhone.SystemButtonStyle}:</p>
<ul>
<li><code>PLAIN</code>. Default style for <code>ButtonBar</code> and <code>TabbedBar</code>.</li>
<li><code>BORDERED</code>. Creates a bar like the <code>PLAIN</code> bar, but with a heavier border.</li>
<li><code>BAR</code>. Creates a more compact bar with
        translucent buttons that allow the bar's background color to show through.</li>
</ul>
<p>If you want the background color or background gradient of the button bar itself 
to show through, the style must be set to {@link Ti.UI.iPhone.SystemButtonStyle.BAR}.</p>
<p>Note that you cannot style individual buttons in a button bar. If you want to give a
distinct visual style to individual buttons, to use an icon and text on the same button,
or to use a button-bar type component on a platform other than iOS, you can use a set 
of individual {@link Ti.UI.Button} controls wrapped in a
{@link Ti.UI.View} to create the appearance of a button bar.</p>
<p>Use the {@link Ti.UI.createButtonBar} method to create a button bar.</p>
 * 
 * @example Simple 3 button button bar
 * <p>var bb1 = Ti.UI.createButtonBar({
    labels:['One', 'Two', 'Three'],
    backgroundColor:'#336699',
    top:50,
    style:Ti.UI.iPhone.SystemButtonStyle.BAR,
    height:25,
    width:200
});
win.add(bb1);</p>
 */
Ti.UI.ButtonBar = function() {
};
Ti.UI.ButtonBar.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    children:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    height:null,

    /**
     * <p>Index of the currently selected button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    index:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Array of labels for the button bar.</p>
     * @type Array<String>|Array<BarItemType>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    labels:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    right:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Style of the button bar.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    style:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.borderColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.center} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.index} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getIndex:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.labels} property.</p>
     * @returns Array<String>
     * @returns Array<BarItemType>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLabels:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.layout} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.opacity} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.size} property.</p>
     * @returns Dimension
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.style} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ButtonBar.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.index} property.</p>
     * @param {Number} index <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setIndex:function(index) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.labels} property.</p>
     * @param {Array<String>|Array<BarItemType>} labels <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLabels:function(labels) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.style} property.</p>
     * @param {Number} style <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setStyle:function(style) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ButtonBar.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * 
 * @example Copying text to the clipboard
 * <p>copyButton.addEventListener('click', function() {
    Ti.UI.Clipboard.setText(data.url);
});</p>
 * 
 * @example Pasting text from the clipboard
 * <p>if (Ti.UI.Clipboard.hasText()) {
    doSomethingWith(Ti.UI.Clipboard.getText());
} else {
    alert('Hey there was no text.');
}</p>
 * 
 * @example Clipboard data types
 * <p>The <em>Text() functions are equivalent to calling </em>Data() with 'text' or 'text/plain' types, and work with plain Unicode strings.</p>
<p>On Android, only plain text is supported; other MIME types will be ignored.</p>
<p>On iOS, images will be returned as a {@link Ti.Blob}; the special type 'image' or an explicit MIME type may be specified. URLs can be fetched with the special 'URL' or 'text/uri-list' types, and will return strings. Other data types may or may not be correctly mapped to clipboard types by the system, and will be retrieved as binary data in a {@link Ti.Blob}.</p>
 */
Ti.UI.Clipboard = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Clear data of the given mime-type from the clipboard. If no mime-type is given, clear all data from the clipboard.</p>
     * @param {String} type <p>(optional) The mime-type of the data to clear.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    clearData:function(type) {
    },

    /**
     * <p>Clear the text portion of the clipboard.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    clearText:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Get the data on the clipboard from the portion which contains data of the given mime-type.</p>
     * @param {String} type <p>The mime-type of the data to get.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    getData:function(type) {
    },

    /**
     * <p>Get the current text on the clipboard.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    getText:function() {
    },

    /**
     * <p>Return true if there is any content of the given mime-type on the clipboard.</p>
     * @param {String} type <p>(optional) The mime-type of the data to check.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    hasData:function(type) {
    },

    /**
     * <p>Return true if there is any content in the text portion of the clipboard.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    hasText:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Set the data on the clipboard given a mime-type and the new data. This method will set data on the appropriate portion of the clipboard for the given mime-type.</p>
     * @param {String} type <p>The mime-type of the data to set.</p>
     * @param {Object} data <p>The new clipboard text.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    setData:function(type, data) {
    },

    /**
     * <p>Set the text on the clipboard. This will overwrite the current contents of the clipboard.</p>
     * @param {String} text <p>The new clipboard text. If the text is an empty string</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    setText:function(text) {
    }
};

/**
 * platforms: iPhone, iPad
 * @namespace <p>This iOS-specific API has been moved to {@link Ti.UI.iOS.CoverFlowView}.</p>
<p>Use the {@link Ti.UI.createCoverFlowView} method to create a cover flow view.</p>
 * 
 * @example Simple 3 image cover flow example
 * <p>Create a simple cover flow view.</p>
<pre><code>var view = Ti.UI.createCoverFlowView({
    images:['a.png','b.png','c.png'],
    backgroundColor:'#000'
});
window.add(view);
</code></pre>
 */
Ti.UI.CoverFlowView = function() {
};
Ti.UI.CoverFlowView.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    children:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    height:null,

    /**
     * <p>Array of images to display in the view.</p>
     * @type Array<String>|Array<Ti.Blob>|Array<Ti.Filesystem.File>|Array<CoverFlowImageType>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    images:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    right:null,

    /**
     * <p>Index to make selected.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    selected:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.borderColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.center} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.images} property.</p>
     * @returns Array<String>
     * @returns Array<Ti.Blob>
     * @returns Array<Ti.Filesystem.File>
     * @returns Array<CoverFlowImageType>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getImages:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.layout} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.opacity} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.selected} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getSelected:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.size} property.</p>
     * @returns Dimension
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.CoverFlowView.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Changes the image for a specified index.</p>
     * @param {Number} index <p>Index to add the image at.</p>
     * @param {String|Ti.Blob|Ti.Filesystem.File|CoverFlowImageType} image <p>Image to add at this index.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setImage:function(index, image) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.images} property.</p>
     * @param {Array<String>|Array<Ti.Blob>|Array<Ti.Filesystem.File>|Array<CoverFlowImageType>} images <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setImages:function(images) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.selected} property.</p>
     * @param {Number} selected <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setSelected:function(selected) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.CoverFlowView.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: iPhone, iPad
 * @namespace <p>A DashboardItem is created using the {@link Ti.UI.createDashboardItem} method.</p>
 */
Ti.UI.DashboardItem = function() {
};
Ti.UI.DashboardItem.prototype = {

    /**
     * <p>Integer value displayed in a badge.</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    badge:null,

    /**
     * <p>Determines whether this item can be deleted when it edit mode.</p>
     * @type Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    canDelete:null,

    /**
     * <p>Image or path to image to display in the item by default.</p>
     * @type String|Ti.Blob
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    image:null,

    /**
     * <p>Image or path to image to display in the item as it is selected.</p>
     * @type String|Ti.Blob
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    selectedImage:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardItem.badge} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBadge:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardItem.canDelete} property.</p>
     * @returns Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getCanDelete:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardItem.image} property.</p>
     * @returns String
     * @returns Ti.Blob
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardItem.selectedImage} property.</p>
     * @returns String
     * @returns Ti.Blob
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getSelectedImage:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardItem.badge} property.</p>
     * @param {Number} badge <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBadge:function(badge) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardItem.canDelete} property.</p>
     * @param {Boolean} canDelete <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setCanDelete:function(canDelete) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardItem.image} property.</p>
     * @param {String|Ti.Blob} image <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setImage:function(image) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardItem.selectedImage} property.</p>
     * @param {String|Ti.Blob} selectedImage <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setSelectedImage:function(selectedImage) {
    }
};

/**
 * platforms: iPhone, iPad
 * @namespace <p>The DashboardView is created using the {@link Ti.UI.createDashboardView} method.</p>
<p>Dashboard view's edit mode may be activated by a longpress of a {@link Ti.UI.DashboardItem} item, 
unless this behavior has been disabled by the {@link Ti.UI.DashboardView.editable} 
property. As a dashboard view does not inherently provide a way to exit edit mode, this must be 
explicitly defined.</p>
<p>When edit mode has been activated, the item icons wobble by default to act as a visual cue. 
This behavior may be disabled using the {@link Ti.UI.DashboardView.wobble} property.</p>
<p>If a dashboard contains more than 9 items, it will be paged into screens in a 3 x 3 formation 
using its built-in scrollable view. A paging control is added to the bottom of the view to 
indicate the active page.</p>
<p>Note that a dashboard is only intended to be used in {@link Ti.UI.PORTRAIT} 
orientation mode.</p>
 * 
 * @example Dashboard Demo
 * <p>Create a toolbar with an edit/done button and a dashboard of items on a single screen. 
Set the badge value for some items, and allow them to be reset with a click. Enter edit mode 
with a longpress of a dashboard item (default behavior). Toggle edit mode with a click to 
the toolbar button.</p>
<p>Copy the files in the KitchenSink 
{@link https://github.com/appcelerator/titanium_mobile/tree/master/demos/KitchenSink/Resources/images/dashboard} 
directory to the local project <code>/images/dashboard</code> directory.</p>
<pre><code>var win = Ti.UI.createWindow({
    backgroundColor: '#13386c'
});

var button = Ti.UI.createButton({
    title: 'Edit',
    style: Ti.UI.iPhone.SystemButtonStyle.DONE,
});

var toolbar = Ti.UI.iOS.createToolbar({
    items:[button],
    top: 0
});
win.add(toolbar);

var label = Ti.UI.createLabel({
  color: 'white',
  font: { fontSize: 14 },
  text: 'Click an item to reset badge\nPress and hold an item to enable edit mode',
  textAlign: Ti.UI.TEXT_ALIGNMENT_CENTER,
  top: 55,
  height: 40,
  width: 300
});
win.add(label);

var dashboardData = [];
var itemData = [
  { name: 'account', badge: 10 },
  { name: 'cases', badge: 2 },
  { name: 'calls', badge: 2 },
  { name: 'contacts', badge: 5},
  { name: 'emps' }, 
  { name: 'leads' },
  { name: 'meetings', badge: 3 },
  { name: 'opps',  badge:  126 }, // badge will be displayed as "99+"
  { name: 'tasks' }
];

for (var i=0, ilen=itemData.length; i&lt;ilen; i++){
  var item = Ti.UI.createDashboardItem({
    badge: itemData[i].badge,
    image: '/images/dashboard/' + itemData[i].name + '_off.png',
    selectedImage: '/images/dashboard/' + itemData[i].name + '_on.png',
    label: itemData[i].name
  });
  dashboardData.push(item);
}

var dashboard = Ti.UI.createDashboardView({
  data: dashboardData,
  wobble: true,
  top: 100
});
win.add(dashboard);

var isEditable = false;

button.addEventListener('click', function(e){
  if(isEditable){
    dashboard.stopEditing();
  } else {
    dashboard.startEditing();
  }
});

dashboard.addEventListener('edit',function(e){
  button.title = 'Done';
  button.style = Ti.UI.iPhone.SystemButtonStyle.DONE;
  isEditable = true;
});

dashboard.addEventListener('commit',function(e){
  button.title = 'Edit';
  button.style = Ti.UI.iPhone.SystemButtonStyle.PLAIN;
  isEditable = false;
});

dashboard.addEventListener('click', function(e){
  e.item.badge = 0;
});

win.open();
</code></pre>
 */
Ti.UI.DashboardView = function() {
};
Ti.UI.DashboardView.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    children:null,

    /**
     * <p>Items to display in this view.</p>
     * @type Array<Ti.UI.DashboardItem>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    data:null,

    /**
     * <p>Determines whether edit mode is activated by a longpress of an item.</p>
     * @type Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    editable:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 1.2 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 1.2 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    right:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 1.2 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    width:null,

    /**
     * <p>Determines whether the wobble visual editing cue is enabled in edit mode.</p>
     * @type Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    wobble:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.anchorPoint} property.</p>
     * @returns Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.backgroundColor} property.</p>
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.backgroundImage} property.</p>
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.backgroundTopCap} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.borderColor} property.</p>
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.borderRadius} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.borderWidth} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.center} property.</p>
     * @returns Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.data} property.</p>
     * @returns Array<Ti.UI.DashboardItem>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getData:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.editable} property.</p>
     * @returns Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getEditable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.focusable} property.</p>
     * @returns Boolean
     * @since 1.2 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.height} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 1.2 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.layout} property.</p>
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.left} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.opacity} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.right} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.size} property.</p>
     * @returns Dimension
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 1.2 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.top} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.touchEnabled} property.</p>
     * @returns Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.visible} property.</p>
     * @returns Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.width} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.wobble} property.</p>
     * @returns Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getWobble:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.DashboardView.zIndex} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.data} property.</p>
     * @param {Array<Ti.UI.DashboardItem>} data <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setData:function(data) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.editable} property.</p>
     * @param {Boolean} editable <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setEditable:function(editable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.wobble} property.</p>
     * @param {Boolean} wobble <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setWobble:function(wobble) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.DashboardView.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Enable edit mode.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    startEditing:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    startLayout:function() {
    },

    /**
     * <p>Disable edit mode.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    stopEditing:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>The Email Dialog is created by {@link Ti.UI.createEmailDialog}.</p>
<p>On Mobile Web, the <code>to</code> addresses, <code>cc</code> addresses, <code>bcc</code> addresses, <code>subject</code>, and <code>body</code> are 
appended together and formatted into a <code>mailto:</code> URL. This URL typically has a limit of 
approximately 2000 characters.</p>
 * 
 * @example Simple Email Dialog with Attachment
 * <p>Create and send an email with a file attachment.</p>
<pre><code>var emailDialog = Ti.UI.createEmailDialog()
emailDialog.subject = "Hello from Titanium";
emailDialog.toRecipients = ['foo@yahoo.com'];
emailDialog.messageBody = '&lt;b&gt;Appcelerator Titanium Rocks!&lt;/b&gt;';
var f = Ti.Filesystem.getFile('cricket.wav');
emailDialog.addAttachment(f);
emailDialog.open();
</code></pre>
 */
Ti.UI.EmailDialog = function() {
};
Ti.UI.EmailDialog.prototype = {

    /**
     * <p>Constant for the <code>CANCELLED</code> status result. On Android, this property exists but is not used.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    CANCELLED:null,

    /**
     * <p>Constant for the <code>FAILED</code> status result.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    FAILED:null,

    /**
     * <p>Constant for the <code>SAVED</code> status result. On Android, this property exists but is not used.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    SAVED:null,

    /**
     * <p>Constant for the <code>SENT</code> status result.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    SENT:null,

    /**
     * <p>Bar color of the email dialog window, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    barColor:null,

    /**
     * <p>Recipients of the email included via the <code>BCC</code> (Blind Carbon Copy) field.</p>
     * @type Array<String>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bccRecipients:null,

    /**
     * <p>Recipients of the email included via the <code>CC</code> (Carbon Copy) field.</p>
     * @type Array<String>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ccRecipients:null,

    /**
     * <p>Determines whether the email message, specifically the contents of 
{@link Ti.UI.EmailDialog.messageBody}, should be sent as HTML content type 
rather than plain text.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    html:null,

    /**
     * <p>Email message body.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    messageBody:null,

    /**
     * <p>Subject line for the email.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    subject:null,

    /**
     * <p>Recipients of the email included via the main <code>TO</code> field.</p>
     * @type Array<String>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    toRecipients:null,


    /**
     * <p>Adds an attachment.</p>
     * @param {Ti.Blob|Ti.Filesystem.File} attachment <p>Attachment to include in the email.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addAttachment:function(attachment) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.EmailDialog.barColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBarColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.EmailDialog.bccRecipients} property.</p>
     * @returns Array<String>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBccRecipients:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.EmailDialog.ccRecipients} property.</p>
     * @returns Array<String>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCcRecipients:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.EmailDialog.html} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHtml:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.EmailDialog.messageBody} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getMessageBody:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.EmailDialog.subject} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSubject:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.EmailDialog.toRecipients} property.</p>
     * @returns Array<String>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getToRecipients:function() {
    },

    /**
     * <p>Indicates whether sending email is supported by the system.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    isSupported:function() {
    },

    /**
     * <p>Opens this email dialog.</p>
     * @param {Object} properties <p>Animation properties. Set <code>animated</code> Boolean property to <code>true</code> to animate dialog 
on open. (iPhone, iPad only)</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    open:function(properties) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.EmailDialog.barColor} property.</p>
     * @param {String} barColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBarColor:function(barColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.EmailDialog.bccRecipients} property.</p>
     * @param {Array<String>} bccRecipients <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBccRecipients:function(bccRecipients) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.EmailDialog.ccRecipients} property.</p>
     * @param {Array<String>} ccRecipients <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCcRecipients:function(ccRecipients) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.EmailDialog.html} property.</p>
     * @param {Boolean} html <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHtml:function(html) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.EmailDialog.messageBody} property.</p>
     * @param {String} messageBody <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setMessageBody:function(messageBody) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.EmailDialog.subject} property.</p>
     * @param {String} subject <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSubject:function(subject) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.EmailDialog.toRecipients} property.</p>
     * @param {Array<String>} toRecipients <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setToRecipients:function(toRecipients) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Use the {@link Ti.UI.createImageView} method to create an <code>ImageView</code>.</p>
<p>Specifying either a <code>width</code> or <code>height</code> property for this view will scale its image(s) with 
the aspect ratio maintained, up to a maximum size that does not exceed its parent view.</p>
<h4>Android 9-Patch Scaled Images</h4>
<p>A nine-patch (9-patch) image is simply a standard <code>png</code> image with a transparent border of a 
single pixel, containing "guides" defined by solid black (<code>#000</code>) color fills. Guides added to the 
top and left edges determine that the image may be stretched in horizontal and vertical planes 
respectively. Optionally, the content area may be defined by guides added to the bottom and 
right edges.</p>
<p>Although any image editor may be used to create the guides, certain settings can cause the edges 
of the graphic to "bleed" into the transparent border, consequently making it non-transparent. 
Thus, the <code>draw9patch</code> utility provided in the Android SDK tools directory is recommended for 
this purpose.</p>
<p>For further information about nine-patch images and the Android utility, see the 
{@link http://developer.android.com/guide/topics/graphics/2d} 
and {@link http://developer.android.com/guide/developing/tools/draw9patch} sections 
of the Android Developer website.</p>
<p>The nine-patch technique may be used with any of Titanium's static image properties. See the 
"Button with Nine-patch Background Image" example for a demonstration.</p>
 * 
 * @example Basic Image View
 * <p>In this example, we create a simple image view:</p>
<pre><code>Ti.UI.backgroundColor = 'white';
var win = Ti.UI.createWindow();
var image = Ti.UI.createImageView({
  image:'/images/myimage.png'
});
win.add(image);
win.open();
</code></pre>
 * 
 * @example Button with Nine-patch Background Image
 * <p>To prepare, copy the images 
{@link https://github.com/appcelerator/titanium_mobile/raw/master/demos/KitchenSink/Resources/images/custom} 
and {@link https://github.com/appcelerator/titanium_mobile/raw/master/demos/KitchenSink/Resources/images/custom} 
into the project <code>/images/</code> directory/.</p>
<p>Create a button with a nine-patch image background, that swaps with another image when 
selected, and generates a message in the console when clicked.</p>
<p>Note that images are referenced in the code without the <code>.9</code> part of the filename, and that 
the project should be cleaned to ensure that the files are correctly copied to the project.</p>
<pre><code>var win = Ti.UI.createWindow({
    backgroundColor: 'white',
    exitOnClose: true,
    fullscreen: false,
    title: 'Click button to test'
});

var button = Ti.UI.createButton({
    backgroundImage: '/images/custom-slider-right.png',
    backgroundSelectedImage:'/images/custom-slider-left.png',
    title: 'Click me!',
    top: 10,
    width: 300,
    height: 200
});
button.addEventListener('click',function(e){
    Ti.API.info("You clicked the button");
});
win.add(button);
win.open();
</code></pre>
 */
Ti.UI.ImageView = function() {
};
Ti.UI.ImageView.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Indicates whether animation is running.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    animating:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>Allow the user to scale the image (using pinch-zoom or the optional zoom controls).</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    canScale:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    children:null,

    /**
     * <p>Number of times to retry decoding the bitmap at a URL.</p>
     * @type Number
     * @since 1.7.0 (Android)
     */
    decodeRetries:null,

    /**
     * <p>Local path to the default image to display while loading a remote image.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    defaultImage:null,

    /**
     * <p>Amount of time in milliseconds to animate one cycle.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    duration:null,

    /**
     * <p>Show zoom controls when the user touches the image view.</p>
     * @type Boolean
     * @since 1.3.0 (Android)
     */
    enableZoomControls:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Set to <code>true</code> to prevent scaling of 2x-resolution remote images for Retina 
displays.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    hires:null,

    /**
     * <p>Image to display.</p>
     * @type String|Ti.Blob|Ti.Filesystem.File
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    image:null,

    /**
     * <p>Array of images to animate, defined using local filesystem paths, <code>File</code> objects, 
remote URLs (Android only), or <code>Blob</code> objects containing image data. <code>Blob</code> and <code>File</code> 
objects are not supported on Mobile Web.</p>
     * @type Array<String>|Array<Ti.Blob>|Array<Ti.Filesystem.File>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    images:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>Indicates whether the animation is paused.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    paused:null,

    /**
     * <p>Prevent the default image from being displayed while loading a remote image. This property 
is ignored when the <code>defaultImage</code> property is set.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    preventDefaultImage:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>Number of times to repeat the image animation.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    repeatCount:null,

    /**
     * <p>Run the animation in reverse.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    reverse:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>URL to the image to display. Deprecated: use {@link Ti.UI.ImageView.image} instead.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    url:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.anchorPoint} property.</p>
     * @returns Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.animating} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getAnimating:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.backgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.backgroundImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.borderColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.borderRadius} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.borderWidth} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.canScale} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getCanScale:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.center} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.decodeRetries} property.</p>
     * @returns Number
     * @since 1.7.0 (Android)
     */
    getDecodeRetries:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.defaultImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getDefaultImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.duration} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getDuration:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.enableZoomControls} property.</p>
     * @returns Boolean
     * @since 1.3.0 (Android)
     */
    getEnableZoomControls:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.focusable} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.hires} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getHires:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.image} property.</p>
     * @returns String
     * @returns Ti.Blob
     * @returns Ti.Filesystem.File
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.images} property.</p>
     * @returns Array<String>
     * @returns Array<Ti.Blob>
     * @returns Array<Ti.Filesystem.File>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getImages:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.layout} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.opacity} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.paused} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getPaused:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.preventDefaultImage} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getPreventDefaultImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.repeatCount} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRepeatCount:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.reverse} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getReverse:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.size} property.</p>
     * @returns Dimension
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.url} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getUrl:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.visible} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ImageView.zIndex} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Pauses a running animation. Use <code>resume</code> method to continue.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    pause:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Resumes an animation from a <code>pause</code> state.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    resume:function() {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.canScale} property.</p>
     * @param {Boolean} canScale <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setCanScale:function(canScale) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.decodeRetries} property.</p>
     * @param {Number} decodeRetries <p>New value for the property.</p>
     * @since 1.7.0 (Android)
     */
    setDecodeRetries:function(decodeRetries) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.defaultImage} property.</p>
     * @param {String} defaultImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setDefaultImage:function(defaultImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.duration} property.</p>
     * @param {Number} duration <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setDuration:function(duration) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.enableZoomControls} property.</p>
     * @param {Boolean} enableZoomControls <p>New value for the property.</p>
     * @since 1.3.0 (Android)
     */
    setEnableZoomControls:function(enableZoomControls) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.hires} property.</p>
     * @param {Boolean} hires <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setHires:function(hires) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.image} property.</p>
     * @param {String|Ti.Blob|Ti.Filesystem.File} image <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setImage:function(image) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.images} property.</p>
     * @param {Array<String>|Array<Ti.Blob>|Array<Ti.Filesystem.File>} images <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setImages:function(images) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.preventDefaultImage} property.</p>
     * @param {Boolean} preventDefaultImage <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setPreventDefaultImage:function(preventDefaultImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.repeatCount} property.</p>
     * @param {Number} repeatCount <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRepeatCount:function(repeatCount) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.reverse} property.</p>
     * @param {Boolean} reverse <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setReverse:function(reverse) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.url} property.</p>
     * @param {String} url <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setUrl:function(url) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ImageView.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts the image animation. On Android and Mobile Web, also resets <code>index</code> to the first image.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    start:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Stops a running animation. On iOS and Mobile Web, also resets <code>index</code> to the first image.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    stop:function() {
    },

    /**
     * <p>Returns the image as a Blob object.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toBlob:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Use the {@link Ti.UI.createLabel} method to create a label.</p>
 * 
 * @example Basic Label
 * <p>Create a center-aligned label with a text shadow and specified-size font, and another 
containing forced line breaks and unicode symbols.</p>
<pre><code>var win = Ti.UI.createWindow({
  backgroundColor: 'white',
  exitOnClose: true,
  fullscreen: false,
  layout: 'vertical',
  title: 'Label Demo'
});

var label1 = Ti.UI.createLabel({
  color: '#900',
  font: { fontSize:48 },
  shadowColor: '#aaa',
  shadowOffset: {x:5, y:5},
  text: 'A simple label',
  textAlign: Ti.UI.TEXT_ALIGNMENT_CENTER,
  top: 30,
  height: 'auto',
  width: 'auto'
});

var label2 = Ti.UI.createLabel({
  color:'blue',
  text: 'A long label with\na few line breaks\nand unicode (UTF8)\nsymbols such as\na white chess piece \u2655\nand the euro symbol \u20ac\nlooks like this!\n',
  textAlign: Ti.UI.TEXT_ALIGNMENT_LEFT,
  top: 30,
  height: 200,
  width: 300
});

win.add(label1);
win.add(label2);
win.open();
</code></pre>
 */
Ti.UI.Label = function() {
};
Ti.UI.Label.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Automatically convert certain text items in the label to clickable links.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    autoLink:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Number of pixels to extend the background image past the label on the bottom.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundPaddingBottom:null,

    /**
     * <p>Number of pixels to extend the background image past the label on the left.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundPaddingLeft:null,

    /**
     * <p>Number of pixels to extend the background image past the label on the right.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundPaddingRight:null,

    /**
     * <p>Number of pixels to extend the background image past the label on the top.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundPaddingTop:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    children:null,

    /**
     * <p>Color of the label text, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    color:null,

    /**
     * <p>Turn on/off the addition of ellipses at the end of the label if the text is too large to fit.</p>
     * @type Boolean
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    ellipsize:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>Font to use for the label text.</p>
     * @type Font
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    font:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Color of the label when in the highlighted state, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    highlightedColor:null,

    /**
     * <p>Simple HTML formatting.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    html:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Minimum font size when the font is sized based on the contents.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    minimumFontSize:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Text shadow color, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    shadowColor:null,

    /**
     * <p>Shadow offset as a dictionary with the properties <code>x</code> and <code>y</code>.</p>
     * @type Object
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    shadowOffset:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Label text.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    text:null,

    /**
     * <p>Text alignment. One of {@link Ti.UI} text alignment constants, 
{@link Ti.UI.TEXT_ALIGNMENT_LEFT}, 
{@link Ti.UI.TEXT_ALIGNMENT_CENTER}, 
or {@link Ti.UI.TEXT_ALIGNMENT_RIGHT}.</p>
     * @type String|Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    textAlign:null,

    /**
     * <p>Key identifying a string from the locale file to use for the label text.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    textid:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>Vertical text alignment, specified using one of the 
vertical alignment constants from {@link Ti.UI}: 
{@link Ti.UI.TEXT_VERTICAL_ALIGNMENT_BOTTOM}, 
{@link Ti.UI.TEXT_VERTICAL_ALIGNMENT_CENTER}, or 
{@link Ti.UI.TEXT_VERTICAL_ALIGNMENT_TOP}.</p>
     * @type Number|String
     * @since 1.8 (Mobile Web)
     */
    verticalAlign:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Enable or disable word wrapping in the label.</p>
     * @type Boolean
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    wordWrap:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.autoLink} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getAutoLink:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.backgroundPaddingBottom} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundPaddingBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.backgroundPaddingLeft} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundPaddingLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.backgroundPaddingRight} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundPaddingRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.backgroundPaddingTop} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundPaddingTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.color} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.ellipsize} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getEllipsize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.font} property.</p>
     * @returns Font
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFont:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.highlightedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getHighlightedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.html} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getHtml:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.minimumFontSize} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getMinimumFontSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.shadowColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getShadowColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.shadowOffset} property.</p>
     * @returns Object
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getShadowOffset:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.size} property.</p>
     * @returns Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.text} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getText:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.textAlign} property.</p>
     * @returns String
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTextAlign:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.textid} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTextid:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.verticalAlign} property.</p>
     * @returns Number
     * @returns String
     * @since 1.8 (Mobile Web)
     */
    getVerticalAlign:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.wordWrap} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getWordWrap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Label.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.autoLink} property.</p>
     * @param {Number} autoLink <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setAutoLink:function(autoLink) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.backgroundPaddingBottom} property.</p>
     * @param {Number} backgroundPaddingBottom <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundPaddingBottom:function(backgroundPaddingBottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.backgroundPaddingLeft} property.</p>
     * @param {Number} backgroundPaddingLeft <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundPaddingLeft:function(backgroundPaddingLeft) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.backgroundPaddingRight} property.</p>
     * @param {Number} backgroundPaddingRight <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundPaddingRight:function(backgroundPaddingRight) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.backgroundPaddingTop} property.</p>
     * @param {Number} backgroundPaddingTop <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundPaddingTop:function(backgroundPaddingTop) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.color} property.</p>
     * @param {String} color <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setColor:function(color) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.ellipsize} property.</p>
     * @param {Boolean} ellipsize <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setEllipsize:function(ellipsize) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.font} property.</p>
     * @param {Font} font <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setFont:function(font) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.highlightedColor} property.</p>
     * @param {String} highlightedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setHighlightedColor:function(highlightedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.html} property.</p>
     * @param {String} html <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setHtml:function(html) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.minimumFontSize} property.</p>
     * @param {Number} minimumFontSize <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setMinimumFontSize:function(minimumFontSize) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.shadowColor} property.</p>
     * @param {String} shadowColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setShadowColor:function(shadowColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.shadowOffset} property.</p>
     * @param {Object} shadowOffset <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setShadowOffset:function(shadowOffset) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.text} property.</p>
     * @param {String} text <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setText:function(text) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.textAlign} property.</p>
     * @param {String|Number} textAlign <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTextAlign:function(textAlign) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.textid} property.</p>
     * @param {String} textid <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTextid:function(textid) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.verticalAlign} property.</p>
     * @param {Number|String} verticalAlign <p>New value for the property.</p>
     * @since 1.8 (Mobile Web)
     */
    setVerticalAlign:function(verticalAlign) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.wordWrap} property.</p>
     * @param {Boolean} wordWrap <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setWordWrap:function(wordWrap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Label.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: iPhone, iPad
 * @namespace <p>This is an iOS-specific control that can be used to display an image combined with 
another image and/or color. The layers are drawn in the following order:</p>
<ul>
<li>The <code>mask</code>, or background image.</li>
<li>The <code>image</code>, or foreground image.</li>
<li>The <code>tint</code>, or constant tint color.</li>
</ul>
<p>The way the layers are combined depends on the value of the <code>mode</code> property. 
The <code>mode</code> value can be set to one of the {@link Ti.UI.iOS} <code>BLEND_MODE</code> constants. 
These constants correspond directly to the iOS blend modes described in the iOS developer 
library:</p>
<p>{@link http://developer.apple.com/library/ios/#documentation/GraphicsImaging/Reference/CGContext/Reference/reference.html#//apple_ref/c/tdef/CGBlendMode}</p>
<p>and:</p>
<p><a href="http://developer.apple.com/library/ios/#documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/dq_images/dq_images.html#//apple_ref/doc/uid/TP30001066-CH212-TPXREF101">"Using Blend Modes with Images" in Quartz2D
Reference</a></p>
<p>When compositing two images, the <code>mask</code> property specifies the background, or 
destination (D) image, and the <code>image</code> property specifies the foreground, or 
source (S) layer. For example, to use an image as an alpha mask for another image,
you could use the following code:</p>
<pre><code>var imageMask = Ti.UI.createMaskedImage({
    mask : 'mask.png', // alpha mask
    image : 'demo_image.png', // image to mask
    mode : Ti.UI.iOS.BLEND_MODE_SOURCE_OUT
});
</code></pre>
<p>Note that this legacy control lacks many of the features associated with a standard
{@link Ti.UI.ImageView} control.</p>
<p>Use the {@link Ti.UI.createMaskedImage} method to create a masked image view.</p>
 * 
 * @example Luminosity Blend Mode
 * <p>The following code excerpt creates a monochrome version of the background image,
using the luminosity from the background image and the specified <code>tint</code> color:</p>
<pre><code>var imageMask = Ti.UI.createMaskedImage({
    mask : 'demo_image.png', // background image
    tint: 'red',
    mode : Ti.UI.iOS.BLEND_MODE_LUMINOSITY,
});
</code></pre>
 */
Ti.UI.MaskedImage = function() {
};
Ti.UI.MaskedImage.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    children:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    height:null,

    /**
     * <p>Image drawn as the Foreground image.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    image:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    left:null,

    /**
     * <p>Image drawn as the background image.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    mask:null,

    /**
     * <p>Blend mode to use to combine layers.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    mode:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    right:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Color to combine with the image, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    tint:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.borderColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.center} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.image} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.layout} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.mask} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getMask:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.mode} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.opacity} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.size} property.</p>
     * @returns Dimension
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.tint} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MaskedImage.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.image} property.</p>
     * @param {String} image <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setImage:function(image) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.mask} property.</p>
     * @param {String} mask <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setMask:function(mask) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.mode} property.</p>
     * @param {Number} mode <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setMode:function(mode) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.tint} property.</p>
     * @param {String} tint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTint:function(tint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MaskedImage.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Mobile Web
 */
Ti.UI.MobileWeb = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.MobileWeb.NavigationGroup}.</p>
     * @param {Dictionary<Ti.UI.MobileWeb.NavigationGroup>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.MobileWeb.NavigationGroup} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.MobileWeb.NavigationGroup
     * @since 1.9 (Mobile Web)
     */
    createNavigationGroup:function(parameters) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Mobile Web
 * @namespace <p>The navigation group is created with the method {@link Ti.UI.MobileWeb.createNavigationGroup}.
The <code>window</code> property must be set initially in the constructor when creating a navigation group.
All navigation groups must have a root window that cannot be removed.</p>
 * 
 * @example Simple Navigation Group
 * <p>Create two windows in a navigation group, with the first colored blue. When the back button 
is clicked a red window is shown.</p>
<pre><code>var win1 = Ti.UI.createWindow();

var win2 = Ti.UI.createWindow({
    backgroundColor: 'red',
    title: 'Red Window'
});

var nav = Ti.UI.MobileWeb.createNavigationGroup({
   window: win2
});

win.add(nav);
win.open();

var win3 = Ti.UI.createWindow({
    backgroundColor: 'blue',
    title: 'Blue Window'
});
nav.open(win3, {animated:true});
</code></pre>
 */
Ti.UI.MobileWeb.NavigationGroup = function() {
};
Ti.UI.MobileWeb.NavigationGroup.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 1.9 (Mobile Web)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 1.9 (Mobile Web)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.9 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.9 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.9 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.9 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.9 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 1.9 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.9 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 1.9 (Mobile Web)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 1.9 (Mobile Web)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.9 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.9 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 1.9 (Mobile Web)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.9 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 1.9 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 1.9 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.9 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 1.9 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 1.9 (Mobile Web)
     */
    children:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 1.9 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 1.9 (Mobile Web)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 1.9 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 1.9 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.9 (Mobile Web)
     */
    left:null,

    /**
     * <p>Specifies whether the navigation should be at the top of the screen or the bottom of the screen.</p>
     * @type Boolean
     * @since 1.9 (Mobile Web)
     */
    navBarAtTop:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 1.9 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.9 (Mobile Web)
     */
    right:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 1.9 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 1.9 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 1.9 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 1.9 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 1.9 (Mobile Web)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 1.9 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 1.9 (Mobile Web)
     */
    width:null,

    /**
     * <p>Root window to add to this navigation group.</p>
     * @type Ti.UI.Window
     * @since 1.9 (Mobile Web)
     */
    window:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 1.9 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 1.9 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.9 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 1.9 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Closes a window and removes it from the navigation group.</p>
     * @param {Ti.UI.Window} window <p>Window to close.</p>
     * @param {Dictionary} options <p>Options supporting a single <code>animated</code> boolean property to determine whether the window 
will be animated (default) while being closed.</p>
     * @since 1.9 (Mobile Web)
     */
    close:function(window, options) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 1.9 (Mobile Web)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.9 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.anchorPoint} property.</p>
     * @returns Point
     * @since 1.9 (Mobile Web)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 1.9 (Mobile Web)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundColor} property.</p>
     * @returns String
     * @since 1.9 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 1.9 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 1.9 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 1.9 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 1.9 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 1.9 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundImage} property.</p>
     * @returns String
     * @since 1.9 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 1.9 (Mobile Web)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 1.9 (Mobile Web)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 1.9 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 1.9 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundTopCap} property.</p>
     * @returns Number
     * @since 1.9 (Mobile Web)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.borderColor} property.</p>
     * @returns String
     * @since 1.9 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.borderRadius} property.</p>
     * @returns Number
     * @since 1.9 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.borderWidth} property.</p>
     * @returns Number
     * @since 1.9 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 1.9 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.center} property.</p>
     * @returns Point
     * @since 1.9 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 1.9 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.focusable} property.</p>
     * @returns Boolean
     * @since 1.9 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.height} property.</p>
     * @returns Number
     * @returns String
     * @since 1.9 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 1.9 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.layout} property.</p>
     * @returns String
     * @since 1.9 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.left} property.</p>
     * @returns Number
     * @returns String
     * @since 1.9 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.navBarAtTop} property.</p>
     * @returns Boolean
     * @since 1.9 (Mobile Web)
     */
    getNavBarAtTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.opacity} property.</p>
     * @returns Number
     * @since 1.9 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.right} property.</p>
     * @returns Number
     * @returns String
     * @since 1.9 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.size} property.</p>
     * @returns Dimension
     * @since 1.9 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 1.9 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.top} property.</p>
     * @returns Number
     * @returns String
     * @since 1.9 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.touchEnabled} property.</p>
     * @returns Boolean
     * @since 1.9 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 1.9 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.visible} property.</p>
     * @returns Boolean
     * @since 1.9 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.width} property.</p>
     * @returns Number
     * @returns String
     * @since 1.9 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.window} property.</p>
     * @returns Ti.UI.Window
     * @since 1.9 (Mobile Web)
     */
    getWindow:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.zIndex} property.</p>
     * @returns Number
     * @since 1.9 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 1.9 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Opens a window within the navigation group.</p>
     * @param {Ti.UI.Window} window <p>Window to open.</p>
     * @param {Dictionary} options <p>Options supporting a single <code>animated</code> boolean property to determine whether the window 
will be animated (default) while being closed.</p>
     * @since 1.9 (Mobile Web)
     */
    open:function(window, options) {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 1.9 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.9 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 1.9 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 1.9 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 1.9 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 1.9 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 1.9 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 1.9 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.navBarAtTop} property.</p>
     * @param {Boolean} navBarAtTop <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setNavBarAtTop:function(navBarAtTop) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 1.9 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.MobileWeb.NavigationGroup.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 1.9 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 1.9 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 1.9 (Mobile Web)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Mobile Web
 */
Ti.UI.MobileWeb.TableViewSeparatorStyle = function() {
};
Ti.UI.MobileWeb.TableViewSeparatorStyle.prototype = {

    /**
     * <p>The separator cell has no distinct style.</p>
     * @type Number
     * @since 1.8.1 (Mobile Web)
     */
    NONE:null,

    /**
     * <p>The separator cell has a single line running across its width (default.)</p>
     * @type Number
     * @since 1.8.1 (Mobile Web)
     */
    SINGLE_LINE:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.8.1 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.8.1 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.8.1 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android
 * @namespace <p>A Toast notification is an unobtrusive, pop-up notification that doesn't 
block the UI. Use the {@link Ti.UI.createNotification} method to create a Toast notification.</p>
<p>By default, a Toast notification appears centered on the bottom half of the screen.</p>
<p>This object will be moved to the Android namespace in a future release.</p>
 * 
 * @example Simple Toast Notification
 * <p>The simplest use case is also the most common.</p>
<pre><code>var toast = Ti.UI.createNotification({
    message:"Please Stand By",
    duration: Ti.UI.NOTIFICATION_DURATION_LONG
});
toast.show();
</code></pre>
 */
Ti.UI.Notification = function() {
};
Ti.UI.Notification.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (Android)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (Android)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (Android)
     */
    children:null,

    /**
     * <p>Determines how long the notification stays on screen.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    duration:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android)
     */
    height:null,

    /**
     * <p>Horizontal placement of the notification, <em>as a fraction of the screen width</em>.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    horizontalMargin:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android)
     */
    left:null,

    /**
     * <p>Notification text to display.</p>
     * @type String
     * @since 0.8 (Android)
     */
    message:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android)
     */
    right:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (Android)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android)
     */
    transform:null,

    /**
     * <p>Vertical placement of the notifcation, <em>as a fraction of the screen height</em>.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    verticalMargin:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android)
     */
    width:null,

    /**
     * <p>X offset from the default position, in pixels.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    xOffset:null,

    /**
     * <p>Y offset from the default position, in pixels.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    yOffset:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (Android)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (Android)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.center} property.</p>
     * @returns Point
     * @since 0.8 (Android)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (Android)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.duration} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getDuration:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.horizontalMargin} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getHorizontalMargin:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.layout} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.message} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getMessage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.size} property.</p>
     * @returns Dimension
     * @since 0.8 (Android)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.verticalMargin} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getVerticalMargin:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.xOffset} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getXOffset:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.yOffset} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getYOffset:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Notification.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.duration} property.</p>
     * @param {Number} duration <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setDuration:function(duration) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.horizontalMargin} property.</p>
     * @param {Number} horizontalMargin <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setHorizontalMargin:function(horizontalMargin) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.message} property.</p>
     * @param {String} message <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setMessage:function(message) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.verticalMargin} property.</p>
     * @param {Number} verticalMargin <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setVerticalMargin:function(verticalMargin) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.xOffset} property.</p>
     * @param {Number} xOffset <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setXOffset:function(xOffset) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.yOffset} property.</p>
     * @param {Number} yOffset <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setYOffset:function(yOffset) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Notification.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Show the notification.</p>
     * @since 0.8 (Android)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (Android)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>An option dialog is created using {@link Ti.UI.createOptionDialog}.</p>
<p>This dialog is considerably different on each platform, as described below.</p>
<h4>Android</h4>
<p>On Android, this dialog is shown in the middle of the display (not touching the edges), 
with the option items represented in a picker. The previously-selected, or default, item can be 
set on creation.</p>
<p>Buttons below the picker may be optionally defined. The <code>click</code> event returns a Boolean value 
to indicate whether either an option item or a button was clicked.</p>
<h4>iOS</h4>
<p>The <code>destructive</code> property may be set for an item, to give a visual cue that selecting it 
results in an irreversible action.</p>
<p>On iOS 4, option dialogs are automatically cancelled when the application is paused/suspended.</p>
<h5>iPhone</h5>
<p>On iPhone, this dialog is shown at the bottom edge of the display, with the option items 
represented as vertical buttons. </p>
<h5>iPad</h5>
<p>On iPad, this dialog is shown in the middle of the display, or as a popover-like dialog if 
another view or control is specified via an argument.</p>
<h4>Caveats</h4>
<p>Care should be taken not to define any properties that are not documented, as this may produce 
unexpected results. For example, setting a <code>message</code> property will prevent the picker of option 
items from being displayed on Android.</p>
 * 
 * @example Dialog with 3 Options
 * <p>Ti.UI.setBackgroundColor('white');
var win = Ti.UI.createWindow({
  title: 'Click window to test',
  backgroundColor: 'white',
  exitOnClose: true,
  fullscreen: false
});</p>
<p>var opts = {
  cancel: 1,
  options: ['Confirm', 'Cancel', 'Help'],
  selectedIndex: 1,
  destructive: 0,
  title: 'Delete File?'
};</p>
<p>win.addEventListener('click', function(e){
  var dialog = Ti.UI.createOptionDialog(opts).show();
});
win.open();</p>
 * 
 * @example Dialog with 2 Options and 1 Button on Android and 3 Options on iOS
 * <p>Ti.UI.setBackgroundColor('white');
  var win = Ti.UI.createWindow({
  title: 'Click window to test',
  backgroundColor: 'white',
  exitOnClose: true,
  fullscreen: false
});</p>
<p>var opts = {
  title: 'Delete File?'
};</p>
<p>var isAndroid = Ti.Platform.osname == 'android';</p>
<p>if(isAndroid){
  opts.options = ['Confirm', 'Cancel'];
  opts.buttonNames = ['Confirm'];
} else {
  opts.options = ['Confirm', 'Cancel', 'Help'];
}</p>
<p>win.addEventListener('click', function(e){
  var dialog = Ti.UI.createOptionDialog(opts).show();
});
win.open();</p>
 */
Ti.UI.OptionDialog = function() {
};
Ti.UI.OptionDialog.prototype = {

    /**
     * <p>View to load inside the message area, to create a custom layout.</p>
     * @type Ti.UI.View
     * @since 0.8 (Android)
     */
    androidView:null,

    /**
     * <p>Index to define the cancel option, returned by the <code>click</code> event.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    cancel:null,

    /**
     * <p>Index to define the destructive option, indicated by a visual cue when rendered.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    destructive:null,

    /**
     * <p>List of option names.</p>
     * @type Array<String>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    options:null,

    /**
     * <p>Defines the default selected option.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    selectedIndex:null,

    /**
     * <p>Title of the dialog.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    title:null,

    /**
     * <p>Key identifying a string in the locale file to use for the title text.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    titleid:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.OptionDialog.androidView} property.</p>
     * @returns Ti.UI.View
     * @since 0.8 (Android)
     */
    getAndroidView:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.OptionDialog.cancel} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCancel:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.OptionDialog.destructive} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getDestructive:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.OptionDialog.options} property.</p>
     * @returns Array<String>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOptions:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.OptionDialog.selectedIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSelectedIndex:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.OptionDialog.title} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.OptionDialog.titleid} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTitleid:function() {
    },

    /**
     * <p>Hides this dialog.</p>
     * @param {hideParams} params <p>Argument containing parameters for this method. Only used on iOS.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function(params) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.OptionDialog.androidView} property.</p>
     * @param {Ti.UI.View} androidView <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setAndroidView:function(androidView) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.OptionDialog.cancel} property.</p>
     * @param {Number} cancel <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCancel:function(cancel) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.OptionDialog.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTitle:function(title) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.OptionDialog.titleid} property.</p>
     * @param {String} titleid <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTitleid:function(titleid) {
    },

    /**
     * <p>Shows this dialog.</p>
     * @param {showParams} params <p>Argument containing parameters for this method. Only used on iPad.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Use the {@link Ti.UI.createPicker} method to create a picker control.</p>
<p>On Android, the <code>useSpinner</code> property must be enabled to support multiple columns.</p>
<p>Adding views to picker rows is only supported on iOS.</p>
 * 
 * @example Basic Single Column Picker
 * <p>Create a one-column, platform-specific style, picker and automatically select a row.</p>
<pre><code>Ti.UI.backgroundColor = 'white';
var win = Ti.UI.createWindow({
  exitOnClose: true,
  layout: 'vertical'
});

var picker = Ti.UI.createPicker({
  top:50
});

var data = [];
data[0]=Ti.UI.createPickerRow({title:'Bananas'});
data[1]=Ti.UI.createPickerRow({title:'Strawberries'});
data[2]=Ti.UI.createPickerRow({title:'Mangos'});
data[3]=Ti.UI.createPickerRow({title:'Grapes'});

picker.add(data);
picker.selectionIndicator = true;

win.add(picker);
win.open();

// must be after picker has been displayed
picker.setSelectedRow(0, 2, false); // select Mangos
</code></pre>
 * 
 * @example Multi-Column Picker
 * <p>Create a two-column, platform-specific style, picker and automatically select a row in 
each column.</p>
<pre><code>Ti.UI.backgroundColor = 'white';
var win = Ti.UI.createWindow({
  exitOnClose: true,
  layout: 'vertical'
});

var picker = Ti.UI.createPicker({
  top:50
});
picker.selectionIndicator = true;

var fruit = [ 'Bananas', 'Strawberries', 'Mangos', 'Grapes' ];
var color = [ 'red', 'green', 'blue', 'orange' ];

var column1 = Ti.UI.createPickerColumn();

for(var i=0, ilen=fruit.length; i&lt;ilen; i++){
  var row = Ti.UI.createPickerRow({
    title: fruit[i]
  });
  column1.addRow(row);
}

var column2 = Ti.UI.createPickerColumn();

for(var i=0, ilen=color.length; i&lt;ilen; i++){
  var row = Ti.UI.createPickerRow({ title: color[i] });
  column2.addRow(row);
}

picker.add([column1,column2]);

win.add(picker);

win.open();

// must be after picker has been displayed
picker.setSelectedRow(0, 2, false); // select Mangos
picker.setSelectedRow(1, 3, false); // select Orange
</code></pre>
 * 
 * @example Date Picker
 * <p>Create a date picker and handle the subsequent user action.</p>
<pre><code>Ti.UI.backgroundColor = 'white';
var win = Ti.UI.createWindow({
  exitOnClose: true,
  layout: 'vertical'
});

var picker = Ti.UI.createPicker({
  type:Ti.UI.PICKER_TYPE_DATE,
  minDate:new Date(2009,0,1),
  maxDate:new Date(2014,11,31),
  value:new Date(2014,3,12),
  top:50
});

win.add(picker);
win.open();

picker.addEventListener('change',function(e){
  Ti.API.info("User selected date: " + e.value.toLocaleString());
});
</code></pre>
 * 
 * @example Date Picker using showDatePickerDialog() (Android only)
 * <p>Create a date picker that is automatically displayed as a modal dialog and handle the 
subsequent user action.</p>
<pre><code>Ti.UI.backgroundColor = 'white';
var win = Ti.UI.createWindow({
  exitOnClose: true,
  layout: 'vertical'
});

var picker = Ti.UI.createPicker({
  type:Ti.UI.PICKER_TYPE_DATE,
  minDate:new Date(2009,0,1),
  maxDate:new Date(2014,11,31),
  value:new Date(2014,3,12)
});

win.open();

picker.showDatePickerDialog({
  value: new Date(2010,8,1),
  callback: function(e) {
    if (e.cancel) {
      Ti.API.info('User canceled dialog');
    } else {
      Ti.API.info('User selected date: ' + e.value);
    }
  }
});
</code></pre>
 */
Ti.UI.Picker = function() {
};
Ti.UI.Picker.prototype = {

    /**
     * <p>Columns used for this picker, as an array of {@link Ti.UI.PickerColumn} objects.</p>
     * @type Array<Ti.UI.PickerColumn>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    columns:null,

    /**
     * <p>Duration in milliseconds used for a Countdown Timer picker.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    countDownDuration:null,

    /**
     * <p>Determines whether the Time pickers display in 24-hour or 12-hour clock format.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    format24:null,

    /**
     * <p>Locale used when displaying Date and Time picker values.</p>
     * @type String
     * @since 0.8 (Android)
     */
    locale:null,

    /**
     * <p>Maximum date displayed when a Date picker is in use.</p>
     * @type Date
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    maxDate:null,

    /**
     * <p>Minimum date displayed when a Date picker is in use.</p>
     * @type Date
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    minDate:null,

    /**
     * <p>Interval in minutes displayed when one of the Time types of pickers is in use.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    minuteInterval:null,

    /**
     * <p>Determines whether the visual selection indicator is shown. On iPhone, this is a blue bar.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    selectionIndicator:null,

    /**
     * <p>Determines the type of picker displayed</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    type:null,

    /**
     * <p>Determines whether the non-native Android control, with a spinning wheel that looks and 
behaves like the iOS picker, is invoked rather than the default native "dropdown" style.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    useSpinner:null,

    /**
     * <p>Date and time value for Date pickers.</p>
     * @type Date
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    value:null,

    /**
     * <p>Number of visible rows to display. This is only applicable to a plain picker and when the 
<code>useSpinner</code> is <code>true</code>.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    visibleItems:null,


    /**
     * <p>Adds rows or columns to the picker.</p>
     * @param {Array<Ti.UI.PickerRow>|Ti.UI.PickerRow|Array<Ti.UI.PickerColumn>|Ti.UI.PickerColumn} data <p>A row, set of rows, a column of rows or a set of columns of rows. When this method is 
used to add a row or set of rows, a single-column picker is created.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    add:function(data) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Picker.columns} property.</p>
     * @returns Array<Ti.UI.PickerColumn>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getColumns:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Picker.countDownDuration} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getCountDownDuration:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Picker.format24} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFormat24:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Picker.locale} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getLocale:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Picker.maxDate} property.</p>
     * @returns Date
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getMaxDate:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Picker.minDate} property.</p>
     * @returns Date
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getMinDate:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Picker.minuteInterval} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getMinuteInterval:function() {
    },

    /**
     * <p>Gets the selected row for a column, or <code>null</code> if none exists.</p>
     * @param {Number} index <p>A column index.</p>
     * @returns Ti.UI.PickerRow
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSelectedRow:function(index) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Picker.selectionIndicator} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getSelectionIndicator:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Picker.type} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Picker.useSpinner} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getUseSpinner:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Picker.value} property.</p>
     * @returns Date
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Picker.visibleItems} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getVisibleItems:function() {
    },

    /**
     * <p>Repopulates values for a column.</p>
     * @param {Ti.UI.PickerColumn} column <p>Column to repopulate.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    reloadColumn:function(column) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Picker.columns} property.</p>
     * @param {Array<Ti.UI.PickerColumn>} columns <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setColumns:function(columns) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Picker.countDownDuration} property.</p>
     * @param {Number} countDownDuration <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setCountDownDuration:function(countDownDuration) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Picker.format24} property.</p>
     * @param {Boolean} format24 <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFormat24:function(format24) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Picker.locale} property.</p>
     * @param {String} locale <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setLocale:function(locale) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Picker.maxDate} property.</p>
     * @param {Date} maxDate <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setMaxDate:function(maxDate) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Picker.minDate} property.</p>
     * @param {Date} minDate <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setMinDate:function(minDate) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Picker.minuteInterval} property.</p>
     * @param {Number} minuteInterval <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setMinuteInterval:function(minuteInterval) {
    },

    /**
     * <p>Selects a column's row.</p>
     * @param {Number} column <p>A column index.</p>
     * @param {Number} row <p>A row index.</p>
     * @param {Boolean} animated <p>Determines whether the selection should be animated. (iPhone, iPad-only)</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSelectedRow:function(column, row, animated) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Picker.selectionIndicator} property.</p>
     * @param {Boolean} selectionIndicator <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setSelectionIndicator:function(selectionIndicator) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Picker.type} property.</p>
     * @param {Number} type <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setType:function(type) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Picker.useSpinner} property.</p>
     * @param {Boolean} useSpinner <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setUseSpinner:function(useSpinner) {
    },

    /**
     * <p>Sets the date and time value property for Date pickers.</p>
     * @param {Object} date <p>A Javascript <code>Date</code> object.</p>
     * @param {Boolean} suppressEvent <p>Determines whether a <code>change</code> event is fired.</p>
     * @returns Ti.UI.PickerRow
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setValue:function(date, suppressEvent) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Picker.visibleItems} property.</p>
     * @param {Number} visibleItems <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setVisibleItems:function(visibleItems) {
    },

    /**
     * <p>Shows Date picker as a modal dialog.</p>
     * @param {Object} dictObj <p>Dictionary object with a subset of <code>Ti.UI.Picker</code> properties 
and a callback defined. Acceptable object properties are 
<code>callback</code>, <code>okButtonTitle</code>, <code>title</code> and <code>value</code>.</p>
     * @since 0.8 (Android)
     */
    showDatePickerDialog:function(dictObj) {
    },

    /**
     * <p>Shows Time picker as a modal dialog.</p>
     * @param {Object} dictObj <p>Dictionary object with a subset of <code>Ti.UI.Picker</code> properties 
and a callback defined. Acceptable object properties are 
<code>callback</code>, <code>format24</code>, <code>okButtonTitle</code>, <code>title</code> and <code>value</code>.</p>
     * @since 0.8 (Android)
     */
    showTimePickerDialog:function(dictObj) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Use the {@link Ti.UI.createPickerRow} method to create a picker row control.</p>
<p>On Android, the <code>useSpinner</code> property must be enabled to support multiple columns.</p>
<p>See {@link Ti.UI.Picker} for further examples of usage.</p>
 * 
 * @example Multi-Column Picker
 * <p>Create a two-column, platform-specific style, picker and automatically select a row in 
each column.</p>
<pre><code>var win = Ti.UI.createWindow({
  backgroundColor: 'white',
  exitOnClose: true,
  fullscreen: false,
  title: 'Use picker to make selection'
});

var fruit = [ 'Bananas', 'Grapes', 'Blueberries', 'Strawberries' ];
var color = [ 'blue', 'red', 'yellow', 'white' ];

var column1 = Ti.UI.createPickerColumn();

for(var i=0, ilen=fruit.length; i&lt;ilen; i++){
  var row = Ti.UI.createPickerRow({
    title: fruit[i]
  });
  column1.addRow(row);
}

var column2 = Ti.UI.createPickerColumn();

for(var i=0, ilen=color.length; i&lt;ilen; i++){
  var row = Ti.UI.createPickerRow({
    title: color[i]
  });
  column2.addRow(row);
}

var picker = Ti.UI.createPicker({
  columns: [column1, column2],
  selectionIndicator: true,
  useSpinner: true, // required in order to use multi-column pickers with Android
  top:50
});

function pickerDefaults(obj){
  // on iOS, must be after picker has been rendered
  picker.setSelectedRow(0, 2, false);
  picker.setSelectedRow(1, 3, false);
}

win.add(picker);

var isAndroid = Ti.Platform.osname === 'android';

if(isAndroid){
  pickerDefaults(picker);
}

win.open();

if(!isAndroid){
  setTimeout(function(){
    pickerDefaults(picker);
  }, 1500);
}
</code></pre>
 */
Ti.UI.PickerColumn = function() {
};
Ti.UI.PickerColumn.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    children:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Number of rows in this column.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    rowCount:null,

    /**
     * <p>Rows of this column.</p>
     * @type Array<Ti.UI.PickerRow>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    rows:null,

    /**
     * <p>The selected row in this column.</p>
     * @type Ti.UI.PickerRow
     * @since 1.8 (Mobile Web)
     */
    selectedRow:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Adds a row to this column.</p>
     * @param {Ti.UI.PickerRow} row <p>A row to add.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addRow:function(row) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.anchorPoint} property.</p>
     * @returns Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.backgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.backgroundImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.borderColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.borderRadius} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.borderWidth} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.center} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.focusable} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.layout} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.opacity} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.rowCount} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRowCount:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.rows} property.</p>
     * @returns Array<Ti.UI.PickerRow>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRows:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.selectedRow} property.</p>
     * @returns Ti.UI.PickerRow
     * @since 1.8 (Mobile Web)
     */
    getSelectedRow:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.size} property.</p>
     * @returns Dimension
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.visible} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerColumn.zIndex} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Removes a row from this column.</p>
     * @param {Ti.UI.PickerRow} row <p>A row to remove.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeRow:function(row) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.selectedRow} property.</p>
     * @param {Ti.UI.PickerRow} selectedRow <p>New value for the property.</p>
     * @since 1.8 (Mobile Web)
     */
    setSelectedRow:function(selectedRow) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerColumn.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Use the {@link Ti.UI.createPickerRow} method to create a picker row control.</p>
<p>Views added to picker rows is only supported on iOS.</p>
 * 
 * @example Custom View for Row (iOS only)
 * <p>Create a two-column picker, with the first column containing a child view, and automatically 
select a row in each column.</p>
<pre><code>Ti.UI.backgroundColor = 'white';
var win = Ti.UI.createWindow({
  exitOnClose: true,
  layout: 'vertical'
});

var fruit = [ 'Bananas', 'Strawberries', 'Mangos', 'Grapes' ];
var color = [ 'red', 'green', 'blue', 'orange' ];

var column1 = Ti.UI.createPickerColumn();

for(var i=0, ilen=fruit.length; i&lt;ilen; i++){
  var row = Ti.UI.createPickerRow();

  var label = Ti.UI.createLabel({
    color:'red',
    font:{fontSize:20,fontWeight:'bold'},
    text: fruit[i],
    textAlign:'left',
    height:'auto',
    width:'126'
  });

  row.add(label);
  column1.addRow(row);
}

var column2 = Ti.UI.createPickerColumn();

for(var i=0, ilen=color.length; i&lt;ilen; i++){
  var row = Ti.UI.createPickerRow({
    title: color[i]
  });
  column2.addRow(row);
}

var picker = Ti.UI.createPicker({
  top:50,
  columns: [column1, column2],
  visibleItems: 3,
  selectionIndicator: true
});

win.add(picker);

win.open();

// must be after picker has been displayed
picker.setSelectedRow(0, 2, false); // select Mangos
picker.setSelectedRow(1, 3, false); // select Orange
</code></pre>
 */
Ti.UI.PickerRow = function() {
};
Ti.UI.PickerRow.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    children:null,

    /**
     * <p>Color of the item text, as a color name or hex triplet.</p>
     * @type String
     * @since 1.8 (Mobile Web)
     */
    color:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    focusable:null,

    /**
     * <p>Font to use for the item text.</p>
     * @type Font
     * @since 1.8 (Mobile Web)
     */
    font:null,

    /**
     * <p>Font size for displaying item text. Ignored when using a custom view.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fontSize:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Item text.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    title:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child view to this picker row, to provide a custom row.</p>
     * @param {Ti.UI.View} view <p>A view object.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.anchorPoint} property.</p>
     * @returns Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.backgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.backgroundImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.borderColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.borderRadius} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.borderWidth} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.center} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.color} property.</p>
     * @returns String
     * @since 1.8 (Mobile Web)
     */
    getColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.focusable} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.font} property.</p>
     * @returns Font
     * @since 1.8 (Mobile Web)
     */
    getFont:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.fontSize} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getFontSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.layout} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.opacity} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.size} property.</p>
     * @returns Dimension
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.title} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.visible} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.PickerRow.zIndex} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.color} property.</p>
     * @param {String} color <p>New value for the property.</p>
     * @since 1.8 (Mobile Web)
     */
    setColor:function(color) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.font} property.</p>
     * @param {Font} font <p>New value for the property.</p>
     * @since 1.8 (Mobile Web)
     */
    setFont:function(font) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.fontSize} property.</p>
     * @param {Number} fontSize <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setFontSize:function(fontSize) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTitle:function(title) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.PickerRow.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>A progress bar is used for displaying an ongoing activity with a defined progression. 
For an activity without a defined progression, you can use {@link Ti.UI.ActivityIndicator}. </p>
<p>Unlike most views, progress bars are hidden by default, so you must explicitly 
show the progress bar.</p>
<p>Use the {@link Ti.UI.createProgressBar} method to create a progress bar.</p>
 * 
 * @example Simple Progress Bar
 * <p>In this example we create a progress bar with the min value of <code>0</code> and the max value 
of <code>10</code> and the current value of <code>0</code>. Changing the <code>value</code> property causes the 
displayed progress bar to update.</p>
<pre><code>var pb=Ti.UI.createProgressBar({
    top:10,
    width:250,
    height:'auto',
    min:0,
    max:10,
    value:0,
    color:'#fff',
    message:'Downloading 0 of 10',
    font:{fontSize:14, fontWeight:'bold'},
    style:Ti.UI.iPhone.ProgressBarStyle.PLAIN,
});
win.add(pb);
pb.show();
</code></pre>
 */
Ti.UI.ProgressBar = function() {
};
Ti.UI.ProgressBar.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    children:null,

    /**
     * <p>Color of the progress bar text, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    color:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>Font for the progress bar text.</p>
     * @type Font
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    font:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Maximum value of the progress bar.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    max:null,

    /**
     * <p>Progress bar text.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>Minimum value of the progress bar.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    min:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Style of the progress bar.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    style:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>Current value of the progress bar.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    value:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.color} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.font} property.</p>
     * @returns Font
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFont:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.max} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getMax:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.message} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getMessage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.min} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getMin:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.size} property.</p>
     * @returns Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.style} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.value} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ProgressBar.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.color} property.</p>
     * @param {String} color <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setColor:function(color) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.font} property.</p>
     * @param {Font} font <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setFont:function(font) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.max} property.</p>
     * @param {Number} max <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setMax:function(max) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.message} property.</p>
     * @param {String} message <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setMessage:function(message) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.min} property.</p>
     * @param {Number} min <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setMin:function(min) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.style} property.</p>
     * @param {Number} style <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setStyle:function(style) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.value} property.</p>
     * @param {Number} value <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setValue:function(value) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ProgressBar.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Use the {@link Ti.UI.createScrollView} method to create a scroll view.</p>
<p>Views added to the scroll view will be scrolled based on the size of the scrollable region of 
content. If a scrollable region fits within the size of its scroll view, the view will not 
scroll.</p>
<h4>Android</h4>
<p>On Android, a scroll view can only scroll in one direction, either vertical or horizontal, 
and not both at the same time. Hence, the {@link Ti.UI.ScrollView.scrollType} property may be 
used to set the scroll direction explicitly.</p>
<p>If the <code>scrollType</code> property is not defined, the scroll view attempts to deduce the scroll 
direction based on some of the other properties that have been set. Specifically, if 
<code>contentWidth</code> and <code>width</code> are both set and are equal to each other, or if they are both set 
<em>and</em> <code>showVerticalScrollIndicator</code> is set to <code>true</code>, then the scroll direction is set to 
"vertical".  If <code>contentHeight</code> and <code>height</code> are both set and are equal, or if they are both 
set and <code>showHorizontalScrollIndicator</code> is set to <code>true</code>, then the scroll direction is set 
to "horizontal".  If <code>scrollType</code> is set, it overrides the deduced setting.</p>
 * 
 * @example Simple Scroll View
 * <p>Create a scroll view with content.</p>
<pre><code>var win = Ti.UI.createWindow({
  backgroundColor: 'white',
  exitOnClose: true,
  fullscreen: false,
  title: 'ScrollView Demo'
});

var scrollView = Ti.UI.createScrollView({
  contentWidth: 'auto',
  contentHeight: 'auto',
  showVerticalScrollIndicator: true,
  showHorizontalScrollIndicator: true,
  height: '80%',
  width: '80%'
});
var view = Ti.UI.createView({
  backgroundColor:'#336699',
  borderRadius: 10,
  top: 10,
  height: 2000,
  width: 1000
});
scrollView.add(view);
win.add(scrollView);
win.open();
</code></pre>
 */
Ti.UI.ScrollView = function() {
};
Ti.UI.ScrollView.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    children:null,

    /**
     * <p>Height of the scrollable region.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    contentHeight:null,

    /**
     * <p>X and Y coordinates to which to reposition the top-left point of the scrollable region.</p>
     * @type Dictionary
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    contentOffset:null,

    /**
     * <p>Width of the scrollable region.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    contentWidth:null,

    /**
     * <p>Determines whether scroll bounce of the scrollable region is enabled.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    disableBounce:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Determines whether horizontal scroll bounce of the scrollable region is enabled.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    horizontalBounce:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Maximum scaling factor of the scrollable region and its content.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    maxZoomScale:null,

    /**
     * <p>Minimum scaling factor of the scrollable region and its content.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    minZoomScale:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Limits the direction of the scrollable region, overriding the deduced setting. Set to 
<code>horizontal</code> or <code>vertical</code>.</p>
     * @type String
     * @since 0.9 (Android)
     */
    scrollType:null,

    /**
     * <p>Determines whether the horizontal scroll indicator is visible.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    showHorizontalScrollIndicator:null,

    /**
     * <p>Determines whether the vertical scroll indicator is visible.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    showVerticalScrollIndicator:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>Determines whether vertical scroll bounce of the scrollable region is enabled.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    verticalBounce:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,

    /**
     * <p>Scaling factor of the scrollable region and its content.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    zoomScale:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.anchorPoint} property.</p>
     * @returns Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.backgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.backgroundImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.borderColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.borderRadius} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.borderWidth} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.center} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.contentHeight} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getContentHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.contentOffset} property.</p>
     * @returns Dictionary
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getContentOffset:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.contentWidth} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getContentWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.disableBounce} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getDisableBounce:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.focusable} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.horizontalBounce} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getHorizontalBounce:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.layout} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.maxZoomScale} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getMaxZoomScale:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.minZoomScale} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getMinZoomScale:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.opacity} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.scrollType} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getScrollType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.showHorizontalScrollIndicator} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getShowHorizontalScrollIndicator:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.showVerticalScrollIndicator} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getShowVerticalScrollIndicator:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.size} property.</p>
     * @returns Dimension
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.verticalBounce} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getVerticalBounce:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.visible} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.zIndex} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollView.zoomScale} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getZoomScale:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Moves the specified coordinate of the scrollable region into the viewable area.</p>
     * @param {Number} x <p>X coordinate from the scrollable region's coordinate system.</p>
     * @param {Number} y <p>Y coordinate from the scrollable region's coordinate system.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    scrollTo:function(x, y) {
    },

    /**
     * <p>Moves the bottom of the scrollable region into the viewable area.</p>
     * @since 0.9 (Android)
     */
    scrollToBottom:function() {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.contentHeight} property.</p>
     * @param {Number|String} contentHeight <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setContentHeight:function(contentHeight) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.contentOffset} property.</p>
     * @param {Dictionary} contentOffset <p>X and Y coordinates to which to reposition the top-left point of the scrollable region.</p>
     * @param {contentOffsetOption} animated <p>Determines whether the scrollable region reposition should be animated</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setContentOffset:function(contentOffset, animated) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.contentWidth} property.</p>
     * @param {Number|String} contentWidth <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setContentWidth:function(contentWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.disableBounce} property.</p>
     * @param {Boolean} disableBounce <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setDisableBounce:function(disableBounce) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.horizontalBounce} property.</p>
     * @param {Boolean} horizontalBounce <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setHorizontalBounce:function(horizontalBounce) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.maxZoomScale} property.</p>
     * @param {Number} maxZoomScale <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setMaxZoomScale:function(maxZoomScale) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.minZoomScale} property.</p>
     * @param {Number} minZoomScale <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setMinZoomScale:function(minZoomScale) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.showHorizontalScrollIndicator} property.</p>
     * @param {Boolean} showHorizontalScrollIndicator <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setShowHorizontalScrollIndicator:function(showHorizontalScrollIndicator) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.showVerticalScrollIndicator} property.</p>
     * @param {Boolean} showVerticalScrollIndicator <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setShowVerticalScrollIndicator:function(showVerticalScrollIndicator) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.verticalBounce} property.</p>
     * @param {Boolean} verticalBounce <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setVerticalBounce:function(verticalBounce) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollView.zoomScale} property.</p>
     * @param {Number} zoomScale <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setZoomScale:function(zoomScale) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>Use the {@link Ti.UI.createScrollableView} method to create a scrollable view.</p>
<p>ScrollableView supports a visual paging control that may be enabled to indicate on-screen that 
a view is visible.</p>
<p>Only the <code>scroll</code> event exists on Android. To support those that are missing, event listeners 
may be added to its child views.</p>
<p>In a previous Titanium version for iOS, the <code>maxZoomScale</code> and <code>minZoomScale</code> properties were 
removed for performance and parity reasons. As they still remain in {@link Ti.UI.ScrollView}, 
the equivalent functionality may be obtained by adding a ScrollView to ScrollableView. See the 
"Simple Scrollable View with 2 Zoomable Images" example for a demonstration.</p>
 * 
 * @example Simple Scrollable View with 3 Views
 * <p>Create three views and place each into a scrollable view.</p>
<pre><code>var win = Ti.UI.createWindow();

var view1 = Ti.UI.createView({ backgroundColor:'#123' });
var view2 = Ti.UI.createView({ backgroundColor:'#246' });
var view3 = Ti.UI.createView({ backgroundColor:'#48b' });

var scrollableView = Ti.UI.createScrollableView({
  views:[view1,view2,view3],
  showPagingControl:true
});

win.add(scrollableView);
win.open();
</code></pre>
 * 
 * @example Simple Scrollable View with 2 Zoomable Images
 * <p>Create two scroll views, each containing an image view, and place them in a scrollable view.</p>
<pre><code>var img1 = Ti.UI.createImageView({
    image:'http://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/' +
    'Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg/' +
    '402px-Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg'
});
var img1Wrapper = Ti.UI.createScrollView({
    maxZoomScale:4.0,
});
img1Wrapper.add(img1);

var img2 = Ti.UI.createImageView({
    image:'http://www.nasa.gov/images/content/' + 
    '616903main_rover_comparison1600_1600-1200.jpg'
});
var img2Wrapper = Ti.UI.createScrollView({
    maxZoomScale:4.0,
});
img2Wrapper.add(img2);
var photosView = Ti.UI.createScrollableView({
    showPagingControl:true,
    views:[img1Wrapper,img2Wrapper]
});
win.add(photosView);
</code></pre>
 */
Ti.UI.ScrollableView = function() {
};
Ti.UI.ScrollableView.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    bottom:null,

    /**
     * <p>Number of views to cache (pre-render).</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    cacheSize:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    children:null,

    /**
     * <p>Index of the active page.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    currentPage:null,

    /**
     * <p>Determines whether view bouncing effect is disabled.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    disableBounce:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    opacity:null,

    /**
     * <p>Color of the paging control, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    pagingControlColor:null,

    /**
     * <p>Height of the paging control, in pixels.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    pagingControlHeight:null,

    /**
     * <p>Number of milliseconds to wait before hiding the paging control. Less than or equal to 
0 disables timeout, keeping controls displayed.</p>
     * @type Number
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    pagingControlTimeout:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    right:null,

    /**
     * <p>Determines whether scrolling is enabled on the Scrollable view.
If this property is not set, scrolling is enabled.</p>
     * @type Boolean
     * @since 2.0 (iPhone), 2.0 (iPad)
     */
    scrollingEnabled:null,

    /**
     * <p>Determines whether the paging control is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    showPagingControl:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Sets the views within this Scrollable View.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    views:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Adds a new view to this Scrollable View.</p>
     * @param {Object} view <p>The view to add.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addView:function(view) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.cacheSize} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getCacheSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.currentPage} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getCurrentPage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.disableBounce} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getDisableBounce:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.pagingControlColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getPagingControlColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.pagingControlHeight} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getPagingControlHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.pagingControlTimeout} property.</p>
     * @returns Number
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getPagingControlTimeout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.scrollingEnabled} property.</p>
     * @returns Boolean
     * @since 2.0 (iPhone), 2.0 (iPad)
     */
    getScrollingEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.showPagingControl} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getShowPagingControl:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.size} property.</p>
     * @returns Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.views} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getViews:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.ScrollableView.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Sets the current page to the next consecutive view in {@link Ti.UI.ScrollableView.views}.</p>
     * @since 0.8 (Android)
     */
    moveNext:function() {
    },

    /**
     * <p>Sets the current page to the previous consecutive view in {@link Ti.UI.ScrollableView.views}.</p>
     * @since 0.8 (Android)
     */
    movePrevious:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Removes an existing view from this Scrollable View.</p>
     * @param {Number|Ti.UI.View} view <p>A {@link Ti.UI.View} object (all platforms) or integer index (iPhone, iPad only) of 
a view to remove.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeView:function(view) {
    },

    /**
     * <p>Scrolls to the specified view in {@link Ti.UI.ScrollableView.views}.</p>
     * @param {Number|Ti.UI.View} view <p>An integer index or a {@link Ti.UI.View} object of the view to set as the current page.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    scrollToView:function(view) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.cacheSize} property.</p>
     * @param {Number} cacheSize <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setCacheSize:function(cacheSize) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.currentPage} property.</p>
     * @param {Number} currentPage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setCurrentPage:function(currentPage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.disableBounce} property.</p>
     * @param {Boolean} disableBounce <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setDisableBounce:function(disableBounce) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.pagingControlColor} property.</p>
     * @param {String} pagingControlColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setPagingControlColor:function(pagingControlColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.pagingControlHeight} property.</p>
     * @param {Number} pagingControlHeight <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setPagingControlHeight:function(pagingControlHeight) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.scrollingEnabled} property.</p>
     * @param {Boolean} scrollingEnabled <p>New value for the property.</p>
     * @since 2.0 (iPhone), 2.0 (iPad)
     */
    setScrollingEnabled:function(scrollingEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.showPagingControl} property.</p>
     * @param {Boolean} showPagingControl <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setShowPagingControl:function(showPagingControl) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.views} property.</p>
     * @param {Array<Ti.UI.View>} views <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setViews:function(views) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.ScrollableView.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>The <code>SearchBar</code> object is closely modeled on an iOS native search bar.
As such, not all features are supported on other platforms.</p>
<p>Search bars are most commonly used for filtering the rows in a {@link Ti.UI.TableView}.
You can add a search bar to a table view by setting the table view's 
{@link Ti.UI.TableView.search} property. </p>
<p>A search bar can also be used without a table view.</p>
<p>Use the {@link Ti.UI.createSearchBar} method to create a search bar.</p>
<h4>Android Platform Implementation Notes</h4>
<p>On Android, there are several issues with the current implementation:</p>
<ul>
<li>
<p>The cancel button does not work. It does not clear the search bar text or 
  close the onscreen keyboard.</p>
</li>
<li>
<p>Calling the <code>blur</code> method on the search bar closes the onscreen keyboard, 
  but the search bar retains its focused appearance.</p>
</li>
<li>
<p>The search bar does not lose focus when the user clicks on a row in the search
  results.</p>
</li>
<li>
<p>The <code>value</code> property cannot be specified in the <code>createSearchBar</code> method.</p>
</li>
</ul>
<p>To use a search bar on Android, you may need to explicitly control the focus and
clearing of the search bar, depending on your desired behavior. For example, to clear
the search bar and dismiss the onscreen keyboard when the user selects a row, you
could add code like this to the <code>click</code> event handler on your table view:</p>
<pre><code>myTableView.addEventListener('click', function(e) {
    if (Ti.Platform.name === 'android') {
        // Clear search bar
        mySearchBar.value ="";
        // hiding and showing the search bar forces it back to its non-focused appearance.
        mySearchBar.hide();
        mySearchBar.show();
    }
    // standard click event handling here
</code></pre>
 * 
 * @example Simple Search Bar
 * <p>var search = Ti.UI.createSearchBar({
    barColor:'#000', 
    showCancel:true,
    height:43,
    top:0,
});</p>
 */
Ti.UI.SearchBar = function() {
};
Ti.UI.SearchBar.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Determines how text is capitalized during typing.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    autocapitalization:null,

    /**
     * <p>Determines whether the text in the search bar is autocorrected during typing.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    autocorrect:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Bar color of the search bar view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    barColor:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    children:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    height:null,

    /**
     * <p>Text to show when the search bar field is not focused.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    hintText:null,

    /**
     * <p>Key identifying a string from the locale file to use for the
{@link Ti.UI.SearchBar.hintText} property.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    hinttextid:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Keyboard type constant to use when the field is focused.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    keyboardType:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    opacity:null,

    /**
     * <p>Single line of text displayed at the top of the search bar.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    prompt:null,

    /**
     * <p>Key identifying a string from the locale file to use for the
{@link Ti.UI.SearchBar.prompt} property.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    promptid:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    right:null,

    /**
     * <p>Determines whether the bookmark button is displayed.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    showBookmark:null,

    /**
     * <p>Determines whether the cancel button is displayed.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    showCancel:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Value of the search bar.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    value:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Causes the search bar to lose focus.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    blur:function() {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Causes the search bar to gain focus.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    focus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.autocapitalization} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAutocapitalization:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.autocorrect} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAutocorrect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.barColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBarColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.hintText} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getHintText:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.hinttextid} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getHinttextid:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.keyboardType} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getKeyboardType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.prompt} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getPrompt:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.promptid} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getPromptid:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.showBookmark} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getShowBookmark:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.showCancel} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getShowCancel:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.size} property.</p>
     * @returns Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.value} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.SearchBar.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.autocapitalization} property.</p>
     * @param {Number} autocapitalization <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAutocapitalization:function(autocapitalization) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.autocorrect} property.</p>
     * @param {Boolean} autocorrect <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAutocorrect:function(autocorrect) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.barColor} property.</p>
     * @param {String} barColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBarColor:function(barColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.hintText} property.</p>
     * @param {String} hintText <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setHintText:function(hintText) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.hinttextid} property.</p>
     * @param {String} hinttextid <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setHinttextid:function(hinttextid) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.keyboardType} property.</p>
     * @param {Number} keyboardType <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setKeyboardType:function(keyboardType) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.prompt} property.</p>
     * @param {String} prompt <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setPrompt:function(prompt) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.promptid} property.</p>
     * @param {String} promptid <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setPromptid:function(promptid) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.showBookmark} property.</p>
     * @param {Boolean} showBookmark <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setShowBookmark:function(showBookmark) {
    },

    /**
     * <p>Shows or hides the cancel button.</p>
     * @param {Boolean} showCancel <p>New value for {@link Ti.UI.SearchBar.showCancel}.</p>
     * @param {Dictionary} animated <p>Dictionary of animation properties. Currently only a
single boolean property, <code>animated</code> is supported. Only used on iOS.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setShowCancel:function(showCancel, animated) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.value} property.</p>
     * @param {String} value <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setValue:function(value) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.SearchBar.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>A slider lets the user select from a range of values by dragging the slider thumb. </p>
<p>Use the {@link Ti.UI.createSlider} method to create a slider.</p>
<h4>Android Platform Implementation Notes</h4>
<p>On Android, the user can also maniuplate the slider using the arrow keys. For this
reason, placing other focusable UI elements to the left or right of
the slider is not recommended.</p>
<p>On Android, both <code>min</code> and <code>max</code> must be specified for the slider to work properly.</p>
 * 
 * @example Simple Slider
 * <p>The following sample demonstrates creating a slider and adding a listener to 
handle the change events.</p>
<pre><code>var slider = Ti.UI.createSlider({
    top: 50,
    min: 0,
    max: 100,
    width: '100%',
    value: 50
    });

var label = Ti.UI.createLabel({
    text: slider.value,
    width: '100%',
    height: 'auto',
    top: 30,
    left: 0,
    textAlign: Ti.UI.TEXT_ALIGNMENT_CENTER
    });

slider.addEventListener('change', function(e) {
    label.text = String.format("%3.1f", e.value);
});
</code></pre>
 */
Ti.UI.Slider = function() {
};
Ti.UI.Slider.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    children:null,

    /**
     * <p>Image URL of the slider left track when in the disabled state.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    disabledLeftTrackImage:null,

    /**
     * <p>Image URL of the slider right track when in the disabled state.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    disabledRightTrackImage:null,

    /**
     * <p>Image URL of the slider thumb when in the disabled state.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    disabledThumbImage:null,

    /**
     * <p>Boolean to indicate the enabled state of the slider.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    enabled:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Image URL of the slider left track when in the highlighted state.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    highlightedLeftTrackImage:null,

    /**
     * <p>Image URL of the slider right track when in the highlighted state.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    highlightedRightTrackImage:null,

    /**
     * <p>Image URL of the slider thumb when in the highlighted state.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    highlightedThumbImage:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Image URL of the slider left track.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    leftTrackImage:null,

    /**
     * <p>Maximum value of the slider.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    max:null,

    /**
     * <p>Upper limit on the slider value that can be selected.</p>
     * @type Number
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    maxRange:null,

    /**
     * <p>Minimum value of the slider.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    min:null,

    /**
     * <p>Lower limit on the slider value that can be selected.</p>
     * @type Number
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    minRange:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Image URL of the slider right track.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    rightTrackImage:null,

    /**
     * <p>Image URL of the slider left track when in the selected state.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    selectedLeftTrackImage:null,

    /**
     * <p>Image URL of the slider right track when in the selected state.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    selectedRightTrackImage:null,

    /**
     * <p>Image URL of the slider thumb when in the selected state.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    selectedThumbImage:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Image for the slider thumb.</p>
     * @type String|Ti.Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    thumbImage:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>Current value of the slider.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    value:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.disabledLeftTrackImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getDisabledLeftTrackImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.disabledRightTrackImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getDisabledRightTrackImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.disabledThumbImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getDisabledThumbImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.enabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.highlightedLeftTrackImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getHighlightedLeftTrackImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.highlightedRightTrackImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getHighlightedRightTrackImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.highlightedThumbImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getHighlightedThumbImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.leftTrackImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLeftTrackImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.max} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getMax:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.maxRange} property.</p>
     * @returns Number
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getMaxRange:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.min} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getMin:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.minRange} property.</p>
     * @returns Number
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getMinRange:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.rightTrackImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getRightTrackImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.selectedLeftTrackImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getSelectedLeftTrackImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.selectedRightTrackImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getSelectedRightTrackImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.selectedThumbImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getSelectedThumbImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.size} property.</p>
     * @returns Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.thumbImage} property.</p>
     * @returns String
     * @returns Ti.Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getThumbImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.value} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Slider.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.disabledLeftTrackImage} property.</p>
     * @param {String} disabledLeftTrackImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setDisabledLeftTrackImage:function(disabledLeftTrackImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.disabledRightTrackImage} property.</p>
     * @param {String} disabledRightTrackImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setDisabledRightTrackImage:function(disabledRightTrackImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.disabledThumbImage} property.</p>
     * @param {String} disabledThumbImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setDisabledThumbImage:function(disabledThumbImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.enabled} property.</p>
     * @param {Boolean} enabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setEnabled:function(enabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.highlightedLeftTrackImage} property.</p>
     * @param {String} highlightedLeftTrackImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setHighlightedLeftTrackImage:function(highlightedLeftTrackImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.highlightedRightTrackImage} property.</p>
     * @param {String} highlightedRightTrackImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setHighlightedRightTrackImage:function(highlightedRightTrackImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.highlightedThumbImage} property.</p>
     * @param {String} highlightedThumbImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setHighlightedThumbImage:function(highlightedThumbImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.leftTrackImage} property.</p>
     * @param {String} leftTrackImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLeftTrackImage:function(leftTrackImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.max} property.</p>
     * @param {Number} max <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setMax:function(max) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.maxRange} property.</p>
     * @param {Number} maxRange <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setMaxRange:function(maxRange) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.min} property.</p>
     * @param {Number} min <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setMin:function(min) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.minRange} property.</p>
     * @param {Number} minRange <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setMinRange:function(minRange) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.rightTrackImage} property.</p>
     * @param {String} rightTrackImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setRightTrackImage:function(rightTrackImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.selectedLeftTrackImage} property.</p>
     * @param {String} selectedLeftTrackImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setSelectedLeftTrackImage:function(selectedLeftTrackImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.selectedRightTrackImage} property.</p>
     * @param {String} selectedRightTrackImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setSelectedRightTrackImage:function(selectedRightTrackImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.selectedThumbImage} property.</p>
     * @param {String} selectedThumbImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setSelectedThumbImage:function(selectedThumbImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.thumbImage} property.</p>
     * @param {String|Ti.Blob} thumbImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setThumbImage:function(thumbImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the {@link Ti.UI.Slider.value} property.</p>
     * @param {Number} value <p>New value for the {@link Ti.UI.Slider.value} property.</p>
     * @param {Dictionary} options <p>Specifies animation options. The only supported property
for this dictionary is the <code>animated</code> flag, which specifies whether
the value change should be animated. <code>animated</code> is false by default. Only used
on iOS.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setValue:function(value, options) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Slider.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>On Android, a switch can have text associated with it, and appears as either a 
checkbox or toggle button.</p>
<p>On iOS, the switch appears as an iOS on/off switch and doesn't have any text
associated with it. </p>
<p>On Mobile Web, a switch always has text associated with it, and appears as a
toggle button, similar to Android.</p>
<p>Use the {@link Ti.UI.createSwitch} method to create a switch.</p>
 * 
 * @example Simple Switch Example
 * <p>The following is a simple example of a switch and receiving <code>change</code> events.</p>
<pre><code>var basicSwitch = Ti.UI.createSwitch({
    value:false
});
basicSwitch.addEventListener('change',function(e)
{
    Ti.API.info('Basic Switch value = ' + e.value + ' act val ' + basicSwitch.value);
});
</code></pre>
 */
Ti.UI.Switch = function() {
};
Ti.UI.Switch.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    children:null,

    /**
     * <p>Color to use for switch text, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    color:null,

    /**
     * <p>Set to <code>true</code> to enable the switch, <code>false</code> to disable the switch.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    enabled:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>Font to use for the switch text.</p>
     * @type Font
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    font:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Style of the switch, either checkbox or toggle button.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    style:null,

    /**
     * <p>Text alignment, specified using one of the {@link Ti.UI} text alignment constants: {@link Ti.UI.TEXT_ALIGNMENT_LEFT}, {@link Ti.UI.TEXT_ALIGNMENT_CENTER}, or {@link Ti.UI.TEXT_ALIGNMENT_RIGHT}.</p>
     * @type String|Number
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    textAlign:null,

    /**
     * <p>text to display with checkbox. Used if style is {@link Ti.UI.Android.SWITCH_STYLE_CHECKBOX}</p>
     * @type String
     * @since 0.8 (Android)
     */
    title:null,

    /**
     * <p>Text to display when a toggle button-style switch is toggled on.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    titleOff:null,

    /**
     * <p>Text to display when a toggle button-style switch is toggled off.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    titleOn:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>Current switch value, <code>true</code> if the switch is on, and <code>false</code> if switch is off.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    value:null,

    /**
     * <p>Vertical alignment for the text field, specified using one of the 
vertical alignment constants from {@link Ti.UI}: 
{@link Ti.UI.TEXT_VERTICAL_ALIGNMENT_BOTTOM}, 
{@link Ti.UI.TEXT_VERTICAL_ALIGNMENT_CENTER}, or 
{@link Ti.UI.TEXT_VERTICAL_ALIGNMENT_TOP}.</p>
     * @type Number|String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    verticalAlign:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.color} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.enabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.font} property.</p>
     * @returns Font
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getFont:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.size} property.</p>
     * @returns Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.style} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.textAlign} property.</p>
     * @returns String
     * @returns Number
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getTextAlign:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.title} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.titleOff} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getTitleOff:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.titleOn} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getTitleOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.value} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.verticalAlign} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getVerticalAlign:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Switch.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.color} property.</p>
     * @param {String} color <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setColor:function(color) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.enabled} property.</p>
     * @param {Boolean} enabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setEnabled:function(enabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.font} property.</p>
     * @param {Font} font <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setFont:function(font) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.style} property.</p>
     * @param {Number} style <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setStyle:function(style) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.textAlign} property.</p>
     * @param {String|Number} textAlign <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setTextAlign:function(textAlign) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setTitle:function(title) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.titleOff} property.</p>
     * @param {String} titleOff <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setTitleOff:function(titleOff) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.titleOn} property.</p>
     * @param {String} titleOn <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setTitleOn:function(titleOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.value} property.</p>
     * @param {Boolean} value <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setValue:function(value) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.verticalAlign} property.</p>
     * @param {Number|String} verticalAlign <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setVerticalAlign:function(verticalAlign) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Switch.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>A <code>TabGroup</code> tab instance. Each tab includes a button and one or more windows, which 
holds the "contents" of the tab. Users can select a tab by clicking on the tab button.</p>
<p>Use {@link Ti.UI.TabGroup.setActiveTab} to switch between tabs 
in a tab group. The {@link Ti.UI.currentTab} property provides a global reference to 
the currently active tab. Use the {@link Ti.UI.createTab} method to create a tab.</p>
<p>The behavior of tabs and tab groups follows the platform's native navigation style, 
which varies significantly between platforms.</p>
<h4>iOS and Mobile Web Platform Implementation Notes</h4>
<p>On iOS and Mobile Web, the tab maintains a stack of windows. On Mobile Web, the tab is 
really just a {@link Ti.UI.MobileWeb.NavigationGroup}. Windows on top 
of the stack can partially or totally obscure windows lower in the stack.  Calling 
{@link Ti.UI.Tab.open} opens a new window on top of the window stack. When a window 
is closed, either by the user or by code, the window is removed from the stack, making 
the previous window visible. The root tab window cannot be removed. </p>
<p>On iOS and Mobile Web the tab controls are generally kept on screen to allow a user to 
navigate inside the app. Tab controls are hidden when the user is performing a modal 
task (for example, composing a message). In this case, the app should provide a button 
in the navigation bar to return to the previous screen. On iOS, the window should also 
be opened as modal. On iOS, The tab controls can also be hidden by opening the new window 
with {@link Ti.UI.Window.tabBarHidden} set to <code>true</code>.</p>
<p>When closing a tab window in iOS and Mobile Web, you should always use the 
{@link Ti.UI.Tab.close} method to ensure that the tab group maintains its 
navigation state.</p>
<h4>Android Platform Implementation Notes</h4>
<p>On Android, the tab does not maintain a stack of windows. 
Calling {@link Ti.UI.Tab.open} opens a new, heavyweight window, which 
by default covers the tab group entirely. This seems quite different from the iOS model,
but it is the standard model for Android applications. Users can use the <strong>Back</strong> button 
to close the window and return to the tab group. </p>
<p>On Android, tab windows can be closed using either
{@link Ti.UI.Tab.close} or {@link Ti.UI.Window.close}. Since 
no window stack is maintained, only a single window opened using
{@link Ti.UI.Tab.open} can be closed using <code>Tab.close</code>.</p>
<p>As on iOS, the root tab window cannot be closed.</p>
 * 
 * @example Simple Tab Example
 * <p>In this example, we create a simple tab and add it to a tab group.</p>
<pre><code>var tab = Ti.UI.createTab({
    window:mywin,
    title:'Hello',
    icon:'myicon.png'
});
tabGroup.addTab(tab);
</code></pre>
 */
Ti.UI.Tab = function() {
};
Ti.UI.Tab.prototype = {

    /**
     * <p><code>true</code> if this tab is active, <code>false</code> if it is not. </p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    active:null,

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Badge value for this tab. <code>null</code> indicates no badge.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    badge:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    children:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Icon URL for this tab.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    icon:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Title for this tab.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    title:null,

    /**
     * <p>Key identifying a string from the locale file to use for the tab title. Only one of <code>title</code> or <code>titleid</code> should be specified.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    titleid:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Root level tab window.  All tabs must have at least one root level tab window.</p>
     * @type Ti.UI.Window
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    window:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Closes the top-level window for this tab.</p>
     * @param {Ti.UI.Window} window <p>Window to close. This parameter <strong>must</strong> be omitted on Android.</p>
     * @param {Object} options <p>Dictionary of display and animation settings to use when opening the window. Identical to the <code>options</code> parameter to {@link Ti.UI.Window.close}.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    close:function(window, options) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.active} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getActive:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.badge} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBadge:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.icon} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getIcon:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.size} property.</p>
     * @returns Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.title} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.titleid} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTitleid:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.window} property.</p>
     * @returns Ti.UI.Window
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWindow:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Tab.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Opens a new window.</p>
     * @param {Ti.UI.Window} window <p>Window to open.</p>
     * @param {Object} options <p>Dictionary of display and animation settings to use when opening the window. Identical to the <code>options</code> parameter to {@link Ti.UI.Window.open}.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    open:function(window, options) {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.active} property.</p>
     * @param {Boolean} active <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setActive:function(active) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.badge} property.</p>
     * @param {String} badge <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBadge:function(badge) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.icon} property.</p>
     * @param {String} icon <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setIcon:function(icon) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTitle:function(title) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.titleid} property.</p>
     * @param {String} titleid <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTitleid:function(titleid) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.window} property.</p>
     * @param {Ti.UI.Window} window <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWindow:function(window) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Tab.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Use the {@link Ti.UI.createTabGroup} method to create a tab group.</p>
<p>A tab group can contain one or more {@link Ti.UI.Tab} objects, each of which has an 
associated tab control that is used to bring it into focus.</p>
<p>You can add tabs to the group using {@link Ti.UI.TabGroup.addTab}, and programmatically 
switch to a specific tab using {@link Ti.UI.TabGroup.setActiveTab}.</p>
<h4>Platform Implementation Notes</h4>
<p>When using a tab group, note the following differences between platforms.</p>
<p>The tab group controls are positioned at the top of the display on Android and at the bottom 
on iOS.</p>
<p>On Android, only one tab group may exist at one time. A tab group may be closed to allow a new 
one to be opened later, but the root of the application must be a heavyweight window to prevent 
it exiting. Tabs cannot be removed from the tab group once added, and tabs cannot be reordered.</p>
<p>On iOS, more than one tab group may exist, and the may be opened and closed as required. 
Each tab can contain a stack of windows, and the user can switch between them by tapping the 
tab's associated control. Tabs can be removed, and the user may (optionally) be allowed to 
reorder tabs.</p>
<p>On iOS and Mobile Web, it is also possible to add tabs by updating the 
{@link Ti.UI.TabGroup.tabs} property, and to switch active tabs by setting the 
{@link Ti.UI.Tab.active} property on one of the tabs to <code>true</code>. Since these mechanisms 
are platform-specific, it is recommended that you use <code>addTab</code> and <code>setActiveTab</code> instead.</p>
<p>If you use the iOS/Mobile Web-specific mechanisms, it is possible to add multiple active tabs 
to a tab group. In this case, the result of which tab is initially selected is undefined.</p>
<h4>Further Reading</h4>
<p>If using tab groups on iOS, see the "Tab Bar" section of Apple's official 
{@link https://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/MobileHIG/UIElementGuidelines/UIElementGuidelines.html#//apple_ref/doc/uid/TP40006556}.</p>
 */
Ti.UI.TabGroup = function() {
};
Ti.UI.TabGroup.prototype = {

    /**
     * <p>Active tab.</p>
     * @type Ti.UI.Tab
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    activeTab:null,

    /**
     * <p>Default background color for the active tab, as a color name or hex triplet.</p>
     * @type String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    activeTabBackgroundColor:null,

    /**
     * <p>Default background disabled color for the active tab.</p>
     * @type String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    activeTabBackgroundDisabledColor:null,

    /**
     * <p>Default background disabled image for the active tab.</p>
     * @type String
     * @since 1.9.0 (Android), 1.9.0 (Mobile Web)
     */
    activeTabBackgroundDisabledImage:null,

    /**
     * <p>Default background focused color for the active tab, as a color name or hex triplet.</p>
     * @type String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    activeTabBackgroundFocusedColor:null,

    /**
     * <p>Default background focused image for the active tab.</p>
     * @type String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    activeTabBackgroundFocusedImage:null,

    /**
     * <p>Default background image for the active tab.</p>
     * @type String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    activeTabBackgroundImage:null,

    /**
     * <p>Default background selected color for the active tab, as a color name or hex triplet.</p>
     * @type String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    activeTabBackgroundSelectedColor:null,

    /**
     * <p>Default background selected image for the active tab.</p>
     * @type String
     * @since 1.9.0 (Android), 1.9.0 (Mobile Web)
     */
    activeTabBackgroundSelectedImage:null,

    /**
     * <p>Allow the user to reorder tabs in the tab group using the <strong>Edit</strong> button on the <strong>More</strong> 
tab.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    allowUserCustomization:null,

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Default navigation bar color (typically for the <strong>More</strong> tab), as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    barColor:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    children:null,

    /**
     * <p>Title for the edit button on the <strong>More</strong> tab.</p>
     * @type String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    editButtonTitle:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Color of the divider between tabs, as a color name or hex triplet.</p>
     * @type String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    tabDividerColor:null,

    /**
     * <p>Width of the divider between tabs.</p>
     * @type Number|String
     * @since 1.9.0 (Android), 1.9.0 (Mobile Web)
     */
    tabDividerWidth:null,

    /**
     * <p>Height of the tabs.</p>
     * @type Number|String
     * @since 1.9.0 (Mobile Web)
     */
    tabHeight:null,

    /**
     * <p>Tabs managed by the tab group.</p>
     * @type Array<Ti.UI.Tab>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    tabs:null,

    /**
     * <p>Determines whether the tabs should be positioned at the top rather than the bottom of the 
screen.</p>
     * @type Boolean
     * @since 1.9.0 (Mobile Web)
     */
    tabsAtBottom:null,

    /**
     * <p>Default background color for tabs, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    tabsBackgroundColor:null,

    /**
     * <p>Default background disabled color for tabs, as a color name or hex triplet.</p>
     * @type String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    tabsBackgroundDisabledColor:null,

    /**
     * <p>Default background disabled image for tabs.</p>
     * @type String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    tabsBackgroundDisabledImage:null,

    /**
     * <p>Default background focused color for tabs, as a color name or hex triplet.</p>
     * @type String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    tabsBackgroundFocusedColor:null,

    /**
     * <p>Default background focused image for tabs.</p>
     * @type String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    tabsBackgroundFocusedImage:null,

    /**
     * <p>Default background image for tabs.</p>
     * @type String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    tabsBackgroundImage:null,

    /**
     * <p>Default background selected color for tabs, as a color name or hex triplet.</p>
     * @type String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    tabsBackgroundSelectedColor:null,

    /**
     * <p>Default background selected image for tabs.</p>
     * @type String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    tabsBackgroundSelectedImage:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Determines how the tab group is treated when a soft input method (such as a virtual keyboard) 
is displayed.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    windowSoftInputMode:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Adds a tab to the tab group.</p>
     * @param {Ti.UI.Tab} tab <p>Tab to add.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addTab:function(tab) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Closes the tab group and removes it from the UI.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    close:function() {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the currently-active tab.</p>
     * @returns Ti.UI.Tab
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getActiveTab:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.activeTabBackgroundColor} property.</p>
     * @returns String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    getActiveTabBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.activeTabBackgroundDisabledColor} property.</p>
     * @returns String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    getActiveTabBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.activeTabBackgroundDisabledImage} property.</p>
     * @returns String
     * @since 1.9.0 (Android), 1.9.0 (Mobile Web)
     */
    getActiveTabBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.activeTabBackgroundFocusedColor} property.</p>
     * @returns String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    getActiveTabBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.activeTabBackgroundFocusedImage} property.</p>
     * @returns String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    getActiveTabBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.activeTabBackgroundImage} property.</p>
     * @returns String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    getActiveTabBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.activeTabBackgroundSelectedColor} property.</p>
     * @returns String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    getActiveTabBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.activeTabBackgroundSelectedImage} property.</p>
     * @returns String
     * @since 1.9.0 (Android), 1.9.0 (Mobile Web)
     */
    getActiveTabBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.allowUserCustomization} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAllowUserCustomization:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.anchorPoint} property.</p>
     * @returns Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.backgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.backgroundImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.barColor} property.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBarColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.borderColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.borderRadius} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.borderWidth} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.center} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.editButtonTitle} property.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getEditButtonTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.focusable} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.layout} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.opacity} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.size} property.</p>
     * @returns Dimension
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.tabDividerColor} property.</p>
     * @returns String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    getTabDividerColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.tabDividerWidth} property.</p>
     * @returns Number
     * @returns String
     * @since 1.9.0 (Android), 1.9.0 (Mobile Web)
     */
    getTabDividerWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.tabHeight} property.</p>
     * @returns Number
     * @returns String
     * @since 1.9.0 (Mobile Web)
     */
    getTabHeight:function() {
    },

    /**
     * <p>Gets all tabs that are managed by the tab group.</p>
     * @returns Array<Ti.UI.Tab>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTabs:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.tabsAtBottom} property.</p>
     * @returns Boolean
     * @since 1.9.0 (Mobile Web)
     */
    getTabsAtBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.tabsBackgroundColor} property.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTabsBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.tabsBackgroundDisabledColor} property.</p>
     * @returns String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    getTabsBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.tabsBackgroundDisabledImage} property.</p>
     * @returns String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    getTabsBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.tabsBackgroundFocusedColor} property.</p>
     * @returns String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    getTabsBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.tabsBackgroundFocusedImage} property.</p>
     * @returns String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    getTabsBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.tabsBackgroundImage} property.</p>
     * @returns String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    getTabsBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.tabsBackgroundSelectedColor} property.</p>
     * @returns String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    getTabsBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.tabsBackgroundSelectedImage} property.</p>
     * @returns String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    getTabsBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.visible} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.windowSoftInputMode} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getWindowSoftInputMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabGroup.zIndex} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Opens the tab group and makes it visible.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    open:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Removes a tab from the tab group.</p>
     * @param {Ti.UI.Tab} tab <p>Tab to remove.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeTab:function(tab) {
    },

    /**
     * <p>Selects the currently active tab in a tab group.</p>
     * @param {Number|Ti.UI.Tab} indexOrObject <p>Index or object of the tab to switch to.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setActiveTab:function(indexOrObject) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.activeTabBackgroundColor} property.</p>
     * @param {String} activeTabBackgroundColor <p>New value for the property.</p>
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    setActiveTabBackgroundColor:function(activeTabBackgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.activeTabBackgroundDisabledColor} property.</p>
     * @param {String} activeTabBackgroundDisabledColor <p>New value for the property.</p>
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    setActiveTabBackgroundDisabledColor:function(activeTabBackgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.activeTabBackgroundDisabledImage} property.</p>
     * @param {String} activeTabBackgroundDisabledImage <p>New value for the property.</p>
     * @since 1.9.0 (Android), 1.9.0 (Mobile Web)
     */
    setActiveTabBackgroundDisabledImage:function(activeTabBackgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.activeTabBackgroundFocusedColor} property.</p>
     * @param {String} activeTabBackgroundFocusedColor <p>New value for the property.</p>
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    setActiveTabBackgroundFocusedColor:function(activeTabBackgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.activeTabBackgroundFocusedImage} property.</p>
     * @param {String} activeTabBackgroundFocusedImage <p>New value for the property.</p>
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    setActiveTabBackgroundFocusedImage:function(activeTabBackgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.activeTabBackgroundImage} property.</p>
     * @param {String} activeTabBackgroundImage <p>New value for the property.</p>
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    setActiveTabBackgroundImage:function(activeTabBackgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.activeTabBackgroundSelectedColor} property.</p>
     * @param {String} activeTabBackgroundSelectedColor <p>New value for the property.</p>
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    setActiveTabBackgroundSelectedColor:function(activeTabBackgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.activeTabBackgroundSelectedImage} property.</p>
     * @param {String} activeTabBackgroundSelectedImage <p>New value for the property.</p>
     * @since 1.9.0 (Android), 1.9.0 (Mobile Web)
     */
    setActiveTabBackgroundSelectedImage:function(activeTabBackgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.allowUserCustomization} property.</p>
     * @param {Boolean} allowUserCustomization <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAllowUserCustomization:function(allowUserCustomization) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.barColor} property.</p>
     * @param {String} barColor <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBarColor:function(barColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.editButtonTitle} property.</p>
     * @param {String} editButtonTitle <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setEditButtonTitle:function(editButtonTitle) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.tabDividerColor} property.</p>
     * @param {String} tabDividerColor <p>New value for the property.</p>
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    setTabDividerColor:function(tabDividerColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.tabDividerWidth} property.</p>
     * @param {Number|String} tabDividerWidth <p>New value for the property.</p>
     * @since 1.9.0 (Android), 1.9.0 (Mobile Web)
     */
    setTabDividerWidth:function(tabDividerWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.tabHeight} property.</p>
     * @param {Number|String} tabHeight <p>New value for the property.</p>
     * @since 1.9.0 (Mobile Web)
     */
    setTabHeight:function(tabHeight) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.tabs} property.</p>
     * @param {Array<Ti.UI.Tab>} tabs <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTabs:function(tabs) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.tabsAtBottom} property.</p>
     * @param {Boolean} tabsAtBottom <p>New value for the property.</p>
     * @since 1.9.0 (Mobile Web)
     */
    setTabsAtBottom:function(tabsAtBottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.tabsBackgroundColor} property.</p>
     * @param {String} tabsBackgroundColor <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTabsBackgroundColor:function(tabsBackgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.tabsBackgroundDisabledColor} property.</p>
     * @param {String} tabsBackgroundDisabledColor <p>New value for the property.</p>
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    setTabsBackgroundDisabledColor:function(tabsBackgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.tabsBackgroundDisabledImage} property.</p>
     * @param {String} tabsBackgroundDisabledImage <p>New value for the property.</p>
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    setTabsBackgroundDisabledImage:function(tabsBackgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.tabsBackgroundFocusedColor} property.</p>
     * @param {String} tabsBackgroundFocusedColor <p>New value for the property.</p>
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    setTabsBackgroundFocusedColor:function(tabsBackgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.tabsBackgroundFocusedImage} property.</p>
     * @param {String} tabsBackgroundFocusedImage <p>New value for the property.</p>
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    setTabsBackgroundFocusedImage:function(tabsBackgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.tabsBackgroundImage} property.</p>
     * @param {String} tabsBackgroundImage <p>New value for the property.</p>
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    setTabsBackgroundImage:function(tabsBackgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.tabsBackgroundSelectedColor} property.</p>
     * @param {String} tabsBackgroundSelectedColor <p>New value for the property.</p>
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    setTabsBackgroundSelectedColor:function(tabsBackgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.tabsBackgroundSelectedImage} property.</p>
     * @param {String} tabsBackgroundSelectedImage <p>New value for the property.</p>
     * @since 1.9.0 (iPhone), 1.9.0 (iPad), 1.9.0 (Mobile Web)
     */
    setTabsBackgroundSelectedImage:function(tabsBackgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabGroup.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: iPhone, iPad
 * @namespace <p>This object has been deprecated and moved to {@link Ti.UI.iOS.TabbedBar}.</p>
<p>A tabbed bar is a button bar that
maintains a state (visually distinguished as a pressed or selected look).
It is closely related to the <code>ButtonBar</code> control. See the description of 
{@link Ti.UI.ButtonBar} for information on styling tabbed bars and buttons
bars.</p>
<p>Use the {@link Ti.UI.createTabbedBar} method to create a Tabbed Bar.</p>
 * 
 * @example Simple Tabbed Bar with 3 items
 * <p>var bb1 = Ti.UI.createTabbedBar({
    labels:['One', 'Two', 'Three'],
    backgroundColor:'#336699',
    top:50,
    style:Ti.UI.iPhone.SystemButtonStyle.BAR,
    height:25,
    width:200
});
win.add(bb1);</p>
 */
Ti.UI.TabbedBar = function() {
};
Ti.UI.TabbedBar.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    children:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    height:null,

    /**
     * <p>Index of the currently selected button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    index:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Array of labels for the tabbed bar.</p>
     * @type Array<String>|Array<BarItemType>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    labels:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    right:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Style of the tabbed bar.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    style:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.borderColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.center} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.index} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getIndex:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.labels} property.</p>
     * @returns Array<String>
     * @returns Array<BarItemType>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLabels:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.layout} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.opacity} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.size} property.</p>
     * @returns Dimension
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.style} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TabbedBar.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.index} property.</p>
     * @param {Number} index <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setIndex:function(index) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.labels} property.</p>
     * @param {Array<String>|Array<BarItemType>} labels <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLabels:function(labels) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.style} property.</p>
     * @param {Number} style <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setStyle:function(style) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TabbedBar.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>A table view can contain a set of {@link Ti.UI.TableViewRow}s, each displaying 
an item of data. The default <code>TableViewRow</code> has properties for adding text, as well as 
optional images on the left and right sides, and various system-provided indicators, 
such as check marks. Table view rows can also be fully customized by adding child views, 
such as labels, buttons, or image views.</p>
<p>When adding rows to a table view, each row can be passed as a 
{@link Ti.UI.TableViewRow} object, or as dictionary specifying 
the properties for a table row, in which case the <code>TableView</code> will create 
<code>TableViewRow</code> objects as needed. </p>
<p>Use the {@link Ti.UI.createTableView} method to create a table view.</p>
 * 
 * @example Simple Table View with Basic Rows
 * <p>The most basic example of a table view.</p>
<pre><code>var data = [{title:"Row 1"},{title:"Row 2"}];
var table = Ti.UI.createTableView({data:data});
win.add(table);
</code></pre>
 */
Ti.UI.TableView = function() {
};
Ti.UI.TableView.prototype = {

    /**
     * <p>True if the rows can be selected.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    allowsSelection:null,

    /**
     * <p>True if the rows can be selected while editing the table.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    allowsSelectionDuringEditing:null,

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    children:null,

    /**
     * <p>Array of objects to be used for the rows of the table view.</p>
     * @type Array<Ti.UI.TableViewRow>|Array<Ti.UI.TableViewSection>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    data:null,

    /**
     * <p>Allow the user to edit the table view (this must be <code>true</code> for swipe-to-delete).</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    editable:null,

    /**
     * <p>Boolean to control the editing state of the table view.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    editing:null,

    /**
     * <p>Filter attribute to be used when searching.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    filterAttribute:null,

    /**
     * <p>Boolean to indicate if the search should be case sensitive or case insensitive.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    filterCaseInsensitive:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>Table view footer title.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    footerTitle:null,

    /**
     * <p>Table view footer as a view that will be rendered instead of a label.</p>
     * @type Ti.UI.View
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    footerView:null,

    /**
     * <p>Table view header title.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    headerTitle:null,

    /**
     * <p>Table view header as a view that will be rendered instead of a label.</p>
     * @type Ti.UI.View
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    headerView:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Boolean to indicate whether or not the search field should hide on completion.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    hideSearchOnSelection:null,

    /**
     * <p>Array of objects (with <code>title</code> and <code>index</code> properties) to control the table view index.</p>
     * @type Array<TableViewIndexEntry>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    index:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Maximum row height for table view rows.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    maxRowHeight:null,

    /**
     * <p>Minimum row height for table view rows.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    minRowHeight:null,

    /**
     * <p>Boolean to control the moveable state of the table view.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    moving:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Default row height for table view rows.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    rowHeight:null,

    /**
     * <p>If <code>true</code>, the tableview can be scrolled.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    scrollable:null,

    /**
     * <p>Search field to use for the table view.</p>
     * @type Ti.UI.SearchBar
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    search:null,

    /**
     * <p>Boolean to control the visibility of the search field.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    searchHidden:null,

    /**
     * <p>Separator color between rows, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    separatorColor:null,

    /**
     * <p>Separator style constant.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    separatorStyle:null,

    /**
     * <p>Whether table view displays vertical scroll indicator</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    showVerticalScrollIndicator:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Style of the table view, specified using one of the constants from {@link Ti.UI.iPhone.TableViewStyle}.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    style:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Appends one or more rows to the table.</p>
     * @param {Ti.UI.TableViewRow|Dictionary<Ti.UI.TableViewRow>|Array<Ti.UI.TableViewRow>|Array<Dictionary<Ti.UI.TableViewRow>>} row <p>If appending a single row, this should contain only the row being appended. If appending multiple rows, this should be an array of the rows being appended.</p>
     * @param {TableViewAnimationProperties} properties <p>Animation properties, only used on iOS.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    appendRow:function(row, properties) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Deletes an existing row.</p>
     * @param {Number} row <p>Index of the row to delete.</p>
     * @param {TableViewAnimationProperties} properties <p>Animation properties. Only used on iOS.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    deleteRow:function(row, properties) {
    },

    /**
     * <p>Programmatically deselects a row.</p>
     * @param {Number} row <p>Row index to deselect.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    deselectRow:function(row) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.allowsSelection} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAllowsSelection:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.allowsSelectionDuringEditing} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAllowsSelectionDuringEditing:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.data} property.</p>
     * @returns Array<Ti.UI.TableViewRow>
     * @returns Array<Ti.UI.TableViewSection>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getData:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.editable} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getEditable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.editing} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getEditing:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.filterAttribute} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getFilterAttribute:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.filterCaseInsensitive} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getFilterCaseInsensitive:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.footerTitle} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFooterTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.footerView} property.</p>
     * @returns Ti.UI.View
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFooterView:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.headerTitle} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeaderTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.headerView} property.</p>
     * @returns Ti.UI.View
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeaderView:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.hideSearchOnSelection} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getHideSearchOnSelection:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.index} property.</p>
     * @returns Array<TableViewIndexEntry>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getIndex:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.maxRowHeight} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getMaxRowHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.minRowHeight} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getMinRowHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.moving} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getMoving:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.rowHeight} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRowHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.scrollable} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getScrollable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.search} property.</p>
     * @returns Ti.UI.SearchBar
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getSearch:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.searchHidden} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getSearchHidden:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.separatorColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSeparatorColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.separatorStyle} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSeparatorStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.showVerticalScrollIndicator} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getShowVerticalScrollIndicator:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.size} property.</p>
     * @returns Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.style} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableView.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Inserts a row after another row.</p>
     * @param {Number} index <p>Index of the row to insert after.</p>
     * @param {Ti.UI.TableViewRow|Dictionary<Ti.UI.TableViewRow>} row <p>Row to insert.</p>
     * @param {TableViewAnimationProperties} properties <p>Animation properties. Only used on iOS.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    insertRowAfter:function(index, row, properties) {
    },

    /**
     * <p>Inserts a row before another row.</p>
     * @param {Number} index <p>Index of the row to insert before.</p>
     * @param {Ti.UI.TableViewRow|Dictionary<Ti.UI.TableViewRow>} row <p>Row to insert.</p>
     * @param {TableViewAnimationProperties} properties <p>Animation properties. Only used on iOS.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    insertRowBefore:function(index, row, properties) {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Scrolls the table view to ensure that the specified row is on screen.</p>
     * @param {Number} index <p>Row index to scroll to.</p>
     * @param {TableViewAnimationProperties} properties <p>Animation properties. Only used on iOS.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    scrollToIndex:function(index, properties) {
    },

    /**
     * <p>Scrolls the table to a specific top position where 0 is the topmost y position in the table view.</p>
     * @param {Number} top <p>Y position for the top of the table view.</p>
     * @param {TableViewAnimationProperties} properties <p>Animation properties. Only used on iOS.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    scrollToTop:function(top, properties) {
    },

    /**
     * <p>Programmatically selects a row.</p>
     * @param {Number} row <p>Row index to select.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    selectRow:function(row) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.allowsSelection} property.</p>
     * @param {Boolean} allowsSelection <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAllowsSelection:function(allowsSelection) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.allowsSelectionDuringEditing} property.</p>
     * @param {Boolean} allowsSelectionDuringEditing <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAllowsSelectionDuringEditing:function(allowsSelectionDuringEditing) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the tableviews content insets.</p>
     * @param {TableViewEdgeInsets} edgeInsets <p>Dictionary of values specifying the <code>top</code> , <code>bottom</code>, <code>left</code>, <code>right</code> insets.</p>
     * @param {TableViewContentInsetOption} animated <p>Determines whether the content inset change should be animated.</p>
     * @since 2.1.0 (iPhone), 2.1.0 (iPad)
     */
    setContentInsets:function(edgeInsets, animated) {
    },

    /**
     * <p>Sets the data in the table.</p>
     * @param {Array<Ti.UI.TableViewRow>|Array<Dictionary<Ti.UI.TableViewRow>>|Array<Ti.UI.TableViewSection>} data <p>Array of rows (or sections).</p>
     * @param {TableViewAnimationProperties} properties <p>Animation properties. Only used on iOS.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setData:function(data, properties) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.editable} property.</p>
     * @param {Boolean} editable <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setEditable:function(editable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.editing} property.</p>
     * @param {Boolean} editing <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setEditing:function(editing) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.filterAttribute} property.</p>
     * @param {String} filterAttribute <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setFilterAttribute:function(filterAttribute) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.filterCaseInsensitive} property.</p>
     * @param {Boolean} filterCaseInsensitive <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setFilterCaseInsensitive:function(filterCaseInsensitive) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.footerTitle} property.</p>
     * @param {String} footerTitle <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setFooterTitle:function(footerTitle) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.footerView} property.</p>
     * @param {Ti.UI.View} footerView <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setFooterView:function(footerView) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.headerTitle} property.</p>
     * @param {String} headerTitle <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeaderTitle:function(headerTitle) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.headerView} property.</p>
     * @param {Ti.UI.View} headerView <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeaderView:function(headerView) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.hideSearchOnSelection} property.</p>
     * @param {Boolean} hideSearchOnSelection <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setHideSearchOnSelection:function(hideSearchOnSelection) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.index} property.</p>
     * @param {Array<TableViewIndexEntry>} index <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setIndex:function(index) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.maxRowHeight} property.</p>
     * @param {Number} maxRowHeight <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setMaxRowHeight:function(maxRowHeight) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.minRowHeight} property.</p>
     * @param {Number} minRowHeight <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setMinRowHeight:function(minRowHeight) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.moving} property.</p>
     * @param {Boolean} moving <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setMoving:function(moving) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.rowHeight} property.</p>
     * @param {Number} rowHeight <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRowHeight:function(rowHeight) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.scrollable} property.</p>
     * @param {Boolean} scrollable <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setScrollable:function(scrollable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.search} property.</p>
     * @param {Ti.UI.SearchBar} search <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setSearch:function(search) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.searchHidden} property.</p>
     * @param {Boolean} searchHidden <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setSearchHidden:function(searchHidden) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.separatorColor} property.</p>
     * @param {String} separatorColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSeparatorColor:function(separatorColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.separatorStyle} property.</p>
     * @param {Number} separatorStyle <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSeparatorStyle:function(separatorStyle) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.showVerticalScrollIndicator} property.</p>
     * @param {Boolean} showVerticalScrollIndicator <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setShowVerticalScrollIndicator:function(showVerticalScrollIndicator) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.style} property.</p>
     * @param {Number} style <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setStyle:function(style) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableView.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    },

    /**
     * <p>Updates an existing row, optionally with animation</p>
     * @param {Number} index <p>Index of the row to update.</p>
     * @param {Ti.UI.TableViewRow} row <p>Row data to update.</p>
     * @param {TableViewAnimationProperties} properties <p>Animation properties. Only used on iOS.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    updateRow:function(index, row, properties) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Use the {@link Ti.UI.createTableViewRow} method to create a table view row.</p>
<p>A table view row represents a single item in a <code>TableView</code>. The row's contents can be as simple 
as a single line of text, or the row can be a completely customized with its own child views.</p>
<p>A basic table view row includes properties for setting:</p>
<ul>
<li>Row title to display the text content on the row.</li>
<li>Optional images on the left and right sides of the row.</li>
<li>Optional system decorations, such as checkboxes.</li>
</ul>
<p>The usual view properties may also be set, such as background color and background image.</p>
<p>If a custom layout is needed, such as multiple lines of text, different fonts, or additional 
images or controls, child views may be added to the row. In this case, row <code>title</code> property 
should not be set.</p>
<p>In order to enable good performance, each group of rows with the same layout should be given a 
<code>className</code> of the same value. The content of the elements inside the rows may be different so, 
for example, if the text is the only thing different between two cells but the layout is the 
same, both row instances should have the same value for <code>className</code>.</p>
<p>As events automatically bubble/propogate to parent views, a listener may be placed on the table 
view to detect events fired from the rows. The benefit is that it is not necessary to 
explicitly create a listener for every individual row.</p>
<h4>Platform Implementation Notes</h4>
<p>The <code>top</code>, <code>left</code> and other positional parameters are not used for their usual purposes, because 
the table view row is automatically positioned by its parent.</p>
<p>On Android, these properties are used to position the content (title) inside the row. For example, 
setting <code>top</code> to 20 moves the title down from the top of the row.<br />
</p>
<p>On iOS, these values have no effect.</p>
<p>On Mobile Web, they are used to relatively position the row, treating the <code>TableView</code> as if it 
were a horizontal layout.</p>
<p>Also, note that the selected text color, <code>selectedColor</code>, can only be set on iOS and 
Mobile Web. On Android, the text color does not change when the row is selected.</p>
 * 
 * @example Simple Table View Row example
 * <p>In this simple example, we create a table view row with a red square in the cell.</p>
<pre><code>var row = Ti.UI.createTableViewRow();
var view = Ti.UI.createView({backgroundColor:'red',width:20,height:20});
row.height = 'auto';
row.add(view);
</code></pre>
 */
Ti.UI.TableViewRow = function() {
};
Ti.UI.TableViewRow.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    children:null,

    /**
     * <p>Class name for the row.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    className:null,

    /**
     * <p>Default text color of the row when not selected, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    color:null,

    /**
     * <p>Determines whether this row can be deleted when the table is in edit mode.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    editable:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    focusable:null,

    /**
     * <p>Font to use for the row title.</p>
     * @type Font
     * @since 0.9 (Android)
     */
    font:null,

    /**
     * <p>Render a system-provided check mark in the right image area of the row.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hasCheck:null,

    /**
     * <p>Render a system provided arrow in the right image area of the row.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hasChild:null,

    /**
     * <p>Render a system-provided detail disclosure button in the right image area of the row.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    hasDetail:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Indention level for the row.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    indentionLevel:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Image to render in the left image area of the row, specified as a local path or URL.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    leftImage:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Image to render in the right image area of the row, specified as a local path or URL.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    rightImage:null,

    /**
     * <p>Background color to render when the row is selected, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    selectedBackgroundColor:null,

    /**
     * <p>Background image to render when the row is selected.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    selectedBackgroundImage:null,

    /**
     * <p>Color of the row text when the row is selected, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    selectedColor:null,

    /**
     * <p>Selection style constant to control the selection color.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    selectionStyle:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Text to display on the row.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    title:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.anchorPoint} property.</p>
     * @returns Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.backgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.backgroundImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.borderColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.borderRadius} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.borderWidth} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.center} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.className} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getClassName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.color} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.editable} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getEditable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.focusable} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.font} property.</p>
     * @returns Font
     * @since 0.9 (Android)
     */
    getFont:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.hasCheck} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHasCheck:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.hasChild} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHasChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.hasDetail} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getHasDetail:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.indentionLevel} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getIndentionLevel:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.layout} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.leftImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeftImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.opacity} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.rightImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRightImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.selectedBackgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSelectedBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.selectedBackgroundImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSelectedBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.selectedColor} property.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.selectionStyle} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getSelectionStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.size} property.</p>
     * @returns Dimension
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.title} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.visible} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewRow.zIndex} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.className} property.</p>
     * @param {String} className <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setClassName:function(className) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.color} property.</p>
     * @param {String} color <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setColor:function(color) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.editable} property.</p>
     * @param {Boolean} editable <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setEditable:function(editable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.font} property.</p>
     * @param {Font} font <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setFont:function(font) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.hasCheck} property.</p>
     * @param {Boolean} hasCheck <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHasCheck:function(hasCheck) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.hasChild} property.</p>
     * @param {Boolean} hasChild <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHasChild:function(hasChild) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.hasDetail} property.</p>
     * @param {Boolean} hasDetail <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setHasDetail:function(hasDetail) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.indentionLevel} property.</p>
     * @param {Number} indentionLevel <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setIndentionLevel:function(indentionLevel) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.leftImage} property.</p>
     * @param {String} leftImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeftImage:function(leftImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.rightImage} property.</p>
     * @param {String} rightImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRightImage:function(rightImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.selectedBackgroundColor} property.</p>
     * @param {String} selectedBackgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setSelectedBackgroundColor:function(selectedBackgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.selectedBackgroundImage} property.</p>
     * @param {String} selectedBackgroundImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setSelectedBackgroundImage:function(selectedBackgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.selectedColor} property.</p>
     * @param {String} selectedColor <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setSelectedColor:function(selectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.selectionStyle} property.</p>
     * @param {Number} selectionStyle <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setSelectionStyle:function(selectionStyle) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTitle:function(title) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewRow.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * 
 * @example Simple Table View Section Example
 * <p>In this example, we create a section with the header <code>Hello</code> and add two rows to it.</p>
<pre><code>var section = Ti.UI.createTableViewSection();
section.headerTitle = "Hello";
var row1 = Ti.UI.createTableViewRow({title:"Hello 1"});
var row2 = Ti.UI.createTableViewRow({title:"Hello 2"});
section.add(row1);
section.add(row2);
tableview.add(section);
</code></pre>
 */
Ti.UI.TableViewSection = function() {
};
Ti.UI.TableViewSection.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    children:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    focusable:null,

    /**
     * <p>the title of the section footer</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    footerTitle:null,

    /**
     * <p>a view to use instead of the default label when rendering the section footer</p>
     * @type Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    footerView:null,

    /**
     * <p>the title of the section header</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    headerTitle:null,

    /**
     * <p>a view to use instead of the default label when rendering the section header</p>
     * @type Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    headerView:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>the number of rows in the section</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    rowCount:null,

    /**
     * <p>Array of rows in the section.</p>
     * @type Array<Ti.UI.TableViewRow>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    rows:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.anchorPoint} property.</p>
     * @returns Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.backgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.backgroundImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.borderColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.borderRadius} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.borderWidth} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.center} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.focusable} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.footerTitle} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getFooterTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.footerView} property.</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getFooterView:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.headerTitle} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeaderTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.headerView} property.</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeaderView:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.layout} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.opacity} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.rowCount} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRowCount:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.rows} property.</p>
     * @returns Array<Ti.UI.TableViewRow>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRows:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.size} property.</p>
     * @returns Dimension
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.visible} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TableViewSection.zIndex} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.footerTitle} property.</p>
     * @param {String} footerTitle <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setFooterTitle:function(footerTitle) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.footerView} property.</p>
     * @param {Object} footerView <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setFooterView:function(footerView) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.headerTitle} property.</p>
     * @param {String} headerTitle <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeaderTitle:function(headerTitle) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.headerView} property.</p>
     * @param {Object} headerView <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeaderView:function(headerView) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TableViewSection.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Use the {@link Ti.UI.createTextArea} method to create a text area. </p>
<p>On iOS, the <code>color</code> property is required for the text area to work
properly. This is a known issue.</p>
 * 
 * @example Basic Text Area with Customizations
 * <p>This example creates a highly customized text area.</p>
<pre><code>var win = Ti.UI.createWindow({
  backgroundColor: 'white',
  exitOnClose: true,
  fullscreen: false,
  layout: 'vertical',
  title: 'TextArea Demo'
});
var textArea = Ti.UI.createTextArea({
  value : 'I am a textarea',
  height : 70,
  width : 300,
  top : 60,
  font : {fontSize:20, fontFamily:'Marker Felt', fontWeight:'bold'},
  color : '#888',
  textAlign : 'left',
  appearance : Ti.UI.KEYBOARD_APPEARANCE_ALERT,
  keyboardType : Ti.UI.KEYBOARD_NUMBERS_PUNCTUATION,
  returnKeyType : Ti.UI.RETURNKEY_EMERGENCY_CALL,
  borderWidth : 2,
  borderColor : '#bbb',
  borderRadius : 5
});
win.add(textArea);
win.open();
</code></pre>
 * 
 * @example Text Area with Custom Keyboard Toolbar (iOS)
 * <p>On iOS, a configurable toolbar can be displayed above the virtual keyboard. 
Toolbars can be used with both text areas and text fields. See {@link Ti.UI.iOS.Toolbar}
for more information.</p>
<p>This code excerpt creates a text area with a toolbar:</p>
<p>Example using a custom keyboard toolbar:</p>
<pre><code>var send = Ti.UI.createButton({
    title : 'Send',
    style : Ti.UI.iPhone.SystemButtonStyle.DONE,
});

var camera = Ti.UI.createButton({
    systemButton : Ti.UI.iPhone.SystemButton.CAMERA,
});

var cancel = Ti.UI.createButton({
    systemButton : Ti.UI.iPhone.SystemButton.CANCEL
});

var flexSpace = Ti.UI.createButton({
    systemButton : Ti.UI.iPhone.SystemButton.FLEXIBLE_SPACE
});

var textarea = Ti.UI.createTextArea({
    color : '#000',
    value : 'Focus to see keyboard with toolbar',
    height : 120,
    width : 300,
    top : 10,
    borderColor : '#000',
    keyboardToolbar : [cancel, flexSpace, camera, flexSpace, send],
    keyboardToolbarColor : '#999',
    keyboardToolbarHeight : 40,
});
</code></pre>
 */
Ti.UI.TextArea = function() {
};
Ti.UI.TextArea.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Determines the appearance of the keyboard displayed when this text area is focused.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    appearance:null,

    /**
     * <p>Automatically convert text to clickable links.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    autoLink:null,

    /**
     * <p>Determines how text is capitalized during typing.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    autocapitalization:null,

    /**
     * <p>Determines whether misspelled words input to this text area are automatically corrected.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    autocorrect:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    children:null,

    /**
     * <p>Determines whether the value of this text area should be cleared when it is focused.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    clearOnEdit:null,

    /**
     * <p>Color of the text in this text area, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    color:null,

    /**
     * <p>Determines whether this field can be edited.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    editable:null,

    /**
     * <p>Determines whether an ellipsis (<code>...</code>) should be used to indicate truncated text.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    ellipsize:null,

    /**
     * <p>Determines whether the return key is enabled automatically when there is text in this text 
area.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    enableReturnKey:null,

    /**
     * <p>Determines whether this field is enabled.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    enabled:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>Font to use for text.</p>
     * @type Font
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    font:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Hint text to display when the field is empty.</p>
     * @type String
     * @since 0.8 (Android)
     */
    hintText:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Array of toolbar button objects or a {@link Ti.UI.iOS.Toolbar} to be used when the 
keyboard is displayed.</p>
     * @type Array<Ti.UI.View>|Ti.UI.iOS.Toolbar
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    keyboardToolbar:null,

    /**
     * <p>Color of the keyboard toolbar if keyboardToolbar is an array, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    keyboardToolbarColor:null,

    /**
     * <p>Height of the keyboard toolbar if keyboardToolbar is an array.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    keyboardToolbarHeight:null,

    /**
     * <p>Keyboard type to display when this text area is focused.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    keyboardType:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>Specifies the text to display on the keyboard <code>Return</code> key when this text area is focused.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    returnKeyType:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Determines whether this text area can be scrolled.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    scrollable:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Determines if the return key should be suppressed during text entry.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    suppressReturn:null,

    /**
     * <p>Text alignment within this text area.</p>
     * @type String|Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    textAlign:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>Value of this text area.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    value:null,

    /**
     * <p>Vertical alignment within this text area.</p>
     * @type Number|String
     * @since 0.8 (Android)
     */
    verticalAlign:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Forces this text area to lose focus.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    blur:function() {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Forces this text area to gain focus.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    focus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.appearance} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAppearance:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.autoLink} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAutoLink:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.autocapitalization} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAutocapitalization:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.autocorrect} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getAutocorrect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.clearOnEdit} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getClearOnEdit:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.color} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.editable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getEditable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.ellipsize} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getEllipsize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.enableReturnKey} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getEnableReturnKey:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.enabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.font} property.</p>
     * @returns Font
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFont:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.hintText} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getHintText:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.keyboardToolbar} property.</p>
     * @returns Array<Ti.UI.View>
     * @returns Ti.UI.iOS.Toolbar
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getKeyboardToolbar:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.keyboardToolbarColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getKeyboardToolbarColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.keyboardToolbarHeight} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getKeyboardToolbarHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.keyboardType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getKeyboardType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.returnKeyType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getReturnKeyType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.scrollable} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getScrollable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.size} property.</p>
     * @returns Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.suppressReturn} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSuppressReturn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.textAlign} property.</p>
     * @returns String
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTextAlign:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.value} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.verticalAlign} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android)
     */
    getVerticalAlign:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextArea.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.appearance} property.</p>
     * @param {Number} appearance <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAppearance:function(appearance) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.autoLink} property.</p>
     * @param {Number} autoLink <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAutoLink:function(autoLink) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.autocapitalization} property.</p>
     * @param {Number} autocapitalization <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setAutocapitalization:function(autocapitalization) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.autocorrect} property.</p>
     * @param {Boolean} autocorrect <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setAutocorrect:function(autocorrect) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.clearOnEdit} property.</p>
     * @param {Boolean} clearOnEdit <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setClearOnEdit:function(clearOnEdit) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.color} property.</p>
     * @param {String} color <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setColor:function(color) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.editable} property.</p>
     * @param {Boolean} editable <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setEditable:function(editable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.ellipsize} property.</p>
     * @param {Boolean} ellipsize <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setEllipsize:function(ellipsize) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.enableReturnKey} property.</p>
     * @param {Boolean} enableReturnKey <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setEnableReturnKey:function(enableReturnKey) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.enabled} property.</p>
     * @param {Boolean} enabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setEnabled:function(enabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.font} property.</p>
     * @param {Font} font <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setFont:function(font) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.hintText} property.</p>
     * @param {String} hintText <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setHintText:function(hintText) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.keyboardToolbar} property.</p>
     * @param {Array<Ti.UI.View>|Ti.UI.iOS.Toolbar} keyboardToolbar <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setKeyboardToolbar:function(keyboardToolbar) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.keyboardToolbarColor} property.</p>
     * @param {String} keyboardToolbarColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setKeyboardToolbarColor:function(keyboardToolbarColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.keyboardToolbarHeight} property.</p>
     * @param {Number} keyboardToolbarHeight <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setKeyboardToolbarHeight:function(keyboardToolbarHeight) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.keyboardType} property.</p>
     * @param {Number} keyboardType <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setKeyboardType:function(keyboardType) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.returnKeyType} property.</p>
     * @param {Number} returnKeyType <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setReturnKeyType:function(returnKeyType) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.scrollable} property.</p>
     * @param {Boolean} scrollable <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setScrollable:function(scrollable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.suppressReturn} property.</p>
     * @param {Boolean} suppressReturn <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSuppressReturn:function(suppressReturn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.textAlign} property.</p>
     * @param {String|Number} textAlign <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTextAlign:function(textAlign) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.value} property.</p>
     * @param {String} value <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setValue:function(value) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.verticalAlign} property.</p>
     * @param {Number|String} verticalAlign <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setVerticalAlign:function(verticalAlign) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextArea.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Use the {@link Ti.UI.createTextField} method to create a text field.</p>
 * 
 * @example Basic Text Field with rounded border
 * <p>Create a simple text field with a round border style.
    var win = Ti.UI.createWindow({
      backgroundColor: 'white',
      exitOnClose: true,
      fullscreen: false,
      layout: 'vertical',
      title: 'TextField Demo'
    });</p>
<pre><code>var textField = Ti.UI.createTextField({
    color: '#336699',
    height: 60,
    top: 10,
    left: 10,
    width: 250,
    borderStyle: Ti.UI.INPUT_BORDERSTYLE_ROUNDED
});

win.add(textField);
win.open();
</code></pre>
 * 
 * @example Custom Keyboard Toolbar (iOS)
 * <p>On iOS, a configurable toolbar can be displayed above the virtual keyboard. 
Toolbars can be used with both text areas and text fields. See {@link Ti.UI.iOS.Toolbar}
for more information.</p>
<p>This code excerpt creates a text field with a toolbar:</p>
<pre><code>var send = Ti.UI.createButton({
    title : 'Send',
    style : Ti.UI.iPhone.SystemButtonStyle.DONE,
});

var camera = Ti.UI.createButton({
    systemButton : Ti.UI.iPhone.SystemButton.CAMERA,
});

var cancel = Ti.UI.createButton({
    systemButton : Ti.UI.iPhone.SystemButton.CANCEL
});

var flexSpace = Ti.UI.createButton({
    systemButton : Ti.UI.iPhone.SystemButton.FLEXIBLE_SPACE
});

var textfield = Ti.UI.createTextField({
    hintText : 'Focus to see keyboard with toolbar',
    height : 35,
    width : 300,
    top : 10,
    borderStyle : Ti.UI.INPUT_BORDERSTYLE_BEZEL,
    keyboardToolbar : [cancel, flexSpace, camera, flexSpace, send],
    keyboardToolbarColor : '#999',
    keyboardToolbarHeight : 40,
});
</code></pre>
 */
Ti.UI.TextField = function() {
};
Ti.UI.TextField.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Determines the appearance of the keyboard displayed when this field is focused.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    appearance:null,

    /**
     * <p>Determines how text is capitalized during typing.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    autocapitalization:null,

    /**
     * <p>Determines whether misspelled words input to this text field are automatically corrected.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    autocorrect:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border style for the field.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderStyle:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    children:null,

    /**
     * <p>Determines when the clear button is displayed.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    clearButtonMode:null,

    /**
     * <p>Determines whether the value of this text field should be cleared when it is focused.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    clearOnEdit:null,

    /**
     * <p>Color of the text in this text field, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    color:null,

    /**
     * <p>Determines whether this field can be edited.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    editable:null,

    /**
     * <p>Determines whether an ellipsis (<code>...</code>) should be used to indicate truncated text.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    ellipsize:null,

    /**
     * <p>Determines whether the return key is enabled automatically when there is text in this text 
field.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    enableReturnKey:null,

    /**
     * <p>Determines whether the field is enabled.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    enabled:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>Font to use for text.</p>
     * @type Font
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    font:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Hint text to display when the field is empty.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hintText:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Array of toolbar button objects or a {@link Ti.UI.iOS.Toolbar} to be used when the 
keyboard is displayed.</p>
     * @type Array<Ti.UI.View>|Ti.UI.iOS.Toolbar
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    keyboardToolbar:null,

    /**
     * <p>Color of the keyboard toolbar if keyboardToolbar is an array, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    keyboardToolbarColor:null,

    /**
     * <p>Height of the keyboard toolbar if keyboardToolbar is an array.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    keyboardToolbarHeight:null,

    /**
     * <p>Keyboard type to display when this text field is focused.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    keyboardType:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Left button view.</p>
     * @type Object
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    leftButton:null,

    /**
     * <p>Determines when to display the left button view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    leftButtonMode:null,

    /**
     * <p>Padding between the left button and the edge of the field.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    leftButtonPadding:null,

    /**
     * <p>Maximum length of text field input.</p>
     * @type Number
     * @since 0.8 (iPhone), 1.8 (Mobile Web)
     */
    maxLength:null,

    /**
     * <p>Minimum size of the font when the font is sized based on the contents.  Enables font 
scaling to fit.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    minimumFontSize:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>Left padding of this text field.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    paddingLeft:null,

    /**
     * <p>Right padding of this text field.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    paddingRight:null,

    /**
     * <p>Obscure the input text from the user.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    passwordMask:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>Specifies the text to display on the keyboard <code>Return</code> key when this field is focused.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    returnKeyType:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Right button view.</p>
     * @type Object
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    rightButton:null,

    /**
     * <p>Determines when to display the right button view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    rightButtonMode:null,

    /**
     * <p>Padding between the right button and the edge of the field.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    rightButtonPadding:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Determines whether the return key should be suppressed during entry.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    suppressReturn:null,

    /**
     * <p>Text alignment within this text field.</p>
     * @type String|Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    textAlign:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>Value of this text field.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    value:null,

    /**
     * <p>Vertical alignment within this text field.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad), 0.8 (Android)
     */
    verticalAlign:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Forces the field to lose focus.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    blur:function() {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Forces the field to gain focus.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    focus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.appearance} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAppearance:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.autocapitalization} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getAutocapitalization:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.autocorrect} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getAutocorrect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.borderStyle} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.clearButtonMode} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getClearButtonMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.clearOnEdit} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getClearOnEdit:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.color} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.editable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getEditable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.ellipsize} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getEllipsize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.enableReturnKey} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getEnableReturnKey:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.enabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.font} property.</p>
     * @returns Font
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFont:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.hintText} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHintText:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.keyboardToolbar} property.</p>
     * @returns Array<Ti.UI.View>
     * @returns Ti.UI.iOS.Toolbar
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getKeyboardToolbar:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.keyboardToolbarColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getKeyboardToolbarColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.keyboardToolbarHeight} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getKeyboardToolbarHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.keyboardType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getKeyboardType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.leftButton} property.</p>
     * @returns Object
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLeftButton:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.leftButtonMode} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLeftButtonMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.leftButtonPadding} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLeftButtonPadding:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.maxLength} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 1.8 (Mobile Web)
     */
    getMaxLength:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.minimumFontSize} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getMinimumFontSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.paddingLeft} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getPaddingLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.paddingRight} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getPaddingRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.passwordMask} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPasswordMask:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.returnKeyType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getReturnKeyType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.rightButton} property.</p>
     * @returns Object
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getRightButton:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.rightButtonMode} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getRightButtonMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.rightButtonPadding} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getRightButtonPadding:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.size} property.</p>
     * @returns Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.suppressReturn} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSuppressReturn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.textAlign} property.</p>
     * @returns String
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTextAlign:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.value} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.verticalAlign} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 0.8 (Android)
     */
    getVerticalAlign:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.TextField.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.appearance} property.</p>
     * @param {Number} appearance <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAppearance:function(appearance) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.autocapitalization} property.</p>
     * @param {Number} autocapitalization <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setAutocapitalization:function(autocapitalization) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.autocorrect} property.</p>
     * @param {Boolean} autocorrect <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setAutocorrect:function(autocorrect) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.borderStyle} property.</p>
     * @param {Number} borderStyle <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderStyle:function(borderStyle) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.clearButtonMode} property.</p>
     * @param {Number} clearButtonMode <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setClearButtonMode:function(clearButtonMode) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.clearOnEdit} property.</p>
     * @param {Boolean} clearOnEdit <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setClearOnEdit:function(clearOnEdit) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.color} property.</p>
     * @param {String} color <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setColor:function(color) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.editable} property.</p>
     * @param {Boolean} editable <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setEditable:function(editable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.ellipsize} property.</p>
     * @param {Boolean} ellipsize <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setEllipsize:function(ellipsize) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.enableReturnKey} property.</p>
     * @param {Boolean} enableReturnKey <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setEnableReturnKey:function(enableReturnKey) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.enabled} property.</p>
     * @param {Boolean} enabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setEnabled:function(enabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.font} property.</p>
     * @param {Font} font <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setFont:function(font) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.hintText} property.</p>
     * @param {String} hintText <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHintText:function(hintText) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.keyboardToolbar} property.</p>
     * @param {Array<Ti.UI.View>|Ti.UI.iOS.Toolbar} keyboardToolbar <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setKeyboardToolbar:function(keyboardToolbar) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.keyboardToolbarColor} property.</p>
     * @param {String} keyboardToolbarColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setKeyboardToolbarColor:function(keyboardToolbarColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.keyboardToolbarHeight} property.</p>
     * @param {Number} keyboardToolbarHeight <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setKeyboardToolbarHeight:function(keyboardToolbarHeight) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.keyboardType} property.</p>
     * @param {Number} keyboardType <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setKeyboardType:function(keyboardType) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.leftButton} property.</p>
     * @param {Object} leftButton <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLeftButton:function(leftButton) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.leftButtonMode} property.</p>
     * @param {Number} leftButtonMode <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLeftButtonMode:function(leftButtonMode) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.leftButtonPadding} property.</p>
     * @param {Number} leftButtonPadding <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLeftButtonPadding:function(leftButtonPadding) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.maxLength} property.</p>
     * @param {Number} maxLength <p>New value for the property.</p>
     * @since 0.8 (iPhone), 1.8 (Mobile Web)
     */
    setMaxLength:function(maxLength) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.minimumFontSize} property.</p>
     * @param {Number} minimumFontSize <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setMinimumFontSize:function(minimumFontSize) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.paddingLeft} property.</p>
     * @param {Number} paddingLeft <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setPaddingLeft:function(paddingLeft) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.paddingRight} property.</p>
     * @param {Number} paddingRight <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setPaddingRight:function(paddingRight) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.passwordMask} property.</p>
     * @param {Boolean} passwordMask <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setPasswordMask:function(passwordMask) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.returnKeyType} property.</p>
     * @param {Number} returnKeyType <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setReturnKeyType:function(returnKeyType) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.rightButton} property.</p>
     * @param {Object} rightButton <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setRightButton:function(rightButton) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.rightButtonMode} property.</p>
     * @param {Number} rightButtonMode <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setRightButtonMode:function(rightButtonMode) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.rightButtonPadding} property.</p>
     * @param {Number} rightButtonPadding <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setRightButtonPadding:function(rightButtonPadding) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.suppressReturn} property.</p>
     * @param {Boolean} suppressReturn <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSuppressReturn:function(suppressReturn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.textAlign} property.</p>
     * @param {String|Number} textAlign <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTextAlign:function(textAlign) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.value} property.</p>
     * @param {String} value <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setValue:function(value) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.verticalAlign} property.</p>
     * @param {Number|String} verticalAlign <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 0.8 (Android)
     */
    setVerticalAlign:function(verticalAlign) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.TextField.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: iPhone, iPad, Mobile Web
 * @namespace <p>A Toolbar is created by the method {@link Ti.UI.iOS.createToolbar}.  A Toolbar can be placed at the bottom of a window and contain buttons.</p>
 */
Ti.UI.Toolbar = function() {
};
Ti.UI.Toolbar.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    children:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.borderColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.center} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.layout} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.opacity} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.size} property.</p>
     * @returns Dimension
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Toolbar.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Toolbar.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>The <code>View</code> is the base type for all UI widgets in Ti.</p>
<h4>Units and Coordinates</h4>
<p>Sizes and coordinates can be specified using a variety of units. If a value is
specified as a number, it is interpreted as a value in the default unit for the
current system and/or the current project.</p>
<p>When a value is specified as string, the value can consist of:</p>
<ul>
<li>A number.</li>
<li>A percentage, such as "10%", interpreted as a percentage of the parent's total size
   in that dimension.</li>
<li>A number plus a unit specifier, such as "10px" or "1in". </li>
</ul>
<p>The following units are supported:</p>
<table cellpadding="6px" border="1" rules="all">
<tr>
<th align="left">Unit</th> <th align="left">Specifier</th> <th align="left">Note<th>
</tr>
<tr> <td>pixels</td> <td>px</td> <td></td> </tr>
<tr> <td>density-independent pixels</td> <td>dip</td> <td>Equivalent to Apple "points."</td> </tr>
<tr> <td>inches</td> <td>in</td> <td></td> </tr>
<tr> <td>millimeters</td> <td>mm</td> <td>Android, iOS only</td>  </tr>
<tr> <td>centimeters</td> <td>cm</td> <td>Android, iOS only</td>  </tr>
<tr> <td>points</td> <td>pt</td> 
     <td>Typographical points of 1/72 of an inch. On Android, you can specify sizes and 
     coordinates in typographical points. On other platforms, this unit is only used
     to specify font sizes.  Not to be confused with Apple "points."</td> </tr>
</table>

<p>The interpretation of the density-independent pixel (DIP) varies by platform:</p>
<ul>
<li>
<p>On Android, one DIP corresponds to one pixel on a 160DPI
    display.</p>
</li>
<li>
<p>On iOS, one DIP corresponds to one pixel on a non-Retina display, which
    is 163DPI for iPhone/iPod touch and 132DPI for the iPad. A DIP
    corresponds to 2 pixels of width or height on a Retina display.</p>
</li>
<li>
<p>On Mobile Web, both DIP and pixel are equal to one browser pixel, which may
    not correspond to a pixel on the display. From testing, most browsers seem to
    report a DPI value of 96DPI, regardless of the actual display density.</p>
</li>
</ul>
<p>The absolute measures, such as inches, are dependent on the device correctly reporting
its density. On Mobile Web, in particular, these values are unlikely to be exact.</p>
<p>If no units are specified, a system-default unit is assumed. The system default unit is:</p>
<ul>
<li>Pixels on Android.</li>
<li>DIPs on iOS.</li>
<li>DIPs on Mobile Web (as described above, DIPs and pixels are interchangable on
     Mobile Web).</li>
</ul>
<p>Note that prior to Release 2.0, iOS ignored any specified unit, so code that specifies
a unit may operate differently on iOS in Release 2.0.</p>
<p>Font sizes on iOS are treated differently than other sizes: font sizes are always 
specified in typographical points. </p>
<p>The {@link Ti.UI.View.height} and {@link Ti.UI.View.width} properties 
accept several special values:</p>
<ul>
<li>{@link Ti.UI.FILL} specifies that the view should fill the parent in this
    dimension.</li>
<li>{@link Ti.UI.SIZE} specifies that the view should adjust this size to fit its
    contents, such as a label's text or a view's children.</li>
<li>'auto' specifies that the view should choose either <code>FILL</code> or <code>SIZE</code> behavior.
    In 2.0, the behavior of the 'auto' value is specified by the UI Composite Layout
    Spec. This value is not recommended for new development and will be deprecated in
    the future.</li>
</ul>
<p>Sizes and positions can also be specified as a percentage of the parent's size, for 
example, '50%'.</p>
<p>For more details see: </p>
<ul>
<li>{@link http://docs.appcelerator.com/titanium/2.0/index.html#!/guide/UI_Composite_Layout_Behavior_Spec}</li>
</ul>
<h4>Size and Position</h4>
<p>Titanium views are positioned using the <code>left</code>, <code>right</code>, <code>top,</code> <code>bottom</code> and <code>center</code> 
properties, and sized using the <code>width</code> and <code>height</code> properties. These are
input properties, set by the user to specify layout, and not modified by the 
system to indicate actual calculated positions and sizes. </p>
<p>How these properties are interpreted depends on the value of the view's <code>layout</code> 
property. See the description of the {@link Ti.UI.View.layout} property 
for details.</p>
<p>The {@link Ti.UI.View.size} property is a read-only dimension
with the properties <code>x</code>, <code>y</code>, <code>width</code> and <code>height</code>. It provides the <em>rendered</em> size
 of the  view, and is only available once both it and its ancestors have been
fully drawn.</p>
<p>The {@link Ti.UI.View.rect} property is a read-only dimension
with the properties <code>x</code>, <code>y</code>, <code>width</code> and <code>height</code>. It provides the <em>rendered</em>
position and size of the  view, and is only available once both it and its ancestors have been
fully drawn.</p>
<p>To determine whether the <code>size</code> and <code>rect</code> values are available, add an event listener
for the {@link Ti.UI.View.postlayout} event, which is fired at the end of
a layout cycle.</p>
 * 
 * @example Round View Example
 * <p>Create a rounded view.</p>
<pre><code>var view = Ti.UI.createView({
   borderRadius:10,
   backgroundColor:'red',
   width:50,
   height:50
});
window.add(view);
</code></pre>
 */
Ti.UI.View = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    children:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.anchorPoint} property.</p>
     * @returns Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.backgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.backgroundImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.borderColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.borderRadius} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.borderWidth} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.center} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.focusable} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.layout} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.opacity} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.size} property.</p>
     * @returns Dimension
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.visible} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.View.zIndex} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.View.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>The web view content can be any valid web content such as HTML, PDF, SVG or other WebKit supported 
content types. </p>
<p>JavaScript in the web view executes in its own context. When running local web content
(that is, content that is included in the application's resources), scripts have
access to the Titanium namespace. In particular, when running local web content:</p>
<ul>
<li>
<p>You can use {@link Ti.App.addEventListener} and
  {@link Ti.App.fireEvent} to receive and send application-level events.</p>
</li>
<li>
<p>Events can be logged using the {@link Ti.API} logging methods. </p>
</li>
</ul>
<p>Scripts downloaded from remote web servers cannot access the Titanium namespace,
however, you can use the web view {@link Ti.UI.WebView.evalJS} method 
to execute a JavaScript expression inside the web view, and retrieve the value 
of an expression.</p>
<p>Use the {@link Ti.UI.createWebView} method to create a web view.</p>
<p>Web views are more expensive to create than other native views because of the requirement to
load the HTML browser into memory.</p>
<p>The native web view handles scrolling and other related touch events internally.
If you add event listeners for any of the standard touch events (<code>touchstart</code>, 
<code>click</code>, and so on), these events do not reach the native web view, and the user
will not be able to scroll, zoom, click on links, and so on.</p>
<p>In other words, you can have either Titanium-style events against the 
web view instance, or internal JavaScript events in the DOM, but not both.</p>
<p>Note that on the iOS platform, any touch event listeners on the web view <strong>or its
parent views</strong> will prevent users from interacting with the native web view. To
prevent this default behavior, set {@link Ti.UI.WebView.willHandleTouches}
to <code>false</code>.</p>
<h4>Android Platform Implementation Notes</h4>
<p>The Android web view supports native plugins such as Flash Player. To use plugin
content, you must set the {@link Ti.UI.WebView.pluginState} property to
either {@link Ti.UI.Android.WEBVIEW_PLUGINS_ON} or 
{@link Ti.UI.Android.WEBVIEW_PLUGINS_ON_DEMAND}.</p>
<p>You must also call {@link Ti.UI.WebView.pause} when the current activity is
paused, to prevent plugin content from continuing to run in the background. Call
{@link Ti.UI.WebView.resume} when the current activity is resumed. You can
do this by adding listeners for the {@link Ti.Android.Activity.pause}
and {@link Ti.Android.Activity.resume} events.</p>
 * 
 * @example Basic Web View to External URL
 * <p>Create a web view to a remote URL and open the window as modal.</p>
<pre><code>    var webview = Ti.UI.createWebView({url:'http://www.appcelerator.com'});
    var window = Ti.UI.createWindow();
    window.add(webview);
    window.open({modal:true});
</code></pre>
 */
Ti.UI.WebView = function() {
};
Ti.UI.WebView.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    children:null,

    /**
     * <p>Web content to load.</p>
     * @type Ti.Blob|Ti.Filesystem.File
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    data:null,

    /**
     * <p>If <code>true</code>, zoom controls are enabled.</p>
     * @type Boolean
     * @since 1.8.0 (Android)
     */
    enableZoomControls:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>HTML content of this web view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    html:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Indicates if the webview is loading content.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    loading:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>Determines how to treat content that requires plugins in this web view.</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    pluginState:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>If <code>true</code>, scale contents to fit the web view.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    scalesPageToFit:null,

    /**
     * <p>If <code>true</code>, scrollbars are displayed if content is larger than the web view.</p>
     * @type Boolean
     * @since 1.8.2 (Mobile Web)
     */
    showScrollbars:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>URL to the web document.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    url:null,

    /**
     * <p>The User-Agent header used by the web view when requesting content.</p>
     * @type String
     * @since 0.8 (Android)
     */
    userAgent:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Explicitly specifies if this web view handles touches.</p>
     * @type Boolean
     * @since 1.8.2 (iPhone), 1.8.2 (iPad)
     */
    willHandleTouches:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Returns <code>true</code> if the web view can go back in its history list.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    canGoBack:function() {
    },

    /**
     * <p>Returns <code>true</code> if the web view can go forward in its history list.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    canGoForward:function() {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Evaluates a JavaScript expression inside the context of the web view and
optionally, returns a result.</p>
     * @param {String} code <p>JavaScript code as a string. The code will be evaluated inside the web view context.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    evalJS:function(code) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.data} property.</p>
     * @returns Ti.Blob
     * @returns Ti.Filesystem.File
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getData:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.enableZoomControls} property.</p>
     * @returns Boolean
     * @since 1.8.0 (Android)
     */
    getEnableZoomControls:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.html} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHtml:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.loading} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLoading:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.pluginState} property.</p>
     * @returns Number
     * @since 1.8.0 (Android)
     */
    getPluginState:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.scalesPageToFit} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getScalesPageToFit:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.showScrollbars} property.</p>
     * @returns Boolean
     * @since 1.8.2 (Mobile Web)
     */
    getShowScrollbars:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.size} property.</p>
     * @returns Dimension
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.url} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getUrl:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.userAgent} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getUserAgent:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.willHandleTouches} property.</p>
     * @returns Boolean
     * @since 1.8.2 (iPhone), 1.8.2 (iPad)
     */
    getWillHandleTouches:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.WebView.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Goes back one entry in the web view's history list, to the previous page.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    goBack:function() {
    },

    /**
     * <p>Goes forward one entry in this web view's history list, if possible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    goForward:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Pauses native webview plugins.</p>
     * @since 1.8.0 (Android)
     */
    pause:function() {
    },

    /**
     * <p>Releases memory when the web view is no longer needed.</p>
     * @since 2.0.0 (Android)
     */
    release:function() {
    },

    /**
     * <p>Reloads the current webpage.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    reload:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Forces the web view to repaint its contents.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    repaint:function() {
    },

    /**
     * <p>Resume native webview plugins.</p>
     * @since 1.8.0 (Android)
     */
    resume:function() {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the basic authentication for this web view to use on subsequent URl requests.</p>
     * @param {String} username <p>Basic auth username.</p>
     * @param {String} password <p>Basic auth password.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBasicAuthentication:function(username, password) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.data} property.</p>
     * @param {Ti.Blob|Ti.Filesystem.File} data <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setData:function(data) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.enableZoomControls} property.</p>
     * @param {Boolean} enableZoomControls <p>New value for the property.</p>
     * @since 1.8.0 (Android)
     */
    setEnableZoomControls:function(enableZoomControls) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of {@link Ti.UI.WebView.html} property.</p>
     * @param {Object} html <p>New HTML to display in the web view.</p>
     * @param {String} baseURL <p>The base URL for the content. Only used by iOS.</p>
     * @param {String} mimeType <p>The MIME type of the content. Only used by iOS.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHtml:function(html, baseURL, mimeType) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.loading} property.</p>
     * @param {Boolean} loading <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLoading:function(loading) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.pluginState} property.</p>
     * @param {Number} pluginState <p>New value for the property.</p>
     * @since 1.8.0 (Android)
     */
    setPluginState:function(pluginState) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.scalesPageToFit} property.</p>
     * @param {Boolean} scalesPageToFit <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setScalesPageToFit:function(scalesPageToFit) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.showScrollbars} property.</p>
     * @param {Boolean} showScrollbars <p>New value for the property.</p>
     * @since 1.8.2 (Mobile Web)
     */
    setShowScrollbars:function(showScrollbars) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.url} property.</p>
     * @param {String} url <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setUrl:function(url) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.userAgent} property.</p>
     * @param {String} userAgent <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setUserAgent:function(userAgent) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.willHandleTouches} property.</p>
     * @param {Boolean} willHandleTouches <p>New value for the property.</p>
     * @since 1.8.2 (iPhone), 1.8.2 (iPad)
     */
    setWillHandleTouches:function(willHandleTouches) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.WebView.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Stops loading a currently loading page.</p>
     * @param {Boolean} hardStop <p>Forces the web view to destroy the iFrame (Mobile Web only).</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    stopLoading:function(hardStop) {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>A window is a top-level container which can contain other views. Windows can
be <em>opened</em> and <em>closed</em>.  Opening a window causes the window and its child 
views to be added to the application's render stack, on top of any previously opened 
windows. Closing a window removes the window and its children from the render stack.</p>
<p>Windows <em>contain</em> other views, but in general they are not <em>contained</em> inside
other views. There are a few specialized top-level views that manage windows,
including:</p>
<ul>
<li>{@link Ti.UI.iPhone.NavigationGroup}</li>
<li>{@link Ti.UI.iPad.SplitWindow}</li>
<li>{@link Ti.UI.TabGroup}. </li>
</ul>
<p>By default, windows occupy the entire screen except for the navigation bar, 
status bar, and in the case of windows contained in tab groups, the tab bar.
To take up the entire screen, covering any other UI, specify <code>fullscreen:true</code>
when creating the window.</p>
<p>Use the {@link Ti.UI.createWindow} method to create a window.</p>
<h4>Sub-contexts</h4>
<p>Windows can be loaded from another JavaScript file by specifying the property <code>url</code>,
referencing a file relative to your application <code>Resources</code> folder.  It's important
to note that Titanium will refuse to load JavaScript files from a remote URL. Loading
remote JavaScript from a URL and providing it with the full capabilities of the Titanium
API would be very dangerous.</p>
<p>When your Window is loaded from a separate JavaScript file, the code will be executed in
a separate JavaScript context (called a "sub-context") than your <code>app.js</code> global context.
It will also execute in its own separate thread.</p>
<p>On Android, a new context is also created when you create a heavyweight window. See the
section, "Android Heavyweight and Lightweight Windows" for more information.</p>
<p>The special property {@link Ti.UI.currentWindow} is available inside a sub-context that
points to the JavaScript instance by reference in the global context.</p>
<h4>Passing Data Between Contexts</h4>
<p>By default, sub-context variables cannot access JavaScript references in the global context.
There are two ways to pass data between the global context and the sub-context:</p>
<ul>
<li>Shared references</li>
<li>Events</li>
</ul>
<p><strong>Note that in both cases, you cannot pass functions between contexts, only serializable data.</strong>
<em>Serializable data</em> includes any JavaScript primitive or simple object composed
of JavaScript primitives.</p>
<h5>Passing Data with Shared References</h5>
<p>You can allow a sub-context access to
properties in the global context by reference assignment.  An example best illustrates
how to do this.</p>
<p>In <code>app.js</code>, you could define a property:</p>
<pre><code>var message = "Hi world!";
</code></pre>
<p>Now, you can create a new Window - let's call it <code>foo.js</code> - in your <code>app.js</code>.</p>
<pre><code>var w = Ti.UI.createWindow({
  url:'foo.js'
});
</code></pre>
<p>To <em>give</em> your new window access to <code>message</code>, you would need to assign it to a
property on the new window reference, <code>w</code>.</p>
<pre><code>w.alertMessage = message;
</code></pre>
<p>This creates a new <code>alertMessage</code> property on the new window that holds a reference to the
<code>message</code> property in the global context.  Now, let's look at the code for <code>foo.js</code>.</p>
<pre><code>alert(Ti.UI.currentWindow.alertMessage);
</code></pre>
<p>In the above code, the <code>foo.js</code> will show an alert containing the text from the <code>message</code>
property in the global context.</p>
<h5>Passing Data with Events</h5>
<p>If you'd like to send events to a window from the global context and vice versa, you could
use the built-in event mechanism.  For example, you could define a custom event called <code>foo</code>.
The window could listen for this event and then respond with some action. For example, in
your sub-context you might define:</p>
<pre><code>Ti.UI.currentWindow.addEventListener('foo',function(e)
{
  Ti.API.info("foo event received = "+JSON.stringify(e));
});
</code></pre>
<p>You could now fire the event from <code>app.js</code> like this:</p>
<pre><code>var window = Ti.UI.createWindow({
  url:'bar.js'
});
window.open();
window.fireEvent('foo',{a:'b'});
</code></pre>
<p>It's worth noting two important limitations of the example above:</p>
<ul>
<li>
<p>You must open the window before you can send events to it. You also may have to fire
  the event after a specified amount of time if you intend to immediately send data to
  the window. This is because windows are opened asynchronously and on a separate thread
  than the caller thread.</p>
</li>
<li>
<p>You can only send JSON-serializable data in <code>fireEvent</code>. If you attempt to send objects
  that have function references, they will be null.</p>
</li>
</ul>
<h4>Animations</h4>
<p>Windows can be animated like any normal {@link Ti.UI.View}.  To transition between
2 windows, you can use the <code>transition</code> property on an animation.  For example, to flip
right-to-left between two windows, you could do the following:</p>
<pre><code>var window2 = Ti.UI.createWindow({url:'foo.js'});
var t = Ti.UI.iPhone.AnimationStyle.FLIP_FROM_LEFT;
window1.animate({view:window2,transition:t});
</code></pre>
<p>In the above example, the <code>window2</code> view will be animated from the right-to-left over <code>window1</code>.</p>
<p>Windows can be opened or closed with animation.  In the example below, we create a window
that will open from small to large with a bounce effect.  This is done by applying a
transformation at initialization time that scales the original size of the window to 0.
When the window is opened, a new 2D transformation is applied that will scale the window
size from 0 to 110% of it's original size and then, after 1/20th of a second, will scale it
back to it's original size at 100%. This gives the bounce effect during animation.</p>
<pre><code>var t = Ti.UI.create2DMatrix().scale(0);

// create a window with the initial transform scaled to 0
var w = Ti.UI.createWindow({
  backgroundColor:'#336699',
  borderWidth:8,
  borderColor:'#999',
  height:400,
  width:300,
  borderRadius:10,
  opacity:0.92,
  transform:t
});

// create first transform to go beyond normal size
var t1 = Ti.UI.create2DMatrix().scale(1.1);

var a = Ti.UI.createAnimation();
a.transform = t1;
a.duration = 200;

// when this animation completes, scale to normal size
a.addEventListener('complete', function()
{
    // we can use the identity transform to take it back to it's real size
  var t2 = Ti.UI.create2DMatrix();
  w.animate({transform:t2, duration:200});
});
</code></pre>
<h4>iPad Modal Windows</h4>
<p>For iPad, iPhone SDK 3.2 and Titanium 1.2 introduced several new ways of presenting
modal windows. In addition to full-screen modal windows, the iPad supports "Page sheet"
and "Form sheet" style windows:</p>
<ul>
<li>
<p><strong>Page sheet</strong> style windows have a fixed width, equal to the width of the screen 
  in portait mode, and a height equal to the <em>current</em> height of the screen. This means
  that in portrait mode, the window covers the entire screen. In landscape mode, 
  the window is centered on the screen horizontally.</p>
</li>
<li>
<p><strong>Form sheet</strong> style windows are smaller than the screen size, and centered on the screen.</p>
</li>
</ul>
<p>The example below is a modal window using the Form sheet style:</p>
<p><img alt="modal" src="http://img.skitch.com/20100406-bqb3f8pb6e4ger7wkcdcw5mbar.png" /></p>
<p>You can create this type of modal window on iPad with the following code snippet:</p>
<pre><code>var window = Ti.UI.createWindow();
window.open({
  modal:true,
  modalTransitionStyle: Ti.UI.iPhone.MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL,
  modalStyle: Ti.UI.iPhone.MODAL_PRESENTATION_FORMSHEET
})
</code></pre>
<h4>Android Heavyweight and Lightweight Windows</h4>
<p>In Android, Titanium windows can be heavyweight or lightweight:</p>
<ul>
<li>
<p>A <em>heavyweight</em> window is associated with a new Android 
  {@link Ti.Android.Activity}. Creating a heavyweight window always 
  creates a new JavaScript context.</p>
</li>
<li>
<p>A <em>lightweight</em> window is a fullscreen view, and runs in the same Android Activity 
  as the code that created it. Creating a lightweight window creates a new 
  JavaScript context if it was created with the 'url' property set.</p>
</li>
</ul>
<p>The {@link Ti.UI.createWindow} call creates a heavyweight window 
if any of the following properties are true on creation:</p>
<ul>
<li><code>fullscreen</code></li>
<li><code>navBarHidden</code></li>
<li><code>modal</code></li>
<li><code>windowSoftInputMode</code></li>
</ul>
<p>A heavyweight window is always created when you open a new window from inside a 
{@link Ti.UI.TabGroup}.</p>
<h4>Android "root" Windows</h4>
<p>In Android, you may wish to specify that a window which you create (such as the first
window) should be considered the root window and that the application should exit when
the back button is pressed from that window.  This is particularly useful if your application
is not using a Tab Group and therefore the splash screen window is appearing whenever you
press the back button from your lowest window on the stack.</p>
<p>To indicate that a particular window should cause an application to exit when the back
button is pressed, pass <code>exitOnClose: true</code> as one of the creation arguments, as shown here:</p>
<pre><code>var win = Ti.UI.createWindow({
  title: 'My Root Window',
  exitOnClose: true
});
</code></pre>
 * 
 * @example Full Screen Window example
 * <p>Create a fullscreen window with a red background.</p>
<pre><code>var window = Ti.UI.createWindow({
   backgroundColor:'red'
});
window.open({fullscreen:true});
</code></pre>
 */
Ti.UI.Window = function() {
};
Ti.UI.Window.prototype = {

    /**
     * <p>For heavyweight windows, this property contains a reference to the
Android Activity object associated with this window.</p>
     * @type Ti.Android.Activity
     * @since 0.9 (Android)
     */
    activity:null,

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Title for the back button. This is only valid when the window is a child of a tab.</p>
     * @type String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backButtonTitle:null,

    /**
     * <p>The image to show as the back button. This is only valid when the window is a child of a tab.</p>
     * @type String|Ti.Blob
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backButtonTitleImage:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Background color for the nav bar, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    barColor:null,

    /**
     * <p>Background image for the nav bar, specified as a URL to a local image.</p>
     * @type String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    barImage:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    children:null,

    /**
     * <p>Boolean value indicating if the application should exit when the Android
Back button is pressed while the window is being shown.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    exitOnClose:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    focusable:null,

    /**
     * <p>Boolean value indicating if the window is fullscreen.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    fullscreen:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>View to show in the left nav bar area.</p>
     * @type Ti.UI.View
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    leftNavButton:null,

    /**
     * <p>Boolean to indicate if the window should be opened modal in front of other windows.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    modal:null,

    /**
     * <p>For modal windows, hide the nav bar (<code>true</code>) or show the nav bar (<code>false</code>).</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    navBarHidden:null,

    /**
     * <p>The opacity from 0.0-1.0.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>Current orientation of the window.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    orientation:null,

    /**
     * <p>Array of supported orientation modes, specified using the orientation
constants defined in {@link Ti.UI}.</p>
     * @type Array<Number>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    orientationModes:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>View to show in the right nav bar area.</p>
     * @type Ti.UI.View
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    rightNavButton:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Boolean value indicating if the tab bar should be hidden. </p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    tabBarHidden:null,

    /**
     * <p>Title of the window.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    title:null,

    /**
     * <p>View to show in the title area of the nav bar.</p>
     * @type Ti.UI.View
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    titleControl:null,

    /**
     * <p>Image to show in the title area of the nav bar, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    titleImage:null,

    /**
     * <p>Title prompt for the window.</p>
     * @type String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    titlePrompt:null,

    /**
     * <p>Key identifying a string from the locale file to use for the window title.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    titleid:null,

    /**
     * <p>Key identifying a string from the locale file to use for the window title prompt.</p>
     * @type String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    titlepromptid:null,

    /**
     * <p>Array of button objects to show in the window's toolbar. This is only valid when
the window is the child of a tab.</p>
     * @type Array<Object>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    toolbar:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    transform:null,

    /**
     * <p>Boolean value indicating if the nav bar is translucent.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    translucent:null,

    /**
     * <p>Local URL to a JavaScript file with the windows instructions.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    url:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Set the pixel format for the Activity's Window.</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    windowPixelFormat:null,

    /**
     * <p>Determines whether a heavyweight window's soft input area (ie software keyboard) is visible 
as it receives focus and how the window behaves in order to accomodate it while keeping its 
contents in view.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    windowSoftInputMode:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Closes the window.</p>
     * @param {Dictionary<Ti.UI.Animation>} params <p>Animation or display properties to use when closing the window.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    close:function(params) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.activity} property.</p>
     * @returns Ti.Android.Activity
     * @since 0.9 (Android)
     */
    getActivity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.anchorPoint} property.</p>
     * @returns Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.backButtonTitle} property.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackButtonTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.backButtonTitleImage} property.</p>
     * @returns String
     * @returns Ti.Blob
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackButtonTitleImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.backgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.backgroundImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.barColor} property.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBarColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.barImage} property.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBarImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.borderColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.borderRadius} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.borderWidth} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.center} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.exitOnClose} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getExitOnClose:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.focusable} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.fullscreen} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getFullscreen:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.layout} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.leftNavButton} property.</p>
     * @returns Ti.UI.View
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getLeftNavButton:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.modal} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getModal:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.navBarHidden} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNavBarHidden:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.opacity} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.orientation} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getOrientation:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.orientationModes} property.</p>
     * @returns Array<Number>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getOrientationModes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.rightNavButton} property.</p>
     * @returns Ti.UI.View
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getRightNavButton:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.size} property.</p>
     * @returns Dimension
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.tabBarHidden} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getTabBarHidden:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.title} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.titleControl} property.</p>
     * @returns Ti.UI.View
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getTitleControl:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.titleImage} property.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getTitleImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.titlePrompt} property.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getTitlePrompt:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.titleid} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTitleid:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.titlepromptid} property.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getTitlepromptid:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.toolbar} property.</p>
     * @returns Array<Object>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getToolbar:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.translucent} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getTranslucent:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.url} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getUrl:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.visible} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.windowPixelFormat} property.</p>
     * @returns Number
     * @since 1.8.0 (Android)
     */
    getWindowPixelFormat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.windowSoftInputMode} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getWindowSoftInputMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.Window.zIndex} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Hides the tab bar. Must be called before opening the window.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    hideTabBar:function() {
    },

    /**
     * <p>Opens the window.</p>
     * @param {openWindowParams} params <p>Animation or display properties to use when opening the window.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    open:function(params) {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.activity} property.</p>
     * @param {Ti.Android.Activity} activity <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setActivity:function(activity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.backButtonTitle} property.</p>
     * @param {String} backButtonTitle <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackButtonTitle:function(backButtonTitle) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.backButtonTitleImage} property.</p>
     * @param {String|Ti.Blob} backButtonTitleImage <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackButtonTitleImage:function(backButtonTitleImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.barColor} property.</p>
     * @param {String} barColor <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBarColor:function(barColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.barImage} property.</p>
     * @param {String} barImage <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBarImage:function(barImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.fullscreen} property.</p>
     * @param {Boolean} fullscreen <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setFullscreen:function(fullscreen) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.leftNavButton} property.</p>
     * @param {Ti.UI.View} leftNavButton <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setLeftNavButton:function(leftNavButton) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.modal} property.</p>
     * @param {Boolean} modal <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setModal:function(modal) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.navBarHidden} property.</p>
     * @param {Boolean} navBarHidden <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setNavBarHidden:function(navBarHidden) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.orientation} property.</p>
     * @param {Number} orientation <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setOrientation:function(orientation) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.orientationModes} property.</p>
     * @param {Array<Number>} orientationModes <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setOrientationModes:function(orientationModes) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.rightNavButton} property.</p>
     * @param {Ti.UI.View} rightNavButton <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setRightNavButton:function(rightNavButton) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.tabBarHidden} property.</p>
     * @param {Boolean} tabBarHidden <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setTabBarHidden:function(tabBarHidden) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTitle:function(title) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.titleControl} property.</p>
     * @param {Ti.UI.View} titleControl <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setTitleControl:function(titleControl) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.titleImage} property.</p>
     * @param {String} titleImage <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setTitleImage:function(titleImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.titlePrompt} property.</p>
     * @param {String} titlePrompt <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setTitlePrompt:function(titlePrompt) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.titleid} property.</p>
     * @param {String} titleid <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTitleid:function(titleid) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.titlepromptid} property.</p>
     * @param {String} titlepromptid <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setTitlepromptid:function(titlepromptid) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.toolbar} property.</p>
     * @param {Array<Object>} toolbar <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setToolbar:function(toolbar) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.translucent} property.</p>
     * @param {Boolean} translucent <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setTranslucent:function(translucent) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.windowPixelFormat} property.</p>
     * @param {Number} windowPixelFormat <p>New value for the property.</p>
     * @since 1.8.0 (Android)
     */
    setWindowPixelFormat:function(windowPixelFormat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.Window.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (Android), 2.0.0 (iPhone), 2.0.0 (iPad), 2.0.0 (Mobile Web)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: iPhone, iPad
 */
Ti.UI.iOS = {

    /**
     * <p>Use with {@link Ti.UI.iOS.AdView.adSize} to specify a banner ad size
appropriate for landscape orientations.</p>
     * @type String
     * @since 1.8.1 (iPhone), 1.8.1 (iPad)
     */
    AD_SIZE_LANDSCAPE:null,

    /**
     * <p>Use with {@link Ti.UI.iOS.AdView.adSize} to specify a banner ad size
appropriate for portrait orientations.</p>
     * @type String
     * @since 1.8.1 (iPhone), 1.8.1 (iPad)
     */
    AD_SIZE_PORTRAIT:null,

    /**
     * <p>Use with {@link Ti.UI.Animation.curve} to specify an
animation that starts slowly and speeds up.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    ANIMATION_CURVE_EASE_IN:null,

    /**
     * <p>Use with {@link Ti.UI.Animation.curve} to specify an
animation that starts slowly, and speeds up, then slows down at the end
of the animation.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    ANIMATION_CURVE_EASE_IN_OUT:null,

    /**
     * <p>Use with {@link Ti.UI.Animation.curve} to specify an
animation that starts quickly, then slows down at the end
of the animation.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    ANIMATION_CURVE_EASE_OUT:null,

    /**
     * <p>Use with {@link Ti.UI.Animation.curve} to specify an
animation that proceeds at a constant rate.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    ANIMATION_CURVE_LINEAR:null,

    /**
     * <p>Convert strings formatted as addresses into clickable links.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    AUTODETECT_ADDRESS:null,

    /**
     * <p>Convert all detectable types of data into clickable links.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    AUTODETECT_ALL:null,

    /**
     * <p>Convert strings formatted as calendar events into clickable links.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    AUTODETECT_CALENDAR:null,

    /**
     * <p>Convert strings formatted as URLs into clickable links.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    AUTODETECT_LINK:null,

    /**
     * <p>Disable converting strings into clickable links.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    AUTODETECT_NONE:null,

    /**
     * <p>Convert strings formatted as phone numbers into clickable links.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    AUTODETECT_PHONE:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_CLEAR:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_COLOR:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_COLOR_BURN:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_COLOR_DODGE:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_COPY:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_DARKEN:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_DESTINATION_ATOP:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_DESTINATION_IN:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_DESTINATION_OUT:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_DESTINATION_OVER:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_DIFFERENCE:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_EXCLUSION:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_HARD_LIGHT:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_HUE:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_LIGHTEN:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_LUMINOSITY:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_MULTIPLY:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_NORMAL:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_OVERLAY:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_PLUS_DARKER:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_PLUS_LIGHTER:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_SATURATION:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_SCREEN:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_SOFT_LIGHT:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_SOURCE_ATOP:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_SOURCE_IN:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_SOURCE_OUT:null,

    /**
     * <p>Use with {@link Ti.UI.MaskedImage.mode} to specify a blend mode.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_XOR:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.iOS.D3Matrix}.</p>
     * @param {Dictionary<Ti.UI.iOS.D3Matrix>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.iOS.D3Matrix} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    create3DMatrix:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.iOS.AdView}.</p>
     * @param {Dictionary<Ti.UI.iOS.AdView>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.iOS.AdView} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.iOS.AdView
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    createAdView:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.iOS.CoverFlowView}.</p>
     * @param {Dictionary<Ti.UI.iOS.CoverFlowView>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.iOS.CoverFlowView} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.iOS.CoverFlowView
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    createCoverFlowView:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.iOS.TabbedBar}.</p>
     * @param {Dictionary<Ti.UI.iOS.TabbedBar>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.iOS.TabbedBar} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.iOS.TabbedBar
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    createTabbedBar:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.iOS.Toolbar}.</p>
     * @param {Dictionary<Ti.UI.iOS.Toolbar>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.iOS.Toolbar} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.iOS.Toolbar
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    createToolbar:function(parameters) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: iPhone, iPad
 * @namespace <p>The 3DMatrix is created by {@link Ti.UI.iOS.create3DMatrix}.  A 3D matrix is
used to rotate, scale, translate, or skew the objects in a three-dimensional
space. A 3D matrix is represented by a 4 by 4 matrix. </p>
<p>You create an <code>identity matrix</code> by creating a 3D Matrix with an empty
constructor.</p>
 */
Ti.UI.iOS.D3Matrix = function() {
};
Ti.UI.iOS.D3Matrix.prototype = {

    /**
     * <p>The entry at position [1,1] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m11:null,

    /**
     * <p>The entry at position [1,2] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m12:null,

    /**
     * <p>The entry at position [1,3] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m13:null,

    /**
     * <p>The entry at position [1,4] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m14:null,

    /**
     * <p>The entry at position [2,1] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m21:null,

    /**
     * <p>The entry at position [2,2] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m22:null,

    /**
     * <p>The entry at position [2,3] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m23:null,

    /**
     * <p>The entry at position [2,4] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m24:null,

    /**
     * <p>The entry at position [3,1] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m31:null,

    /**
     * <p>The entry at position [3,2] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m32:null,

    /**
     * <p>The entry at position [3,3] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m33:null,

    /**
     * <p>The entry at position [3,4] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m34:null,

    /**
     * <p>The entry at position [4,1] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m41:null,

    /**
     * <p>The entry at position [4,2] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m42:null,

    /**
     * <p>The entry at position [4,3] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m43:null,

    /**
     * <p>The entry at position [4,4] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m44:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.D3Matrix.m11} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM11:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.D3Matrix.m12} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM12:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.D3Matrix.m13} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM13:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.D3Matrix.m14} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM14:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.D3Matrix.m21} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM21:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.D3Matrix.m22} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM22:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.D3Matrix.m23} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM23:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.D3Matrix.m24} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM24:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.D3Matrix.m31} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM31:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.D3Matrix.m32} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM32:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.D3Matrix.m33} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM33:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.D3Matrix.m34} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM34:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.D3Matrix.m41} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM41:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.D3Matrix.m42} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM42:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.D3Matrix.m43} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM43:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.D3Matrix.m44} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM44:function() {
    },

    /**
     * <p>Returns a matrix constructed by inverting an existing matrix</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    invert:function() {
    },

    /**
     * <p>Returns a matrix constructed by combining two existing matrix.</p>
     * @param {Ti.UI.iOS.D3Matrix} t2 <p>The second matrix. This matrix is concatenated to the matrix instance against which the function is invoked.  The result of this function is the first matrix multiplied by the second matrix. You might perform several multiplications in order to create a single matrix that contains the cumulative effects of several transformations. Note that matrix operations are not commutative - the order in which you concatenate matrices is important. That is, the result of multiplying matrix t1 by matrix t2 does not necessarily equal the result of multiplying matrix t2 by matrix t1.</p>
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    multiply:function(t2) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Returns a matrix constructed by rotating an existing matrix</p>
     * @param {Number} angle <p>The angle, in degrees, by which to rotate the matrix. A positive value specifies counterclockwise rotation and a negative value specifies clockwise rotation.</p>
     * @param {Number} x <p>The x part of the vector about which to rotate</p>
     * @param {Number} y <p>The y part of the vector about which to rotate</p>
     * @param {Number} z <p>The z part of the vector about which to rotate</p>
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    rotate:function(angle, x, y, z) {
    },

    /**
     * <p>Returns a matrix constructed by scaling an existing matrix</p>
     * @param {Number} sx <p>The value by which to scale x values of the matrix</p>
     * @param {Number} sy <p>The value by which to scale y values of the matrix</p>
     * @param {Number} sz <p>The value by which to scale z values of the matrix</p>
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    scale:function(sx, sy, sz) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.D3Matrix.m11} property.</p>
     * @param {Number} m11 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM11:function(m11) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.D3Matrix.m12} property.</p>
     * @param {Number} m12 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM12:function(m12) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.D3Matrix.m13} property.</p>
     * @param {Number} m13 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM13:function(m13) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.D3Matrix.m14} property.</p>
     * @param {Number} m14 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM14:function(m14) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.D3Matrix.m21} property.</p>
     * @param {Number} m21 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM21:function(m21) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.D3Matrix.m22} property.</p>
     * @param {Number} m22 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM22:function(m22) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.D3Matrix.m23} property.</p>
     * @param {Number} m23 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM23:function(m23) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.D3Matrix.m24} property.</p>
     * @param {Number} m24 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM24:function(m24) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.D3Matrix.m31} property.</p>
     * @param {Number} m31 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM31:function(m31) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.D3Matrix.m32} property.</p>
     * @param {Number} m32 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM32:function(m32) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.D3Matrix.m33} property.</p>
     * @param {Number} m33 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM33:function(m33) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.D3Matrix.m34} property.</p>
     * @param {Number} m34 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM34:function(m34) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.D3Matrix.m41} property.</p>
     * @param {Number} m41 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM41:function(m41) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.D3Matrix.m42} property.</p>
     * @param {Number} m42 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM42:function(m42) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.D3Matrix.m43} property.</p>
     * @param {Number} m43 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM43:function(m43) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.D3Matrix.m44} property.</p>
     * @param {Number} m44 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM44:function(m44) {
    },

    /**
     * <p>Returns a matrix constructed by translating an existing matrix</p>
     * @param {Number} tx <p>The value by which to move x values with the matrix</p>
     * @param {Number} ty <p>The value by which to move y values with the matrix</p>
     * @param {Number} tz <p>The value by which to move z values with the matrix</p>
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    translate:function(tx, ty, tz) {
    }
};

/**
 * platforms: iPhone, iPad
 */
Ti.UI.iOS.AdView = function() {
};
Ti.UI.iOS.AdView.prototype = {

    /**
     * <p>The size of the advertisement when minimized.</p>
     * @type String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad)
     */
    adSize:null,

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.4 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.4 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.4 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.4 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.4 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.4 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    children:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 1.4 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 1.4 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    right:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 1.4 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>A banner view action can cover your application's user interface. However, your application continues to run, and receives events normally. If your application receives an event that requires the user's attention, it can programmatically cancel the action and uncover its interface by calling cancelAction. Canceling actions frequently can cause a loss of revenue for your application.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    cancelAction:function() {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.adSize} property.</p>
     * @returns String
     * @since 1.9.0 (iPhone), 1.9.0 (iPad)
     */
    getAdSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.anchorPoint} property.</p>
     * @returns Point
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.backgroundColor} property.</p>
     * @returns String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 1.4 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 1.4 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 1.4 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 1.4 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.backgroundImage} property.</p>
     * @returns String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 1.4 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 1.4 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.backgroundTopCap} property.</p>
     * @returns Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.borderColor} property.</p>
     * @returns String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.borderRadius} property.</p>
     * @returns Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.borderWidth} property.</p>
     * @returns Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.center} property.</p>
     * @returns Point
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.focusable} property.</p>
     * @returns Boolean
     * @since 1.4 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.height} property.</p>
     * @returns Number
     * @returns String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 1.4 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.layout} property.</p>
     * @returns String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.left} property.</p>
     * @returns Number
     * @returns String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.opacity} property.</p>
     * @returns Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.right} property.</p>
     * @returns Number
     * @returns String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.size} property.</p>
     * @returns Dimension
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 1.4 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.top} property.</p>
     * @returns Number
     * @returns String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.touchEnabled} property.</p>
     * @returns Boolean
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.visible} property.</p>
     * @returns Boolean
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.width} property.</p>
     * @returns Number
     * @returns String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.AdView.zIndex} property.</p>
     * @returns Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.adSize} property.</p>
     * @param {String} adSize <p>New value for the property.</p>
     * @since 1.9.0 (iPhone), 1.9.0 (iPad)
     */
    setAdSize:function(adSize) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 1.4 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 1.4 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 1.4 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 1.4 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 1.4 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 1.4 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 1.4 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 1.4 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 1.4 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.AdView.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: iPhone, iPad
 * @namespace <p>Use the {@link Ti.UI.iOS.createCoverFlowView} method to create a cover flow view.</p>
 * 
 * @example Simple 3 image cover flow example
 * <p>Create a simple cover flow view.</p>
<pre><code>var view = Ti.UI.iOS.createCoverFlowView({
    images:['a.png','b.png','c.png'],
    backgroundColor:'#000'
});
window.add(view);
</code></pre>
 */
Ti.UI.iOS.CoverFlowView = function() {
};
Ti.UI.iOS.CoverFlowView.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    children:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    height:null,

    /**
     * <p>Array of images to display in the view.</p>
     * @type Array<String>|Array<Ti.Blob>|Array<Ti.Filesystem.File>|Array<CoverFlowImageType>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    images:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    right:null,

    /**
     * <p>Index to make selected.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    selected:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.borderColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.center} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.images} property.</p>
     * @returns Array<String>
     * @returns Array<Ti.Blob>
     * @returns Array<Ti.Filesystem.File>
     * @returns Array<CoverFlowImageType>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getImages:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.layout} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.opacity} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.selected} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getSelected:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.size} property.</p>
     * @returns Dimension
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.CoverFlowView.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Changes the image for a specified index.</p>
     * @param {Number} index <p>Index to add the image at.</p>
     * @param {String|Ti.Blob|Ti.Filesystem.File|CoverFlowImageType} image <p>Image to add at this index.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setImage:function(index, image) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.images} property.</p>
     * @param {Array<String>|Array<Ti.Blob>|Array<Ti.Filesystem.File>|Array<CoverFlowImageType>} images <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setImages:function(images) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.selected} property.</p>
     * @param {Number} selected <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setSelected:function(selected) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.CoverFlowView.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: iPhone, iPad
 * @namespace <p>A tabbed bar is a button bar that
maintains a state (visually distinguished as a pressed or selected look).
It is closely related to the <code>ButtonBar</code> control. See the description of 
{@link Ti.UI.ButtonBar} for information on styling tabbed bars and buttons
bars.</p>
<p>Use the {@link Ti.UI.iOS.createTabbedBar} method to create a Tabbed Bar.</p>
 * 
 * @example Simple Tabbed Bar with 3 items
 * <p>var bb1 = Ti.UI.iOS.createTabbedBar({
    labels:['One', 'Two', 'Three'],
    backgroundColor:'#336699',
    top:50,
    style:Ti.UI.iPhone.SystemButtonStyle.BAR,
    height:25,
    width:200
});
win.add(bb1);</p>
 */
Ti.UI.iOS.TabbedBar = function() {
};
Ti.UI.iOS.TabbedBar.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    children:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    height:null,

    /**
     * <p>Index of the currently selected button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    index:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Array of labels for the tabbed bar.</p>
     * @type Array<String>|Array<BarItemType>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    labels:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    right:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Style of the tabbed bar.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    style:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.borderColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.center} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.index} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getIndex:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.labels} property.</p>
     * @returns Array<String>
     * @returns Array<BarItemType>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLabels:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.layout} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.opacity} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.size} property.</p>
     * @returns Dimension
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.style} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.TabbedBar.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.index} property.</p>
     * @param {Number} index <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setIndex:function(index) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.labels} property.</p>
     * @param {Array<String>|Array<BarItemType>} labels <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLabels:function(labels) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.style} property.</p>
     * @param {Number} style <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setStyle:function(style) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.TabbedBar.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: iPhone, iPad
 * @namespace <p>A toolbar can contain buttons, as well as certain other widgets, including 
text fields and labels.</p>
<p>To provide spacing between items in the toolbar, you can use the special iOS system
button types, {@link Ti.UI.iPhone.SystemButton.FIXED_SPACE} and 
{@link Ti.UI.iPhone.SystemButton.FLEXIBLE_SPACE}.</p>
<p>Note that toolbars are positioned like other views (using the <code>top</code> and <code>bottom</code> properties, 
for example), but the iOS Human Interface Guidelines have specific requirements for
placing toolbars: on iPhone, a toolbar should be at the bottom 
of the window. On the iPad, a toolbar should appear at the top or bottom of a window.</p>
<p>Use the {@link Ti.UI.iOS.createToolbar} method to create a toolbar.</p>
 * 
 * @example Simple Toolbar
 * <p>The following code excerpt creates a simple toolbar, placed at the bottom of the
window. </p>
<pre><code>var send = Ti.UI.createButton({
    title: 'Send',
    style: Ti.UI.iPhone.SystemButtonStyle.DONE,
});

var camera = Ti.UI.createButton({
    systemButton: Ti.UI.iPhone.SystemButton.CAMERA,
});

var cancel = Ti.UI.createButton({
    systemButton: Ti.UI.iPhone.SystemButton.CANCEL
});

flexSpace = Ti.UI.createButton({
    systemButton:Ti.UI.iPhone.SystemButton.FLEXIBLE_SPACE
});

var toolbar = Ti.UI.createToolbar({
    items:[send, flexSpace, camera, flexSpace, cancel],
    bottom:0,
    borderTop:true,
    borderBottom:false
}); 
win.add(toolbar);
</code></pre>
<p>Note the use of the flexible space for positioning the toolbar buttons -- the 
<code>FLEXIBLE_SPACE</code> button doesn't appear as a button, but a variable space between the
controls on either side of it. Available space in the toolbar is divided between 
all of the flexible space buttons in the toolbar. Without the flexible spaces in
this example, the toolbar buttons would be grouped tightly together on the left 
side of the toolbar.</p>
 */
Ti.UI.iOS.Toolbar = function() {
};
Ti.UI.iOS.Toolbar.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Background color for the toolbar, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    barColor:null,

    /**
     * <p>If <code>true</code>, a border is drawn on the bottom of the toolbar.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderBottom:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderRadius:null,

    /**
     * <p>If <code>true</code>, a border is drawn on the top of the toolbar.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderTop:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    children:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    height:null,

    /**
     * <p>An array of buttons (or other widgets) contained in the toolbar.</p>
     * @type Array<Ti.UI.View>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    items:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    right:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>If <code>true</code>, a translucent background color is used for the toolbar.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    translucent:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.barColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBarColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.borderBottom} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.borderColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.borderTop} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.center} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.items} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getItems:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.layout} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.opacity} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.size} property.</p>
     * @returns Dimension
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.translucent} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTranslucent:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iOS.Toolbar.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.barColor} property.</p>
     * @param {String} barColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBarColor:function(barColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.borderBottom} property.</p>
     * @param {Boolean} borderBottom <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderBottom:function(borderBottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.borderTop} property.</p>
     * @param {Boolean} borderTop <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderTop:function(borderTop) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.items} property.</p>
     * @param {Array<Ti.UI.View>} items <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setItems:function(items) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.translucent} property.</p>
     * @param {Boolean} translucent <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTranslucent:function(translucent) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iOS.Toolbar.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: iPad
 * @namespace <p>All properties, methods and events in this namespace will only work on the Apple iPad 
related devices.  To develop for iPad, you will need the Apple iPhone SDK 3.2 or later 
and Titanium Mobile SDK 1.2 or later. </p>
<p>For iPad UI programming guidelines, please review the [iPad Human Interface Guidelines]
(http://developer.apple.com/iphone/library/documentation/General/Conceptual/iPadHIG/Introduction/Introduction.html).</p>
 */
Ti.UI.iPad = {

    /**
     * <p>An arrow that points in any direction.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    POPOVER_ARROW_DIRECTION_ANY:null,

    /**
     * <p>An arrow that points downward.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    POPOVER_ARROW_DIRECTION_DOWN:null,

    /**
     * <p>An arrow that points toward the left.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    POPOVER_ARROW_DIRECTION_LEFT:null,

    /**
     * <p>An arrow that points toward the right.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    POPOVER_ARROW_DIRECTION_RIGHT:null,

    /**
     * <p>The status of the arrow is currently unknown.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    POPOVER_ARROW_DIRECTION_UNKNOWN:null,

    /**
     * <p>An arrow that points upward.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    POPOVER_ARROW_DIRECTION_UP:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.2 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.iPad.DocumentViewer}.</p>
     * @param {Dictionary<Ti.UI.iPad.DocumentViewer>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.iPad.DocumentViewer} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.iPad.DocumentViewer
     * @since 1.8 (iPad)
     */
    createDocumentViewer:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.iPad.Popover}.</p>
     * @param {Dictionary<Ti.UI.iPad.Popover>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.iPad.Popover} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.iPad.Popover
     * @since 1.2 (iPad)
     */
    createPopover:function(parameters) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.iPad.SplitWindow}.</p>
     * @param {Dictionary<Ti.UI.iPad.SplitWindow>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.iPad.SplitWindow} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.iPad.SplitWindow
     * @since 1.2 (iPad)
     */
    createSplitWindow:function(parameters) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.2 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.2 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: iPad
 * @namespace <p>For example, an email program might use this class to allow the user to preview 
attachments and open them in other apps. Use this class to present an appropriate 
user interface for previewing or printing a specified file. The DocumentViewer is 
created by the method {@link Ti.UI.iPad.createDocumentViewer}.</p>
 * 
 * @example Document Viewer Example
 * <p>In this example, we create a document viewer with a window button and right navigation button.</p>
<p>//-----------example--------
    Ti.UI.setBackgroundColor('#000');
    //creating the window
    var win1 = Ti.UI.createWindow({
        title:'win 1',
        backgroundColor:'#fff'
        });
     //add window - navigation bar
     var modalWin = Ti.UI.createWindow();
     //nav bar
     var navmodal = Ti.UI.iPhone.createNavigationGroup({
        window:modalWin
        });
     win1.add(navmodal);
     //button for the nav bar
     var b2t = Ti.UI.createButton({
       title:'Launch'
       });
     modalWin.RightNavButton = b2t;
     //button for the window
     var b1t = Ti.UI.createButton({
       title:'Launch',
       height:40,
       width:200,
       top:270
       });
     win1.add(b1t);
     //Setting up the documentviewer
     z = Ti.UI.iPad.createDocumentViewer({url:'Example.pdf'});
     //documentviewer with animation set on and a quicklook view poping up next to a view
     b1t.addEventListener('click', function(){z.show({animated:false,view:b2t});});
     //documentviewer with animation set off
     b2t.addEventListener('click', function(){z.show();});
     win1.open();</p>
 */
Ti.UI.iPad.DocumentViewer = function() {
};
Ti.UI.iPad.DocumentViewer.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 1.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 1.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.8 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 1.8 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.8 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 1.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 1.8 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.8 (iPad)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.8 (iPad)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 1.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.8 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 1.8 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 1.8 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.8 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 1.8 (iPad)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 1.8 (iPad)
     */
    children:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 1.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 1.8 (iPad)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 1.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 1.8 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.8 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 1.8 (iPad)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (iPad)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.8 (iPad)
     */
    right:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 1.8 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 1.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 1.8 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 1.8 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 1.8 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 1.8 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 1.8 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 1.8 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 1.8 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 1.8 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 1.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (iPad)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.anchorPoint} property.</p>
     * @returns Point
     * @since 1.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 1.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundColor} property.</p>
     * @returns String
     * @since 1.8 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 1.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 1.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 1.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 1.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 1.8 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundImage} property.</p>
     * @returns String
     * @since 1.8 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 1.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 1.8 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 1.8 (iPad)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 1.8 (iPad)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundTopCap} property.</p>
     * @returns Number
     * @since 1.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.borderColor} property.</p>
     * @returns String
     * @since 1.8 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.borderRadius} property.</p>
     * @returns Number
     * @since 1.8 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.borderWidth} property.</p>
     * @returns Number
     * @since 1.8 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 1.8 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.center} property.</p>
     * @returns Point
     * @since 1.8 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 1.8 (iPad)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.focusable} property.</p>
     * @returns Boolean
     * @since 1.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.height} property.</p>
     * @returns Number
     * @returns String
     * @since 1.8 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 1.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.layout} property.</p>
     * @returns String
     * @since 1.8 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.left} property.</p>
     * @returns Number
     * @returns String
     * @since 1.8 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.opacity} property.</p>
     * @returns Number
     * @since 1.8 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (iPad)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.right} property.</p>
     * @returns Number
     * @returns String
     * @since 1.8 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.size} property.</p>
     * @returns Dimension
     * @since 1.8 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 1.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.top} property.</p>
     * @returns Number
     * @returns String
     * @since 1.8 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.touchEnabled} property.</p>
     * @returns Boolean
     * @since 1.8 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 1.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.visible} property.</p>
     * @returns Boolean
     * @since 1.8 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.width} property.</p>
     * @returns Number
     * @returns String
     * @since 1.8 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.DocumentViewer.zIndex} property.</p>
     * @returns Number
     * @since 1.8 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 1.8 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 1.8 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 1.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 1.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 1.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 1.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 1.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 1.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 1.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>change the url of the document viewer</p>
     * @param {String} url <p>the new url</p>
     * @since 1.8 (iPad)
     */
    setUrl:function(url) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.DocumentViewer.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>to display the document viewer over the current view.</p>
     * @param {Boolean} animated <p>is a boolean indicating if the showing of the viewer should be animated.</p>
     * @param {Object} view <p>The view property would specify the view relative to where the viewer should display.</p>
     * @since 1.8 (iPad)
     */
    show:function(animated, view) {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (iPad)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 1.8 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (iPad)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: iPad
 * @namespace <p>You use popovers to present information temporarily but in a way that does not take over 
the entire screen like a modal view does. The popover content is layered on top of your 
existing content in a special type of window. The popover remains visible until the user 
taps outside of the popover window or you explicitly dismiss it. The Popover is created 
by the method {@link Ti.UI.iPad.createPopover}.</p>
<p><img alt="popover" src="http://img.skitch.com/20100406-pmssjk1a3a65s6ui8qnbqi59c4.png" /></p>
 * 
 * @example Simple Popover
 * <p>In this example, we create a simple popover and position it near the button</p>
<pre><code>var popover = Ti.UI.iPad.createPopover({height:100,width:100});
popover.add(view);
popover.show({view:button});
</code></pre>
 * 
 * @example Popover with title and nav button
 * <p>In this example, we create a popover with a title and right navigation button.</p>
<pre><code>var popover = Ti.UI.iPad.createPopover({ 
    width:250, 
    height:100,
    title: "Yo Yo",
    rightNavButton:button
});
</code></pre>
 */
Ti.UI.iPad.Popover = function() {
};
Ti.UI.iPad.Popover.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 1.2 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 1.2 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>return the arrow direction of the popover</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    arrowDirection:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 1.2 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 1.2 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 1.2 (iPad)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 1.2 (iPad)
     */
    children:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 1.2 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 1.2 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    left:null,

    /**
     * <p>the left button in the nav area of the popover</p>
     * @type Object
     * @since 1.2 (iPad)
     */
    leftNavButton:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (iPad)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    right:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 1.2 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 1.2 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>the title of the nav area of the popover</p>
     * @type String
     * @since 1.2 (iPad)
     */
    title:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 1.2 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 1.2 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 1.2 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 1.2 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.2 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 1.2 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 1.2 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (iPad)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.2 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.anchorPoint} property.</p>
     * @returns Point
     * @since 1.2 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 1.2 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.arrowDirection} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getArrowDirection:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.backgroundColor} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 1.2 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.backgroundImage} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 1.2 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.backgroundTopCap} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.borderColor} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.borderRadius} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.borderWidth} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.center} property.</p>
     * @returns Point
     * @since 1.2 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 1.2 (iPad)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.focusable} property.</p>
     * @returns Boolean
     * @since 1.2 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.height} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 1.2 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.layout} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.left} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.leftNavButton} property.</p>
     * @returns Object
     * @since 1.2 (iPad)
     */
    getLeftNavButton:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.opacity} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (iPad)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.right} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.size} property.</p>
     * @returns Dimension
     * @since 1.2 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 1.2 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.title} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.top} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.touchEnabled} property.</p>
     * @returns Boolean
     * @since 1.2 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 1.2 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.visible} property.</p>
     * @returns Boolean
     * @since 1.2 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.width} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.Popover.zIndex} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 1.2 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 1.2 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.2 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.arrowDirection} property.</p>
     * @param {Number} arrowDirection <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setArrowDirection:function(arrowDirection) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>change the height of the popover</p>
     * @param {Number|String} height <p>height of the popover</p>
     * @since 1.2 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.leftNavButton} property.</p>
     * @param {Object} leftNavButton <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setLeftNavButton:function(leftNavButton) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>set the passthrough views for the popover</p>
     * @param {Array<Object>} passthroughViews <p>array of views which the user can interact with while the popover is open (i.e. clicking on these views will interact with these views, and not dismiss the popover).</p>
     * @since 1.2 (iPad)
     */
    setPassthroughViews:function(passthroughViews) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTitle:function(title) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>change the width of the popover</p>
     * @param {Number|String} width <p>width of the popover</p>
     * @since 1.2 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.Popover.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 1.2 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (iPad)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 1.2 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (iPad)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: iPad
 * @namespace <p>You use this class to implement a master-detail interface, in which the 
left-side view presents a list of items and the right-side presents details of the 
selected item. The SplitView is for use exclusively on iPad devices. </p>
<p>By default, the SplitView shows both master and detail views in landscape orientation. 
When the device switches into portrait orientation, the detail view occupies the entire 
screen. The user can click a button to bring up the master view as floating, "popover" 
view. (To show the master view in both orientations, set <code>showMasterInPortrait</code> to <code>true</code>.)</p>
<p>Use the {@link Ti.UI.iPad.createSplitWindow} method to create a SplitWindow. The 
<code>masterView</code> and <code>detailView</code> properties are required in the constructor of the 
SplitWindow and cannot be changed once set.</p>
<p>The SplitWindow inherits its methods and properties from {@link Ti.UI.Window}.</p>
<p>The SplitWindow is a top-level window and cannot be contained within another window or view.
<img alt="splitview" src="http://img.skitch.com/20100406-1f85bm9cx8t768xgsjqax1ng6y.png" /></p>
 * 
 * @example Split Window Example
 * <p>This is an example of a Split Window.</p>
<pre><code>var win = Ti.UI.createWindow();

var nav = Ti.UI.iPhone.createNavigationGroup({
   window: win
});

var splitwin = Ti.UI.iPad.createSplitWindow({
    detailView:nav,
    masterView:masterView
});

splitwin.addEventListener('visible',function(e)
{
    if (e.view == 'detail')
    {
        e.button.title = "Master";
        win.leftNavButton = e.button;
    }
    else if (e.view == 'master')
    {
        win.leftNavButton = null;
    }
});

splitwin.open();
</code></pre>
 */
Ti.UI.iPad.SplitWindow = function() {
};
Ti.UI.iPad.SplitWindow.prototype = {

    /**
     * <p>For heavyweight windows, this property contains a reference to the
Android Activity object associated with this window.</p>
     * @type Ti.Android.Activity
     * @since 1.2 (Android)
     */
    activity:null,

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 1.2 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 1.2 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Title for the back button. This is only valid when the window is a child of a tab.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    backButtonTitle:null,

    /**
     * <p>The image to show as the back button. This is only valid when the window is a child of a tab.</p>
     * @type String|Ti.Blob
     * @since 1.2 (iPad)
     */
    backButtonTitleImage:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 1.2 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 1.2 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Background color for the nav bar, as a color name or hex triplet.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    barColor:null,

    /**
     * <p>Background image for the nav bar, specified as a URL to a local image.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    barImage:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 1.2 (iPad)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 1.2 (iPad)
     */
    children:null,

    /**
     * <p>View for the detail view section of the SplitWindow.</p>
     * @type Ti.UI.View
     * @since 1.2 (iPad)
     */
    detailView:null,

    /**
     * <p>Boolean value indicating if the application should exit when the Android
Back button is pressed while the window is being shown.</p>
     * @type Boolean
     * @since 1.2 (Android)
     */
    exitOnClose:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 1.2 (Android)
     */
    focusable:null,

    /**
     * <p>Boolean value indicating if the window is fullscreen.</p>
     * @type Boolean
     * @since 1.2 (iPad)
     */
    fullscreen:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 1.2 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    left:null,

    /**
     * <p>View to show in the left nav bar area.</p>
     * @type Ti.UI.View
     * @since 1.2 (iPad)
     */
    leftNavButton:null,

    /**
     * <p>View for the master view section of the SplitWindow.</p>
     * @type Ti.UI.View
     * @since 1.2 (iPad)
     */
    masterView:null,

    /**
     * <p>Boolean to indicate if the window should be opened modal in front of other windows.</p>
     * @type Boolean
     * @since 1.2 (iPad)
     */
    modal:null,

    /**
     * <p>For modal windows, hide the nav bar (<code>true</code>) or show the nav bar (<code>false</code>).</p>
     * @type Boolean
     * @since 1.2 (iPad)
     */
    navBarHidden:null,

    /**
     * <p>The opacity from 0.0-1.0.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    opacity:null,

    /**
     * <p>Current orientation of the window.</p>
     * @type Number
     * @since 1.2 (Android)
     */
    orientation:null,

    /**
     * <p>Array of supported orientation modes, specified using the orientation
constants defined in {@link Ti.UI}.</p>
     * @type Array<Number>
     * @since 1.2 (iPad)
     */
    orientationModes:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (iPad)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    right:null,

    /**
     * <p>View to show in the right nav bar area.</p>
     * @type Ti.UI.View
     * @since 1.2 (iPad)
     */
    rightNavButton:null,

    /**
     * <p>Whether or not to show the master view in portrait orientation.</p>
     * @type Boolean
     * @since 1.7.2 (iPad)
     */
    showMasterInPortrait:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 1.2 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 1.2 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Boolean value indicating if the tab bar should be hidden. </p>
     * @type Boolean
     * @since 1.2 (iPad)
     */
    tabBarHidden:null,

    /**
     * <p>Title of the window.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    title:null,

    /**
     * <p>View to show in the title area of the nav bar.</p>
     * @type Ti.UI.View
     * @since 1.2 (iPad)
     */
    titleControl:null,

    /**
     * <p>Image to show in the title area of the nav bar, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    titleImage:null,

    /**
     * <p>Title prompt for the window.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    titlePrompt:null,

    /**
     * <p>Key identifying a string from the locale file to use for the window title.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    titleid:null,

    /**
     * <p>Key identifying a string from the locale file to use for the window title prompt.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    titlepromptid:null,

    /**
     * <p>Array of button objects to show in the window's toolbar. This is only valid when
the window is the child of a tab.</p>
     * @type Array<Object>
     * @since 1.2 (iPad)
     */
    toolbar:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 1.2 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 1.2 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating if the nav bar is translucent.</p>
     * @type Boolean
     * @since 1.2 (iPad)
     */
    translucent:null,

    /**
     * <p>Local URL to a JavaScript file with the windows instructions.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    url:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 1.2 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    width:null,

    /**
     * <p>Set the pixel format for the Activity's Window.</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    windowPixelFormat:null,

    /**
     * <p>Determines whether a heavyweight window's soft input area (ie software keyboard) is visible 
as it receives focus and how the window behaves in order to accomodate it while keeping its 
contents in view.</p>
     * @type Number
     * @since 1.2 (Android)
     */
    windowSoftInputMode:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 1.2 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.2 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 1.2 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Closes the window.</p>
     * @param {Dictionary<Ti.UI.Animation>} params <p>Animation or display properties to use when closing the window.</p>
     * @since 1.2 (iPad)
     */
    close:function(params) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 1.2 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (iPad)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.2 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.activity} property.</p>
     * @returns Ti.Android.Activity
     * @since 1.2 (Android)
     */
    getActivity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.anchorPoint} property.</p>
     * @returns Point
     * @since 1.2 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 1.2 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.backButtonTitle} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBackButtonTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.backButtonTitleImage} property.</p>
     * @returns String
     * @returns Ti.Blob
     * @since 1.2 (iPad)
     */
    getBackButtonTitleImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundColor} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 1.2 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundImage} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 1.2 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundTopCap} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.barColor} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBarColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.barImage} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBarImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.borderColor} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.borderRadius} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.borderWidth} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.center} property.</p>
     * @returns Point
     * @since 1.2 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 1.2 (iPad)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.detailView} property.</p>
     * @returns Ti.UI.View
     * @since 1.2 (iPad)
     */
    getDetailView:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.exitOnClose} property.</p>
     * @returns Boolean
     * @since 1.2 (Android)
     */
    getExitOnClose:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.focusable} property.</p>
     * @returns Boolean
     * @since 1.2 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.fullscreen} property.</p>
     * @returns Boolean
     * @since 1.2 (iPad)
     */
    getFullscreen:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.height} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 1.2 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.layout} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.left} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.leftNavButton} property.</p>
     * @returns Ti.UI.View
     * @since 1.2 (iPad)
     */
    getLeftNavButton:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.masterView} property.</p>
     * @returns Ti.UI.View
     * @since 1.2 (iPad)
     */
    getMasterView:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.modal} property.</p>
     * @returns Boolean
     * @since 1.2 (iPad)
     */
    getModal:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.navBarHidden} property.</p>
     * @returns Boolean
     * @since 1.2 (iPad)
     */
    getNavBarHidden:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.opacity} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.orientation} property.</p>
     * @returns Number
     * @since 1.2 (Android)
     */
    getOrientation:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.orientationModes} property.</p>
     * @returns Array<Number>
     * @since 1.2 (iPad)
     */
    getOrientationModes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (iPad)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.right} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.rightNavButton} property.</p>
     * @returns Ti.UI.View
     * @since 1.2 (iPad)
     */
    getRightNavButton:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.showMasterInPortrait} property.</p>
     * @returns Boolean
     * @since 1.7.2 (iPad)
     */
    getShowMasterInPortrait:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.size} property.</p>
     * @returns Dimension
     * @since 1.2 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 1.2 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.tabBarHidden} property.</p>
     * @returns Boolean
     * @since 1.2 (iPad)
     */
    getTabBarHidden:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.title} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.titleControl} property.</p>
     * @returns Ti.UI.View
     * @since 1.2 (iPad)
     */
    getTitleControl:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.titleImage} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getTitleImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.titlePrompt} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getTitlePrompt:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.titleid} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getTitleid:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.titlepromptid} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getTitlepromptid:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.toolbar} property.</p>
     * @returns Array<Object>
     * @since 1.2 (iPad)
     */
    getToolbar:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.top} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.touchEnabled} property.</p>
     * @returns Boolean
     * @since 1.2 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 1.2 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.translucent} property.</p>
     * @returns Boolean
     * @since 1.2 (iPad)
     */
    getTranslucent:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.url} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getUrl:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.visible} property.</p>
     * @returns Boolean
     * @since 1.2 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.width} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.windowPixelFormat} property.</p>
     * @returns Number
     * @since 1.8.0 (Android)
     */
    getWindowPixelFormat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.windowSoftInputMode} property.</p>
     * @returns Number
     * @since 1.2 (Android)
     */
    getWindowSoftInputMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPad.SplitWindow.zIndex} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 1.2 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Hides the tab bar. Must be called before opening the window.</p>
     * @since 1.2 (iPad)
     */
    hideTabBar:function() {
    },

    /**
     * <p>Opens the window.</p>
     * @param {openWindowParams} params <p>Animation or display properties to use when opening the window.</p>
     * @since 1.2 (iPad)
     */
    open:function(params) {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 1.2 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.2 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.activity} property.</p>
     * @param {Ti.Android.Activity} activity <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setActivity:function(activity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.backButtonTitle} property.</p>
     * @param {String} backButtonTitle <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackButtonTitle:function(backButtonTitle) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.backButtonTitleImage} property.</p>
     * @param {String|Ti.Blob} backButtonTitleImage <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackButtonTitleImage:function(backButtonTitleImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.barColor} property.</p>
     * @param {String} barColor <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBarColor:function(barColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.barImage} property.</p>
     * @param {String} barImage <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBarImage:function(barImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.fullscreen} property.</p>
     * @param {Boolean} fullscreen <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setFullscreen:function(fullscreen) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.leftNavButton} property.</p>
     * @param {Ti.UI.View} leftNavButton <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setLeftNavButton:function(leftNavButton) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.modal} property.</p>
     * @param {Boolean} modal <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setModal:function(modal) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.navBarHidden} property.</p>
     * @param {Boolean} navBarHidden <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setNavBarHidden:function(navBarHidden) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.orientation} property.</p>
     * @param {Number} orientation <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setOrientation:function(orientation) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.orientationModes} property.</p>
     * @param {Array<Number>} orientationModes <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setOrientationModes:function(orientationModes) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.rightNavButton} property.</p>
     * @param {Ti.UI.View} rightNavButton <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setRightNavButton:function(rightNavButton) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.showMasterInPortrait} property.</p>
     * @param {Boolean} showMasterInPortrait <p>New value for the property.</p>
     * @since 1.7.2 (iPad)
     */
    setShowMasterInPortrait:function(showMasterInPortrait) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.tabBarHidden} property.</p>
     * @param {Boolean} tabBarHidden <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTabBarHidden:function(tabBarHidden) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTitle:function(title) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.titleControl} property.</p>
     * @param {Ti.UI.View} titleControl <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTitleControl:function(titleControl) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.titleImage} property.</p>
     * @param {String} titleImage <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTitleImage:function(titleImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.titlePrompt} property.</p>
     * @param {String} titlePrompt <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTitlePrompt:function(titlePrompt) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.titleid} property.</p>
     * @param {String} titleid <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTitleid:function(titleid) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.titlepromptid} property.</p>
     * @param {String} titlepromptid <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTitlepromptid:function(titlepromptid) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.toolbar} property.</p>
     * @param {Array<Object>} toolbar <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setToolbar:function(toolbar) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.translucent} property.</p>
     * @param {Boolean} translucent <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTranslucent:function(translucent) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.windowPixelFormat} property.</p>
     * @param {Number} windowPixelFormat <p>New value for the property.</p>
     * @since 1.8.0 (Android)
     */
    setWindowPixelFormat:function(windowPixelFormat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPad.SplitWindow.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 1.2 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (iPad)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 1.2 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (iPad)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: iPhone, iPad
 */
Ti.UI.iPhone = {

    /**
     * <p>View presented with the same style as its parent window.</p>
     * @type Number
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    MODAL_PRESENTATION_CURRENT_CONTEXT:null,

    /**
     * <p>Window width and height are smaller than those of the screen and the view is centered on 
the screen.</p>
     * @type Number
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    MODAL_PRESENTATION_FORMSHEET:null,

    /**
     * <p>Window covers the screen.</p>
     * @type Number
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    MODAL_PRESENTATION_FULLSCREEN:null,

    /**
     * <p>Window height is the height of the screen and width is equal to screen width in a portrait 
orientation.</p>
     * @type Number
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    MODAL_PRESENTATION_PAGESHEET:null,

    /**
     * <p>When the window is presented, its view slides up from the bottom of the screen. On dismissal, 
the view slides back down (default.)</p>
     * @type Number
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    MODAL_TRANSITION_STYLE_COVER_VERTICAL:null,

    /**
     * <p>When the window is presented, the current view fades out while the new view fades in at the 
same time. On dismissal, a similar type of cross-fade is used to return to the original view.</p>
     * @type Number
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    MODAL_TRANSITION_STYLE_CROSS_DISSOLVE:null,

    /**
     * <p>When the window is presented, the current view initiates a horizontal 3D flip from 
right-to-left, resulting in the revealing of the new view as if it were on the back of the 
previous view. On dismissal, the flip occurs from left-to-right, returning to the original 
view.</p>
     * @type Number
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL:null,

    /**
     * <p>When the window is presented, one corner of the current view curls up to reveal the modal 
view underneath. On dismissal, the curled up page unfurls itself back on top of the modal 
view.</p>
     * @type Number
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    MODAL_TRANSITION_STYLE_PARTIAL_CURL:null,

    /**
     * <p>Value of the badge for the application's springboard icon.</p>
     * @type Number
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    appBadge:null,

    /**
     * <p>Determines whether the shake to edit system-wide capability is enabled.</p>
     * @type Boolean
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    appSupportsShakeToEdit:null,

    /**
     * <p>Determines whether the status bar is hidden.</p>
     * @type Boolean
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    statusBarHidden:null,

    /**
     * <p>Determines the status bar color style.</p>
     * @type Number
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    statusBarStyle:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Creates and returns an instance of {@link Ti.UI.iPhone.NavigationGroup}.</p>
     * @param {Dictionary<Ti.UI.iPhone.NavigationGroup>} parameters <p>Properties to set on a new object, including any defined by {@link Ti.UI.iPhone.NavigationGroup} except those marked not-creation or read-only.</p>
     * @returns Ti.UI.iPhone.NavigationGroup
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    createNavigationGroup:function(parameters) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.appBadge} property.</p>
     * @returns Number
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    getAppBadge:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.appSupportsShakeToEdit} property.</p>
     * @returns Boolean
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    getAppSupportsShakeToEdit:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.statusBarHidden} property.</p>
     * @returns Boolean
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    getStatusBarHidden:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.statusBarStyle} property.</p>
     * @returns Number
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    getStatusBarStyle:function() {
    },

    /**
     * <p>Hides the status bar.</p>
     * @param {hideStatusBarParams} params <p>Determines whether action is animated.</p>
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    hideStatusBar:function(params) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.appBadge} property.</p>
     * @param {Number} appBadge <p>New value for the property.</p>
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    setAppBadge:function(appBadge) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.appSupportsShakeToEdit} property.</p>
     * @param {Boolean} appSupportsShakeToEdit <p>New value for the property.</p>
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    setAppSupportsShakeToEdit:function(appSupportsShakeToEdit) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.statusBarHidden} property.</p>
     * @param {Boolean} statusBarHidden <p>New value for the property.</p>
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    setStatusBarHidden:function(statusBarHidden) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.statusBarStyle} property.</p>
     * @param {Number} statusBarStyle <p>New value for the property.</p>
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    setStatusBarStyle:function(statusBarStyle) {
    },

    /**
     * <p>Shows the status bar.</p>
     * @param {showStatusBarParams} params <p>Determines whether action is animated.</p>
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    showStatusBar:function(params) {
    }
};

/**
 * platforms: iPhone, iPad
 */
Ti.UI.iPhone.ActivityIndicatorStyle = function() {
};
Ti.UI.iPhone.ActivityIndicatorStyle.prototype = {

    /**
     * <p>Large white spinning indicator.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    BIG:null,

    /**
     * <p>Small gray spinning indicator.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    DARK:null,

    /**
     * <p>Small white spinning indicator (default.)</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    PLAIN:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: iPhone, iPad
 */
Ti.UI.iPhone.AnimationStyle = function() {
};
Ti.UI.iPhone.AnimationStyle.prototype = {

    /**
     * <p>Curl downwards during a transition animation.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    CURL_DOWN:null,

    /**
     * <p>Curl upwards during a transition animation.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    CURL_UP:null,

    /**
     * <p>Flip from left to right during a transition animation.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    FLIP_FROM_LEFT:null,

    /**
     * <p>Flip from right to left during a transition animation.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    FLIP_FROM_RIGHT:null,

    /**
     * <p>No animation.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    NONE:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: iPhone, iPad
 * @namespace <p>The navigation group is created with the method {@link Ti.UI.iPhone.createNavigationGroup}.</p>
<p><img alt="navgroup" src="http://img.skitch.com/20100406-rwe44533tkd94fdnbqqudxynpe.png" /></p>
<p>The <code>window</code> property must be set initially in the constructor when creating a navigation group 
to the root level window.  All navigation groups must have at least one root window that cannot 
be removed.</p>
 * 
 * @example Simple Navigation Group
 * <p>Create two windows in a navigation group, with the first colored blue. When the back button 
is clicked a red window is shown.</p>
<pre><code>var win1 = Ti.UI.createWindow();

var win2 = Ti.UI.createWindow({
    backgroundColor: 'red',
    title: 'Red Window'
});

var nav = Ti.UI.iPhone.createNavigationGroup({
   window: win2
});

win.add(nav);
win.open();

var win3 = Ti.UI.createWindow({
    backgroundColor: 'blue',
    title: 'Blue Window'
});
nav.open(win3, {animated:true});
</code></pre>
 */
Ti.UI.iPhone.NavigationGroup = function() {
};
Ti.UI.iPhone.NavigationGroup.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Toggle for whether or not to tile a background across a view.</p>
     * @type Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    backgroundRepeat:null,

    /**
     * <p>Selected background color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view, as a color name or hex triplet.</p>
     * @type String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    center:null,

    /**
     * <p>Array of this view's child views.</p>
     * @type Array<Ti.UI.View>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    children:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 1.2 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 1.2 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    opacity:null,

    /**
     * <p>The frame of the view (position relative to parent bounds) in system units.</p>
     * @type Dimension
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    rect:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    right:null,

    /**
     * <p>The bounds of the view in system units. x and y properties are always 0.</p>
     * @type Dimension
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 1.2 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    width:null,

    /**
     * <p>Window to add to this navigation group.</p>
     * @type Ti.UI.Window
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    window:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to add to this view's hierarchy.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Ti.UI.Animation|Dictionary<Ti.UI.Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Ti.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Closes a window and removes it from the navigation group.</p>
     * @param {Ti.UI.Window} window <p>Window to close.</p>
     * @param {Dictionary} options <p>Options supporting a single <code>animated</code> boolean property to determine whether the window 
will be animated (default) while being closed.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    close:function(window, options) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Ti.UI.View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Finishes a batch update of the View's layout properties and schedules a layout pass of the view tree.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    finishLayout:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.anchorPoint} property.</p>
     * @returns Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundColor} property.</p>
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundImage} property.</p>
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundRepeat} property.</p>
     * @returns Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBackgroundRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundTopCap} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.borderColor} property.</p>
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.borderRadius} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.borderWidth} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.center} property.</p>
     * @returns Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.children} property.</p>
     * @returns Array<Ti.UI.View>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getChildren:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.focusable} property.</p>
     * @returns Boolean
     * @since 1.2 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.height} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 1.2 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.layout} property.</p>
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.left} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.opacity} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.rect} property.</p>
     * @returns Dimension
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    getRect:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.right} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.size} property.</p>
     * @returns Dimension
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 1.2 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.top} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.touchEnabled} property.</p>
     * @returns Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.transform} property.</p>
     * @returns Ti.UI.D2Matrix
     * @returns Ti.UI.iOS.D3Matrix
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.visible} property.</p>
     * @returns Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.width} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.window} property.</p>
     * @returns Ti.UI.Window
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getWindow:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.UI.iPhone.NavigationGroup.zIndex} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Opens a window within the navigation group.</p>
     * @param {Ti.UI.Window} window <p>Window to open.</p>
     * @param {Dictionary} options <p>Options supporting a single <code>animated</code> boolean property to determine whether the window 
will be animated (default) while being closed.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    open:function(window, options) {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Ti.UI.View} view <p>View to remove from this view's hierarchy.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundRepeat} property.</p>
     * @param {Boolean} backgroundRepeat <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBackgroundRepeat:function(backgroundRepeat) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.transform} property.</p>
     * @param {Ti.UI.D2Matrix|Ti.UI.iOS.D3Matrix} transform <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Ti.UI.iPhone.NavigationGroup.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Starts a batch update of this view's layout properties.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    startLayout:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Ti.Blob>} callback <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @param {Boolean} honorScaleFactor <p>When set to true, the image is scaled based on scale factor of main screen.
When set to false the image in the blob has the same dimensions for retina and
non-retina devices. Only used on iOS.</p>
     * @returns Ti.Blob
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    toImage:function(callback, honorScaleFactor) {
    },

    /**
     * <p>Performs a batch update of all supplied layout properties and schedules a
layout pass after they have been updated.</p>
     * @param {Object} params <p>Dictionary of layout properties to be updated.</p>
     * @since 2.0.0 (iPhone), 2.0.0 (iPad)
     */
    updateLayout:function(params) {
    }
};

/**
 * platforms: iPhone, iPad
 */
Ti.UI.iPhone.ProgressBarStyle = function() {
};
Ti.UI.iPhone.ProgressBarStyle.prototype = {

    /**
     * <p>The style of progress view that is used in a toolbar.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    BAR:null,

    /**
     * <p>he standard progress-view style. This is the default.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    DEFAULT:null,

    /**
     * <p>The standard progress-view style. Same as <code>DEFAULT</code>.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    PLAIN:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: iPhone, iPad
 */
Ti.UI.iPhone.RowAnimationStyle = function() {
};
Ti.UI.iPhone.RowAnimationStyle.prototype = {

    /**
     * <p>The inserted row or rows slides in from the bottom; the deleted row or rows slides out 
toward the bottom.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    BOTTOM:null,

    /**
     * <p>The inserted or deleted row or rows fades into or out of the table view.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    FADE:null,

    /**
     * <p>The inserted row or rows slides in from the left; the deleted row or rows slides out to the 
left.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    LEFT:null,

    /**
     * <p>No animation is performed. The new cell value appears as if the cell had just been reloaded.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    NONE:null,

    /**
     * <p>The inserted row or rows slides in from the right; the deleted row or rows slides out to 
the right.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    RIGHT:null,

    /**
     * <p>The inserted row or rows slides in from the top; the deleted row or rows slides out toward 
the top.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    TOP:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: iPhone, iPad
 */
Ti.UI.iPhone.ScrollIndicatorStyle = function() {
};
Ti.UI.iPhone.ScrollIndicatorStyle.prototype = {

    /**
     * <p>A style of indicator which is black smaller than the default style. This style is good 
against a white content background.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    BLACK:null,

    /**
     * <p>The default style of scroll indicator, which is black with a white border. This style is 
good against any content background.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    DEFAULT:null,

    /**
     * <p>A style of indicator is white and smaller than the default style. This style is good against 
a black content background.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    WHITE:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: iPhone, iPad
 */
Ti.UI.iPhone.StatusBar = function() {
};
Ti.UI.iPhone.StatusBar.prototype = {

    /**
     * <p>Fade animation style, when the status bar is hidden or shown.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    ANIMATION_STYLE_FADE:null,

    /**
     * <p>No animation style, when the status bar is hidden or shown.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    ANIMATION_STYLE_NONE:null,

    /**
     * <p>Slide animation style, when the status bar is hidden or shown.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    ANIMATION_STYLE_SLIDE:null,

    /**
     * <p>Default status bar style.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    DEFAULT:null,

    /**
     * <p>Gray-colored status bar style.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    GRAY:null,

    /**
     * <p>Gray-colored status bar style.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    GREY:null,

    /**
     * <p>Opaque black-colored status bar style.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    OPAQUE_BLACK:null,

    /**
     * <p>Translucent black-colored status bar style, which provides some degree of transparency to 
the device background.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    TRANSLUCENT_BLACK:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: iPhone, iPad
 * @namespace <p>Most of these constants are used with the
{@link Ti.UI.Button.systemButton} property to define a standard
iOS system buttons for use in navigation bars and toolbars. </p>
<p>See {@link Ti.UI.Button} for more information on the <code>systemButton</code> property, including details
on where system buttons can be used.</p>
<p>A few of these constants are used with {@link Ti.UI.Button.style} to
create standard iOS buttons that can be used in other places, including table view rows.
These standard button types are:</p>
<ul>
<li>{@link Ti.UI.iPhone.SystemButton.CONTACT_ADD}</li>
<li>{@link Ti.UI.iPhone.SystemButton.DISCLOSURE}</li>
<li>{@link Ti.UI.iPhone.SystemButton.INFO_DARK}</li>
<li>{@link Ti.UI.iPhone.SystemButton.INFO_LIGHT}</li>
</ul>
<p>See Apple's 
{@link https://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/MobileHIG/Introduction/Introduction} 
in the iOS Developer Library for details on the proper usage of iOS standard buttons
and icons.</p>
 */
Ti.UI.iPhone.SystemButton = function() {
};
Ti.UI.iPhone.SystemButton.prototype = {

    /**
     * <p>Use with {@link Ti.UI.Button.systemButton} to specify an <strong>Action</strong> button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    ACTION:null,

    /**
     * <p>Use with {@link Ti.UI.Button.systemButton} to create an activity indicator that
can be used in navigation bars and toolbars. </p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    ACTIVITY:null,

    /**
     * <p>Use with {@link Ti.UI.Button.systemButton} to specify an <strong>Add</strong> button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    ADD:null,

    /**
     * <p>Use with {@link Ti.UI.Button.systemButton} to specify a <strong>Bookmarks</strong> button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    BOOKMARKS:null,

    /**
     * <p>Use with {@link Ti.UI.Button.systemButton} to specify a <strong>Camera</strong> button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    CAMERA:null,

    /**
     * <p>Use with {@link Ti.UI.Button.systemButton} to specify a <strong>Cancel</strong> button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    CANCEL:null,

    /**
     * <p>Use with {@link Ti.UI.Button.systemButton} to specify a <strong>Compose</strong> button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    COMPOSE:null,

    /**
     * <p>Use with {@link Ti.UI.Button.style} to specify a <strong>ContactAdd</strong> button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    CONTACT_ADD:null,

    /**
     * <p>Use with {@link Ti.UI.Button.style} to specify a <strong>Disclosure</strong> button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    DISCLOSURE:null,

    /**
     * <p>Use with {@link Ti.UI.Button.systemButton} to specify a <strong>Done</strong> button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    DONE:null,

    /**
     * <p>Use with {@link Ti.UI.Button.systemButton} to specify an <strong>Edit</strong> button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    EDIT:null,

    /**
     * <p>Use with {@link Ti.UI.Button.systemButton} to specify a <strong>Fast Forward</strong> button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    FAST_FORWARD:null,

    /**
     * <p>Use with {@link Ti.UI.Button.systemButton} to create a fixed-width blank space 
for spacing items in toolbars.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    FIXED_SPACE:null,

    /**
     * <p>Use with {@link Ti.UI.Button.systemButton} to create a flexible blank space 
for spacing items in toolbars.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    FLEXIBLE_SPACE:null,

    /**
     * <p>Use with {@link Ti.UI.Button.style} to specify a dark-colored <strong>Info</strong> button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    INFO_DARK:null,

    /**
     * <p>Use with {@link Ti.UI.Button.style} to specify a light-colored <strong>Info</strong> button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    INFO_LIGHT:null,

    /**
     * <p>Use with {@link Ti.UI.Button.systemButton} to specify an <strong>Organize</strong> button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    ORGANIZE:null,

    /**
     * <p>Use with {@link Ti.UI.Button.systemButton} to specify a <strong>Pause</strong> button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    PAUSE:null,

    /**
     * <p>Use with {@link Ti.UI.Button.systemButton} to specify a <strong>Play</strong> button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    PLAY:null,

    /**
     * <p>Use with {@link Ti.UI.Button.systemButton} to specify a <strong>Refresh</strong> button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    REFRESH:null,

    /**
     * <p>Use with {@link Ti.UI.Button.systemButton} to specify a <strong>Reply</strong> button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    REPLY:null,

    /**
     * <p>Use with {@link Ti.UI.Button.systemButton} to specify a <strong>Rewind</strong> button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    REWIND:null,

    /**
     * <p>Use with {@link Ti.UI.Button.systemButton} to specify a <strong>Save</strong> button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    SAVE:null,

    /**
     * <p>Identical to {@link Ti.UI.iPhone.SystemButton.ACTIVITY}.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    SPINNER:null,

    /**
     * <p>Use with {@link Ti.UI.Button.systemButton} to specify a <strong>Stop</strong> button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    STOP:null,

    /**
     * <p>Use with {@link Ti.UI.Button.systemButton} to specify a <strong>Trash</strong> button.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    TRASH:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: iPhone, iPad
 * @namespace <p>These constants represent standard iOS system button styles that affect the 
{@link Ti.UI.Button}, {@link Ti.UI.ButtonBar}, and 
{@link Ti.UI.iOS.TabbedBar} UI elements.</p>
<p>The different styles are used in different places. For normal buttons which are <strong>not</strong> 
contained in a nav bar, toolbar, button bar or tabbed bar, the following styles apply:</p>
<ul>
<li><code>BORDERED</code>. Simple button style with a rounded border and a white background. 
            The default style for normal buttons.</li>
<li><code>DONE</code>. Like the bordered button, but with a blue background. Button style for a button 
        that indicates completion, such as OK, Save, or Go. </li>
<li><code>PLAIN</code> Button style for an undecorated button. </li>
</ul>
<p>Note that if you specify the <code>PLAIN</code> style, you must style the button using the other button 
properties. For example, there is no indication that the button has been pressed unless you set 
other properties for the selected state, such as <code>backgroundSelectedImage</code> and <code>selectedColor</code>.</p>
<p>When you add a button to a {@link Ti.UI.iOS.Toolbar}, the styles have a slightly 
different effect:</p>
<ul>
<li><code>PLAIN</code> Button style for an undecorated button with large text and a <em>glow</em> effect when the 
button is pressed. Default style for buttons in toolbars.</li>
<li><code>BORDERED</code>. Simple button style with a rounded border and a light blue background. </li>
<li><code>DONE</code>. Like the bordered button, but with a dark blue background. </li>
</ul>
<p>For <code>TabbedBar</code> and <code>ButtonBar</code> controls, styles have the following meaning:</p>
<ul>
<li><code>PLAIN</code>. Default style for <code>ButtonBar</code> and <code>TabbedBar</code>.</li>
<li><code>BORDERED</code>. Creates a bar like the <code>PLAIN</code> bar, but with a heavier border.</li>
<li><code>BAR</code>. Used on <code>ButtonBar</code> and <code>TabbedBar</code> controls to produce a more compact bar with 
translucent buttons that allow the bar's background color to show through.</li>
</ul>
 */
Ti.UI.iPhone.SystemButtonStyle = function() {
};
Ti.UI.iPhone.SystemButtonStyle.prototype = {

    /**
     * <p>Used with {@link Ti.UI.ButtonBar} or {@link Ti.UI.iOS.TabbedBar} only, 
to use the more condensed style used in nav bars and tool bars.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    BAR:null,

    /**
     * <p>A simple button style with a border.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    BORDERED:null,

    /**
     * <p>The style for a <strong>Done</strong> button--for example, a button that completes some task and returns 
to the previous view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    DONE:null,

    /**
     * <p>Specifies a borderless button, the default style for toolbars, button bars, and tabbed bars.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    PLAIN:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: iPhone, iPad
 */
Ti.UI.iPhone.SystemIcon = function() {
};
Ti.UI.iPhone.SystemIcon.prototype = {

    /**
     * <p>Bookmark style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    BOOKMARKS:null,

    /**
     * <p>Contacts style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    CONTACTS:null,

    /**
     * <p>Downloads style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    DOWNLOADS:null,

    /**
     * <p>Favorites style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    FAVORITES:null,

    /**
     * <p>Featured style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    FEATURED:null,

    /**
     * <p>History style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    HISTORY:null,

    /**
     * <p>More style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    MORE:null,

    /**
     * <p>Most recent style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    MOST_RECENT:null,

    /**
     * <p>Most viewed style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    MOST_VIEWED:null,

    /**
     * <p>Recents style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    RECENTS:null,

    /**
     * <p>Search style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    SEARCH:null,

    /**
     * <p>Top rated style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    TOP_RATED:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: iPhone, iPad
 */
Ti.UI.iPhone.TableViewCellSelectionStyle = function() {
};
Ti.UI.iPhone.TableViewCellSelectionStyle.prototype = {

    /**
     * <p>The cell when selected has a blue background. This is the default value.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    BLUE:null,

    /**
     * <p>Then cell when selected has a gray background.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    GRAY:null,

    /**
     * <p>The cell has no distinct style for when it is selected.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    NONE:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: iPhone, iPad
 */
Ti.UI.iPhone.TableViewScrollPosition = function() {
};
Ti.UI.iPhone.TableViewScrollPosition.prototype = {

    /**
     * <p>The table view scrolls the row of interest to the bottom of the visible table view.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    BOTTOM:null,

    /**
     * <p>The table view scrolls the row of interest to the middle of the visible table view.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    MIDDLE:null,

    /**
     * <p>The table view scrolls the row of interest to be fully visible with a minimum of movement. If the row is already fully visible, no scrolling occurs. For example, if the row is above the visible area, the behavior is identical to that specified by <code>TOP</code>. This is the default.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    NONE:null,

    /**
     * <p>The table view scrolls the row of interest to the top of the visible table view.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    TOP:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: iPhone, iPad
 */
Ti.UI.iPhone.TableViewSeparatorStyle = function() {
};
Ti.UI.iPhone.TableViewSeparatorStyle.prototype = {

    /**
     * <p>The separator cell has no distinct style.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    NONE:null,

    /**
     * <p>The separator cell has a single line running across its width. This is the default value.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    SINGLE_LINE:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: iPhone, iPad
 */
Ti.UI.iPhone.TableViewStyle = function() {
};
Ti.UI.iPhone.TableViewStyle.prototype = {

    /**
     * <p>A table view whose sections present distinct groups of rows. The section headers and footers 
do not float.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    GROUPED:null,

    /**
     * <p>A plain table view. Any section headers or footers are displayed as inline separators and 
float when the table view is scrolled.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    PLAIN:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Ti.Utils = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Returns the specified data decoded from Base64.</p>
     * @param {String|Ti.Blob} obj <p>Data to decode.</p>
     * @returns Ti.Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    base64decode:function(obj) {
    },

    /**
     * <p>Returns the specified data encoded to Base64.</p>
     * @param {String|Ti.Blob} obj <p>Data to encode.</p>
     * @returns Ti.Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    base64encode:function(obj) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Returns a MD5 digest of the specified data as a hex-based String.</p>
     * @param {String|Ti.Blob} obj <p>Data to calculate.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    md5HexDigest:function(obj) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Returns a SHA-1 hash of the specified data as a hex-based String.</p>
     * @param {String|Ti.Blob} obj <p>Data to calculate.</p>
     * @returns String
     * @since 1.3.2 (Android), 1.3.2 (iPhone), 1.3.2 (iPad), 1.8 (Mobile Web)
     */
    sha1:function(obj) {
    },

    /**
     * <p>Returns a SHA-256 hash of the specified data as a hex-based String.</p>
     * @param {String|Ti.Blob} obj <p>Data to calculate.</p>
     * @returns String
     * @since 1.8.0 (Android), 1.8.0 (iPhone), 1.8.0 (iPad), 1.8.0 (Mobile Web)
     */
    sha256:function(obj) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>The API for this module is based on the W3C DOM specification.</p>
<p>Android and iOS implement the {@link http://www.w3.org/TR/DOM} specification
with some non-standard extensions, which are documented in the appropriate places.</p>
<p>Mobile Web directly exposes the {@link http://www.w3.org/TR/DOM} implementation 
in the browser. New features introduced in DOM Level 3 are not documented here for brevity. For information on
these features, please use the W3C documentation.</p>
 */
Ti.XML = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Parses an XML string into a {@link Ti.XML.Document} object.
Throws an exception if the string is unable to be parsed into a valid
document.</p>
     * @param {String} xml <p>the XML content as a string</p>
     * @returns Ti.XML.Document
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    parseString:function(xml) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Serializes a {@link Ti.XML.Document} object into a string.</p>
     * @param {Ti.XML.Node} node <p>The XML DOMNode or DOMDocument to serialize</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    serializeToString:function(node) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Implements the {@link http://www.w3.org/TR/DOM} on
Android and iOS. Exposes the 
{@link http://www.w3.org/TR/DOM} implementation on Mobile Web.</p>
 */
Ti.XML.Attr = function() {
};
Ti.XML.Attr.prototype = {

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Attr}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ATTRIBUTE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.CDATASection} (a type of {@link Ti.XML.Text})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    CDATA_SECTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Comment}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    COMMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentFragment}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_FRAGMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Document}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentType}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_TYPE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Element}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ELEMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Entity}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.EntityReference} (a type of {@link Ti.XML.Node})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_REFERENCE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Notation}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    NOTATION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.ProcessingInstruction}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    PROCESSING_INSTRUCTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Text}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    TEXT_NODE:null,

    /**
     * <p>A map of this node's attributes</p>
     * @type Ti.XML.NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    attributes:null,

    /**
     * <p>A {@link Ti.XML.NodeList} of this node's children</p>
     * @type Ti.XML.NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    childNodes:null,

    /**
     * <p>This node's first child</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    firstChild:null,

    /**
     * <p>This node's last child</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    lastChild:null,

    /**
     * <p>The local part of the qualified name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    localName:null,

    /**
     * <p>Attribute name</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    name:null,

    /**
     * <p>The namespace URI of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    namespaceURI:null,

    /**
     * <p>This node's next sibling</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nextSibling:null,

    /**
     * <p>The name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeName:null,

    /**
     * <p>This node's type. One of <code>ELEMENT_NODE</code>, <code>ATTRIBUTE_NODE</code>, <code>TEXT_NODE</code>, <code>CDATA_SECTION_NODE</code>,
<code>ENTITY_REFERENCE_NODE</code>, <code>ENTITY_NODE</code>, <code>PROCESSING_INSTRUCTION_NODE</code>, <code>COMMENT_NODE</code>,
<code>DOCUMENT_NODE</code>, <code>DOCUMENT_TYPE_NODE</code>, <code>DOCUMENT_FRAGMENT_NODE</code>, <code>NOTATION_NODE</code>.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeType:null,

    /**
     * <p>The content (value) of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeValue:null,

    /**
     * <p>This node's owning Document</p>
     * @type Ti.XML.Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ownerDocument:null,

    /**
     * <p>The {@link Ti.XML.Element} to which the attribute belongs.</p>
     * @type Ti.XML.Element
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ownerElement:null,

    /**
     * <p>This node's parent node</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    parentNode:null,

    /**
     * <p>The namespace prefix of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    prefix:null,

    /**
     * <p>This node's previous sibling</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    previousSibling:null,

    /**
     * <p>True if this attribute was explicitly given a value in the instance document, false otherwise.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    specified:null,

    /**
     * <p>The content (value) of all text nodes within this node.
Use {@link Ti.XML.Node.textContent} instead.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    text:null,

    /**
     * <p>The content (value) of all text nodes within this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    textContent:null,

    /**
     * <p>The attribute value as a string.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    value:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends the node <code>newChild</code> as a child of this node</p>
     * @param {Ti.XML.Node} newChild <p>The new node to append</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    appendChild:function(newChild) {
    },

    /**
     * <p>Returns a duplicate of this node</p>
     * @param {Boolean} deep <p>Whether or not to perform a deep copy of this node</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    cloneNode:function(deep) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Attr.attributes} property.</p>
     * @returns Ti.XML.NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getAttributes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Attr.childNodes} property.</p>
     * @returns Ti.XML.NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getChildNodes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Attr.firstChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFirstChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Attr.lastChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLastChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Attr.localName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLocalName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Attr.name} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Attr.namespaceURI} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNamespaceURI:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Attr.nextSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNextSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Attr.nodeName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Attr.nodeType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Attr.nodeValue} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Attr.ownerDocument} property.</p>
     * @returns Ti.XML.Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOwnerDocument:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Attr.ownerElement} property.</p>
     * @returns Ti.XML.Element
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOwnerElement:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Attr.parentNode} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getParentNode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Attr.prefix} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPrefix:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Attr.previousSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPreviousSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Attr.specified} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSpecified:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Attr.text} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getText:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Attr.textContent} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTextContent:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Attr.value} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getValue:function() {
    },

    /**
     * <p>Whether or not this node has attributes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hasAttributes:function() {
    },

    /**
     * <p>Whether or not this node has child nodes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hasChildNodes:function() {
    },

    /**
     * <p>Inserts the node <code>newChild</code> before the node <code>refChild</code>.</p>
     * @param {Ti.XML.Node} newChild <p>The node to insert</p>
     * @param {Ti.XML.Node} refChild <p>The node to insert <code>newChild</code> before</p>
     * @returns Ti.XML.Node The inserted node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    insertBefore:function(newChild, refChild) {
    },

    /**
     * <p>Tests whether the DOM implementation supports a specific feature</p>
     * @param {String} feature <p>The name of the feature</p>
     * @param {String} version <p>The version number of the feature</p>
     * @returns Boolean Whether or not the feature is supported
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    isSupported:function(feature, version) {
    },

    /**
     * <p>Normalizes text and attribute nodes in this node's child hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    normalize:function() {
    },

    /**
     * <p>Removes a child node from this node</p>
     * @param {Ti.XML.Node} oldChild <p>The node to remove</p>
     * @returns Ti.XML.Node The node that was removed
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeChild:function(oldChild) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Replaces the node <code>oldChild</code> with the node <code>newChild</code></p>
     * @param {Ti.XML.Node} newChild <p>The new node</p>
     * @param {Ti.XML.Node} oldChild <p>The node being replaced</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    replaceChild:function(newChild, oldChild) {
    },

    /**
     * <p>Sets the value of the {@link Ti.XML.Attr.localName} property.</p>
     * @param {String} localName <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLocalName:function(localName) {
    },

    /**
     * <p>Sets the value of the {@link Ti.XML.Attr.value} property.</p>
     * @param {String} value <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setValue:function(value) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Implements the {@link http://www.w3.org/TR/DOM} on
Android and iOS with some non-standard extensions. Exposes the 
{@link http://www.w3.org/TR/DOM} implementation on Mobile Web. On Mobile
Web, there is no Ti.XML.CDATASection object. A string object containing the data is used directly instead.</p>
 */
Ti.XML.CDATASection = function() {
};
Ti.XML.CDATASection.prototype = {

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Attr}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ATTRIBUTE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.CDATASection} (a type of {@link Ti.XML.Text})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    CDATA_SECTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Comment}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    COMMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentFragment}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_FRAGMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Document}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentType}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_TYPE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Element}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ELEMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Entity}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.EntityReference} (a type of {@link Ti.XML.Node})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_REFERENCE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Notation}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    NOTATION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.ProcessingInstruction}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    PROCESSING_INSTRUCTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Text}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    TEXT_NODE:null,

    /**
     * <p>A map of this node's attributes</p>
     * @type Ti.XML.NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    attributes:null,

    /**
     * <p>A {@link Ti.XML.NodeList} of this node's children</p>
     * @type Ti.XML.NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    childNodes:null,

    /**
     * <p>The character data of the node that implements this interface. Throws an exception during setting if this node is readonly.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    data:null,

    /**
     * <p>This node's first child</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    firstChild:null,

    /**
     * <p>This node's last child</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    lastChild:null,

    /**
     * <p>The number of characters that are available through data and the substringData method. This may have the value zero, i.e., {@link Ti.XML.CharacterData} may be empty.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    length:null,

    /**
     * <p>The local part of the qualified name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    localName:null,

    /**
     * <p>The namespace URI of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    namespaceURI:null,

    /**
     * <p>This node's next sibling</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nextSibling:null,

    /**
     * <p>The name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeName:null,

    /**
     * <p>This node's type. One of <code>ELEMENT_NODE</code>, <code>ATTRIBUTE_NODE</code>, <code>TEXT_NODE</code>, <code>CDATA_SECTION_NODE</code>,
<code>ENTITY_REFERENCE_NODE</code>, <code>ENTITY_NODE</code>, <code>PROCESSING_INSTRUCTION_NODE</code>, <code>COMMENT_NODE</code>,
<code>DOCUMENT_NODE</code>, <code>DOCUMENT_TYPE_NODE</code>, <code>DOCUMENT_FRAGMENT_NODE</code>, <code>NOTATION_NODE</code>.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeType:null,

    /**
     * <p>The content (value) of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeValue:null,

    /**
     * <p>This node's owning Document</p>
     * @type Ti.XML.Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ownerDocument:null,

    /**
     * <p>This node's parent node</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    parentNode:null,

    /**
     * <p>The namespace prefix of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    prefix:null,

    /**
     * <p>This node's previous sibling</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    previousSibling:null,

    /**
     * <p>The content (value) of all text nodes within this node.
Use {@link Ti.XML.Node.textContent} instead.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    text:null,

    /**
     * <p>The content (value) of all text nodes within this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    textContent:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends the node <code>newChild</code> as a child of this node</p>
     * @param {Ti.XML.Node} newChild <p>The new node to append</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    appendChild:function(newChild) {
    },

    /**
     * <p>Append the string to the end of the character data of the node. Upon success, data provides access to the concatenation of data and the string specified. Throws an exception if this node is readonly.</p>
     * @param {String} arg <p>The string to append.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    appendData:function(arg) {
    },

    /**
     * <p>Returns a duplicate of this node</p>
     * @param {Boolean} deep <p>Whether or not to perform a deep copy of this node</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    cloneNode:function(deep) {
    },

    /**
     * <p>Remove a range of characters from the node. Upon success, data and length reflect the change. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.</p>
     * @param {Number} offset <p>The offset from which to start removing.</p>
     * @param {Number} count <p>The number of characters to delete. If the sum of offset and count exceeds length then all characters from offset to the end of the data are deleted.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    deleteData:function(offset, count) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CDATASection.attributes} property.</p>
     * @returns Ti.XML.NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getAttributes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CDATASection.childNodes} property.</p>
     * @returns Ti.XML.NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getChildNodes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CDATASection.data} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getData:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CDATASection.firstChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFirstChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CDATASection.lastChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLastChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CDATASection.length} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLength:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CDATASection.localName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLocalName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CDATASection.namespaceURI} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNamespaceURI:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CDATASection.nextSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNextSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CDATASection.nodeName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CDATASection.nodeType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CDATASection.nodeValue} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CDATASection.ownerDocument} property.</p>
     * @returns Ti.XML.Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOwnerDocument:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CDATASection.parentNode} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getParentNode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CDATASection.prefix} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPrefix:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CDATASection.previousSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPreviousSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CDATASection.text} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getText:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CDATASection.textContent} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTextContent:function() {
    },

    /**
     * <p>Whether or not this node has attributes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hasAttributes:function() {
    },

    /**
     * <p>Whether or not this node has child nodes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hasChildNodes:function() {
    },

    /**
     * <p>Inserts the node <code>newChild</code> before the node <code>refChild</code>.</p>
     * @param {Ti.XML.Node} newChild <p>The node to insert</p>
     * @param {Ti.XML.Node} refChild <p>The node to insert <code>newChild</code> before</p>
     * @returns Ti.XML.Node The inserted node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    insertBefore:function(newChild, refChild) {
    },

    /**
     * <p>Insert a string at the specified offset. Throws an exception if this node is readonly, if offset is negative, or if offset is beyond the data's length.</p>
     * @param {Number} offset <p>The character offset at which to insert.</p>
     * @param {String} arg <p>The string to insert.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    insertData:function(offset, arg) {
    },

    /**
     * <p>Tests whether the DOM implementation supports a specific feature</p>
     * @param {String} feature <p>The name of the feature</p>
     * @param {String} version <p>The version number of the feature</p>
     * @returns Boolean Whether or not the feature is supported
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    isSupported:function(feature, version) {
    },

    /**
     * <p>Normalizes text and attribute nodes in this node's child hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    normalize:function() {
    },

    /**
     * <p>Removes a child node from this node</p>
     * @param {Ti.XML.Node} oldChild <p>The node to remove</p>
     * @returns Ti.XML.Node The node that was removed
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeChild:function(oldChild) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Replaces the node <code>oldChild</code> with the node <code>newChild</code></p>
     * @param {Ti.XML.Node} newChild <p>The new node</p>
     * @param {Ti.XML.Node} oldChild <p>The node being replaced</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    replaceChild:function(newChild, oldChild) {
    },

    /**
     * <p>Replace the characters starting at the specified offset with the specified string. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.</p>
     * @param {Number} offset <p>The offset from which to start replacing.</p>
     * @param {Number} count <p>The number of characters to replace. If the sum of offset and count exceeds length, then all characters to the end of the data are replaced; (i.e., the effect is the same as a remove method call with the same range, followed by an append method invocation).</p>
     * @param {String} arg <p>The string with which the range must be replaced.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    replaceData:function(offset, count, arg) {
    },

    /**
     * <p>Sets the value of the {@link Ti.XML.CDATASection.data} property.</p>
     * @param {String} data <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setData:function(data) {
    },

    /**
     * <p>Sets the value of the {@link Ti.XML.CDATASection.localName} property.</p>
     * @param {String} localName <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLocalName:function(localName) {
    },

    /**
     * <p>Breaks this node into two nodes at the specified by offset, and returns a new node of the same type, which contains all the content at and after the offset point. Throws an exception if the specified offset is negative or if this node is read only.</p>
     * @param {Number} offset <p>The offset at which to split, starting from 0.</p>
     * @returns Ti.XML.Text The new node, of the same type as this node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    splitText:function(offset) {
    },

    /**
     * <p>Extracts a range of data from the node. Throws an exception if offset is negative, offset is beyond the data's length, or if count is negative.</p>
     * @param {Number} offset <p>Start offset of substring to extract.</p>
     * @param {Number} count <p>The number of characters units to extract.</p>
     * @returns String The specified substring. If the sum of offset and count exceeds the length, then all 16-bit units to the end of the data are returned.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    substringData:function(offset, count) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Ti.XML.CharacterData = function() {
};
Ti.XML.CharacterData.prototype = {

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Attr}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    ATTRIBUTE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.CDATASection} (a type of {@link Ti.XML.Text})</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    CDATA_SECTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Comment}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    COMMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentFragment}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_FRAGMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Document}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentType}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_TYPE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Element}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    ELEMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Entity}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.EntityReference} (a type of {@link Ti.XML.Node})</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_REFERENCE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Notation}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    NOTATION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.ProcessingInstruction}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    PROCESSING_INSTRUCTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Text}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    TEXT_NODE:null,

    /**
     * <p>A map of this node's attributes</p>
     * @type Ti.XML.NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    attributes:null,

    /**
     * <p>A {@link Ti.XML.NodeList} of this node's children</p>
     * @type Ti.XML.NodeList
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    childNodes:null,

    /**
     * <p>The character data of the node that implements this interface. Throws an exception during setting if this node is readonly.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    data:null,

    /**
     * <p>This node's first child</p>
     * @type Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    firstChild:null,

    /**
     * <p>This node's last child</p>
     * @type Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    lastChild:null,

    /**
     * <p>The number of characters that are available through data and the substringData method. This may have the value zero, i.e., {@link Ti.XML.CharacterData} may be empty.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    length:null,

    /**
     * <p>The local part of the qualified name of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    localName:null,

    /**
     * <p>The namespace URI of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    namespaceURI:null,

    /**
     * <p>This node's next sibling</p>
     * @type Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    nextSibling:null,

    /**
     * <p>The name of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    nodeName:null,

    /**
     * <p>This node's type. One of <code>ELEMENT_NODE</code>, <code>ATTRIBUTE_NODE</code>, <code>TEXT_NODE</code>, <code>CDATA_SECTION_NODE</code>,
<code>ENTITY_REFERENCE_NODE</code>, <code>ENTITY_NODE</code>, <code>PROCESSING_INSTRUCTION_NODE</code>, <code>COMMENT_NODE</code>,
<code>DOCUMENT_NODE</code>, <code>DOCUMENT_TYPE_NODE</code>, <code>DOCUMENT_FRAGMENT_NODE</code>, <code>NOTATION_NODE</code>.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    nodeType:null,

    /**
     * <p>The content (value) of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    nodeValue:null,

    /**
     * <p>This node's owning Document</p>
     * @type Ti.XML.Document
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    ownerDocument:null,

    /**
     * <p>This node's parent node</p>
     * @type Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    parentNode:null,

    /**
     * <p>The namespace prefix of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    prefix:null,

    /**
     * <p>This node's previous sibling</p>
     * @type Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    previousSibling:null,

    /**
     * <p>The content (value) of all text nodes within this node.
Use {@link Ti.XML.Node.textContent} instead.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    text:null,

    /**
     * <p>The content (value) of all text nodes within this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    textContent:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends the node <code>newChild</code> as a child of this node</p>
     * @param {Ti.XML.Node} newChild <p>The new node to append</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    appendChild:function(newChild) {
    },

    /**
     * <p>Append the string to the end of the character data of the node. Upon success, data provides access to the concatenation of data and the string specified. Throws an exception if this node is readonly.</p>
     * @param {String} arg <p>The string to append.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    appendData:function(arg) {
    },

    /**
     * <p>Returns a duplicate of this node</p>
     * @param {Boolean} deep <p>Whether or not to perform a deep copy of this node</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    cloneNode:function(deep) {
    },

    /**
     * <p>Remove a range of characters from the node. Upon success, data and length reflect the change. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.</p>
     * @param {Number} offset <p>The offset from which to start removing.</p>
     * @param {Number} count <p>The number of characters to delete. If the sum of offset and count exceeds length then all characters from offset to the end of the data are deleted.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    deleteData:function(offset, count) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CharacterData.attributes} property.</p>
     * @returns Ti.XML.NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getAttributes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CharacterData.childNodes} property.</p>
     * @returns Ti.XML.NodeList
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getChildNodes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CharacterData.data} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getData:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CharacterData.firstChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getFirstChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CharacterData.lastChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLastChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CharacterData.length} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLength:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CharacterData.localName} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLocalName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CharacterData.namespaceURI} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNamespaceURI:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CharacterData.nextSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNextSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CharacterData.nodeName} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNodeName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CharacterData.nodeType} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNodeType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CharacterData.nodeValue} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNodeValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CharacterData.ownerDocument} property.</p>
     * @returns Ti.XML.Document
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOwnerDocument:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CharacterData.parentNode} property.</p>
     * @returns Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getParentNode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CharacterData.prefix} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getPrefix:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CharacterData.previousSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getPreviousSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CharacterData.text} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getText:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.CharacterData.textContent} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTextContent:function() {
    },

    /**
     * <p>Whether or not this node has attributes</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hasAttributes:function() {
    },

    /**
     * <p>Whether or not this node has child nodes</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hasChildNodes:function() {
    },

    /**
     * <p>Inserts the node <code>newChild</code> before the node <code>refChild</code>.</p>
     * @param {Ti.XML.Node} newChild <p>The node to insert</p>
     * @param {Ti.XML.Node} refChild <p>The node to insert <code>newChild</code> before</p>
     * @returns Ti.XML.Node The inserted node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    insertBefore:function(newChild, refChild) {
    },

    /**
     * <p>Insert a string at the specified offset. Throws an exception if this node is readonly, if offset is negative, or if offset is beyond the data's length.</p>
     * @param {Number} offset <p>The character offset at which to insert.</p>
     * @param {String} arg <p>The string to insert.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    insertData:function(offset, arg) {
    },

    /**
     * <p>Tests whether the DOM implementation supports a specific feature</p>
     * @param {String} feature <p>The name of the feature</p>
     * @param {String} version <p>The version number of the feature</p>
     * @returns Boolean Whether or not the feature is supported
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    isSupported:function(feature, version) {
    },

    /**
     * <p>Normalizes text and attribute nodes in this node's child hierarchy</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    normalize:function() {
    },

    /**
     * <p>Removes a child node from this node</p>
     * @param {Ti.XML.Node} oldChild <p>The node to remove</p>
     * @returns Ti.XML.Node The node that was removed
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeChild:function(oldChild) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Replaces the node <code>oldChild</code> with the node <code>newChild</code></p>
     * @param {Ti.XML.Node} newChild <p>The new node</p>
     * @param {Ti.XML.Node} oldChild <p>The node being replaced</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    replaceChild:function(newChild, oldChild) {
    },

    /**
     * <p>Replace the characters starting at the specified offset with the specified string. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.</p>
     * @param {Number} offset <p>The offset from which to start replacing.</p>
     * @param {Number} count <p>The number of characters to replace. If the sum of offset and count exceeds length, then all characters to the end of the data are replaced; (i.e., the effect is the same as a remove method call with the same range, followed by an append method invocation).</p>
     * @param {String} arg <p>The string with which the range must be replaced.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    replaceData:function(offset, count, arg) {
    },

    /**
     * <p>Sets the value of the {@link Ti.XML.CharacterData.data} property.</p>
     * @param {String} data <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setData:function(data) {
    },

    /**
     * <p>Sets the value of the {@link Ti.XML.CharacterData.localName} property.</p>
     * @param {String} localName <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLocalName:function(localName) {
    },

    /**
     * <p>Extracts a range of data from the node. Throws an exception if offset is negative, offset is beyond the data's length, or if count is negative.</p>
     * @param {Number} offset <p>Start offset of substring to extract.</p>
     * @param {Number} count <p>The number of characters units to extract.</p>
     * @returns String The specified substring. If the sum of offset and count exceeds the length, then all 16-bit units to the end of the data are returned.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    substringData:function(offset, count) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Implements the {@link http://www.w3.org/TR/DOM} on
Android and iOS with some non-standard extensions. Exposes the 
{@link http://www.w3.org/TR/DOM} implementation on Mobile Web.</p>
 */
Ti.XML.Comment = function() {
};
Ti.XML.Comment.prototype = {

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Attr}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ATTRIBUTE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.CDATASection} (a type of {@link Ti.XML.Text})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    CDATA_SECTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Comment}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    COMMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentFragment}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_FRAGMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Document}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentType}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_TYPE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Element}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ELEMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Entity}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.EntityReference} (a type of {@link Ti.XML.Node})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_REFERENCE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Notation}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    NOTATION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.ProcessingInstruction}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    PROCESSING_INSTRUCTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Text}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    TEXT_NODE:null,

    /**
     * <p>A map of this node's attributes</p>
     * @type Ti.XML.NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    attributes:null,

    /**
     * <p>A {@link Ti.XML.NodeList} of this node's children</p>
     * @type Ti.XML.NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    childNodes:null,

    /**
     * <p>The character data of the node that implements this interface. Throws an exception during setting if this node is readonly.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    data:null,

    /**
     * <p>This node's first child</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    firstChild:null,

    /**
     * <p>This node's last child</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    lastChild:null,

    /**
     * <p>The number of characters that are available through data and the substringData method. This may have the value zero, i.e., {@link Ti.XML.CharacterData} may be empty.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    length:null,

    /**
     * <p>The local part of the qualified name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    localName:null,

    /**
     * <p>The namespace URI of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    namespaceURI:null,

    /**
     * <p>This node's next sibling</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nextSibling:null,

    /**
     * <p>The name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeName:null,

    /**
     * <p>This node's type. One of <code>ELEMENT_NODE</code>, <code>ATTRIBUTE_NODE</code>, <code>TEXT_NODE</code>, <code>CDATA_SECTION_NODE</code>,
<code>ENTITY_REFERENCE_NODE</code>, <code>ENTITY_NODE</code>, <code>PROCESSING_INSTRUCTION_NODE</code>, <code>COMMENT_NODE</code>,
<code>DOCUMENT_NODE</code>, <code>DOCUMENT_TYPE_NODE</code>, <code>DOCUMENT_FRAGMENT_NODE</code>, <code>NOTATION_NODE</code>.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeType:null,

    /**
     * <p>The content (value) of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeValue:null,

    /**
     * <p>This node's owning Document</p>
     * @type Ti.XML.Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ownerDocument:null,

    /**
     * <p>This node's parent node</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    parentNode:null,

    /**
     * <p>The namespace prefix of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    prefix:null,

    /**
     * <p>This node's previous sibling</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    previousSibling:null,

    /**
     * <p>The content (value) of all text nodes within this node.
Use {@link Ti.XML.Node.textContent} instead.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    text:null,

    /**
     * <p>The content (value) of all text nodes within this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    textContent:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends the node <code>newChild</code> as a child of this node</p>
     * @param {Ti.XML.Node} newChild <p>The new node to append</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    appendChild:function(newChild) {
    },

    /**
     * <p>Append the string to the end of the character data of the node. Upon success, data provides access to the concatenation of data and the string specified. Throws an exception if this node is readonly.</p>
     * @param {String} arg <p>The string to append.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    appendData:function(arg) {
    },

    /**
     * <p>Returns a duplicate of this node</p>
     * @param {Boolean} deep <p>Whether or not to perform a deep copy of this node</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    cloneNode:function(deep) {
    },

    /**
     * <p>Remove a range of characters from the node. Upon success, data and length reflect the change. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.</p>
     * @param {Number} offset <p>The offset from which to start removing.</p>
     * @param {Number} count <p>The number of characters to delete. If the sum of offset and count exceeds length then all characters from offset to the end of the data are deleted.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    deleteData:function(offset, count) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Comment.attributes} property.</p>
     * @returns Ti.XML.NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getAttributes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Comment.childNodes} property.</p>
     * @returns Ti.XML.NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getChildNodes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Comment.data} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getData:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Comment.firstChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFirstChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Comment.lastChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLastChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Comment.length} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLength:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Comment.localName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLocalName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Comment.namespaceURI} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNamespaceURI:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Comment.nextSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNextSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Comment.nodeName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Comment.nodeType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Comment.nodeValue} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Comment.ownerDocument} property.</p>
     * @returns Ti.XML.Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOwnerDocument:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Comment.parentNode} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getParentNode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Comment.prefix} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPrefix:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Comment.previousSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPreviousSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Comment.text} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getText:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Comment.textContent} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTextContent:function() {
    },

    /**
     * <p>Whether or not this node has attributes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hasAttributes:function() {
    },

    /**
     * <p>Whether or not this node has child nodes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hasChildNodes:function() {
    },

    /**
     * <p>Inserts the node <code>newChild</code> before the node <code>refChild</code>.</p>
     * @param {Ti.XML.Node} newChild <p>The node to insert</p>
     * @param {Ti.XML.Node} refChild <p>The node to insert <code>newChild</code> before</p>
     * @returns Ti.XML.Node The inserted node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    insertBefore:function(newChild, refChild) {
    },

    /**
     * <p>Insert a string at the specified offset. Throws an exception if this node is readonly, if offset is negative, or if offset is beyond the data's length.</p>
     * @param {Number} offset <p>The character offset at which to insert.</p>
     * @param {String} arg <p>The string to insert.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    insertData:function(offset, arg) {
    },

    /**
     * <p>Tests whether the DOM implementation supports a specific feature</p>
     * @param {String} feature <p>The name of the feature</p>
     * @param {String} version <p>The version number of the feature</p>
     * @returns Boolean Whether or not the feature is supported
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    isSupported:function(feature, version) {
    },

    /**
     * <p>Normalizes text and attribute nodes in this node's child hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    normalize:function() {
    },

    /**
     * <p>Removes a child node from this node</p>
     * @param {Ti.XML.Node} oldChild <p>The node to remove</p>
     * @returns Ti.XML.Node The node that was removed
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeChild:function(oldChild) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Replaces the node <code>oldChild</code> with the node <code>newChild</code></p>
     * @param {Ti.XML.Node} newChild <p>The new node</p>
     * @param {Ti.XML.Node} oldChild <p>The node being replaced</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    replaceChild:function(newChild, oldChild) {
    },

    /**
     * <p>Replace the characters starting at the specified offset with the specified string. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.</p>
     * @param {Number} offset <p>The offset from which to start replacing.</p>
     * @param {Number} count <p>The number of characters to replace. If the sum of offset and count exceeds length, then all characters to the end of the data are replaced; (i.e., the effect is the same as a remove method call with the same range, followed by an append method invocation).</p>
     * @param {String} arg <p>The string with which the range must be replaced.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    replaceData:function(offset, count, arg) {
    },

    /**
     * <p>Sets the value of the {@link Ti.XML.Comment.data} property.</p>
     * @param {String} data <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setData:function(data) {
    },

    /**
     * <p>Sets the value of the {@link Ti.XML.Comment.localName} property.</p>
     * @param {String} localName <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLocalName:function(localName) {
    },

    /**
     * <p>Extracts a range of data from the node. Throws an exception if offset is negative, offset is beyond the data's length, or if count is negative.</p>
     * @param {Number} offset <p>Start offset of substring to extract.</p>
     * @param {Number} count <p>The number of characters units to extract.</p>
     * @returns String The specified substring. If the sum of offset and count exceeds the length, then all 16-bit units to the end of the data are returned.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    substringData:function(offset, count) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Ti.XML.DOMImplementation = function() {
};
Ti.XML.DOMImplementation.prototype = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.8 (Android), 1.8 (iPhone), 1.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Creates an {@link Ti.XML.Document} object of the specified type with its document element. Raises an exception if qualifiedName is malformed, contains an illegal character, or is inconsistent with namespaceURI. Also raises an exception if doctype has already been used with a different document.</p>
     * @param {String} namespaceURI <p>The namespace URI of the document element to create.</p>
     * @param {String} qualifiedName <p>The qualified name of the document element to be created.</p>
     * @param {Ti.XML.DocumentType} doctype <p>The type of document to be created or null. When doctype is not null, its Node.ownerDocument attribute is set to the document being created.</p>
     * @returns Ti.XML.Document A new <Ti.XML.Document> object
     * @since 1.8 (Android), 1.8 (iPhone), 1.8 (iPad), 1.8 (Mobile Web)
     */
    createDocument:function(namespaceURI, qualifiedName, doctype) {
    },

    /**
     * <p>Creates an empty {@link Ti.XML.DocumentType} node. Entity declarations and notations are not made available. Entity reference expansions and default attribute additions do not occur. Raises an exception if qualifiedName is malformed or contains an illegal character.</p>
     * @param {String} qualifiedName <p>The qualified name of the document type to be created.</p>
     * @param {String} publicId <p>The external subset public identifier.</p>
     * @param {String} systemId <p>The external subset system identifier.</p>
     * @returns Ti.XML.DocumentType A new <Ti.XML.DocumentType> node with Node.ownerDocument set to null.
     * @since 1.8 (Android), 1.8 (iPhone), 1.8 (iPad), 1.8 (Mobile Web)
     */
    createDocumentType:function(qualifiedName, publicId, systemId) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 1.8 (Android), 1.8 (iPhone), 1.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Test if the {@link Ti.XML.DOMImplementation} implements a specific feature.</p>
     * @param {String} feature <p>The name of the feature to test (case-insensitive). The values used by DOM features are defined throughout the DOM Level 2 specifications and listed in the Conformance section. The name must be an XML name. To avoid possible conflicts, as a convention, names referring to features defined outside the DOM specification should be made unique by reversing the name of the Internet domain name of the person (or the organization that the person belongs to) who defines the feature, component by component, and using this as a prefix. For instance, the W3C SVG Working Group defines the feature "org.w3c.dom.svg".</p>
     * @param {String} version <p>This is the version number of the feature to test. In Level 2, the string can be either "2.0" or "1.0". If the version is not specified, supporting any version of the feature causes the method to return true.</p>
     * @returns Boolean true if the feature is implemented in the specified version, false otherwise.
     * @since 1.8 (Android), 1.8 (iPhone), 1.8 (iPad), 1.8 (Mobile Web)
     */
    hasFeature:function(feature, version) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.8 (Android), 1.8 (iPhone), 1.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Implements the {@link http://www.w3.org/TR/DOM} on
Android and iOS. Exposes the 
{@link http://www.w3.org/TR/DOM} implementation on Mobile Web.</p>
<p>As of version 3.1, Android still does not truly support DTDs.  A document with a DTD can be
parsed, however it is not validated, none of its default attributes will automatically be put
into the tree, etc.  {@link http://code.google.com/p/android/issues/detail?id=7395}.</p>
 */
Ti.XML.Document = function() {
};
Ti.XML.Document.prototype = {

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Attr}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    ATTRIBUTE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.CDATASection} (a type of {@link Ti.XML.Text})</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    CDATA_SECTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Comment}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    COMMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentFragment}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_FRAGMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Document}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentType}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_TYPE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Element}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    ELEMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Entity}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.EntityReference} (a type of {@link Ti.XML.Node})</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_REFERENCE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Notation}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    NOTATION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.ProcessingInstruction}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    PROCESSING_INSTRUCTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Text}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    TEXT_NODE:null,

    /**
     * <p>A map of this node's attributes</p>
     * @type Ti.XML.NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    attributes:null,

    /**
     * <p>A {@link Ti.XML.NodeList} of this node's children</p>
     * @type Ti.XML.NodeList
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    childNodes:null,

    /**
     * <p>An interface to the list of entities that are defined for the document, such as via a Document Type Definition (DTD). See note about Android and DTDs.</p>
     * @type Ti.XML.DocumentType
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    doctype:null,

    /**
     * <p>the root element in the document.</p>
     * @type Ti.XML.Element
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    documentElement:null,

    /**
     * <p>This node's first child</p>
     * @type Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    firstChild:null,

    /**
     * <p>the {@link Ti.XML.DOMImplementation} that handles this document</p>
     * @type Ti.XML.DOMImplementation
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    implementation:null,

    /**
     * <p>This node's last child</p>
     * @type Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    lastChild:null,

    /**
     * <p>The local part of the qualified name of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    localName:null,

    /**
     * <p>The namespace URI of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    namespaceURI:null,

    /**
     * <p>This node's next sibling</p>
     * @type Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    nextSibling:null,

    /**
     * <p>The name of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    nodeName:null,

    /**
     * <p>This node's type. One of <code>ELEMENT_NODE</code>, <code>ATTRIBUTE_NODE</code>, <code>TEXT_NODE</code>, <code>CDATA_SECTION_NODE</code>,
<code>ENTITY_REFERENCE_NODE</code>, <code>ENTITY_NODE</code>, <code>PROCESSING_INSTRUCTION_NODE</code>, <code>COMMENT_NODE</code>,
<code>DOCUMENT_NODE</code>, <code>DOCUMENT_TYPE_NODE</code>, <code>DOCUMENT_FRAGMENT_NODE</code>, <code>NOTATION_NODE</code>.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    nodeType:null,

    /**
     * <p>The content (value) of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    nodeValue:null,

    /**
     * <p>This node's owning Document</p>
     * @type Ti.XML.Document
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    ownerDocument:null,

    /**
     * <p>This node's parent node</p>
     * @type Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    parentNode:null,

    /**
     * <p>The namespace prefix of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    prefix:null,

    /**
     * <p>This node's previous sibling</p>
     * @type Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    previousSibling:null,

    /**
     * <p>The content (value) of all text nodes within this node.
Use {@link Ti.XML.Node.textContent} instead.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    text:null,

    /**
     * <p>The content (value) of all text nodes within this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    textContent:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends the node <code>newChild</code> as a child of this node</p>
     * @param {Ti.XML.Node} newChild <p>The new node to append</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    appendChild:function(newChild) {
    },

    /**
     * <p>Returns a duplicate of this node</p>
     * @param {Boolean} deep <p>Whether or not to perform a deep copy of this node</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    cloneNode:function(deep) {
    },

    /**
     * <p>Creates an attribute with the given name.</p>
     * @param {String} name <p>Name for the new attribute</p>
     * @returns Ti.XML.Attr An attribute object, ready for putting on an element.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createAttribute:function(name) {
    },

    /**
     * <p>Creates an attribute with the given name and namespace.</p>
     * @param {String} namespaceURI <p>Namespace URI for the new attribute.</p>
     * @param {String} name <p>Name for the new attribute.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createAttributeNS:function(namespaceURI, name) {
    },

    /**
     * <p>Creates and returns a {@link Ti.XML.CDATASection}.</p>
     * @param {String} data <p>The String data to go into the CDATA section.</p>
     * @returns Ti.XML.CDATASection A CDATA section with the given data, ready to be applied to an element.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createCDATASection:function(data) {
    },

    /**
     * <p>Creates a {@link Ti.XML.Comment} with the supplied string data.</p>
     * @param {String} data <p>The textual comment itself.</p>
     * @returns Ti.XML.Comment The comment, ready to be appended to the DOM tree.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createComment:function(data) {
    },

    /**
     * <p>Creates an empty {@link Ti.XML.DocumentFragment}.</p>
     * @returns Ti.XML.DocumentFragment The empty <Ti.XML.DocumentFragment>.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createDocumentFragment:function() {
    },

    /**
     * <p>Creates an element with the given tag name.</p>
     * @param {String} tagName <p>The name for the created element.</p>
     * @returns Ti.XML.Element The newly created element.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createElement:function(tagName) {
    },

    /**
     * <p>Create a new element with the given namespace and name.</p>
     * @param {String} namespaceURI <p>URI for the namespace the new element belongs to.</p>
     * @param {String} name <p>The name for the new element.</p>
     * @returns Ti.XML.Element the new namespace-qualified element.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createElementNS:function(namespaceURI, name) {
    },

    /**
     * <p>Creates an {@link Ti.XML.EntityReference} with the given name.</p>
     * @param {String} name <p>Name for the new entity reference.</p>
     * @returns Ti.XML.EntityReference The created entity reference.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createEntityReference:function(name) {
    },

    /**
     * <p>Creates a processing instruction for inserting into the DOM tree.</p>
     * @param {String} target <p>The target part for the processing instruction.</p>
     * @param {String} data <p>The data for the processing instruction node.</p>
     * @returns Ti.XML.ProcessingInstruction The created processing instruction.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createProcessingInstruction:function(target, data) {
    },

    /**
     * <p>Creates a text node.</p>
     * @param {String} data <p>The string value for the text node.</p>
     * @returns Ti.XML.Text The created text node.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createTextNode:function(data) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Document.attributes} property.</p>
     * @returns Ti.XML.NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getAttributes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Document.childNodes} property.</p>
     * @returns Ti.XML.NodeList
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getChildNodes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Document.doctype} property.</p>
     * @returns Ti.XML.DocumentType
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getDoctype:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Document.documentElement} property.</p>
     * @returns Ti.XML.Element
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getDocumentElement:function() {
    },

    /**
     * <p>Returns an {@link Ti.XML.Element} that has an ID attribute with the given value.</p>
     * @param {String} elementId <p>A unique ID value for an element to search for.</p>
     * @returns Ti.XML.Element The Element matching the given ID, if any.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getElementById:function(elementId) {
    },

    /**
     * <p>Return a node list of elements in the document which have the given tag.</p>
     * @param {String} tagname <p>the tag name to search for.</p>
     * @returns Ti.XML.NodeList The NodeList of elements in the document which have the given tag name.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getElementsByTagName:function(tagname) {
    },

    /**
     * <p>Return a node list of elements in the document which belong to the given namespace and have the given tag name.</p>
     * @param {String} namespaceURI <p>A namespace URI used for matching elements.</p>
     * @param {String} localname <p>The tag name to search for.</p>
     * @returns Ti.XML.NodeList The NodeList of elements in the document which belong to the given namespace and have the given tag name.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getElementsByTagNameNS:function(namespaceURI, localname) {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Document.firstChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getFirstChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Document.implementation} property.</p>
     * @returns Ti.XML.DOMImplementation
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getImplementation:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Document.lastChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLastChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Document.localName} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLocalName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Document.namespaceURI} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNamespaceURI:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Document.nextSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNextSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Document.nodeName} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNodeName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Document.nodeType} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNodeType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Document.nodeValue} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNodeValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Document.ownerDocument} property.</p>
     * @returns Ti.XML.Document
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOwnerDocument:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Document.parentNode} property.</p>
     * @returns Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getParentNode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Document.prefix} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getPrefix:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Document.previousSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getPreviousSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Document.text} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getText:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Document.textContent} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTextContent:function() {
    },

    /**
     * <p>Whether or not this node has attributes</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hasAttributes:function() {
    },

    /**
     * <p>Whether or not this node has child nodes</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hasChildNodes:function() {
    },

    /**
     * <p>Imports a node from another document to this document, without altering or removing the source node from the original document; this method creates a new copy of the source node. The returned node has no parent.</p>
     * @param {Ti.XML.Node} importedNode <p>The node to import.</p>
     * @param {Boolean} deep <p>If true, recursively import the subtree under the specified node; if false, import only the node itself.</p>
     * @returns Ti.XML.Node the imported Node that belongs now to this document.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    importNode:function(importedNode, deep) {
    },

    /**
     * <p>Inserts the node <code>newChild</code> before the node <code>refChild</code>.</p>
     * @param {Ti.XML.Node} newChild <p>The node to insert</p>
     * @param {Ti.XML.Node} refChild <p>The node to insert <code>newChild</code> before</p>
     * @returns Ti.XML.Node The inserted node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    insertBefore:function(newChild, refChild) {
    },

    /**
     * <p>Tests whether the DOM implementation supports a specific feature</p>
     * @param {String} feature <p>The name of the feature</p>
     * @param {String} version <p>The version number of the feature</p>
     * @returns Boolean Whether or not the feature is supported
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    isSupported:function(feature, version) {
    },

    /**
     * <p>Normalizes text and attribute nodes in this node's child hierarchy</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    normalize:function() {
    },

    /**
     * <p>Removes a child node from this node</p>
     * @param {Ti.XML.Node} oldChild <p>The node to remove</p>
     * @returns Ti.XML.Node The node that was removed
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeChild:function(oldChild) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Replaces the node <code>oldChild</code> with the node <code>newChild</code></p>
     * @param {Ti.XML.Node} newChild <p>The new node</p>
     * @param {Ti.XML.Node} oldChild <p>The node being replaced</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    replaceChild:function(newChild, oldChild) {
    },

    /**
     * <p>Sets the value of the {@link Ti.XML.Document.localName} property.</p>
     * @param {String} localName <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLocalName:function(localName) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>When a <code>DocumentFragment</code> is inserted into a DOM tree, children of the <code>DocumentFragment</code> are 
added, not the <code>DocumentFragment</code> itself. </p>
<p>Implements the {@link http://www.w3.org/TR/DOM} on
Android and iOS with some non-standard extensions. Exposes the 
{@link http://www.w3.org/TR/DOM} implementation on Mobile Web.</p>
 */
Ti.XML.DocumentFragment = function() {
};
Ti.XML.DocumentFragment.prototype = {

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Attr}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ATTRIBUTE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.CDATASection} (a type of {@link Ti.XML.Text})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    CDATA_SECTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Comment}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    COMMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentFragment}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_FRAGMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Document}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentType}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_TYPE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Element}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ELEMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Entity}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.EntityReference} (a type of {@link Ti.XML.Node})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_REFERENCE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Notation}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    NOTATION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.ProcessingInstruction}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    PROCESSING_INSTRUCTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Text}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    TEXT_NODE:null,

    /**
     * <p>A map of this node's attributes</p>
     * @type Ti.XML.NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    attributes:null,

    /**
     * <p>A {@link Ti.XML.NodeList} of this node's children</p>
     * @type Ti.XML.NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    childNodes:null,

    /**
     * <p>This node's first child</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    firstChild:null,

    /**
     * <p>This node's last child</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    lastChild:null,

    /**
     * <p>The local part of the qualified name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    localName:null,

    /**
     * <p>The namespace URI of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    namespaceURI:null,

    /**
     * <p>This node's next sibling</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nextSibling:null,

    /**
     * <p>The name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeName:null,

    /**
     * <p>This node's type. One of <code>ELEMENT_NODE</code>, <code>ATTRIBUTE_NODE</code>, <code>TEXT_NODE</code>, <code>CDATA_SECTION_NODE</code>,
<code>ENTITY_REFERENCE_NODE</code>, <code>ENTITY_NODE</code>, <code>PROCESSING_INSTRUCTION_NODE</code>, <code>COMMENT_NODE</code>,
<code>DOCUMENT_NODE</code>, <code>DOCUMENT_TYPE_NODE</code>, <code>DOCUMENT_FRAGMENT_NODE</code>, <code>NOTATION_NODE</code>.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeType:null,

    /**
     * <p>The content (value) of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeValue:null,

    /**
     * <p>This node's owning Document</p>
     * @type Ti.XML.Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ownerDocument:null,

    /**
     * <p>This node's parent node</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    parentNode:null,

    /**
     * <p>The namespace prefix of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    prefix:null,

    /**
     * <p>This node's previous sibling</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    previousSibling:null,

    /**
     * <p>The content (value) of all text nodes within this node.
Use {@link Ti.XML.Node.textContent} instead.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    text:null,

    /**
     * <p>The content (value) of all text nodes within this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    textContent:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends the node <code>newChild</code> as a child of this node</p>
     * @param {Ti.XML.Node} newChild <p>The new node to append</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    appendChild:function(newChild) {
    },

    /**
     * <p>Returns a duplicate of this node</p>
     * @param {Boolean} deep <p>Whether or not to perform a deep copy of this node</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    cloneNode:function(deep) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentFragment.attributes} property.</p>
     * @returns Ti.XML.NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getAttributes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentFragment.childNodes} property.</p>
     * @returns Ti.XML.NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getChildNodes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentFragment.firstChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFirstChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentFragment.lastChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLastChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentFragment.localName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLocalName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentFragment.namespaceURI} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNamespaceURI:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentFragment.nextSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNextSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentFragment.nodeName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentFragment.nodeType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentFragment.nodeValue} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentFragment.ownerDocument} property.</p>
     * @returns Ti.XML.Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOwnerDocument:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentFragment.parentNode} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getParentNode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentFragment.prefix} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPrefix:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentFragment.previousSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPreviousSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentFragment.text} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getText:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentFragment.textContent} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTextContent:function() {
    },

    /**
     * <p>Whether or not this node has attributes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hasAttributes:function() {
    },

    /**
     * <p>Whether or not this node has child nodes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hasChildNodes:function() {
    },

    /**
     * <p>Inserts the node <code>newChild</code> before the node <code>refChild</code>.</p>
     * @param {Ti.XML.Node} newChild <p>The node to insert</p>
     * @param {Ti.XML.Node} refChild <p>The node to insert <code>newChild</code> before</p>
     * @returns Ti.XML.Node The inserted node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    insertBefore:function(newChild, refChild) {
    },

    /**
     * <p>Tests whether the DOM implementation supports a specific feature</p>
     * @param {String} feature <p>The name of the feature</p>
     * @param {String} version <p>The version number of the feature</p>
     * @returns Boolean Whether or not the feature is supported
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    isSupported:function(feature, version) {
    },

    /**
     * <p>Normalizes text and attribute nodes in this node's child hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    normalize:function() {
    },

    /**
     * <p>Removes a child node from this node</p>
     * @param {Ti.XML.Node} oldChild <p>The node to remove</p>
     * @returns Ti.XML.Node The node that was removed
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeChild:function(oldChild) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Replaces the node <code>oldChild</code> with the node <code>newChild</code></p>
     * @param {Ti.XML.Node} newChild <p>The new node</p>
     * @param {Ti.XML.Node} oldChild <p>The node being replaced</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    replaceChild:function(newChild, oldChild) {
    },

    /**
     * <p>Sets the value of the {@link Ti.XML.DocumentFragment.localName} property.</p>
     * @param {String} localName <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLocalName:function(localName) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>This provides an interface to the list of entities that are defined for the document. Implements the 
{@link http://www.w3.org/TR/DOM} on Android and iOS. Exposes the 
{@link http://www.w3.org/TR/DOM} implementation on Mobile Web.</p>
<p>As of version 3.1, Android still does not truly support DTDs.  A document with a DTD can be
parsed, however it is not validated, none of its default attributes will automatically be put
into the tree, etc.  {@link http://code.google.com/p/android/issues/detail?id=7395}.</p>
 */
Ti.XML.DocumentType = function() {
};
Ti.XML.DocumentType.prototype = {

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Attr}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    ATTRIBUTE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.CDATASection} (a type of {@link Ti.XML.Text})</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    CDATA_SECTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Comment}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    COMMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentFragment}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_FRAGMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Document}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentType}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_TYPE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Element}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    ELEMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Entity}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.EntityReference} (a type of {@link Ti.XML.Node})</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_REFERENCE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Notation}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    NOTATION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.ProcessingInstruction}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    PROCESSING_INSTRUCTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Text}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    TEXT_NODE:null,

    /**
     * <p>A map of this node's attributes</p>
     * @type Ti.XML.NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    attributes:null,

    /**
     * <p>A {@link Ti.XML.NodeList} of this node's children</p>
     * @type Ti.XML.NodeList
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    childNodes:null,

    /**
     * <p>A {@link Ti.XML.NamedNodeMap} containing the general entities, both external and internal, declared in the DTD. Parameter entities are not contained. Duplicates are discarded.</p>
     * @type Ti.XML.NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    entities:null,

    /**
     * <p>This node's first child</p>
     * @type Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    firstChild:null,

    /**
     * <p>The internal subset as a string.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    internalSubset:null,

    /**
     * <p>This node's last child</p>
     * @type Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    lastChild:null,

    /**
     * <p>The local part of the qualified name of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    localName:null,

    /**
     * <p>The name of DTD; i.e., the name immediately following the <code>DOCTYPE</code> keyword.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    name:null,

    /**
     * <p>The namespace URI of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    namespaceURI:null,

    /**
     * <p>This node's next sibling</p>
     * @type Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    nextSibling:null,

    /**
     * <p>The name of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    nodeName:null,

    /**
     * <p>This node's type. One of <code>ELEMENT_NODE</code>, <code>ATTRIBUTE_NODE</code>, <code>TEXT_NODE</code>, <code>CDATA_SECTION_NODE</code>,
<code>ENTITY_REFERENCE_NODE</code>, <code>ENTITY_NODE</code>, <code>PROCESSING_INSTRUCTION_NODE</code>, <code>COMMENT_NODE</code>,
<code>DOCUMENT_NODE</code>, <code>DOCUMENT_TYPE_NODE</code>, <code>DOCUMENT_FRAGMENT_NODE</code>, <code>NOTATION_NODE</code>.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    nodeType:null,

    /**
     * <p>The content (value) of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    nodeValue:null,

    /**
     * <p>A {@link Ti.XML.NamedNodeMap} containing the notations declared  in the DTD. Duplicates are discarded. Every node in this map also  implements the {@link Ti.XML.Notation} interface.</p>
     * @type Ti.XML.NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    notations:null,

    /**
     * <p>This node's owning Document</p>
     * @type Ti.XML.Document
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    ownerDocument:null,

    /**
     * <p>This node's parent node</p>
     * @type Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    parentNode:null,

    /**
     * <p>The namespace prefix of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    prefix:null,

    /**
     * <p>This node's previous sibling</p>
     * @type Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    previousSibling:null,

    /**
     * <p>The public identifier of the external subset.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    publicId:null,

    /**
     * <p>The system identifier of the external subset.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    systemId:null,

    /**
     * <p>The content (value) of all text nodes within this node.
Use {@link Ti.XML.Node.textContent} instead.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    text:null,

    /**
     * <p>The content (value) of all text nodes within this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    textContent:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends the node <code>newChild</code> as a child of this node</p>
     * @param {Ti.XML.Node} newChild <p>The new node to append</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    appendChild:function(newChild) {
    },

    /**
     * <p>Returns a duplicate of this node</p>
     * @param {Boolean} deep <p>Whether or not to perform a deep copy of this node</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    cloneNode:function(deep) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentType.attributes} property.</p>
     * @returns Ti.XML.NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getAttributes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentType.childNodes} property.</p>
     * @returns Ti.XML.NodeList
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getChildNodes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentType.entities} property.</p>
     * @returns Ti.XML.NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getEntities:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentType.firstChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getFirstChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentType.internalSubset} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getInternalSubset:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentType.lastChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLastChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentType.localName} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLocalName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentType.name} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentType.namespaceURI} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNamespaceURI:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentType.nextSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNextSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentType.nodeName} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNodeName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentType.nodeType} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNodeType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentType.nodeValue} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNodeValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentType.notations} property.</p>
     * @returns Ti.XML.NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNotations:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentType.ownerDocument} property.</p>
     * @returns Ti.XML.Document
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOwnerDocument:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentType.parentNode} property.</p>
     * @returns Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getParentNode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentType.prefix} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getPrefix:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentType.previousSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getPreviousSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentType.publicId} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getPublicId:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentType.systemId} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSystemId:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentType.text} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getText:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.DocumentType.textContent} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTextContent:function() {
    },

    /**
     * <p>Whether or not this node has attributes</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hasAttributes:function() {
    },

    /**
     * <p>Whether or not this node has child nodes</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hasChildNodes:function() {
    },

    /**
     * <p>Inserts the node <code>newChild</code> before the node <code>refChild</code>.</p>
     * @param {Ti.XML.Node} newChild <p>The node to insert</p>
     * @param {Ti.XML.Node} refChild <p>The node to insert <code>newChild</code> before</p>
     * @returns Ti.XML.Node The inserted node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    insertBefore:function(newChild, refChild) {
    },

    /**
     * <p>Tests whether the DOM implementation supports a specific feature</p>
     * @param {String} feature <p>The name of the feature</p>
     * @param {String} version <p>The version number of the feature</p>
     * @returns Boolean Whether or not the feature is supported
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    isSupported:function(feature, version) {
    },

    /**
     * <p>Normalizes text and attribute nodes in this node's child hierarchy</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    normalize:function() {
    },

    /**
     * <p>Removes a child node from this node</p>
     * @param {Ti.XML.Node} oldChild <p>The node to remove</p>
     * @returns Ti.XML.Node The node that was removed
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeChild:function(oldChild) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Replaces the node <code>oldChild</code> with the node <code>newChild</code></p>
     * @param {Ti.XML.Node} newChild <p>The new node</p>
     * @param {Ti.XML.Node} oldChild <p>The node being replaced</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    replaceChild:function(newChild, oldChild) {
    },

    /**
     * <p>Sets the value of the {@link Ti.XML.DocumentType.localName} property.</p>
     * @param {String} localName <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLocalName:function(localName) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Ti.XML.Element = function() {
};
Ti.XML.Element.prototype = {

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Attr}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ATTRIBUTE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.CDATASection} (a type of {@link Ti.XML.Text})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    CDATA_SECTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Comment}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    COMMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentFragment}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_FRAGMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Document}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentType}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_TYPE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Element}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ELEMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Entity}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.EntityReference} (a type of {@link Ti.XML.Node})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_REFERENCE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Notation}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    NOTATION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.ProcessingInstruction}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    PROCESSING_INSTRUCTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Text}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    TEXT_NODE:null,

    /**
     * <p>A map of this node's attributes</p>
     * @type Ti.XML.NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    attributes:null,

    /**
     * <p>A {@link Ti.XML.NodeList} of this node's children</p>
     * @type Ti.XML.NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    childNodes:null,

    /**
     * <p>This node's first child</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    firstChild:null,

    /**
     * <p>This node's last child</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    lastChild:null,

    /**
     * <p>The local part of the qualified name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    localName:null,

    /**
     * <p>The namespace URI of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    namespaceURI:null,

    /**
     * <p>This node's next sibling</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nextSibling:null,

    /**
     * <p>The name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeName:null,

    /**
     * <p>This node's type. One of <code>ELEMENT_NODE</code>, <code>ATTRIBUTE_NODE</code>, <code>TEXT_NODE</code>, <code>CDATA_SECTION_NODE</code>,
<code>ENTITY_REFERENCE_NODE</code>, <code>ENTITY_NODE</code>, <code>PROCESSING_INSTRUCTION_NODE</code>, <code>COMMENT_NODE</code>,
<code>DOCUMENT_NODE</code>, <code>DOCUMENT_TYPE_NODE</code>, <code>DOCUMENT_FRAGMENT_NODE</code>, <code>NOTATION_NODE</code>.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeType:null,

    /**
     * <p>The content (value) of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeValue:null,

    /**
     * <p>This node's owning Document</p>
     * @type Ti.XML.Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ownerDocument:null,

    /**
     * <p>This node's parent node</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    parentNode:null,

    /**
     * <p>The namespace prefix of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    prefix:null,

    /**
     * <p>This node's previous sibling</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    previousSibling:null,

    /**
     * <p>The name of the element, as defined by its tag.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    tagName:null,

    /**
     * <p><em>Non-standard</em>. Retrieves all child text nodes as one String</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    text:null,

    /**
     * <p>Retrieves all child text nodes as one String</p>
     * @type String
     * @since 1.8 (Mobile Web)
     */
    textContent:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends the node <code>newChild</code> as a child of this node</p>
     * @param {Ti.XML.Node} newChild <p>The new node to append</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    appendChild:function(newChild) {
    },

    /**
     * <p>Returns a duplicate of this node</p>
     * @param {Boolean} deep <p>Whether or not to perform a deep copy of this node</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    cloneNode:function(deep) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Retrieves an attribute value by name, returning it as a string.</p>
     * @param {String} name <p>The name of the attribute</p>
     * @returns String The <Ti.XML.Attr> value as a string, or empty string if the attribute has no specified or default value.

     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getAttribute:function(name) {
    },

    /**
     * <p>Retrieves an attribute value by local name and namespace URI, returning it as a string.</p>
     * @param {String} namespaceURI <p>The namespace URI of the attribute to retrieve.</p>
     * @param {String} localName <p>The local name of the attribute to retrieve.</p>
     * @returns String The <Ti.XML.Attr> value as a string, or empty string if the attribute has no specified or default value.

     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getAttributeNS:function(namespaceURI, localName) {
    },

    /**
     * <p>Retrieves an attribute value by name, returning it as a {@link Ti.XML.Attr} object.</p>
     * @param {String} name <p>The name of the attribute</p>
     * @returns Ti.XML.Attr The <Ti.XML.Attr> value, or null if there is no such attribute.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getAttributeNode:function(name) {
    },

    /**
     * <p>Retrieves an attribute value by local name and namespace URI,  returning it as a {@link Ti.XML.Attr} object.</p>
     * @param {String} namespaceURI <p>The namespace URI of the attribute to retrieve.</p>
     * @param {String} localName <p>The local name of the attribute to retrieve.</p>
     * @returns Ti.XML.Attr The <Ti.XML.Attr> value, or null if there is no such attribute.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getAttributeNodeNS:function(namespaceURI, localName) {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Element.attributes} property.</p>
     * @returns Ti.XML.NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getAttributes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Element.childNodes} property.</p>
     * @returns Ti.XML.NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getChildNodes:function() {
    },

    /**
     * <p>Retrieves a {@link Ti.XML.NodeList} of all descendant elements with a given tag name, in preorder traversal.</p>
     * @param {String} name <p>The name of the element. The value <code>*</code> matches all tags.</p>
     * @returns Ti.XML.NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getElementsByTagName:function(name) {
    },

    /**
     * <p>Retrieves a {@link Ti.XML.NodeList} of all descendant elements with a given local name and namespace URI, in preorder traversal.</p>
     * @param {String} namespaceURI <p>The namespace URI of the element. The value <code>*</code> matches all namespaces.</p>
     * @param {String} localName <p>The local name of the element. The value <code>*</code> matches all local names.</p>
     * @returns Ti.XML.NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getElementsByTagNameNS:function(namespaceURI, localName) {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Element.firstChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFirstChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Element.lastChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLastChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Element.localName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLocalName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Element.namespaceURI} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNamespaceURI:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Element.nextSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNextSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Element.nodeName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Element.nodeType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Element.nodeValue} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Element.ownerDocument} property.</p>
     * @returns Ti.XML.Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOwnerDocument:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Element.parentNode} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getParentNode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Element.prefix} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPrefix:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Element.previousSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPreviousSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Element.tagName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTagName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Element.text} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getText:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Element.textContent} property.</p>
     * @returns String
     * @since 1.8 (Mobile Web)
     */
    getTextContent:function() {
    },

    /**
     * <p>Determines whether or not an attribute with the given name is available in the element, or has a default value.</p>
     * @param {String} name <p>The name of the attribute to search for.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hasAttribute:function(name) {
    },

    /**
     * <p>Determines whether or not an attribute with the given name is available in the element, or has a default value.</p>
     * @param {String} namespaceURI <p>The namespace URI of the attribute to search for.</p>
     * @param {String} localName <p>The local name of the attribute to search for.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hasAttributeNS:function(namespaceURI, localName) {
    },

    /**
     * <p>Whether or not this node has attributes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hasAttributes:function() {
    },

    /**
     * <p>Whether or not this node has child nodes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hasChildNodes:function() {
    },

    /**
     * <p>Inserts the node <code>newChild</code> before the node <code>refChild</code>.</p>
     * @param {Ti.XML.Node} newChild <p>The node to insert</p>
     * @param {Ti.XML.Node} refChild <p>The node to insert <code>newChild</code> before</p>
     * @returns Ti.XML.Node The inserted node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    insertBefore:function(newChild, refChild) {
    },

    /**
     * <p>Tests whether the DOM implementation supports a specific feature</p>
     * @param {String} feature <p>The name of the feature</p>
     * @param {String} version <p>The version number of the feature</p>
     * @returns Boolean Whether or not the feature is supported
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    isSupported:function(feature, version) {
    },

    /**
     * <p>Normalizes text and attribute nodes in this node's child hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    normalize:function() {
    },

    /**
     * <p>Removes an attribute by name. If the attribute has a default value, it is immediately replaced with this default, including namespace URI and local name. Throws an exception if the element is read-only.</p>
     * @param {String} name <p>The name of the attribute to remove.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeAttribute:function(name) {
    },

    /**
     * <p>Removes an attribute by local name and namespace URI. If the attribute has a default value, it is immediately replaced with this default, including namespace URI and local name. Throws an exception if the element is read-only.</p>
     * @param {String} namespaceURI <p>The namespace URI of the attribute to remove.</p>
     * @param {String} localName <p>The local name of the attribute to remove.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeAttributeNS:function(namespaceURI, localName) {
    },

    /**
     * <p>Removes the specified attribute node. If the removed attribute has a default value, it is replaced immediately, with the same namespace and local name as the removed attribute, if applicable. Throws an exception if the element is read-only, or the attribute is  not an attribute of the element.</p>
     * @param {Ti.XML.Attr} oldAttr <p>The attribute to remove.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeAttributeNode:function(oldAttr) {
    },

    /**
     * <p>Removes a child node from this node</p>
     * @param {Ti.XML.Node} oldChild <p>The node to remove</p>
     * @returns Ti.XML.Node The node that was removed
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeChild:function(oldChild) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Replaces the node <code>oldChild</code> with the node <code>newChild</code></p>
     * @param {Ti.XML.Node} newChild <p>The new node</p>
     * @param {Ti.XML.Node} oldChild <p>The node being replaced</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    replaceChild:function(newChild, oldChild) {
    },

    /**
     * <p>Adds a new attribute. Any attribute with the same name is replaced. Throws an exception if the element is read-only, or if the name contains an illegal character.</p>
     * @param {String} name <p>The name of the attribute.</p>
     * @param {String} value <p>The value of the attribute. This is value is <strong>not</strong> parsed as part of the assignment. Any markup is treated as literal text, and needs to be escaped.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setAttribute:function(name, value) {
    },

    /**
     * <p>Adds a new attribute. Any attribute with the same local name and namespace URI is present on the element is replaced, with its prefix changed to that of the <code>qualifiedName</code> parameter.  Throws an exception if the element is read-only, if the name contains an illegal character, or if the qualified name contains an error.</p>
     * @param {String} namespaceURI <p>The namespace URI of the attribute.</p>
     * @param {String} qualifiedName <p>The qualified name of the attribute. If it is malformed, has a prefix and namespaceURI is <code>null</code>, or if the prefix is <code>xml</code> or <code>xmlns</code> but does not correspond to a property defined in the  {@link http://www.w3.org/XML/1998/namespace} or {@link http://www.w3.org/2000/xmlns/} specifications, then it contains an error.</p>
     * @param {String} value <p>The value of the attribute. This is value is <strong>not</strong> parsed as part of the assignment. Any markup is treated as literal text, and needs to be escaped.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setAttributeNS:function(namespaceURI, qualifiedName, value) {
    },

    /**
     * <p>Adds a new attribute. Any attribute with the same <code>nodeName</code> as the argument is replaced. Throws an exception if the element is read-only, if <code>newAttr</code> is from a different document, or if <code>newAttr</code> is already an attribute of another element.</p>
     * @param {Ti.XML.Attr} newAttr <p>The attribute node to add to the element.</p>
     * @returns Ti.XML.Attr The attribute that was replaced, or `null` otherwise.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setAttributeNode:function(newAttr) {
    },

    /**
     * <p>Adds a new attribute. Any attribute with the same local name and namespace URI is replaced. Throws an exception if the element is read-only, if <code>newAttr</code> is from a different document, or if <code>newAttr</code> is already an attribute of another element.</p>
     * @param {Ti.XML.Attr} newAttr <p>The attribute node to add to the element.</p>
     * @returns Ti.XML.Attr The attribute that was replaced, or `null` otherwise.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setAttributeNodeNS:function(newAttr) {
    },

    /**
     * <p>Sets the value of the {@link Ti.XML.Element.localName} property.</p>
     * @param {String} localName <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLocalName:function(localName) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Ti.XML.Entity = function() {
};
Ti.XML.Entity.prototype = {

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Attr}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    ATTRIBUTE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.CDATASection} (a type of {@link Ti.XML.Text})</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    CDATA_SECTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Comment}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    COMMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentFragment}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_FRAGMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Document}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentType}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_TYPE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Element}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    ELEMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Entity}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.EntityReference} (a type of {@link Ti.XML.Node})</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_REFERENCE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Notation}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    NOTATION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.ProcessingInstruction}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    PROCESSING_INSTRUCTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Text}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    TEXT_NODE:null,

    /**
     * <p>A map of this node's attributes</p>
     * @type Ti.XML.NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    attributes:null,

    /**
     * <p>A {@link Ti.XML.NodeList} of this node's children</p>
     * @type Ti.XML.NodeList
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    childNodes:null,

    /**
     * <p>This node's first child</p>
     * @type Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    firstChild:null,

    /**
     * <p>This node's last child</p>
     * @type Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    lastChild:null,

    /**
     * <p>The local part of the qualified name of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    localName:null,

    /**
     * <p>The namespace URI of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    namespaceURI:null,

    /**
     * <p>This node's next sibling</p>
     * @type Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    nextSibling:null,

    /**
     * <p>The name of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    nodeName:null,

    /**
     * <p>This node's type. One of <code>ELEMENT_NODE</code>, <code>ATTRIBUTE_NODE</code>, <code>TEXT_NODE</code>, <code>CDATA_SECTION_NODE</code>,
<code>ENTITY_REFERENCE_NODE</code>, <code>ENTITY_NODE</code>, <code>PROCESSING_INSTRUCTION_NODE</code>, <code>COMMENT_NODE</code>,
<code>DOCUMENT_NODE</code>, <code>DOCUMENT_TYPE_NODE</code>, <code>DOCUMENT_FRAGMENT_NODE</code>, <code>NOTATION_NODE</code>.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    nodeType:null,

    /**
     * <p>The content (value) of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    nodeValue:null,

    /**
     * <p>For unparsed entities, the name of the notation for the entity. For parsed entities, this is <code>null</code>.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    notationName:null,

    /**
     * <p>This node's owning Document</p>
     * @type Ti.XML.Document
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    ownerDocument:null,

    /**
     * <p>This node's parent node</p>
     * @type Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    parentNode:null,

    /**
     * <p>The namespace prefix of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    prefix:null,

    /**
     * <p>This node's previous sibling</p>
     * @type Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    previousSibling:null,

    /**
     * <p>The public identifier associated with the entity, if specified. If the public identifier was not specified, this is <code>null</code>.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    publicId:null,

    /**
     * <p>The system identifier associated with the entity, if specified. If the system identifier was not specified, this is null.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    systemId:null,

    /**
     * <p>The content (value) of all text nodes within this node.
Use {@link Ti.XML.Node.textContent} instead.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    text:null,

    /**
     * <p>The content (value) of all text nodes within this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    textContent:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends the node <code>newChild</code> as a child of this node</p>
     * @param {Ti.XML.Node} newChild <p>The new node to append</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    appendChild:function(newChild) {
    },

    /**
     * <p>Returns a duplicate of this node</p>
     * @param {Boolean} deep <p>Whether or not to perform a deep copy of this node</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    cloneNode:function(deep) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Entity.attributes} property.</p>
     * @returns Ti.XML.NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getAttributes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Entity.childNodes} property.</p>
     * @returns Ti.XML.NodeList
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getChildNodes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Entity.firstChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getFirstChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Entity.lastChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLastChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Entity.localName} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLocalName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Entity.namespaceURI} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNamespaceURI:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Entity.nextSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNextSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Entity.nodeName} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNodeName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Entity.nodeType} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNodeType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Entity.nodeValue} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNodeValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Entity.notationName} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNotationName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Entity.ownerDocument} property.</p>
     * @returns Ti.XML.Document
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOwnerDocument:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Entity.parentNode} property.</p>
     * @returns Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getParentNode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Entity.prefix} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getPrefix:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Entity.previousSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getPreviousSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Entity.publicId} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getPublicId:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Entity.systemId} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSystemId:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Entity.text} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getText:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Entity.textContent} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTextContent:function() {
    },

    /**
     * <p>Whether or not this node has attributes</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hasAttributes:function() {
    },

    /**
     * <p>Whether or not this node has child nodes</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hasChildNodes:function() {
    },

    /**
     * <p>Inserts the node <code>newChild</code> before the node <code>refChild</code>.</p>
     * @param {Ti.XML.Node} newChild <p>The node to insert</p>
     * @param {Ti.XML.Node} refChild <p>The node to insert <code>newChild</code> before</p>
     * @returns Ti.XML.Node The inserted node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    insertBefore:function(newChild, refChild) {
    },

    /**
     * <p>Tests whether the DOM implementation supports a specific feature</p>
     * @param {String} feature <p>The name of the feature</p>
     * @param {String} version <p>The version number of the feature</p>
     * @returns Boolean Whether or not the feature is supported
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    isSupported:function(feature, version) {
    },

    /**
     * <p>Normalizes text and attribute nodes in this node's child hierarchy</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    normalize:function() {
    },

    /**
     * <p>Removes a child node from this node</p>
     * @param {Ti.XML.Node} oldChild <p>The node to remove</p>
     * @returns Ti.XML.Node The node that was removed
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeChild:function(oldChild) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Replaces the node <code>oldChild</code> with the node <code>newChild</code></p>
     * @param {Ti.XML.Node} newChild <p>The new node</p>
     * @param {Ti.XML.Node} oldChild <p>The node being replaced</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    replaceChild:function(newChild, oldChild) {
    },

    /**
     * <p>Sets the value of the {@link Ti.XML.Entity.localName} property.</p>
     * @param {String} localName <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLocalName:function(localName) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Implements the {@link http://www.w3.org/TR/DOM} 
on Android and iOS. Exposes the 
{@link http://www.w3.org/TR/DOM} implementation on Mobile Web.</p>
 */
Ti.XML.EntityReference = function() {
};
Ti.XML.EntityReference.prototype = {

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Attr}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ATTRIBUTE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.CDATASection} (a type of {@link Ti.XML.Text})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    CDATA_SECTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Comment}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    COMMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentFragment}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_FRAGMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Document}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentType}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_TYPE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Element}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ELEMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Entity}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.EntityReference} (a type of {@link Ti.XML.Node})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_REFERENCE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Notation}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    NOTATION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.ProcessingInstruction}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    PROCESSING_INSTRUCTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Text}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    TEXT_NODE:null,

    /**
     * <p>A map of this node's attributes</p>
     * @type Ti.XML.NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    attributes:null,

    /**
     * <p>A {@link Ti.XML.NodeList} of this node's children</p>
     * @type Ti.XML.NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    childNodes:null,

    /**
     * <p>This node's first child</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    firstChild:null,

    /**
     * <p>This node's last child</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    lastChild:null,

    /**
     * <p>The local part of the qualified name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    localName:null,

    /**
     * <p>The namespace URI of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    namespaceURI:null,

    /**
     * <p>This node's next sibling</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nextSibling:null,

    /**
     * <p>The name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeName:null,

    /**
     * <p>This node's type. One of <code>ELEMENT_NODE</code>, <code>ATTRIBUTE_NODE</code>, <code>TEXT_NODE</code>, <code>CDATA_SECTION_NODE</code>,
<code>ENTITY_REFERENCE_NODE</code>, <code>ENTITY_NODE</code>, <code>PROCESSING_INSTRUCTION_NODE</code>, <code>COMMENT_NODE</code>,
<code>DOCUMENT_NODE</code>, <code>DOCUMENT_TYPE_NODE</code>, <code>DOCUMENT_FRAGMENT_NODE</code>, <code>NOTATION_NODE</code>.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeType:null,

    /**
     * <p>The content (value) of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeValue:null,

    /**
     * <p>This node's owning Document</p>
     * @type Ti.XML.Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ownerDocument:null,

    /**
     * <p>This node's parent node</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    parentNode:null,

    /**
     * <p>The namespace prefix of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    prefix:null,

    /**
     * <p>This node's previous sibling</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    previousSibling:null,

    /**
     * <p>The content (value) of all text nodes within this node.
Use {@link Ti.XML.Node.textContent} instead.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    text:null,

    /**
     * <p>The content (value) of all text nodes within this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    textContent:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends the node <code>newChild</code> as a child of this node</p>
     * @param {Ti.XML.Node} newChild <p>The new node to append</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    appendChild:function(newChild) {
    },

    /**
     * <p>Returns a duplicate of this node</p>
     * @param {Boolean} deep <p>Whether or not to perform a deep copy of this node</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    cloneNode:function(deep) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.EntityReference.attributes} property.</p>
     * @returns Ti.XML.NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getAttributes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.EntityReference.childNodes} property.</p>
     * @returns Ti.XML.NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getChildNodes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.EntityReference.firstChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFirstChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.EntityReference.lastChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLastChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.EntityReference.localName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLocalName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.EntityReference.namespaceURI} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNamespaceURI:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.EntityReference.nextSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNextSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.EntityReference.nodeName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.EntityReference.nodeType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.EntityReference.nodeValue} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.EntityReference.ownerDocument} property.</p>
     * @returns Ti.XML.Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOwnerDocument:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.EntityReference.parentNode} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getParentNode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.EntityReference.prefix} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPrefix:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.EntityReference.previousSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPreviousSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.EntityReference.text} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getText:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.EntityReference.textContent} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTextContent:function() {
    },

    /**
     * <p>Whether or not this node has attributes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hasAttributes:function() {
    },

    /**
     * <p>Whether or not this node has child nodes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hasChildNodes:function() {
    },

    /**
     * <p>Inserts the node <code>newChild</code> before the node <code>refChild</code>.</p>
     * @param {Ti.XML.Node} newChild <p>The node to insert</p>
     * @param {Ti.XML.Node} refChild <p>The node to insert <code>newChild</code> before</p>
     * @returns Ti.XML.Node The inserted node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    insertBefore:function(newChild, refChild) {
    },

    /**
     * <p>Tests whether the DOM implementation supports a specific feature</p>
     * @param {String} feature <p>The name of the feature</p>
     * @param {String} version <p>The version number of the feature</p>
     * @returns Boolean Whether or not the feature is supported
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    isSupported:function(feature, version) {
    },

    /**
     * <p>Normalizes text and attribute nodes in this node's child hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    normalize:function() {
    },

    /**
     * <p>Removes a child node from this node</p>
     * @param {Ti.XML.Node} oldChild <p>The node to remove</p>
     * @returns Ti.XML.Node The node that was removed
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeChild:function(oldChild) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Replaces the node <code>oldChild</code> with the node <code>newChild</code></p>
     * @param {Ti.XML.Node} newChild <p>The new node</p>
     * @param {Ti.XML.Node} oldChild <p>The node being replaced</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    replaceChild:function(newChild, oldChild) {
    },

    /**
     * <p>Sets the value of the {@link Ti.XML.EntityReference.localName} property.</p>
     * @param {String} localName <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLocalName:function(localName) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Ti.XML.NamedNodeMap = function() {
};
Ti.XML.NamedNodeMap.prototype = {

    /**
     * <p>The number of nodes in the map. The valid range of child node indices is 0-<code>length</code>-1, inclusive.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    length:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.NamedNodeMap.length} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLength:function() {
    },

    /**
     * <p>Retrieves a node specified by name.</p>
     * @param {String} name <p>The name of the node to retrieve.</p>
     * @returns Ti.XML.Node The specified node, or `null` if no node with the name is in the map
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNamedItem:function(name) {
    },

    /**
     * <p>Retrieves a node specified by name and namespace. Returns <code>null</code> if no matching node is in the map.</p>
     * @param {String} namespaceURI <p>The namespace URI of the node to retrieve.</p>
     * @param {String} localName <p>The local name of the node within the namespace to retrieve.</p>
     * @returns Ti.XML.Node The specified node, or `null` if there is no matching node.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getNamedItemNS:function(namespaceURI, localName) {
    },

    /**
     * <p>Retrieves the node at the specified index of the map. Note that NamedNodeMaps are not ordered.</p>
     * @param {Number} index <p>The index of the node to retrieve.</p>
     * @returns Ti.XML.Node The node at the specified index, or `null` if the index is invalid
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    item:function(index) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Removes a node from the map specified by name. When this map contains attributes attached to an element, if the removed attribtue is known to have a default, it is replaced with that value.</p>
     * @param {String} name <p>The name of the node to remove.</p>
     * @returns Ti.XML.Node The node removed from the map, or `null` if nothing removed.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeNamedItem:function(name) {
    },

    /**
     * <p>Removes a node from the map specified by local name and namespace URI.  When this map contains attributes attached to an element, if the removed attribtue is known to have a default, it is replaced with that value. Returns the node removed from the map, or <code>null</code> if there is no corresponding node.</p>
     * @param {String} namespaceURI <p>The namespace URI of the node to remove.</p>
     * @param {String} localName <p>The local name of the node within the namespace to remove.</p>
     * @returns Ti.XML.Node The node removed from the map, or `null` if nothing removed.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeNamedItemNS:function(namespaceURI, localName) {
    },

    /**
     * <p>Adds a node using its <code>nodeName</code> attribute. If a node with that name is already present, it is replaced.  Throws an exception if the argument is from a different document, the map is read-only, or the argument is an attribute of another element.</p>
     * @param {Ti.XML.Node} node <p>The node to insert into the map.</p>
     * @returns Ti.XML.Node The node replaced, or `null` if no node was replaced.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setNamedItem:function(node) {
    },

    /**
     * <p>Adds a node using its <code>namespaceURI</code> and <code>localName</code> attributes. If a node with that name is already present, it is replaced. Throws an exception if the argument is from a different document, the map is read-only, or the argument is an attribute of another element.</p>
     * @param {Ti.XML.Node} node <p>The node to insert into the map.</p>
     * @returns Ti.XML.Node Returns the node replaced, or `null`.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setNamedItemNS:function(node) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Implements the {@link http://www.w3.org/TR/DOM} 
on Android and iOS. Exposes the 
{@link http://www.w3.org/TR/DOM} implementation on Mobile Web.
For full property and method description, see the W3C specifications.</p>
 */
Ti.XML.Node = function() {
};
Ti.XML.Node.prototype = {

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Attr}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ATTRIBUTE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.CDATASection} (a type of {@link Ti.XML.Text})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    CDATA_SECTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Comment}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    COMMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentFragment}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_FRAGMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Document}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentType}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_TYPE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Element}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ELEMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Entity}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.EntityReference} (a type of {@link Ti.XML.Node})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_REFERENCE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Notation}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    NOTATION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.ProcessingInstruction}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    PROCESSING_INSTRUCTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Text}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    TEXT_NODE:null,

    /**
     * <p>A map of this node's attributes</p>
     * @type Ti.XML.NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    attributes:null,

    /**
     * <p>A {@link Ti.XML.NodeList} of this node's children</p>
     * @type Ti.XML.NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    childNodes:null,

    /**
     * <p>This node's first child</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    firstChild:null,

    /**
     * <p>This node's last child</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    lastChild:null,

    /**
     * <p>The local part of the qualified name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    localName:null,

    /**
     * <p>The namespace URI of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    namespaceURI:null,

    /**
     * <p>This node's next sibling</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nextSibling:null,

    /**
     * <p>The name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeName:null,

    /**
     * <p>This node's type. One of <code>ELEMENT_NODE</code>, <code>ATTRIBUTE_NODE</code>, <code>TEXT_NODE</code>, <code>CDATA_SECTION_NODE</code>,
<code>ENTITY_REFERENCE_NODE</code>, <code>ENTITY_NODE</code>, <code>PROCESSING_INSTRUCTION_NODE</code>, <code>COMMENT_NODE</code>,
<code>DOCUMENT_NODE</code>, <code>DOCUMENT_TYPE_NODE</code>, <code>DOCUMENT_FRAGMENT_NODE</code>, <code>NOTATION_NODE</code>.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeType:null,

    /**
     * <p>The content (value) of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeValue:null,

    /**
     * <p>This node's owning Document</p>
     * @type Ti.XML.Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ownerDocument:null,

    /**
     * <p>This node's parent node</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    parentNode:null,

    /**
     * <p>The namespace prefix of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    prefix:null,

    /**
     * <p>This node's previous sibling</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    previousSibling:null,

    /**
     * <p>The content (value) of all text nodes within this node.
Use {@link Ti.XML.Node.textContent} instead.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    text:null,

    /**
     * <p>The content (value) of all text nodes within this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    textContent:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends the node <code>newChild</code> as a child of this node</p>
     * @param {Ti.XML.Node} newChild <p>The new node to append</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    appendChild:function(newChild) {
    },

    /**
     * <p>Returns a duplicate of this node</p>
     * @param {Boolean} deep <p>Whether or not to perform a deep copy of this node</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    cloneNode:function(deep) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Node.attributes} property.</p>
     * @returns Ti.XML.NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getAttributes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Node.childNodes} property.</p>
     * @returns Ti.XML.NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getChildNodes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Node.firstChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFirstChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Node.lastChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLastChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Node.localName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLocalName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Node.namespaceURI} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNamespaceURI:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Node.nextSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNextSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Node.nodeName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Node.nodeType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Node.nodeValue} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Node.ownerDocument} property.</p>
     * @returns Ti.XML.Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOwnerDocument:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Node.parentNode} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getParentNode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Node.prefix} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPrefix:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Node.previousSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPreviousSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Node.text} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getText:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Node.textContent} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTextContent:function() {
    },

    /**
     * <p>Whether or not this node has attributes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hasAttributes:function() {
    },

    /**
     * <p>Whether or not this node has child nodes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hasChildNodes:function() {
    },

    /**
     * <p>Inserts the node <code>newChild</code> before the node <code>refChild</code>.</p>
     * @param {Ti.XML.Node} newChild <p>The node to insert</p>
     * @param {Ti.XML.Node} refChild <p>The node to insert <code>newChild</code> before</p>
     * @returns Ti.XML.Node The inserted node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    insertBefore:function(newChild, refChild) {
    },

    /**
     * <p>Tests whether the DOM implementation supports a specific feature</p>
     * @param {String} feature <p>The name of the feature</p>
     * @param {String} version <p>The version number of the feature</p>
     * @returns Boolean Whether or not the feature is supported
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    isSupported:function(feature, version) {
    },

    /**
     * <p>Normalizes text and attribute nodes in this node's child hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    normalize:function() {
    },

    /**
     * <p>Removes a child node from this node</p>
     * @param {Ti.XML.Node} oldChild <p>The node to remove</p>
     * @returns Ti.XML.Node The node that was removed
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeChild:function(oldChild) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Replaces the node <code>oldChild</code> with the node <code>newChild</code></p>
     * @param {Ti.XML.Node} newChild <p>The new node</p>
     * @param {Ti.XML.Node} oldChild <p>The node being replaced</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    replaceChild:function(newChild, oldChild) {
    },

    /**
     * <p>Sets the value of the {@link Ti.XML.Node.localName} property.</p>
     * @param {String} localName <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLocalName:function(localName) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Ti.XML.NodeList = function() {
};
Ti.XML.NodeList.prototype = {

    /**
     * <p>The length of the node list.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    length:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.NodeList.length} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLength:function() {
    },

    /**
     * <p>Returns the {@link Ti.XML.Node} object at the specified index.</p>
     * @param {Number} index <p>The index of the node to retrieve. Indexing starts at 0.</p>
     * @returns Ti.XML.Node The node at the index, or `null` if the index is out of bounds.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    item:function(index) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Ti.XML.Notation = function() {
};
Ti.XML.Notation.prototype = {

    /**
     * <p>The public identifier of this notation. If the public identifier was not specified, this is <code>null</code>.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    publicId:null,

    /**
     * <p>The system identifier of this notation. If the system identifier was not specified, this is <code>null</code>.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    systemId:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Notation.publicId} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getPublicId:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Notation.systemId} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSystemId:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Ti.XML.ProcessingInstruction = function() {
};
Ti.XML.ProcessingInstruction.prototype = {

    /**
     * <p>Retrieve the content of this processing instruction. This from the first non white space character  after the target to the character immediatly preceding the ?&gt;. When setting a processing instruction, a DOMException may be thrown on an invalid instruction.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    data:null,

    /**
     * <p>Retrieve the target of this processing instruction. XML defines this as being the first token following  the markup that begins the processing instruction.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    target:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.ProcessingInstruction.data} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getData:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.ProcessingInstruction.target} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTarget:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Ti.XML.ProcessingInstruction.data} property.</p>
     * @param {String} data <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setData:function(data) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Ti.XML.Text = function() {
};
Ti.XML.Text.prototype = {

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Attr}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ATTRIBUTE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.CDATASection} (a type of {@link Ti.XML.Text})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    CDATA_SECTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Comment}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    COMMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentFragment}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_FRAGMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Document}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.DocumentType}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    DOCUMENT_TYPE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Element}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ELEMENT_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Entity}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.EntityReference} (a type of {@link Ti.XML.Node})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ENTITY_REFERENCE_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Notation}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    NOTATION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.ProcessingInstruction}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    PROCESSING_INSTRUCTION_NODE:null,

    /**
     * <p>The value of nodeType when this node is a {@link Ti.XML.Text}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    TEXT_NODE:null,

    /**
     * <p>A map of this node's attributes</p>
     * @type Ti.XML.NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    attributes:null,

    /**
     * <p>A {@link Ti.XML.NodeList} of this node's children</p>
     * @type Ti.XML.NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    childNodes:null,

    /**
     * <p>The character data of the node that implements this interface. Throws an exception during setting if this node is readonly.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    data:null,

    /**
     * <p>This node's first child</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    firstChild:null,

    /**
     * <p>This node's last child</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    lastChild:null,

    /**
     * <p>The number of characters that are available through data and the substringData method. This may have the value zero, i.e., {@link Ti.XML.CharacterData} may be empty.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    length:null,

    /**
     * <p>The local part of the qualified name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    localName:null,

    /**
     * <p>The namespace URI of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    namespaceURI:null,

    /**
     * <p>This node's next sibling</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nextSibling:null,

    /**
     * <p>The name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeName:null,

    /**
     * <p>This node's type. One of <code>ELEMENT_NODE</code>, <code>ATTRIBUTE_NODE</code>, <code>TEXT_NODE</code>, <code>CDATA_SECTION_NODE</code>,
<code>ENTITY_REFERENCE_NODE</code>, <code>ENTITY_NODE</code>, <code>PROCESSING_INSTRUCTION_NODE</code>, <code>COMMENT_NODE</code>,
<code>DOCUMENT_NODE</code>, <code>DOCUMENT_TYPE_NODE</code>, <code>DOCUMENT_FRAGMENT_NODE</code>, <code>NOTATION_NODE</code>.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeType:null,

    /**
     * <p>The content (value) of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    nodeValue:null,

    /**
     * <p>This node's owning Document</p>
     * @type Ti.XML.Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    ownerDocument:null,

    /**
     * <p>This node's parent node</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    parentNode:null,

    /**
     * <p>The namespace prefix of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    prefix:null,

    /**
     * <p>This node's previous sibling</p>
     * @type Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    previousSibling:null,

    /**
     * <p>The content (value) of all text nodes within this node.
Use {@link Ti.XML.Node.textContent} instead.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    text:null,

    /**
     * <p>The content (value) of all text nodes within this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    textContent:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends the node <code>newChild</code> as a child of this node</p>
     * @param {Ti.XML.Node} newChild <p>The new node to append</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    appendChild:function(newChild) {
    },

    /**
     * <p>Append the string to the end of the character data of the node. Upon success, data provides access to the concatenation of data and the string specified. Throws an exception if this node is readonly.</p>
     * @param {String} arg <p>The string to append.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    appendData:function(arg) {
    },

    /**
     * <p>Returns a duplicate of this node</p>
     * @param {Boolean} deep <p>Whether or not to perform a deep copy of this node</p>
     * @returns Ti.XML.Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    cloneNode:function(deep) {
    },

    /**
     * <p>Remove a range of characters from the node. Upon success, data and length reflect the change. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.</p>
     * @param {Number} offset <p>The offset from which to start removing.</p>
     * @param {Number} count <p>The number of characters to delete. If the sum of offset and count exceeds length then all characters from offset to the end of the data are deleted.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    deleteData:function(offset, count) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Text.attributes} property.</p>
     * @returns Ti.XML.NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getAttributes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Text.childNodes} property.</p>
     * @returns Ti.XML.NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getChildNodes:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Text.data} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getData:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Text.firstChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFirstChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Text.lastChild} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLastChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Text.length} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLength:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Text.localName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLocalName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Text.namespaceURI} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNamespaceURI:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Text.nextSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNextSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Text.nodeName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeName:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Text.nodeType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeType:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Text.nodeValue} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getNodeValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Text.ownerDocument} property.</p>
     * @returns Ti.XML.Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOwnerDocument:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Text.parentNode} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getParentNode:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Text.prefix} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPrefix:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Text.previousSibling} property.</p>
     * @returns Ti.XML.Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPreviousSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Text.text} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getText:function() {
    },

    /**
     * <p>Gets the value of the {@link Ti.XML.Text.textContent} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTextContent:function() {
    },

    /**
     * <p>Whether or not this node has attributes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hasAttributes:function() {
    },

    /**
     * <p>Whether or not this node has child nodes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hasChildNodes:function() {
    },

    /**
     * <p>Inserts the node <code>newChild</code> before the node <code>refChild</code>.</p>
     * @param {Ti.XML.Node} newChild <p>The node to insert</p>
     * @param {Ti.XML.Node} refChild <p>The node to insert <code>newChild</code> before</p>
     * @returns Ti.XML.Node The inserted node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    insertBefore:function(newChild, refChild) {
    },

    /**
     * <p>Insert a string at the specified offset. Throws an exception if this node is readonly, if offset is negative, or if offset is beyond the data's length.</p>
     * @param {Number} offset <p>The character offset at which to insert.</p>
     * @param {String} arg <p>The string to insert.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    insertData:function(offset, arg) {
    },

    /**
     * <p>Tests whether the DOM implementation supports a specific feature</p>
     * @param {String} feature <p>The name of the feature</p>
     * @param {String} version <p>The version number of the feature</p>
     * @returns Boolean Whether or not the feature is supported
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    isSupported:function(feature, version) {
    },

    /**
     * <p>Normalizes text and attribute nodes in this node's child hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    normalize:function() {
    },

    /**
     * <p>Removes a child node from this node</p>
     * @param {Ti.XML.Node} oldChild <p>The node to remove</p>
     * @returns Ti.XML.Node The node that was removed
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeChild:function(oldChild) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Replaces the node <code>oldChild</code> with the node <code>newChild</code></p>
     * @param {Ti.XML.Node} newChild <p>The new node</p>
     * @param {Ti.XML.Node} oldChild <p>The node being replaced</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    replaceChild:function(newChild, oldChild) {
    },

    /**
     * <p>Replace the characters starting at the specified offset with the specified string. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.</p>
     * @param {Number} offset <p>The offset from which to start replacing.</p>
     * @param {Number} count <p>The number of characters to replace. If the sum of offset and count exceeds length, then all characters to the end of the data are replaced; (i.e., the effect is the same as a remove method call with the same range, followed by an append method invocation).</p>
     * @param {String} arg <p>The string with which the range must be replaced.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    replaceData:function(offset, count, arg) {
    },

    /**
     * <p>Sets the value of the {@link Ti.XML.Text.data} property.</p>
     * @param {String} data <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setData:function(data) {
    },

    /**
     * <p>Sets the value of the {@link Ti.XML.Text.localName} property.</p>
     * @param {String} localName <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLocalName:function(localName) {
    },

    /**
     * <p>Breaks this node into two nodes at the specified by offset, and returns a new node of the same type, which contains all the content at and after the offset point. Throws an exception if the specified offset is negative or if this node is read only.</p>
     * @param {Number} offset <p>The offset at which to split, starting from 0.</p>
     * @returns Ti.XML.Text The new node, of the same type as this node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    splitText:function(offset) {
    },

    /**
     * <p>Extracts a range of data from the node. Throws an exception if offset is negative, offset is beyond the data's length, or if count is negative.</p>
     * @param {Number} offset <p>Start offset of substring to extract.</p>
     * @param {Number} count <p>The number of characters units to extract.</p>
     * @returns String The specified substring. If the sum of offset and count exceeds the length, then all 16-bit units to the end of the data are returned.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    substringData:function(offset, count) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Ti.Yahoo = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Ti.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>invoke a Yahoo YQL query</p>
     * @param {String} yql <p>the YQL query to execute</p>
     * @param {Callback<Object>} callback <p>the function to execute when the query completes. The event will contain the boolean property <code>success</code> if successful. If <code>success</code> is false, the <code>message</code> property will contain the error message. If <code>success</code> is true, the <code>data</code> property will contain the data payload received from the YQL.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    yql:function(yql, callback) {
    }
};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var WriteCallbackArgs = function() {
};
WriteCallbackArgs.prototype = {

    /**
     * <p>Number of bytes processed, or -1 in the event of an error or end of stream.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    bytesProcessed:null,

    /**
     * <p>Text description of the error.</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    errorDescription:null,

    /**
     * <p>Whether an error was encountered. Set to 1 in the case of an error, 0
otherwise.</p>
     * @type Number
     * @since 1.7 (Android)
     */
    errorState:null,

    /**
     * <p>Stream being written to.</p>
     * @type Ti.IOStream
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    source:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var WriteStreamCallbackArgs = function() {
};
WriteStreamCallbackArgs.prototype = {

    /**
     * <p>Number of bytes processed, or -1 in the event of an error or end of stream.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    bytesProcessed:null,

    /**
     * <p>Text description of the error.</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    errorDescription:null,

    /**
     * <p>Whether an error was encountered. Set to 1 in the case of an error, 0
otherwise.</p>
     * @type Number
     * @since 1.7 (Android)
     */
    errorState:null,

    /**
     * <p>Stream being read from.</p>
     * @type Ti.IOStream
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    fromStream:null,

    /**
     * <p>Stream being written to.</p>
     * @type Ti.IOStream
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    toStream:null,



};

/**
 * platforms: iPhone, iPad
 * @namespace <p>On iOS, the optional parameter <code>animated</code> to enable the animation while the scrollable region 
scrolls. For example</p>
<pre><code>setContentOffset({x:50,y:100}, {animated:true})
</code></pre>
 */
var contentOffsetOption = function() {
};
contentOffsetOption.prototype = {

    /**
     * <p>Determines whether the scroll view's content area change is animated.</p>
     * @type Boolean
     * @since 1.8.1 (iPhone), 1.8.1 (iPad)
     */
    animated:null,



};

/**
 * platforms: iPhone, iPad
 */
var hideParams = function() {
};
hideParams.prototype = {

    /**
     * <p>Determines whether to animate the dialog as it is dismissed.</p>
     * @type Boolean
     * @since 1.9.0 (iPhone), 1.9.0 (iPad)
     */
    animated:null,



};

/**
 * platforms: iPhone, iPad
 */
var hideStatusBarParams = function() {
};
hideStatusBarParams.prototype = {

    /**
     * <p>Determines whether to animate the dialog as it is hidden.</p>
     * @type Boolean
     * @since 1.9.0 (iPhone), 1.9.0 (iPad)
     */
    animated:null,

    /**
     * <p>Style of the animation.</p>
     * @type Number
     * @since 1.9.0 (iPhone), 1.9.0 (iPad)
     */
    animationStyle:null,



};

/**
 * platforms: iPhone, iPad
 */
var openWindowParams = function() {
};
openWindowParams.prototype = {

    /**
     * <p>Determines whether the window is modal.</p>
     * @type Boolean
     * @since 1.9.0 (iPhone), 1.9.0 (iPad)
     */
    modal:null,

    /**
     * <p>Presentation style of this modal window.</p>
     * @type Number
     * @since 1.9.0 (iPhone), 1.9.0 (iPad)
     */
    modalStyle:null,

    /**
     * <p>Transition style of this modal window.</p>
     * @type Number
     * @since 1.9.0 (iPhone), 1.9.0 (iPad)
     */
    modalTransitionStyle:null,



};

/**
 * platforms: Android, iPhone, iPad
 */
var showContactsParams = function() {
};
showContactsParams.prototype = {

    /**
     * <p>Determines whether to animate the show/hide of the contacts picker (iPhone, iPad only.)</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animated:null,

    /**
     * <p>Function to call when selection is canceled.</p>
     * @type Callback<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    cancel:null,

    /**
     * <p>Field names to show when selecting properties. By default, shows all available.</p>
     * @type Array<String>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fields:null,

    /**
     * <p>Function to call when a person is selected. Must not be used with <code>selectedProperty</code> property.</p>
     * @type Callback<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    selectedPerson:null,

    /**
     * <p>Function to call when a property is selected. Must not be used with <code>selectedPerson</code> 
property.</p>
     * @type Callback<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    selectedProperty:null,



};

/**
 * platforms: iPad
 */
var showParams = function() {
};
showParams.prototype = {

    /**
     * <p>Determines whether to animate the dialog as it is shown.</p>
     * @type Boolean
     * @since 0.8 (iPad)
     */
    animated:null,

    /**
     * <p>View size and position, determined by coordinates <code>x</code> and <code>y</code> and dimensions <code>height</code> 
and <code>width</code>.</p>
     * @type Dictionary
     * @since 0.8 (iPad)
     */
    rect:null,

    /**
     * <p>View to which to attach the dialog.</p>
     * @type Ti.UI.View
     * @since 0.8 (iPad)
     */
    view:null,



};

/**
 * platforms: iPhone, iPad
 */
var showStatusBarParams = function() {
};
showStatusBarParams.prototype = {

    /**
     * <p>Determines whether to animate the dialog as it is shown.</p>
     * @type Boolean
     * @since 1.9.0 (iPhone), 1.9.0 (iPad)
     */
    animated:null,

    /**
     * <p>Style of the animation.</p>
     * @type Number
     * @since 1.9.0 (iPhone), 1.9.0 (iPad)
     */
    animationStyle:null,



};

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
var textAreaSelectedParams = function() {
};
textAreaSelectedParams.prototype = {

    /**
     * <p>Number of characters selected.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    length:null,

    /**
     * <p>Starting position of selected text.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    location:null,



};


var Titanium = Ti;
