/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
function AcceptDict() {
}
AcceptDict.prototype = {

    /**
     * <p>The callback to be fired after the socket enters the ERROR state</p>
     * @type Callback<ErrorCallbackArgs>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>The timeout for connect() and all I/O write() operations. Cannot be modified when not in the INITIALIZED state</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    timeout:null,


    /**
     * <p>Gets the value of the {@link AcceptDict.error} property.</p>
     * @returns Callback<ErrorCallbackArgs>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getError:function() {
    },

    /**
     * <p>Gets the value of the {@link AcceptDict.timeout} property.</p>
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getTimeout:function() {
    },

    /**
     * <p>Sets the value of the {@link AcceptDict.error} property.</p>
     * @param {Callback<ErrorCallbackArgs>} error <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setError:function(error) {
    },

    /**
     * <p>Sets the value of the {@link AcceptDict.timeout} property.</p>
     * @param {Number} timeout <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setTimeout:function(timeout) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
function AcceptedCallbackArgs() {
}
AcceptedCallbackArgs.prototype = {

    /**
     * <p>Socket which represents the inbound connection; this should be considered a 'connected' socket and is created in the CONNECTED state</p>
     * @type Titanium_Network_Socket_TCP
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    inbound:null,

    /**
     * <p>Socket which received the connection</p>
     * @type Titanium_Network_Socket_TCP
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    socket:null,


    /**
     * <p>Gets the value of the {@link AcceptedCallbackArgs.inbound} property.</p>
     * @returns Titanium_Network_Socket_TCP
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getInbound:function() {
    },

    /**
     * <p>Gets the value of the {@link AcceptedCallbackArgs.socket} property.</p>
     * @returns Titanium_Network_Socket_TCP
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getSocket:function() {
    },

    /**
     * <p>Sets the value of the {@link AcceptedCallbackArgs.inbound} property.</p>
     * @param {Titanium_Network_Socket_TCP} inbound <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setInbound:function(inbound) {
    },

    /**
     * <p>Sets the value of the {@link AcceptedCallbackArgs.socket} property.</p>
     * @param {Titanium_Network_Socket_TCP} socket <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setSocket:function(socket) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
function ConnectedCallbackArgs() {
}
ConnectedCallbackArgs.prototype = {

    /**
     * <p>Socket instance that has been connected</p>
     * @type Titanium_Network_Socket_TCP
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    socket:null,


    /**
     * <p>Gets the value of the {@link ConnectedCallbackArgs.socket} property.</p>
     * @returns Titanium_Network_Socket_TCP
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getSocket:function() {
    },

    /**
     * <p>Sets the value of the {@link ConnectedCallbackArgs.socket} property.</p>
     * @param {Titanium_Network_Socket_TCP} socket <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setSocket:function(socket) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function CreateBufferArgs() {
}
CreateBufferArgs.prototype = {

    /**
     * <p>The byte order of this buffer.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    byteOrder:null,

    /**
     * <p>The length of the buffer.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    length:null,

    /**
     * <p>The type of data encoding to use with <code>value</code>.</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    type:null,

    /**
     * <p>An initial value which will be encoded and placed in the buffer. If value is a Number, type must also be set. (this is simply a convenient way of calling {@link Titanium.Codec.encodeString} or {@link Titanium.Codec.encodeNumber} and placing the encoded value in the returned buffer.)</p>
     * @type String|Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    value:null,


    /**
     * <p>Gets the value of the {@link CreateBufferArgs.byteOrder} property.</p>
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getByteOrder:function() {
    },

    /**
     * <p>Gets the value of the {@link CreateBufferArgs.length} property.</p>
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getLength:function() {
    },

    /**
     * <p>Gets the value of the {@link CreateBufferArgs.type} property.</p>
     * @returns String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getType:function() {
    },

    /**
     * <p>Gets the value of the {@link CreateBufferArgs.value} property.</p>
     * @returns String
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getValue:function() {
    },

    /**
     * <p>Sets the value of the {@link CreateBufferArgs.byteOrder} property.</p>
     * @param {Number} byteOrder <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    setByteOrder:function(byteOrder) {
    },

    /**
     * <p>Sets the value of the {@link CreateBufferArgs.length} property.</p>
     * @param {Number} length <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    setLength:function(length) {
    },

    /**
     * <p>Sets the value of the {@link CreateBufferArgs.type} property.</p>
     * @param {String} type <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    setType:function(type) {
    },

    /**
     * <p>Sets the value of the {@link CreateBufferArgs.value} property.</p>
     * @param {String|Number} value <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    setValue:function(value) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
function CreateStreamArgs() {
}
CreateStreamArgs.prototype = {

    /**
     * <p>mode for the stream to be opened in. Can be <code>Titanium.Stream.MODE_READ</code>,  <code>Titanium.Stream.MODE_WRITE</code> or <code>Titanium.Stream.MODE_APPEND</code></p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    mode:null,

    /**
     * <p>Object to create stream around</p>
     * @type Titanium_Blob|Titanium_Buffer
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    source:null,


    /**
     * <p>Gets the value of the {@link CreateStreamArgs.mode} property.</p>
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getMode:function() {
    },

    /**
     * <p>Gets the value of the {@link CreateStreamArgs.source} property.</p>
     * @returns Titanium_Blob
     * @returns Titanium_Buffer
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getSource:function() {
    },

    /**
     * <p>Sets the value of the {@link CreateStreamArgs.mode} property.</p>
     * @param {Number} mode <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setMode:function(mode) {
    },

    /**
     * <p>Sets the value of the {@link CreateStreamArgs.source} property.</p>
     * @param {Titanium_Blob|Titanium_Buffer} source <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setSource:function(source) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
function DecodeNumberDict() {
}
DecodeNumberDict.prototype = {

    /**
     * <p>The byte order to decode with</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    byteOrder:null,

    /**
     * <p>The position in <code>source</code> to start at</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    position:null,

    /**
     * <p>The buffer to decode</p>
     * @type Titanium_Buffer
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    source:null,

    /**
     * <p>The encoding type to use. Must be one of {@link Titanium.Codec.TYPE_BYTE}, {@link Titanium.Codec.TYPE_SHORT}, {@link Titanium.Codec.TYPE_INT}, {@link Titanium.Codec.TYPE_FLOAT}, {@link Titanium.Codec.TYPE_LONG}, or {@link Titanium.Codec.TYPE_DOUBLE}</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    type:null,


    /**
     * <p>Gets the value of the {@link DecodeNumberDict.byteOrder} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getByteOrder:function() {
    },

    /**
     * <p>Gets the value of the {@link DecodeNumberDict.position} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPosition:function() {
    },

    /**
     * <p>Gets the value of the {@link DecodeNumberDict.source} property.</p>
     * @returns Titanium_Buffer
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSource:function() {
    },

    /**
     * <p>Gets the value of the {@link DecodeNumberDict.type} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getType:function() {
    },

    /**
     * <p>Sets the value of the {@link DecodeNumberDict.byteOrder} property.</p>
     * @param {Number} byteOrder <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setByteOrder:function(byteOrder) {
    },

    /**
     * <p>Sets the value of the {@link DecodeNumberDict.position} property.</p>
     * @param {Number} position <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setPosition:function(position) {
    },

    /**
     * <p>Sets the value of the {@link DecodeNumberDict.source} property.</p>
     * @param {Titanium_Buffer} source <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSource:function(source) {
    },

    /**
     * <p>Sets the value of the {@link DecodeNumberDict.type} property.</p>
     * @param {String} type <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setType:function(type) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
function DecodeStringDict() {
}
DecodeStringDict.prototype = {

    /**
     * <p>The character set to use when encoding this string to bytes.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    charset:null,

    /**
     * <p>The number of bytes to decode.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    length:null,

    /**
     * <p>The position to start decoding.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    position:null,

    /**
     * <p>The buffer to decode.</p>
     * @type Titanium_Buffer
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    source:null,


    /**
     * <p>Gets the value of the {@link DecodeStringDict.charset} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCharset:function() {
    },

    /**
     * <p>Gets the value of the {@link DecodeStringDict.length} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLength:function() {
    },

    /**
     * <p>Gets the value of the {@link DecodeStringDict.position} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPosition:function() {
    },

    /**
     * <p>Gets the value of the {@link DecodeStringDict.source} property.</p>
     * @returns Titanium_Buffer
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSource:function() {
    },

    /**
     * <p>Sets the value of the {@link DecodeStringDict.charset} property.</p>
     * @param {String} charset <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCharset:function(charset) {
    },

    /**
     * <p>Sets the value of the {@link DecodeStringDict.length} property.</p>
     * @param {Number} length <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLength:function(length) {
    },

    /**
     * <p>Sets the value of the {@link DecodeStringDict.position} property.</p>
     * @param {Number} position <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setPosition:function(position) {
    },

    /**
     * <p>Sets the value of the {@link DecodeStringDict.source} property.</p>
     * @param {Titanium_Buffer} source <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSource:function(source) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
function EncodeNumberDict() {
}
EncodeNumberDict.prototype = {

    /**
     * <p>The byte order to encode with</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    byteOrder:null,

    /**
     * <p>The destination buffer</p>
     * @type Titanium_Buffer
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    dest:null,

    /**
     * <p>The position in dest to set the encoded data</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    position:null,

    /**
     * <p>The source Number to encode</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    source:null,

    /**
     * <p>The encoding type to use. Must be one of {@link Titanium.Codec.TYPE_BYTE}, {@link Titanium.Codec.TYPE_SHORT}, {@link Titanium.Codec.TYPE_INT}, {@link Titanium.Codec.TYPE_FLOAT}, {@link Titanium.Codec.TYPE_LONG}, or {@link Titanium.Codec.TYPE_DOUBLE}</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    type:null,


    /**
     * <p>Gets the value of the {@link EncodeNumberDict.byteOrder} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getByteOrder:function() {
    },

    /**
     * <p>Gets the value of the {@link EncodeNumberDict.dest} property.</p>
     * @returns Titanium_Buffer
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getDest:function() {
    },

    /**
     * <p>Gets the value of the {@link EncodeNumberDict.position} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPosition:function() {
    },

    /**
     * <p>Gets the value of the {@link EncodeNumberDict.source} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSource:function() {
    },

    /**
     * <p>Gets the value of the {@link EncodeNumberDict.type} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getType:function() {
    },

    /**
     * <p>Sets the value of the {@link EncodeNumberDict.byteOrder} property.</p>
     * @param {Number} byteOrder <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setByteOrder:function(byteOrder) {
    },

    /**
     * <p>Sets the value of the {@link EncodeNumberDict.dest} property.</p>
     * @param {Titanium_Buffer} dest <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setDest:function(dest) {
    },

    /**
     * <p>Sets the value of the {@link EncodeNumberDict.position} property.</p>
     * @param {Number} position <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setPosition:function(position) {
    },

    /**
     * <p>Sets the value of the {@link EncodeNumberDict.source} property.</p>
     * @param {Number} source <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSource:function(source) {
    },

    /**
     * <p>Sets the value of the {@link EncodeNumberDict.type} property.</p>
     * @param {String} type <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setType:function(type) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
function EncodeStringDict() {
}
EncodeStringDict.prototype = {

    /**
     * <p>The character set to use when encoding this string to bytes.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    charset:null,

    /**
     * <p>The destination buffer</p>
     * @type Titanium_Buffer
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    dest:null,

    /**
     * <p>The position in <code>dest</code> to set the encoded string.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    destPosition:null,

    /**
     * <p>The source string to encode</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    source:null,

    /**
     * <p>The number of characters in <code>source</code> to encode.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    sourceLength:null,

    /**
     * <p>The position in <code>source</code> to start encoding.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    sourcePosition:null,


    /**
     * <p>Gets the value of the {@link EncodeStringDict.charset} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCharset:function() {
    },

    /**
     * <p>Gets the value of the {@link EncodeStringDict.dest} property.</p>
     * @returns Titanium_Buffer
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getDest:function() {
    },

    /**
     * <p>Gets the value of the {@link EncodeStringDict.destPosition} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getDestPosition:function() {
    },

    /**
     * <p>Gets the value of the {@link EncodeStringDict.source} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSource:function() {
    },

    /**
     * <p>Gets the value of the {@link EncodeStringDict.sourceLength} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSourceLength:function() {
    },

    /**
     * <p>Gets the value of the {@link EncodeStringDict.sourcePosition} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSourcePosition:function() {
    },

    /**
     * <p>Sets the value of the {@link EncodeStringDict.charset} property.</p>
     * @param {String} charset <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCharset:function(charset) {
    },

    /**
     * <p>Sets the value of the {@link EncodeStringDict.dest} property.</p>
     * @param {Titanium_Buffer} dest <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setDest:function(dest) {
    },

    /**
     * <p>Sets the value of the {@link EncodeStringDict.destPosition} property.</p>
     * @param {Number} destPosition <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setDestPosition:function(destPosition) {
    },

    /**
     * <p>Sets the value of the {@link EncodeStringDict.source} property.</p>
     * @param {String} source <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSource:function(source) {
    },

    /**
     * <p>Sets the value of the {@link EncodeStringDict.sourceLength} property.</p>
     * @param {Number} sourceLength <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSourceLength:function(sourceLength) {
    },

    /**
     * <p>Sets the value of the {@link EncodeStringDict.sourcePosition} property.</p>
     * @param {Number} sourcePosition <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSourcePosition:function(sourcePosition) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
function ErrorCallbackArgs() {
}
ErrorCallbackArgs.prototype = {

    /**
     * <p>A stringified description of the error</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    error:null,

    /**
     * <p>The error code of the error (potentially system-dependent)</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    errorCode:null,

    /**
     * <p>Socket that experienced the error</p>
     * @type Titanium_Network_Socket_TCP
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    socket:null,


    /**
     * <p>Gets the value of the {@link ErrorCallbackArgs.error} property.</p>
     * @returns String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getError:function() {
    },

    /**
     * <p>Gets the value of the {@link ErrorCallbackArgs.errorCode} property.</p>
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getErrorCode:function() {
    },

    /**
     * <p>Gets the value of the {@link ErrorCallbackArgs.socket} property.</p>
     * @returns Titanium_Network_Socket_TCP
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getSocket:function() {
    },

    /**
     * <p>Sets the value of the {@link ErrorCallbackArgs.error} property.</p>
     * @param {String} error <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setError:function(error) {
    },

    /**
     * <p>Sets the value of the {@link ErrorCallbackArgs.errorCode} property.</p>
     * @param {Number} errorCode <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setErrorCode:function(errorCode) {
    },

    /**
     * <p>Sets the value of the {@link ErrorCallbackArgs.socket} property.</p>
     * @param {Titanium_Network_Socket_TCP} socket <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setSocket:function(socket) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
function Font() {
}
Font.prototype = {

    /**
     * <p>Name of a font family, for example, "Helvetica" or "DroidSans."</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fontFamily:null,

    /**
     * <p>Font size, in platform-dependent units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fontSize:null,

    /**
     * <p>Font style. Valid values are "italic" or "normal."</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    fontStyle:null,

    /**
     * <p>Font weight. Valid values are "bold" or "normal."</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fontWeight:null,


    /**
     * <p>Gets the value of the {@link Font.fontFamily} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFontFamily:function() {
    },

    /**
     * <p>Gets the value of the {@link Font.fontSize} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFontSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Font.fontStyle} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getFontStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Font.fontWeight} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFontWeight:function() {
    },

    /**
     * <p>Sets the value of the {@link Font.fontFamily} property.</p>
     * @param {String} fontFamily <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setFontFamily:function(fontFamily) {
    },

    /**
     * <p>Sets the value of the {@link Font.fontSize} property.</p>
     * @param {Number|String} fontSize <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setFontSize:function(fontSize) {
    },

    /**
     * <p>Sets the value of the {@link Font.fontStyle} property.</p>
     * @param {String} fontStyle <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setFontStyle:function(fontStyle) {
    },

    /**
     * <p>Sets the value of the {@link Font.fontWeight} property.</p>
     * @param {String} fontWeight <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setFontWeight:function(fontWeight) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Titanium provides a number of global built-in objects. </p>
<h4>JSON</h4>
<p>Titanium has a built-in JSON parser with two main functions: <code>parse</code> and <code>stringify</code>.  <code>JSON.parse</code> will safely evaluate a string encoded as JavaScript into a JavaScript object.  <code>JSON.stringify</code> will encode a JavaScript object into a string.</p>
<h4>Timers</h4>
<p>Titanium has built-in support for one-shot and repeating timers with two main functions: <code>setTimeout</code> and <code>setInterval</code>.  <code>setTimeout</code> takes 2 arguments: function and timeout in milliseconds after which the function should be executed and returns a timer handle that can be used to cancel a pending timer with <code>clearTimeout</code>.  <code>setInterval</code> takes 2 arguments: function and timeout in milliseconds for how often the function should be executed until cancelled and returns a timer handle that can be used to cancel a timer with <code>clearInterval</code>.</p>
<h4>Alert</h4>
<p>Titanium has a built-in convenience function {@link Global.alert} which can be used 
as a shortcut to create and show a simple {@link Titanium.UI.AlertDialog}.</p>
<h4>Locale</h4>
<p>The macro <code>L</code> can also be used which aliases the method {@link Titanium.Locale.getString}.</p>
 */
function Global() {
}
Global.prototype = {


    /**
     * <p>An alias for {@link Titanium.Locale.getString}.</p>
     * @param {String} key <p>The lookup key for the localization string.</p>
     * @param {String} hint <p>The text to use if <code>key</code> is not found.</p>
     * @returns String The value of the localized string defined by `key`.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    L:function(key, hint) {
    },

    /**
     * <p>Displays a pop-up alert dialog with the passed in <code>message</code>.</p>
     * @param {String} message <p>The message to show in the alert.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    alert:function(message) {
    },

    /**
     * <p>Clear an interval timer from being fired.</p>
     * @param {Number} timerId <p>The timer ID returned by {@link Global.setInterval}</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    clearInterval:function(timerId) {
    },

    /**
     * <p>Clear a timeout timer from being fired.</p>
     * @param {Number} timerId <p>The timer ID returned by {@link Global.setTimeout}</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    clearTimeout:function(timerId) {
    },

    /**
     * <p>Replaces each URI encoded escape sequence in the passed in <code>encodedURI</code> with the character that it represents.</p>
     * @param {String} encodedURI <p>URI string with encoded escape sequences.</p>
     * @returns String Decoded URI String.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    decodeURIComponent:function(encodedURI) {
    },

    /**
     * <p>Replaces all URI special characters in the passed in <code>string</code> with URI escape codes.</p>
     * @param {String} string <p>URI component that needs its special characters encoded.</p>
     * @returns String Encoded URI.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    encodeURIComponent:function(string) {
    },

    /**
     * <p>Loads either a native Titanium module, or a CommonJS module.</p>
     * @param {String} moduleId <p>Native module ID, or local path to a JavaScript file, <em>minus</em> the <code>.js</code> extension.</p>
     * @returns Object The `exports` object of the required module.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    require:function(moduleId) {
    },

    /**
     * <p>Creates an interval timer that calls <code>function</code> every <code>delay</code> milliseconds.</p>
     * @param {Callback} function <p>The function that this interval timer will call.</p>
     * @param {Number} delay <p>How long the timer will wait between calls to <code>function</code>.</p>
     * @returns Number A unique timer ID.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setInterval:function(function, delay) {
    },

    /**
     * <p>Creates a timer that calls <code>function</code> once after <code>delay</code> milliseconds.</p>
     * @param {Callback} function <p>The function that the timer will call.</p>
     * @param {Number} delay <p>How long the timer will wait before calling <code>function</code>.</p>
     * @returns Number A unique timer ID.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTimeout:function(function, delay) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>The following are built-in functions available on the {@link Global.String} class.
These are Titanium-specific extensions for formatting data into locale-specific strings. </p>
<p>Both iOS and Android use the locale configured by the user for locale-specific formatting.
The locale is set in device's system Settings. </p>
 */
function Global_String() {
}
Global_String.prototype = {


    /**
     * <p>Formats a string using a <code>printf</code>-style format string.</p>
     * @param {String} formatString <p>An IEEE <code>printf</code> format string.</p>
     * @param {String|Number} value <p>A value to substitute into the format string. An arbitrary number of value parameters may be specified.</p>
     * @returns String Formatted string.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    format:function(formatString, value) {
    },

    /**
     * <p>Formats a number into a locale-specific currency format.</p>
     * @param {Number} value <p>Currency value to format.</p>
     * @returns String The specified value, with a locale-specific currency symbol.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    formatCurrency:function(value) {
    },

    /**
     * <p>Formats a <code>Date</code> object in a localized string format.</p>
     * @param {Date} date <p>Date object to format.</p>
     * @param {String} format <p>Date format to use, specified as 'short', 'medium', or 'long'.</p>
     * @returns String String representation of the specified date.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    formatDate:function(date, format) {
    },

    /**
     * <p>Formats a number using the locale-specific decimal symbol.</p>
     * @param {Number} value <p>Value to format.</p>
     * @returns String String representation of the specified number, using a locale-specific decimal symbol, if required.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    formatDecimal:function(value) {
    },

    /**
     * <p>Formats a <code>Date</code> object into a locale-specific time format.</p>
     * @param {Date} date <p>Date object to format.</p>
     * @returns String String representation of the specified time.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    formatTime:function(date) {
    }
}

/**
 * platforms: iPhone, iPad
 */
function Gradient() {
}
Gradient.prototype = {

    /**
     * <p>Set to <code>true</code> to continue filling with the final color beyond the <code>endPoint</code>.</p>
     * @type Boolean
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    backfillEnd:null,

    /**
     * <p>Set to <code>true</code> to continue filling with the starting color beyond the <code>startPoint</code>.</p>
     * @type Boolean
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    backfillStart:null,

    /**
     * <p>An array of colors.</p>
     * @type Array<String>|Array<GradientColorRef>
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    colors:null,

    /**
     * <p>End point for the gradient.</p>
     * @type Point
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    endPoint:null,

    /**
     * <p>For a radial gradient, the radius at the <code>endPoint</code>.</p>
     * @type Number
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    endRadius:null,

    /**
     * <p>Start point for the gradient.</p>
     * @type Point
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    startPoint:null,

    /**
     * <p>For a radial gradient, the radius at the <code>startPoint</code>.</p>
     * @type Number
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    startRadius:null,

    /**
     * <p>Type of gradient, either 'linear' or 'radial'.</p>
     * @type String
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    type:null,


    /**
     * <p>Gets the value of the {@link Gradient.backfillEnd} property.</p>
     * @returns Boolean
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    getBackfillEnd:function() {
    },

    /**
     * <p>Gets the value of the {@link Gradient.backfillStart} property.</p>
     * @returns Boolean
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    getBackfillStart:function() {
    },

    /**
     * <p>Gets the value of the {@link Gradient.colors} property.</p>
     * @returns Array<String>
     * @returns Array<GradientColorRef>
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    getColors:function() {
    },

    /**
     * <p>Gets the value of the {@link Gradient.endPoint} property.</p>
     * @returns Point
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    getEndPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Gradient.endRadius} property.</p>
     * @returns Number
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    getEndRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Gradient.startPoint} property.</p>
     * @returns Point
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    getStartPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Gradient.startRadius} property.</p>
     * @returns Number
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    getStartRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Gradient.type} property.</p>
     * @returns String
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    getType:function() {
    },

    /**
     * <p>Sets the value of the {@link Gradient.backfillEnd} property.</p>
     * @param {Boolean} backfillEnd <p>New value for the property.</p>
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    setBackfillEnd:function(backfillEnd) {
    },

    /**
     * <p>Sets the value of the {@link Gradient.backfillStart} property.</p>
     * @param {Boolean} backfillStart <p>New value for the property.</p>
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    setBackfillStart:function(backfillStart) {
    },

    /**
     * <p>Sets the value of the {@link Gradient.colors} property.</p>
     * @param {Array<String>|Array<GradientColorRef>} colors <p>New value for the property.</p>
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    setColors:function(colors) {
    },

    /**
     * <p>Sets the value of the {@link Gradient.endPoint} property.</p>
     * @param {Point} endPoint <p>New value for the property.</p>
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    setEndPoint:function(endPoint) {
    },

    /**
     * <p>Sets the value of the {@link Gradient.endRadius} property.</p>
     * @param {Number} endRadius <p>New value for the property.</p>
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    setEndRadius:function(endRadius) {
    },

    /**
     * <p>Sets the value of the {@link Gradient.startPoint} property.</p>
     * @param {Point} startPoint <p>New value for the property.</p>
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    setStartPoint:function(startPoint) {
    },

    /**
     * <p>Sets the value of the {@link Gradient.startRadius} property.</p>
     * @param {Number} startRadius <p>New value for the property.</p>
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    setStartRadius:function(startRadius) {
    },

    /**
     * <p>Sets the value of the {@link Gradient.type} property.</p>
     * @param {String} type <p>New value for the property.</p>
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    setType:function(type) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
function GradientColorRef() {
}
GradientColorRef.prototype = {

    /**
     * <p>Color value at this point in the gradient.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    color:null,

    /**
     * <p>Offset of this color in the gradient, from 0 (start) to 1 (end).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    offset:null,


    /**
     * <p>Gets the value of the {@link GradientColorRef.color} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getColor:function() {
    },

    /**
     * <p>Gets the value of the {@link GradientColorRef.offset} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOffset:function() {
    },

    /**
     * <p>Sets the value of the {@link GradientColorRef.color} property.</p>
     * @param {String} color <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setColor:function(color) {
    },

    /**
     * <p>Sets the value of the {@link GradientColorRef.offset} property.</p>
     * @param {Number} offset <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOffset:function(offset) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
function ImageAsCroppedDict() {
}
ImageAsCroppedDict.prototype = {

    /**
     * <p>The height to crop this image to.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>The width to crop this image to.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>The x point within the image to crop.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    x:null,

    /**
     * <p>The y point within the image to crop.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    y:null,


    /**
     * <p>Gets the value of the {@link ImageAsCroppedDict.height} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link ImageAsCroppedDict.width} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link ImageAsCroppedDict.x} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getX:function() {
    },

    /**
     * <p>Gets the value of the {@link ImageAsCroppedDict.y} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getY:function() {
    },

    /**
     * <p>Sets the value of the {@link ImageAsCroppedDict.height} property.</p>
     * @param {Number} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link ImageAsCroppedDict.width} property.</p>
     * @param {Number} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link ImageAsCroppedDict.x} property.</p>
     * @param {Number} x <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setX:function(x) {
    },

    /**
     * <p>Sets the value of the {@link ImageAsCroppedDict.y} property.</p>
     * @param {Number} y <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setY:function(y) {
    }
}

/**
 * platforms: iPhone, iPad
 */
function MediaItemType() {
}
MediaItemType.prototype = {

    /**
     * <p>The album artist ID3 tag contents.</p>
     * @type String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    albumArtist:null,

    /**
     * <p>The album title ID3 tag contents.</p>
     * @type String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    albumTitle:null,

    /**
     * <p>The total number of tracks on the album.</p>
     * @type Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    albumTrackCount:null,

    /**
     * <p>The track number of the album.</p>
     * @type Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    albumTrackNumber:null,

    /**
     * <p>The artist ID3 tag contents.</p>
     * @type String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    artist:null,

    /**
     * <p>The composer ID3 tag contents.</p>
     * @type String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    composer:null,

    /**
     * <p>The total number of discs comprising the album.</p>
     * @type Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    discCount:null,

    /**
     * <p>The disc number of the album.</p>
     * @type Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    discNumber:null,

    /**
     * <p>The genre ID3 tag contents.</p>
     * @type String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    genre:null,

    /**
     * <p>Whether or not the media is part of a compilation album.</p>
     * @type Boolean
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    isCompilation:null,

    /**
     * <p>The lyrics ID3 tag contents.</p>
     * @type String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    lyrics:null,

    /**
     * <p>The type of the media. One of the <code>MUSIC_MEDIA_TYPE_*</code> constants on {@link Titanium.Media}.</p>
     * @type Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    mediaType:null,

    /**
     * <p>The total number of plays.</p>
     * @type Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    playCount:null,

    /**
     * <p>The playback length.</p>
     * @type Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    playbackDuration:null,

    /**
     * <p>The podcast title. Only valid for media of type <code>MUSIC_MEDIA_TYPE_PODCAST</code>.</p>
     * @type String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    podcastTitle:null,

    /**
     * <p>The user rating.</p>
     * @type Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    rating:null,

    /**
     * <p>The total number of skips.</p>
     * @type Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    skipCount:null,

    /**
     * <p>The title ID3 tag contents.</p>
     * @type String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    title:null,


    /**
     * <p>Gets the value of the {@link MediaItemType.albumArtist} property.</p>
     * @returns String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    getAlbumArtist:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaItemType.albumTitle} property.</p>
     * @returns String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    getAlbumTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaItemType.albumTrackCount} property.</p>
     * @returns Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    getAlbumTrackCount:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaItemType.albumTrackNumber} property.</p>
     * @returns Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    getAlbumTrackNumber:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaItemType.artist} property.</p>
     * @returns String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    getArtist:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaItemType.composer} property.</p>
     * @returns String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    getComposer:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaItemType.discCount} property.</p>
     * @returns Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    getDiscCount:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaItemType.discNumber} property.</p>
     * @returns Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    getDiscNumber:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaItemType.genre} property.</p>
     * @returns String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    getGenre:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaItemType.isCompilation} property.</p>
     * @returns Boolean
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    getIsCompilation:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaItemType.lyrics} property.</p>
     * @returns String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    getLyrics:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaItemType.mediaType} property.</p>
     * @returns Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    getMediaType:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaItemType.playCount} property.</p>
     * @returns Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    getPlayCount:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaItemType.playbackDuration} property.</p>
     * @returns Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    getPlaybackDuration:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaItemType.podcastTitle} property.</p>
     * @returns String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    getPodcastTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaItemType.rating} property.</p>
     * @returns Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    getRating:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaItemType.skipCount} property.</p>
     * @returns Number
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    getSkipCount:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaItemType.title} property.</p>
     * @returns String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    getTitle:function() {
    },

    /**
     * <p>Sets the value of the {@link MediaItemType.albumArtist} property.</p>
     * @param {String} albumArtist <p>New value for the property.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    setAlbumArtist:function(albumArtist) {
    },

    /**
     * <p>Sets the value of the {@link MediaItemType.albumTitle} property.</p>
     * @param {String} albumTitle <p>New value for the property.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    setAlbumTitle:function(albumTitle) {
    },

    /**
     * <p>Sets the value of the {@link MediaItemType.albumTrackCount} property.</p>
     * @param {Number} albumTrackCount <p>New value for the property.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    setAlbumTrackCount:function(albumTrackCount) {
    },

    /**
     * <p>Sets the value of the {@link MediaItemType.albumTrackNumber} property.</p>
     * @param {Number} albumTrackNumber <p>New value for the property.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    setAlbumTrackNumber:function(albumTrackNumber) {
    },

    /**
     * <p>Sets the value of the {@link MediaItemType.artist} property.</p>
     * @param {String} artist <p>New value for the property.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    setArtist:function(artist) {
    },

    /**
     * <p>Sets the value of the {@link MediaItemType.composer} property.</p>
     * @param {String} composer <p>New value for the property.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    setComposer:function(composer) {
    },

    /**
     * <p>Sets the value of the {@link MediaItemType.discCount} property.</p>
     * @param {Number} discCount <p>New value for the property.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    setDiscCount:function(discCount) {
    },

    /**
     * <p>Sets the value of the {@link MediaItemType.discNumber} property.</p>
     * @param {Number} discNumber <p>New value for the property.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    setDiscNumber:function(discNumber) {
    },

    /**
     * <p>Sets the value of the {@link MediaItemType.genre} property.</p>
     * @param {String} genre <p>New value for the property.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    setGenre:function(genre) {
    },

    /**
     * <p>Sets the value of the {@link MediaItemType.isCompilation} property.</p>
     * @param {Boolean} isCompilation <p>New value for the property.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    setIsCompilation:function(isCompilation) {
    },

    /**
     * <p>Sets the value of the {@link MediaItemType.lyrics} property.</p>
     * @param {String} lyrics <p>New value for the property.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    setLyrics:function(lyrics) {
    },

    /**
     * <p>Sets the value of the {@link MediaItemType.mediaType} property.</p>
     * @param {Number} mediaType <p>New value for the property.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    setMediaType:function(mediaType) {
    },

    /**
     * <p>Sets the value of the {@link MediaItemType.playCount} property.</p>
     * @param {Number} playCount <p>New value for the property.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    setPlayCount:function(playCount) {
    },

    /**
     * <p>Sets the value of the {@link MediaItemType.playbackDuration} property.</p>
     * @param {Number} playbackDuration <p>New value for the property.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    setPlaybackDuration:function(playbackDuration) {
    },

    /**
     * <p>Sets the value of the {@link MediaItemType.podcastTitle} property.</p>
     * @param {String} podcastTitle <p>New value for the property.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    setPodcastTitle:function(podcastTitle) {
    },

    /**
     * <p>Sets the value of the {@link MediaItemType.rating} property.</p>
     * @param {Number} rating <p>New value for the property.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    setRating:function(rating) {
    },

    /**
     * <p>Sets the value of the {@link MediaItemType.skipCount} property.</p>
     * @param {Number} skipCount <p>New value for the property.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    setSkipCount:function(skipCount) {
    },

    /**
     * <p>Sets the value of the {@link MediaItemType.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    setTitle:function(title) {
    }
}

/**
 * platforms: iPhone, iPad
 */
function MediaQueryInfoType() {
}
MediaQueryInfoType.prototype = {

    /**
     * <p>Whether or not the predicate is for an exact match.  The default is <code>true</code>.</p>
     * @type Boolean
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    exact:null,

    /**
     * <p>The value for the given predicate. See the descriptions in {@link MediaQueryType} for information about which properties require which values.</p>
     * @type Number|String|Boolean
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    value:null,


    /**
     * <p>Gets the value of the {@link MediaQueryInfoType.exact} property.</p>
     * @returns Boolean
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    getExact:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaQueryInfoType.value} property.</p>
     * @returns Number
     * @returns String
     * @returns Boolean
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    getValue:function() {
    },

    /**
     * <p>Sets the value of the {@link MediaQueryInfoType.exact} property.</p>
     * @param {Boolean} exact <p>New value for the property.</p>
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    setExact:function(exact) {
    },

    /**
     * <p>Sets the value of the {@link MediaQueryInfoType.value} property.</p>
     * @param {Number|String|Boolean} value <p>New value for the property.</p>
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    setValue:function(value) {
    }
}

/**
 * platforms: iPhone, iPad
 */
function MediaQueryType() {
}
MediaQueryType.prototype = {

    /**
     * <p>The album artist to filter on. Value should be a String.</p>
     * @type Dictionary<MediaQueryInfoType>|String
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    albumArtist:null,

    /**
     * <p>The album title to filter on. Value should be a String.</p>
     * @type Dictionary<MediaQueryInfoType>|String
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    albumTitle:null,

    /**
     * <p>The artist to filter on. Value should be a String.</p>
     * @type Dictionary<MediaQueryInfoType>|String
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    artist:null,

    /**
     * <p>The composer to filter on. Value should be a String.</p>
     * @type Dictionary<MediaQueryInfoType>|String
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    composer:null,

    /**
     * <p>The genre to filter on. Value should be a String.</p>
     * @type Dictionary<MediaQueryInfoType>|String
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    genre:null,

    /**
     * <p>A constant that specifies the ordering of the result array. One of the <code>MUSIC_MEDIA_GROUP_*</code> constants specified on the {@link Titanium.Media} module.</p>
     * @type Number
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    grouping:null,

    /**
     * <p>Filter by whether or not the item is a compilation. Value should be a Boolean.</p>
     * @type Dictionary<MediaQueryInfoType>|Boolean
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    isCompilation:null,

    /**
     * <p>The media type to filter on. Value should be one of the <code>MUSIC_MEDIA_TYPE_</code> constants on {@link Titanium.Media}.</p>
     * @type Dictionary<MediaQueryInfoType>|Number
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    mediaType:null,

    /**
     * <p>The title to filter on. Value should be a String.</p>
     * @type Dictionary<MediaQueryInfoType>|String
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    title:null,


    /**
     * <p>Gets the value of the {@link MediaQueryType.albumArtist} property.</p>
     * @returns Dictionary<MediaQueryInfoType>
     * @returns String
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    getAlbumArtist:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaQueryType.albumTitle} property.</p>
     * @returns Dictionary<MediaQueryInfoType>
     * @returns String
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    getAlbumTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaQueryType.artist} property.</p>
     * @returns Dictionary<MediaQueryInfoType>
     * @returns String
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    getArtist:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaQueryType.composer} property.</p>
     * @returns Dictionary<MediaQueryInfoType>
     * @returns String
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    getComposer:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaQueryType.genre} property.</p>
     * @returns Dictionary<MediaQueryInfoType>
     * @returns String
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    getGenre:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaQueryType.grouping} property.</p>
     * @returns Number
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    getGrouping:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaQueryType.isCompilation} property.</p>
     * @returns Dictionary<MediaQueryInfoType>
     * @returns Boolean
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    getIsCompilation:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaQueryType.mediaType} property.</p>
     * @returns Dictionary<MediaQueryInfoType>
     * @returns Number
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    getMediaType:function() {
    },

    /**
     * <p>Gets the value of the {@link MediaQueryType.title} property.</p>
     * @returns Dictionary<MediaQueryInfoType>
     * @returns String
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    getTitle:function() {
    },

    /**
     * <p>Sets the value of the {@link MediaQueryType.albumArtist} property.</p>
     * @param {Dictionary<MediaQueryInfoType>|String} albumArtist <p>New value for the property.</p>
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    setAlbumArtist:function(albumArtist) {
    },

    /**
     * <p>Sets the value of the {@link MediaQueryType.albumTitle} property.</p>
     * @param {Dictionary<MediaQueryInfoType>|String} albumTitle <p>New value for the property.</p>
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    setAlbumTitle:function(albumTitle) {
    },

    /**
     * <p>Sets the value of the {@link MediaQueryType.artist} property.</p>
     * @param {Dictionary<MediaQueryInfoType>|String} artist <p>New value for the property.</p>
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    setArtist:function(artist) {
    },

    /**
     * <p>Sets the value of the {@link MediaQueryType.composer} property.</p>
     * @param {Dictionary<MediaQueryInfoType>|String} composer <p>New value for the property.</p>
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    setComposer:function(composer) {
    },

    /**
     * <p>Sets the value of the {@link MediaQueryType.genre} property.</p>
     * @param {Dictionary<MediaQueryInfoType>|String} genre <p>New value for the property.</p>
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    setGenre:function(genre) {
    },

    /**
     * <p>Sets the value of the {@link MediaQueryType.grouping} property.</p>
     * @param {Number} grouping <p>New value for the property.</p>
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    setGrouping:function(grouping) {
    },

    /**
     * <p>Sets the value of the {@link MediaQueryType.isCompilation} property.</p>
     * @param {Dictionary<MediaQueryInfoType>|Boolean} isCompilation <p>New value for the property.</p>
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    setIsCompilation:function(isCompilation) {
    },

    /**
     * <p>Sets the value of the {@link MediaQueryType.mediaType} property.</p>
     * @param {Dictionary<MediaQueryInfoType>|Number} mediaType <p>New value for the property.</p>
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    setMediaType:function(mediaType) {
    },

    /**
     * <p>Sets the value of the {@link MediaQueryType.title} property.</p>
     * @param {Dictionary<MediaQueryInfoType>|String} title <p>New value for the property.</p>
     * @since 1.8 (iPhone), 1.8 (iPad)
     */
    setTitle:function(title) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Point() {
}
Point.prototype = {

    /**
     * <p>The x-axis coordinate of this point.</p>
     * @type Number
     * @since 1.8.0 (Android), 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    x:null,

    /**
     * <p>The y-axis coordinate of this point.</p>
     * @type Number
     * @since 1.8.0 (Android), 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    y:null,


    /**
     * <p>Gets the value of the {@link Point.x} property.</p>
     * @returns Number
     * @since 1.8.0 (Android), 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    getX:function() {
    },

    /**
     * <p>Gets the value of the {@link Point.y} property.</p>
     * @returns Number
     * @since 1.8.0 (Android), 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    getY:function() {
    },

    /**
     * <p>Sets the value of the {@link Point.x} property.</p>
     * @param {Number} x <p>New value for the property.</p>
     * @since 1.8.0 (Android), 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    setX:function(x) {
    },

    /**
     * <p>Sets the value of the {@link Point.y} property.</p>
     * @param {Number} y <p>New value for the property.</p>
     * @since 1.8.0 (Android), 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    setY:function(y) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
function PumpCallbackArgs() {
}
PumpCallbackArgs.prototype = {

    /**
     * <p>Buffer object holding the data currently being pumped to the handler method</p>
     * @type Titanium_Buffer
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    buffer:null,

    /**
     * <p>number of bytes processed in the current pump segment</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    bytesProcessed:null,

    /**
     * <p>description of the error</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    errorDescription:null,

    /**
     * <p>state representing error</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    errorState:null,

    /**
     * <p>Stream being read from</p>
     * @type Titanium_IOStream
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    source:null,

    /**
     * <p>total number of bytes processed in the overall pump operation so far</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    totalBytesProcessed:null,


    /**
     * <p>Gets the value of the {@link PumpCallbackArgs.buffer} property.</p>
     * @returns Titanium_Buffer
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getBuffer:function() {
    },

    /**
     * <p>Gets the value of the {@link PumpCallbackArgs.bytesProcessed} property.</p>
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getBytesProcessed:function() {
    },

    /**
     * <p>Gets the value of the {@link PumpCallbackArgs.errorDescription} property.</p>
     * @returns String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getErrorDescription:function() {
    },

    /**
     * <p>Gets the value of the {@link PumpCallbackArgs.errorState} property.</p>
     * @returns String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getErrorState:function() {
    },

    /**
     * <p>Gets the value of the {@link PumpCallbackArgs.source} property.</p>
     * @returns Titanium_IOStream
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getSource:function() {
    },

    /**
     * <p>Gets the value of the {@link PumpCallbackArgs.totalBytesProcessed} property.</p>
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getTotalBytesProcessed:function() {
    },

    /**
     * <p>Sets the value of the {@link PumpCallbackArgs.buffer} property.</p>
     * @param {Titanium_Buffer} buffer <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setBuffer:function(buffer) {
    },

    /**
     * <p>Sets the value of the {@link PumpCallbackArgs.bytesProcessed} property.</p>
     * @param {Number} bytesProcessed <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setBytesProcessed:function(bytesProcessed) {
    },

    /**
     * <p>Sets the value of the {@link PumpCallbackArgs.errorDescription} property.</p>
     * @param {String} errorDescription <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setErrorDescription:function(errorDescription) {
    },

    /**
     * <p>Sets the value of the {@link PumpCallbackArgs.errorState} property.</p>
     * @param {String} errorState <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setErrorState:function(errorState) {
    },

    /**
     * <p>Sets the value of the {@link PumpCallbackArgs.source} property.</p>
     * @param {Titanium_IOStream} source <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setSource:function(source) {
    },

    /**
     * <p>Sets the value of the {@link PumpCallbackArgs.totalBytesProcessed} property.</p>
     * @param {Number} totalBytesProcessed <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setTotalBytesProcessed:function(totalBytesProcessed) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
function ReadCallbackArgs() {
}
ReadCallbackArgs.prototype = {

    /**
     * <p>number of bytes processed</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    bytesProcessed:null,

    /**
     * <p>description of the error</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    errorDescription:null,

    /**
     * <p>state representing error</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    errorState:null,

    /**
     * <p>Stream being read</p>
     * @type Titanium_IOStream
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    source:null,


    /**
     * <p>Gets the value of the {@link ReadCallbackArgs.bytesProcessed} property.</p>
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getBytesProcessed:function() {
    },

    /**
     * <p>Gets the value of the {@link ReadCallbackArgs.errorDescription} property.</p>
     * @returns String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getErrorDescription:function() {
    },

    /**
     * <p>Gets the value of the {@link ReadCallbackArgs.errorState} property.</p>
     * @returns String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getErrorState:function() {
    },

    /**
     * <p>Gets the value of the {@link ReadCallbackArgs.source} property.</p>
     * @returns Titanium_IOStream
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getSource:function() {
    },

    /**
     * <p>Sets the value of the {@link ReadCallbackArgs.bytesProcessed} property.</p>
     * @param {Number} bytesProcessed <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setBytesProcessed:function(bytesProcessed) {
    },

    /**
     * <p>Sets the value of the {@link ReadCallbackArgs.errorDescription} property.</p>
     * @param {String} errorDescription <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setErrorDescription:function(errorDescription) {
    },

    /**
     * <p>Sets the value of the {@link ReadCallbackArgs.errorState} property.</p>
     * @param {String} errorState <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setErrorState:function(errorState) {
    },

    /**
     * <p>Sets the value of the {@link ReadCallbackArgs.source} property.</p>
     * @param {Titanium_IOStream} source <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setSource:function(source) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>These properties are only used on iOS. Not all properties apply to all methods.</p>
<p><code>animationStyle</code> does not apply to the <code>scrollToTop</code> or <code>scrollToIndex</code> methods.</p>
<p><code>positon</code> only applies to the <code>scrollToIndex</code> method.</p>
 */
function TableViewAnimationProperties() {
}
TableViewAnimationProperties.prototype = {

    /**
     * <p>Whether this table change should be animated. Ignored if any <code>animationStyle</code> value is specified.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animated:null,

    /**
     * <p>Type of animation to use for row insertions and deletions. One of the animation style constants defined in <code>Titanium.UI.iPhone.RowAnimationStyles</code>.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animationStyle:null,

    /**
     * <p>Specifies what position to scroll the selected row to. One of the position constants from {@link Titanium.UI.iPhone.TableViewScrollPosition}.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    position:null,


    /**
     * <p>Gets the value of the {@link TableViewAnimationProperties.animated} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getAnimated:function() {
    },

    /**
     * <p>Gets the value of the {@link TableViewAnimationProperties.animationStyle} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getAnimationStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link TableViewAnimationProperties.position} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPosition:function() {
    },

    /**
     * <p>Sets the value of the {@link TableViewAnimationProperties.animated} property.</p>
     * @param {Boolean} animated <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setAnimated:function(animated) {
    },

    /**
     * <p>Sets the value of the {@link TableViewAnimationProperties.animationStyle} property.</p>
     * @param {Number} animationStyle <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setAnimationStyle:function(animationStyle) {
    },

    /**
     * <p>Sets the value of the {@link TableViewAnimationProperties.position} property.</p>
     * @param {Number} position <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setPosition:function(position) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
function TableViewIndexEntry() {
}
TableViewIndexEntry.prototype = {

    /**
     * <p>Row index associated with this item.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    index:null,

    /**
     * <p>Title to display in the index bar for this item.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    title:null,


    /**
     * <p>Gets the value of the {@link TableViewIndexEntry.index} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getIndex:function() {
    },

    /**
     * <p>Gets the value of the {@link TableViewIndexEntry.title} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTitle:function() {
    },

    /**
     * <p>Sets the value of the {@link TableViewIndexEntry.index} property.</p>
     * @param {Number} index <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setIndex:function(index) {
    },

    /**
     * <p>Sets the value of the {@link TableViewIndexEntry.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTitle:function(title) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Titanium provides a number of built-in JavaScript objects that are not part
of the Titanium namespace, including JSON parsing, String formatting,
timers, and the CommonJS <code>require</code> function. See {@link Global} for
details.</p>
 */
var Titanium = {

    /**
     * <p>Date of the Titanium build.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    buildDate:null,

    /**
     * <p>Git hash of the Titanium build.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    buildHash:null,

    /**
     * <p>User-agent string used by Titanium.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    userAgent:null,

    /**
     * <p>Version of Titanium that is executing.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    version:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Creates a new buffer based on the params.</p>
     * @param {CreateBufferArgs} params <p>creation arguments</p>
     * @returns Titanium_Buffer The new buffer.
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    createBuffer:function(params) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.buildDate} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getBuildDate:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.buildHash} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getBuildHash:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.userAgent} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getUserAgent:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.version} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getVersion:function() {
    },

    /**
     * <p>Includes JavaScript code from one or more files.</p>
     * @param {String} name <p>Filename(s) to include.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    include:function(name) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.userAgent} property.</p>
     * @param {String} userAgent <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setUserAgent:function(userAgent) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Titanium.API = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>function for logging debug messages</p>
     * @param {String} message <p>the message to log</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    debug:function(message) {
    },

    /**
     * <p>function for logging error messages</p>
     * @param {String} message <p>the message to log</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    error:function(message) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>function for logging informational messages</p>
     * @param {String} message <p>the message to log</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    info:function(message) {
    },

    /**
     * <p>function for logging custom severity messages</p>
     * @param {String} level <p>the log level</p>
     * @param {String} message <p>the message to log</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    log:function(level, message) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>function for logging warning messages</p>
     * @param {String} message <p>the message to log</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    warn:function(message) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>You'll want to be selective about turning on and off the device accelerometer.  It's recommended you 
turn off the accelerometer when you're not using it.</p>
<p>You can turn off the accelerometer by simply removing your event listener function. </p>
<pre><code>Titanium.Accelerometer.removeEventListener('update',myFunction);
</code></pre>
<p>You can turn it back on by re-adding the same function with <code>addEventListener</code>.</p>
 * 
 * @example Basic Accelerometer Event
 * <p>Adds an accelerometer update event listener which prints out the x, y and z axis as the 
device is moved.  You should generally remove the event when not used to conserve device 
resources.  If you do not have an active event listener, the accelerometer is turned off to 
conserve device resources.</p>
<pre><code>Titanium.Accelerometer.addEventListener('update',function(e)
{
    Ti.API.debug("accelerometer - x:"+e.x+",y:"+e.y+",z:"+e.z);
});
</code></pre>
 */
Titanium.Accelerometer = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>The Analytics module is used for transmitting developer-defined Analytics event for your application to the Appcelerator Analytics product. It can be used to augment additional context or application-specific information which can then be accessed during analysis using Analytics.</p>
 * 
 * @example Custom Feature Event
 * <p>This examples shows how to send a featureEvent during an application session to indicate some feature was triggered/used by the user that you would like to track.</p>
<pre><code>Titanium.Analytics.featureEvent('app.feature.blah',{product:'killer'});
</code></pre>
 */
Titanium.Analytics = {


    /**
     * <p>send a generic event for the application session</p>
     * @param {String} type <p>the event type</p>
     * @param {String} name <p>the event name</p>
     * @param {Object} data <p>event data or null if not specified. the object must be serializable as JSON</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEvent:function(type, name, data) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>send an analytics feature event for the application session</p>
     * @param {String} name <p>the event name</p>
     * @param {Object} data <p>event data or null if not specified. the object must be serializable as JSON</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    featureEvent:function(name, data) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>send an analytics nav event for the application session</p>
     * @param {String} from <p>the <code>from</code> location in the nav event</p>
     * @param {String} to <p>the <code>to</code> location in the nav event</p>
     * @param {String} name <p>the event name</p>
     * @param {Object} data <p>event data or null if not specified. the object must be serializable as JSON</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    navEvent:function(from, to, name, data) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>send a analytics settings event for the application session</p>
     * @param {String} name <p>the event name</p>
     * @param {Object} data <p>event data or null if not specified. the object must be serializable as JSON</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    settingsEvent:function(name, data) {
    },

    /**
     * <p>send an analytics timed event for the application session</p>
     * @param {String} name <p>the event name</p>
     * @param {Date} start <p>the event start as a Date object</p>
     * @param {Date} stop <p>the event end as a Date object</p>
     * @param {Number} duration <p>the event duration</p>
     * @param {Object} data <p>event data or null if not specified. the object must be serializable as JSON</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    timedEvent:function(name, start, stop, duration, data) {
    },

    /**
     * <p>send an analytics user event for the application session</p>
     * @param {String} name <p>the event name</p>
     * @param {Object} data <p>event data or null if not specified. the object must be serializable as JSON</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    userEvent:function(name, data) {
    }
}

/**
 * platforms: Android
 * @namespace <p>Almost all of the constants defined in this module are directly taken from Android.<br />
So if we've failed to document all of them, have a look online at the 
{@link http://developer.android.com/reference/android/app/Service}.</p>
<p>The most important page there will be the 
{@link http://developer.android.com/reference/android/content/Intent}, 
which will give you the meaning of those ACTION, EXTRA and CATEGORY constants.</p>
 */
Titanium.Android = {

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_AIRPLANE_MODE_CHANGED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_ALL_APPS:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_ANSWER:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_ATTACH_DATA:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_BATTERY_CHANGED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_BATTERY_LOW:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_BATTERY_OKAY:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_BOOT_COMPLETED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_BUG_REPORT:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_CALL:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_CALL_BUTTON:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_CAMERA_BUTTON:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_CHOOSER:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_CLOSE_SYSTEM_DIALOGS:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_CONFIGURATION_CHANGED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_CREATE_SHORTCUT:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_DATE_CHANGED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_DEFAULT:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_DELETE:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_DEVICE_STORAGE_LOW:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_DIAL:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_EDIT:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_GET_CONTENT:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_GTALK_SERVICE_CONNECTED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_GTALK_SERVICE_DISCONNECTED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_HEADSET_PLUG:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_INPUT_METHOD_CHANGED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_INSERT:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_INSERT_OR_EDIT:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MAIN:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MANAGE_PACKAGE_STORAGE:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_BAD_REMOVAL:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_BUTTON:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_CHECKING:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_EJECT:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_MOUNTED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_NOFS:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_REMOVED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_SCANNER_FINISHED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_SCANNER_SCAN_FILE:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_SCANNER_STARTED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_SHARED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_UNMOUNTABLE:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_MEDIA_UNMOUNTED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_NEW_OUTGOING_CALL:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_PACKAGE_ADDED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_PACKAGE_CHANGED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_PACKAGE_DATA_CLEARED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_PACKAGE_INSTALL:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_PACKAGE_REMOVED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_PACKAGE_REPLACED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_PACKAGE_RESTARTED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_PICK:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_PICK_ACTIVITY:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_POWER_CONNECTED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_POWER_DISCONNECTED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_POWER_USAGE_SUMMARY:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_PROVIDER_CHANGED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_REBOOT:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_RUN:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_SCREEN_OFF:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_SCREEN_ON:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_SEARCH:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_SEARCH_LONG_PRESS:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_SEND:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_SENDTO:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_SEND_MULTIPLE:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_SET_WALLPAPER:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_SHUTDOWN:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_SYNC:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_SYSTEM_TUTORIAL:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_TIME_CHANGED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_TIME_TICK:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_UID_REMOVED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_UMS_CONNECTED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_UMS_DISCONNECTED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_USER_PRESENT:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_VIEW:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_VOICE_COMMAND:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_WALLPAPER_CHANGED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    ACTION_WEB_SEARCH:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_ALTERNATIVE:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_BROWSABLE:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_DEFAULT:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_DEVELOPMENT_PREFERENCE:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_EMBED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_HOME:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_INFO:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_LAUNCHER:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_MONKEY:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_OPENABLE:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_PREFERENCE:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_SAMPLE_CODE:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_SELECTED_ALTERNATIVE:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_TAB:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_TEST:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    CATEGORY_UNIT_TEST:null,

    /**
     * <p>Use all default values (where applicable).</p>
     * @type Number
     * @since 1.5 (Android)
     */
    DEFAULT_ALL:null,

    /**
     * <p>Use the default notification lights.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    DEFAULT_LIGHTS:null,

    /**
     * <p>Use the default notification sound.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    DEFAULT_SOUND:null,

    /**
     * <p>Use the default notification vibrate.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    DEFAULT_VIBRATE:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_ALARM_COUNT:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_BCC:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_CC:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_DATA_REMOVED:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_DONT_KILL_APP:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_EMAIL:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_INTENT:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_KEY_EVENT:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_PHONE_NUMBER:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_REPLACING:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_SHORTCUT_ICON:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_SHORTCUT_ICON_RESOURCE:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_SHORTCUT_INTENT:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_SHORTCUT_NAME:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_STREAM:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_SUBJECT:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_TEMPLATE:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_TEXT:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_TITLE:null,

    /**
     * 
     * @type String
     * @since 1.5 (Android)
     */
    EXTRA_UID:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FILL_IN_ACTION:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FILL_IN_CATEGORIES:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FILL_IN_COMPONENT:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FILL_IN_DATA:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FILL_IN_PACKAGE:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_BROUGHT_TO_FRONT:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_CLEAR_TOP:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_FORWARD_RESULT:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_MULTIPLE_TASK:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_NEW_TASK:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_NO_ANIMATION:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_NO_HISTORY:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_NO_USER_ACTION:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_PREVIOUS_IS_TOP:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_REORDER_TO_FRONT:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_RESET_TASK_IF_NEEDED:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ACTIVITY_SINGLE_TOP:null,

    /**
     * <p>Bit to be bitwise-ored into the flags field that should be set if the notification should be canceled when it is clicked by the user.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_AUTO_CANCEL:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_CANCEL_CURRENT:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_DEBUG_LOG_RESOLUTION:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_FROM_BACKGROUND:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_GRANT_READ_URI_PERMISSION:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_GRANT_WRITE_URI_PERMISSION:null,

    /**
     * <p>Bit to be bitwise-ored into the flags field that if set, the audio will be repeated until the notification is cancelled or the notification window is opened.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_INSISTENT:null,

    /**
     * <p>Bit to be bitwise-ored into the flags field that should be set if the notification should not be canceled when the user clicks the Clear all button.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_NO_CLEAR:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_NO_CREATE:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ONE_SHOT:null,

    /**
     * <p>Bit to be bitwise-ored into the flags field that should be set if this notification is in reference to something that is ongoing, like a phone call.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ONGOING_EVENT:null,

    /**
     * <p>Bit to be bitwise-ored into the flags field that should be set if you want the sound and/or vibration play each time the notification is sent, even if it has not been canceled before that.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ONLY_ALERT_ONCE:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_RECEIVER_REGISTERED_ONLY:null,

    /**
     * <p>Bit to be bitwise-ored into the flags field that should be set if you want the LED on for this notification.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_SHOW_LIGHTS:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_UPDATE_CURRENT:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    PENDING_INTENT_FOR_ACTIVITY:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    PENDING_INTENT_FOR_BROADCAST:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    PENDING_INTENT_FOR_SERVICE:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    PENDING_INTENT_MAX_VALUE:null,

    /**
     * <p>Accessor for android resources</p>
     * @type Object
     * @since 1.5 (Android)
     */
    R:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    RESULT_CANCELED:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    RESULT_FIRST_USER:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    RESULT_OK:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    SCREEN_ORIENTATION_BEHIND:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    SCREEN_ORIENTATION_LANDSCAPE:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    SCREEN_ORIENTATION_NOSENSOR:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    SCREEN_ORIENTATION_PORTRAIT:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    SCREEN_ORIENTATION_SENSOR:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    SCREEN_ORIENTATION_UNSPECIFIED:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    SCREEN_ORIENTATION_USER:null,

    /**
     * <p>Use this constant as the value for audioStreamType to request that the default stream type for notifications be used.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    STREAM_DEFAULT:null,

    /**
     * 
     * @type Number
     * @since 1.5 (Android)
     */
    URI_INTENT_SCHEME:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Create a {@link Titanium.Android.Intent} to be used to start a Broadcast.</p>
     * @returns Titanium_Android_Intent
     * @since 1.5 (Android)
     */
    createBroadcastIntent:function() {
    },

    /**
     * <p>Create a {@link Titanium.Android.Intent}. Used to start other Activities and for marshaling data.</p>
     * @returns Titanium_Android_Intent
     * @since 1.5 (Android)
     */
    createIntent:function() {
    },

    /**
     * <p>Display chooser interface to allow selection of desired target.</p>
     * @returns Titanium_Android_Intent
     * @since 1.5 (Android)
     */
    createIntentChooser:function() {
    },

    /**
     * <p>Create a {@link Titanium.Android.Notification}. Used to notify the user of an event.</p>
     * @param {Dictionary<Titanium_Android_Notification>} options <p>Options dictionary</p>
     * @returns Titanium_Android_Notification
     * @since 1.5 (Android)
     */
    createNotification:function(options) {
    },

    /**
     * <p>Create a {@link Titanium.Android.PendingIntent} to be used inside a {@link Titanium.Android.Notification}</p>
     * @param {Titanium_Android_Intent} intent <p>The Intent that will be executed</p>
     * @param {Number} flags <p>Can be any of {@link Titanium.Android.FLAG_CANCEL_CURRENT}, {@link Titanium.Android.FLAG_NO_CREATE}, {@link Titanium.Android.FLAG_ONE_SHOT}, {@link Titanium.Android.FLAG_UPDATE_CURRENT}</p>
     * @returns Titanium_Android_PendingIntent
     * @since 1.5 (Android)
     */
    createPendingIntent:function(intent, flags) {
    },

    /**
     * <p>Create a {@link Titanium.Android.Service} so you can start/stop it and listen for events from it.</p>
     * @param {Titanium_Android_Intent} intent <p>An Intent created with {@link Titanium.Android.createServiceIntent} which specifies the service to be instantiated.</p>
     * @returns Titanium_Android_Service
     * @since 1.5 (Android)
     */
    createService:function(intent) {
    },

    /**
     * <p>Create an {@link Titanium.Android.Intent} to be used to start a Service.</p>
     * @param {Object} options <p>Options dictionary -- pass in a <code>url</code> option to specify the path to a javascript-based service you create.</p>
     * @returns Titanium_Android_Intent
     * @since 1.5 (Android)
     */
    createServiceIntent:function(options) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Check on state of Service.</p>
     * @param {Titanium_Android_Intent} intent <p>An Intent created with {@link Titanium.Android.createServiceIntent} which specifies the service to check.</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    isServiceRunning:function(intent) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Start a simple service</p>
     * @param {Titanium_Android_Intent} intent <p>An Intent created with {@link Titanium.Android.createServiceIntent} which specifies the service to start.</p>
     * @since 1.5 (Android)
     */
    startService:function(intent) {
    },

    /**
     * <p>Stop a simple service that was started with <code>startService</code>.</p>
     * @param {Titanium_Android_Intent} intent <p>An Intent created with {@link Titanium.Android.createServiceIntent} which specifies the service to stop.</p>
     * @since 1.5 (Android)
     */
    stopService:function(intent) {
    }
}

/**
 * platforms: Android
 * 
 * @example Callback example
 * <p>activity.startActivityForResult(intent, function(e) {
    // The request code used to start this Activity
    var requestCode = e.requestCode;
    // The result code returned from the Activity (http://developer.android.com/reference/android/app/Activity.html#StartingActivities)
    var resultCode = e.resultCode;
    // A Titanium.Android.Intent filled with data returned from the Activity
    var intent = e.intent;
    // The Activity the received the result
    var source = e.source;
});</p>
 */
function Titanium_Android_Activity() {
}
Titanium_Android_Activity.prototype = {

    /**
     * <p>The {@link Titanium.Android.Intent} that was used to start this Activity</p>
     * @type Titanium_Android_Intent
     * @since 1.5 (Android)
     */
    intent:null,

    /**
     * <p>A callback function that is called to initially create an Android {@link http://developer.android.com/guide/topics/ui/menus.html#options} for this Activity when the user presses the Menu button. See the menu examples in {@link Titanium.Android.Menu}</p>
     * @type Callback<Object>
     * @since 1.5 (Android)
     */
    onCreateOptionsMenu:null,

    /**
     * <p>A callback function that is called to prepare an {@link http://developer.android.com/guide/topics/ui/menus.html#options} for displaying on this Activity when the user presses the Menu button. See the menu examples in {@link Titanium.Android.Menu}</p>
     * @type Callback<Object>
     * @since 1.5 (Android)
     */
    onPrepareOptionsMenu:null,

    /**
     * <p>Can be one of {@link Titanium.Android.SCREEN_ORIENTATION_BEHIND}, {@link Titanium.Android.SCREEN_ORIENTATION_LANDSCAPE}, {@link Titanium.Android.SCREEN_ORIENTATION_NOSENSOR}, {@link Titanium.Android.SCREEN_ORIENTATION_PORTRAIT}, {@link Titanium.Android.SCREEN_ORIENTATION_SENSOR}, {@link Titanium.Android.SCREEN_ORIENTATION_UNSPECIFIED}, {@link Titanium.Android.SCREEN_ORIENTATION_USER}</p>
     * @type Number
     * @since 1.5 (Android)
     */
    requestedOrientation:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Called when the activity is done and should be closed. Also see Android's documentation for {@link http://developer.android.com/reference/android/app/Activity.html#finish()}</p>
     * @since 1.5 (Android)
     */
    finish:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Activity.intent} property.</p>
     * @returns Titanium_Android_Intent
     * @since 1.5 (Android)
     */
    getIntent:function() {
    },

    /**
     * <p>Get an Android or Application string using the passed-in Resource ID and optional format arguments. Also see Android's documentation for {@link http://developer.android.com/reference/android/content/Context.html#getString(int)} and {@link http://developer.android.com/guide/topics/resources/string}</p>
     * @param {Number} resourceId <p>A Resource ID from the Application or Android.</p>
     * @param {Array<Object>} format <p>Optional format arguments for the String resource</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getString:function(resourceId, format) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Set the requested Activity orientation. Also see Android's documentation for {@link http://developer.android.com/reference/android/app/Activity.html#setRequestedOrientation(int)}</p>
     * @param {Number} orientation <p>Can be one of {@link Titanium.Android.SCREEN_ORIENTATION_BEHIND}, {@link Titanium.Android.SCREEN_ORIENTATION_LANDSCAPE}, {@link Titanium.Android.SCREEN_ORIENTATION_NOSENSOR}, {@link Titanium.Android.SCREEN_ORIENTATION_PORTRAIT}, {@link Titanium.Android.SCREEN_ORIENTATION_SENSOR}, {@link Titanium.Android.SCREEN_ORIENTATION_UNSPECIFIED}, {@link Titanium.Android.SCREEN_ORIENTATION_USER}</p>
     * @since 1.5 (Android)
     */
    setRequestedOrientation:function(orientation) {
    },

    /**
     * <p>Sets the result of this Activity using an Intent. This should be used in the case when the Activity responds to startActivityForResult. Also see Android's documentation for {@link http://developer.android.com/reference/android/app/Activity.html#setResult(int)}</p>
     * @param {Number} resultCode <p>The result code for this Activity. Must be one of {@link Titanium.Android.RESULT_OK}, {@link Titanium.Android.RESULT_CANCELED}, {@link Titanium.Android.RESULT_FIRST_USER}</p>
     * @param {Titanium_Android_Intent} intent <p>An optional {@link Titanium.Android.Intent} with extra result data</p>
     * @since 1.5 (Android)
     */
    setResult:function(resultCode, intent) {
    },

    /**
     * <p>Starts a new Activity, using the passed in Intent as the description. Also see Android's documentation for {@link http://developer.android.com/reference/android/app/Activity.html#startActivity(android.content.Intent)}</p>
     * @param {Titanium_Android_Intent} intent <p>Description of the Activity to start</p>
     * @since 1.5 (Android)
     */
    startActivity:function(intent) {
    },

    /**
     * <p>The same as <code>startActivity</code>, but also accepts a callback function for handling the result of the started Activity. Also see Android's documentation for {@link http://developer.android.com/reference/android/app/Activity.html#startActivityForResult(android.content.Intent, int)}</p>
     * @param {Titanium_Android_Intent} intent <p>Description of the Activity to start</p>
     * @param {Callback<Object>} callback <p>A callback function that is executed when the Activity has set it's result. See example in {@link Titanium.Android.Activity}.</p>
     * @since 1.5 (Android)
     */
    startActivityForResult:function(intent, callback) {
    }
}

/**
 * platforms: Android
 * @namespace <p>The API supports retrieving information about existing events and creating new events.  However, modifying or deleting existing events is not yet supported.  Additionally, recurring events are not yet supported.</p>
 * 
 * @example All Calendars vs Selectable Calendars
 * <p>Prints the names of all of your calendars known to Android, then prints the names of calendars that you have selected in the native Android calendar application.  The latter could be a subset, because (for example) Android -- via your Google account -- may know about more calendars that you have access to but that you have not selected inside the calendar app.</p>
<pre><code>function showCalendars(calendars) {
    for (var i = 0; i &lt; calendars.length; i++) {
        Ti.API.info(calendars[i].name);
    }
}

Ti.API.info('ALL CALENDARS:');
showCalendars(Ti.Android.Calendar.allCalendars);
Ti.API.info('SELECTABLE CALENDARS:');
showCalendars(Ti.Android.Calendar.selectableCalendars);
</code></pre>
 * 
 * @example Events in a year
 * <p>This example will look at each event in a year for a given calendar.  Just set the desired calendar's id and the desired year to see it in action.  You can see calendar ids by running the example above.</p>
<pre><code>var win = Ti.UI.currentWindow;
var sv = Ti.UI.createScrollView();
win.add(sv);

var console = Ti.UI.createLabel({
    backgroundColor: 'white', color: 'black', text: 'generating info...'
});
sv.add(console);

var consoleString = '';

function print(s) {
    Ti.API.info(s);
    if (consoleString.length &gt; 0) {
        consoleString = consoleString + '\n';
    }
    consoleString = consoleString + s;
}

// SHOW ALL EVENTS FOR 2010 FOR ONE CALENDAR
var YEAR = 2010;
var TEST_WITH_THIS_CAL_ID = 3;
var calendar = Ti.Android.Calendar.getCalendarById(TEST_WITH_THIS_CAL_ID);

function printReminder(r) {
    var typetext = '[method unknown]';
    if (r.method == Ti.Android.Calendar.METHOD_EMAIL) {
        typetext = 'Email';
    } else if (r.method == Ti.Android.Calendar.METHOD_SMS) {
        typetext = 'SMS';
    } else if (r.method == Ti.Android.Calendar.METHOD_ALERT) {
        typetext = 'Alert';
    } else if (r.method == Ti.Android.Calendar.METHOD_DEFAULT) {
        typetext = '[default reminder method]';
    }
    print(typetext + ' reminder to be sent ' + r.minutes + ' minutes before the event');
}

function printAlert(a) {
    print('Alert id ' + a.id + ' begin ' + a.begin + '; end ' + a.end + '; alarmTime ' + a.alarmTime + '; minutes ' + a.minutes);
}

function printEvent(event) {
    if (event.allDay) {
        print('Event: ' + event.title + '; ' + event.begin.toLocaleDateString() + ' (all day)');
    } else {
        print('Event: ' + event.title + '; ' + event.begin.toLocaleDateString() + ' ' + event.begin.toLocaleTimeString()+ '-' + event.end.toLocaleTimeString());
    }

    var reminders = event.reminders;
    if (reminders &amp;&amp; reminders.length) {
        print('There is/are ' + reminders.length + ' reminder(s)');
        for (var i = 0; i &lt; reminders.length; i++) {
            printReminder(reminders[i]);
        }
    }

    print('hasAlarm? ' + event.hasAlarm);
    var alerts = event.alerts;
    if (alerts &amp;&amp; alerts.length) {
        for (i = 0; i &lt; alerts.length; i++) {
            printAlert(alerts[i]);
        }
    }

    var status = event.status;
    if (status == Ti.Android.Calendar.STATUS_TENTATIVE) {
        print('This event is tentative');
    }
    if (status == Ti.Android.Calendar.STATUS_CONFIRMED) {
        print('This event is confirmed');
    }
    if (status == Ti.Android.Calendar.STATUS_CANCELED) {
        print('This event was canceled');
    }
}

var events = calendar.getEventsInYear(YEAR);
if (events &amp;&amp; events.length) {
    print(events.length + ' event(s) in ' + YEAR);
    print('');
    for (var i = 0; i &lt; events.length; i++) {
        printEvent(events[i]);
        print('');
    }
} else {
    print('No events on 2010-12-6');
}

console.text = consoleString;
</code></pre>
 * 
 * @example Create an Event and Reminder
 * <p>This example creates an event and adds an e-mail reminder for 10 minutes before the event.</p>
<pre><code>var CALENDAR_TO_USE = 3;
var calendar = Ti.Android.Calendar.getCalendarById(CALENDAR_TO_USE);

// Create the event
var eventBegins = new Date(2010, 11, 26, 12, 0, 0);
var eventEnds = new Date(2010, 11, 26, 14, 0, 0);
var details = {
    title: 'Do some stuff',
    description: "I'm going to do some stuff at this time.",
    begin: eventBegins,
    end: eventEnds
};

var event = calendar.createEvent(details);

// Now add a reminder via e-mail for 10 minutes before the event.
var reminderDetails = {
    minutes: 10,
    method: Ti.Android.Calendar.METHOD_EMAIL
};
event.createReminder(reminderDetails);
</code></pre>
 */
Titanium.Android.Calendar = {

    /**
     * <p>constant for the {@link Titanium.Android.Calendar.Reminder} method property.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    METHOD_ALERT:null,

    /**
     * <p>constant for the {@link Titanium.Android.Calendar.Reminder} method property.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    METHOD_DEFAULT:null,

    /**
     * <p>constant for the {@link Titanium.Android.Calendar.Reminder} method property.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    METHOD_EMAIL:null,

    /**
     * <p>constant for the {@link Titanium.Android.Calendar.Reminder} method property.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    METHOD_SMS:null,

    /**
     * <p>constant for the {@link Titanium.Android.Calendar.Alert} state property.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    STATE_DISMISSED:null,

    /**
     * <p>constant for the {@link Titanium.Android.Calendar.Alert} state property.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    STATE_FIRED:null,

    /**
     * <p>constant for the {@link Titanium.Android.Calendar.Alert} state property.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    STATE_SCHEDULED:null,

    /**
     * <p>constant for the {@link Titanium.Android.Calendar.Event} status property.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    STATUS_CANCELED:null,

    /**
     * <p>constant for the {@link Titanium.Android.Calendar.Event} status property.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    STATUS_CONFIRMED:null,

    /**
     * <p>constant for the {@link Titanium.Android.Calendar.Event} status property.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    STATUS_TENTATIVE:null,

    /**
     * <p>constant for the {@link Titanium.Android.Calendar.Event} visibility property.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    VISIBILITY_CONFIDENTIAL:null,

    /**
     * <p>constant for the {@link Titanium.Android.Calendar.Event} visibility property.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    VISIBILITY_DEFAULT:null,

    /**
     * <p>constant for the {@link Titanium.Android.Calendar.Event} visibility property.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    VISIBILITY_PRIVATE:null,

    /**
     * <p>constant for the {@link Titanium.Android.Calendar.Event} visibility property.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    VISIBILITY_PUBLIC:null,

    /**
     * <p>Array of {@link Titanium.Android.Calendar.Alert} objects representing all alerts.</p>
     * @type Array<Titanium_Android_Calendar_Alert>
     * @since 1.5 (Android)
     */
    allAlerts:null,

    /**
     * <p>Array of {@link Titanium.Android.Calendar.Calendar} objects representing all the calendars known to the native calendar app.</p>
     * @type Array<Titanium_Android_Calendar_Calendar>
     * @since 1.5 (Android)
     */
    allCalendars:null,

    /**
     * <p>Array of {@link Titanium.Android.Calendar.Calendar} objects representing calendars selected within the native calendar app. This may be a subset of allCalendars; for example, the native calendar application may know -- via your Gooogle account -- about calendars that you have access to but have not selected to be displayed in the native calendar app.</p>
     * @type Array<Titanium_Android_Calendar_Calendar>
     * @since 1.5 (Android)
     */
    selectableCalendars:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.allAlerts} property.</p>
     * @returns Array<Titanium_Android_Calendar_Alert>
     * @since 1.5 (Android)
     */
    getAllAlerts:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.allCalendars} property.</p>
     * @returns Array<Titanium_Android_Calendar_Calendar>
     * @since 1.5 (Android)
     */
    getAllCalendars:function() {
    },

    /**
     * <p>Returns the {@link Titanium.Android.Calendar.Calendar} object specified by the given integer id.</p>
     * @param {Number} id <p>The system id of the calendar to be retrieved.</p>
     * @returns Titanium_Android_Calendar_Calendar
     * @since 1.5 (Android)
     */
    getCalendarById:function(id) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.selectableCalendars} property.</p>
     * @returns Array<Titanium_Android_Calendar_Calendar>
     * @since 1.5 (Android)
     */
    getSelectableCalendars:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android
 */
function Titanium_Android_Calendar_Alert() {
}
Titanium_Android_Calendar_Alert.prototype = {

    /**
     * <p>The date/time at which the alert's alarm is triggered.</p>
     * @type Date
     * @since 1.5 (Android)
     */
    alarmTime:null,

    /**
     * <p>The date/time at which the corresponding event begins.</p>
     * @type Date
     * @since 1.5 (Android)
     */
    begin:null,

    /**
     * <p>The date/time at which the corresponding event ends.</p>
     * @type Date
     * @since 1.5 (Android)
     */
    end:null,

    /**
     * <p>The integer id of the event for which the alert is set.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    eventId:null,

    /**
     * <p>The id of the alert.</p>
     * @type String
     * @since 1.5 (Android)
     */
    id:null,

    /**
     * <p>The minutes before the event when the alert should trigger.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    minutes:null,

    /**
     * <p>The current state of the alert.  Possible values are the STATE_ constants in {@link Titanium.Android.Calendar}.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    state:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Alert.alarmTime} property.</p>
     * @returns Date
     * @since 1.5 (Android)
     */
    getAlarmTime:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Alert.begin} property.</p>
     * @returns Date
     * @since 1.5 (Android)
     */
    getBegin:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Alert.end} property.</p>
     * @returns Date
     * @since 1.5 (Android)
     */
    getEnd:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Alert.eventId} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getEventId:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Alert.id} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getId:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Alert.minutes} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getMinutes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Alert.state} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getState:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android
 * @namespace <p>See {@link Titanium.Android.Calendar} for examples.</p>
 */
function Titanium_Android_Calendar_Calendar() {
}
Titanium_Android_Calendar_Calendar.prototype = {

    /**
     * <p>Whether the calendar is hidden.</p>
     * @type Boolean
     * @since 1.5 (Android)
     */
    hidden:null,

    /**
     * <p>The id of the calendar.</p>
     * @type String
     * @since 1.5 (Android)
     */
    id:null,

    /**
     * <p>The display name of the calendar.</p>
     * @type String
     * @since 1.5 (Android)
     */
    name:null,

    /**
     * <p>Whether the calendar is selected.</p>
     * @type Boolean
     * @since 1.5 (Android)
     */
    selected:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Add an event to the calendar. Returns the created {@link Titanium.Android.Calendar.Event}.</p>
     * @param {Dictionary<Titanium_Android_Calendar_Event>} properties <p>An object defining the properties of the event.  These correspond to properties of {@link Titanium.Android.Calendar.Event}.</p>
     * @returns Titanium_Android_Calendar_Event
     * @since 1.5 (Android)
     */
    createEvent:function(properties) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Returns the {@link Titanium.Android.Calendar.Event} object for the event with the given integer id.</p>
     * @param {Number} id <p>The integer id of the event to return.</p>
     * @returns Titanium_Android_Calendar_Event
     * @since 1.5 (Android)
     */
    getEventById:function(id) {
    },

    /**
     * <p>Returns an array of {@link Titanium.Android.Calendar.Event} objects with all events in the given date range.</p>
     * @param {Date} date1 <p>The start date.</p>
     * @param {Date} date2 <p>The end date.</p>
     * @returns Array<Titanium_Android_Calendar_Event>
     * @since 1.5 (Android)
     */
    getEventsBetweenDates:function(date1, date2) {
    },

    /**
     * <p>Returns an array of {@link Titanium.Android.Calendar.Event} objects with all events on the given date.</p>
     * @param {Number} year <p>The year of the desired date.</p>
     * @param {Number} month <p>The month of the desired date.  The month is zero-based, therefore January is 0 and December is 11.</p>
     * @param {Number} day <p>The day for which events should be returned.</p>
     * @returns Array<Titanium_Android_Calendar_Event>
     * @since 1.5 (Android)
     */
    getEventsInDate:function(year, month, day) {
    },

    /**
     * <p>Returns an array of {@link Titanium.Android.Calendar.Event} objects with all events in the given month.</p>
     * @param {Number} year <p>The year of the desired month.</p>
     * @param {Number} month <p>The month for which events should be returned.  The month is zero-based, therefore January is 0 and December is 11.</p>
     * @returns Array<Titanium_Android_Calendar_Event>
     * @since 1.5 (Android)
     */
    getEventsInMonth:function(year, month) {
    },

    /**
     * <p>Returns an array of {@link Titanium.Android.Calendar.Event} objects with all events in the given year.</p>
     * @param {Number} year <p>The year for which all events should be returned.</p>
     * @returns Array<Titanium_Android_Calendar_Event>
     * @since 1.5 (Android)
     */
    getEventsInYear:function(year) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Calendar.hidden} property.</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    getHidden:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Calendar.id} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getId:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Calendar.name} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Calendar.selected} property.</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    getSelected:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android
 * @namespace <p>The API supports retrieving information about existing events and creating new events.<br />
However, modifying or deleting existing events is not yet supported. Additionally, 
recurring events are not yet supported.</p>
<p>See {@link Titanium.Android.Calendar} for examples of retrieving event information and 
creating events.</p>
 */
function Titanium_Android_Calendar_Event() {
}
Titanium_Android_Calendar_Event.prototype = {

    /**
     * <p>An array of {@link Titanium.Android.Calendar.Alert} objects which are the alerts - if any - for this event.</p>
     * @type Array<Titanium_Android_Calendar_Alert>
     * @since 1.5 (Android)
     */
    alerts:null,

    /**
     * <p>Whether the event is all day.</p>
     * @type Boolean
     * @since 1.5 (Android)
     */
    allDay:null,

    /**
     * <p>The date/time at which the event begins.</p>
     * @type Date
     * @since 1.5 (Android)
     */
    begin:null,

    /**
     * <p>The event description.</p>
     * @type String
     * @since 1.5 (Android)
     */
    description:null,

    /**
     * <p>The date/time at which the event ends.</p>
     * @type Date
     * @since 1.5 (Android)
     */
    end:null,

    /**
     * <p>An object containing extended properties of the event.</p>
     * @type Object
     * @since 1.5 (Android)
     */
    extendedProperties:null,

    /**
     * <p>Whether an alarm is scheduled for the event.</p>
     * @type Boolean
     * @since 1.5 (Android)
     */
    hasAlarm:null,

    /**
     * 
     * @type Boolean
     * @since 1.5 (Android)
     */
    hasExtendedProperties:null,

    /**
     * <p>The id of the event.</p>
     * @type String
     * @since 1.5 (Android)
     */
    id:null,

    /**
     * <p>The event location.</p>
     * @type String
     * @since 1.5 (Android)
     */
    location:null,

    /**
     * <p>An array of {@link Titanium.Android.Calendar.Reminder} objects which are the reminders - if any - for this event.</p>
     * @type Array<Titanium_Android_Calendar_Reminder>
     * @since 1.5 (Android)
     */
    reminders:null,

    /**
     * <p>The status of the event.  Possible values are the STATUS constants in {@link Titanium.Android.Calendar}.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    status:null,

    /**
     * <p>The title string for the event.</p>
     * @type String
     * @since 1.5 (Android)
     */
    title:null,

    /**
     * <p>The event's visibility.  Possible values are the VISIBILITY constants in {@link Titanium.Android.Calendar}.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    visibility:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>create an alert for this event.  Pass a dictionary object containing attributes corresponding to properties of {@link Titanium.Android.Calendar.Alert}.  Returns the created alert.</p>
     * @param {Dictionary<Titanium_Android_Calendar_Alert>} data <p>Properties for the new alert, corresponding to properties of {@link Titanium.Android.Calendar.Alert}.</p>
     * @returns Titanium_Android_Calendar_Alert
     * @since 1.5 (Android)
     */
    createAlert:function(data) {
    },

    /**
     * <p>create a reminder for this event.  Pass a dictionary object containing attributes corresponding to properties of {@link Titanium.Android.Calendar.Reminder}.  Returns the created Reminder.</p>
     * @param {Dictionary<Titanium_Android_Calendar_Reminder>} data <p>Properties for the new reminder, corresponding to properties of {@link Titanium.Android.Calendar.Reminder}.</p>
     * @returns Titanium_Android_Calendar_Reminder
     * @since 1.5 (Android)
     */
    createReminder:function(data) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Event.alerts} property.</p>
     * @returns Array<Titanium_Android_Calendar_Alert>
     * @since 1.5 (Android)
     */
    getAlerts:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Event.allDay} property.</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    getAllDay:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Event.begin} property.</p>
     * @returns Date
     * @since 1.5 (Android)
     */
    getBegin:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Event.description} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getDescription:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Event.end} property.</p>
     * @returns Date
     * @since 1.5 (Android)
     */
    getEnd:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Event.extendedProperties} property.</p>
     * @returns Object
     * @since 1.5 (Android)
     */
    getExtendedProperties:function() {
    },

    /**
     * <p>Returns the value of the given extended property key string.</p>
     * @param {String} name <p>The name of the extended property whose value should be returned.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getExtendedProperty:function(name) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Event.hasAlarm} property.</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    getHasAlarm:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Event.hasExtendedProperties} property.</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    getHasExtendedProperties:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Event.id} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getId:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Event.location} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getLocation:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Event.reminders} property.</p>
     * @returns Array<Titanium_Android_Calendar_Reminder>
     * @since 1.5 (Android)
     */
    getReminders:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Event.status} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getStatus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Event.title} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Event.visibility} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getVisibility:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Set the value of the named extended property.</p>
     * @param {String} name <p>The name of the extended property whose value should be set.</p>
     * @param {String} value <p>The value to which to set the named extended property.</p>
     * @since 1.5 (Android)
     */
    setExtendedProperty:function(name, value) {
    }
}

/**
 * platforms: Android
 * @namespace <p>Reminders should not be created directly, but rather by using the <code>createReminder</code> method 
of {@link Titanium.Android.Calendar.Event}.</p>
<p>See {@link Titanium.Android.Calendar} for examples of retrieving reminder information and 
creating reminders for events.</p>
 */
function Titanium_Android_Calendar_Reminder() {
}
Titanium_Android_Calendar_Reminder.prototype = {

    /**
     * <p>The id of the reminder.</p>
     * @type String
     * @since 1.5 (Android)
     */
    id:null,

    /**
     * <p>The reminder method.  Possible values are the METHOD constants in {@link Titanium.Android.Calendar}.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    method:null,

    /**
     * <p>The minutes before the event when the reminder should occur.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    minutes:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Reminder.id} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getId:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Reminder.method} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getMethod:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Calendar.Reminder.minutes} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getMinutes:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android
 * 
 * @example Create an Intent for Launching an Activity
 * <p>var intent = Ti.Android.createIntent({
    action: Ti.Android.ACTION_MAIN,
    url: 'activity1.js'
});
intent.addCategory(Ti.Android.CATEGORY_LAUNCHER);
Ti.Android.currentActivity.startActivity(intent);</p>
 * 
 * @example Create an Intent to get a Contact URI from the user's contacts
 * <p>var intent = Ti.Android.createIntent({
    action: Ti.Android.ACTION_GET_CONTENT,
    type: "vnd.android.cursor.item/phone"
});</p>
 * 
 * @example Pick a Photo from the Photo Gallery
 * <p>var intent = Ti.Android.createIntent({
    action: Ti.Android.ACTION_PICK,
    type: "image/*"
});
intent.addCategory(Ti.Android.CATEGORY_DEFAULT);</p>
 */
function Titanium_Android_Intent() {
}
Titanium_Android_Intent.prototype = {

    /**
     * <p>An action constant from {@link Titanium.Android}</p>
     * @type String
     * @since 1.5 (Android)
     */
    action:null,

    /**
     * <p>The Java class name of the activity (packageName must also be set)</p>
     * @type String
     * @since 1.5 (Android)
     */
    className:null,

    /**
     * <p>The Intent's Data URI. See also Android's {@link http://developer.android.com/reference/android/content/Intent.html#setData(android.net.Uri)}</p>
     * @type String
     * @since 1.5 (Android)
     */
    data:null,

    /**
     * <p>Intent flags. See the flags constants in {@link Titanium.Android}.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    flags:null,

    /**
     * <p>The fully-qualified Java package name of the activity</p>
     * @type String
     * @since 1.5 (Android)
     */
    packageName:null,

    /**
     * <p>The mime type for this Intent. See also Android's {@link http://developer.android.com/reference/android/content/Intent.html#setType(java.lang.String)}</p>
     * @type String
     * @since 1.5 (Android)
     */
    type:null,

    /**
     * <p>The URL to a Titanium Javascript Activity</p>
     * @type String
     * @since 1.5 (Android)
     */
    url:null,


    /**
     * <p>Add a category to this Intent. See the category constants in {@link Titanium.Android}.</p>
     * @param {String} name <p>The category name. See the category constants in {@link Titanium.Android}</p>
     * @since 1.5 (Android)
     */
    addCategory:function(name) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>augment the existing flags on the Intent.</p>
     * @param {Number} flags <p>the flags to add to the existing set.</p>
     * @since 1.5 (Android)
     */
    addFlags:function(flags) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Intent.action} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getAction:function() {
    },

    /**
     * <p>Get a boolean property from this Intent</p>
     * @param {String} name <p>The boolean property to get</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    getBooleanExtra:function(name) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Intent.className} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getClassName:function() {
    },

    /**
     * <p>Get the Data URI from this Intent</p>
     * @since 1.5 (Android)
     */
    getData:function() {
    },

    /**
     * <p>Get a double property from this Intent</p>
     * @param {String} name <p>The double property to get</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getDoubleExtra:function(name) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Intent.flags} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getFlags:function() {
    },

    /**
     * <p>Get a int property from this Intent</p>
     * @param {String} name <p>The int property to get</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getIntExtra:function(name) {
    },

    /**
     * <p>Get a long property from this Intent</p>
     * @param {String} name <p>The long property to get</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getLongExtra:function(name) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Intent.packageName} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getPackageName:function() {
    },

    /**
     * <p>Get a string property from this Intent</p>
     * @param {String} name <p>The string property to get</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getStringExtra:function(name) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Intent.type} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Intent.url} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getUrl:function() {
    },

    /**
     * <p>Returns whether or not this Intent has a property</p>
     * @param {String} name <p>The property name to check for</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    hasExtra:function(name) {
    },

    /**
     * <p>Put an extra property on this Intent</p>
     * @param {String} name <p>The property name</p>
     * @param {Object} value <p>The property value</p>
     * @since 1.5 (Android)
     */
    putExtra:function(name, value) {
    },

    /**
     * <p>Put a URI property on this Intent (useful for {@link Titanium.Android.EXTRA_STREAM})</p>
     * @param {String} name <p>The property name</p>
     * @param {String} value <p>The URI string</p>
     * @since 1.5 (Android)
     */
    putExtraUri:function(name, value) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Android.Intent.flags} property.</p>
     * @param {Number} flags <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setFlags:function(flags) {
    }
}

/**
 * platforms: Android
 * 
 * @example Simple menu create
 * <p>activity.onCreateOptionsMenu = function(e) {
    var menu = e.menu;
    var menuItem = menu.add({ title: "Item 1" });
    menuItem.setIcon("item1.png");
    menuItem.addEventListener("click", function(e) {
        Ti.API.debug("I was clicked");
    });
};</p>
 * 
 * @example Dynamic menu create
 * <p>var win = Ti.UI.createWindow({ fullscreen: true });</p>
<p>var LOGIN = 1, LOGOUT = 2;
var loggedIn = false;
activity.onCreateOptionsMenu = function(e) {
    var menu = e.menu;
    var login = menu.add({ title: "Login", itemId: LOGIN });
    login.setIcon("login.png");
    login.addEventListener("click", function(e) {
        loggedIn = true;
    });
    var logout = menu.add({ title: "Logout", itemId: LOGOUT });
    logout.setIcon("logout.png");
    logout.addEventListener("click", function(e) {
        loggedIn = false;
    });
};</p>
<p>activity.onPrepareOptionsMenu = function(e) {
    var menu = e.menu;
    menu.findItem(LOGIN).setVisible(!loggedIn);
    menu.findItem(LOGOUT).setVisible(loggedIn);
};
win.open();</p>
 */
function Titanium_Android_Menu() {
}
Titanium_Android_Menu.prototype = {

    /**
     * <p>array of {@link Titanium.Android.MenuItem}</p>
     * @type Array<Titanium_Android_MenuItem>
     * @since 1.5 (Android)
     */
    items:null,


    /**
     * <p>creates a {@link Titanium.Android.MenuItem} from the passed creation options.</p>
     * @param {Object} options <p>creation options. Supported options are itemId, groupId, title, and order.</p>
     * @returns Titanium_Android_MenuItem
     * @since 1.5 (Android)
     */
    add:function(options) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>clear all items from the menu. You should release all references you have retained to {@link Titanium.Android.MenuItem} previously created.</p>
     * @since 1.5 (Android)
     */
    clear:function() {
    },

    /**
     * <p>close the menu if visible</p>
     * @since 1.5 (Android)
     */
    close:function() {
    },

    /**
     * <p>locate a {@link Titanium.Android.MenuItem}</p>
     * @param {Object} item <p>integer itemId or {@link Titanium.Android.MenuItem}</p>
     * @returns Titanium_Android_MenuItem
     * @since 1.5 (Android)
     */
    findItem:function(item) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>return the {@link Titanium.Android.MenuItem} at a specific index</p>
     * @param {Number} index <p>item at index where index &lt; size()</p>
     * @returns Titanium_Android_MenuItem
     * @since 1.5 (Android)
     */
    getItem:function(index) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Menu.items} property.</p>
     * @returns Array<Titanium_Android_MenuItem>
     * @since 1.5 (Android)
     */
    getItems:function() {
    },

    /**
     * <p>query for any visible menu items</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    hasVisibleItems:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>remove all {@link Titanium.Android.MenuItem} with the specified groupId</p>
     * @param {Number} groupId <p>groupId of items to remove.</p>
     * @since 1.5 (Android)
     */
    removeGroup:function(groupId) {
    },

    /**
     * <p>remove a specific {@link Titanium.Android.MenuItem} by the specified itemId</p>
     * @param {Number} itemId <p>itemId of item to remove.</p>
     * @since 1.5 (Android)
     */
    removeItem:function(itemId) {
    },

    /**
     * <p>enable or disable a group of {@link Titanium.Android.MenuItem} by groupId</p>
     * @param {Number} groupId <p>groupId to enable or disable</p>
     * @param {Boolean} enabled <p>true to enable, false to disable.</p>
     * @since 1.5 (Android)
     */
    setGroupEnabled:function(groupId, enabled) {
    },

    /**
     * <p>show or hide a group of {@link Titanium.Android.MenuItem} by groupId</p>
     * @param {Number} groupId <p>groupId to enable or disable</p>
     * @param {Boolean} visible <p>true to show, false to hide</p>
     * @since 1.5 (Android)
     */
    setGroupVisible:function(groupId, visible) {
    },

    /**
     * <p>number of {@link Titanium.Android.MenuItem} in this menu</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    size:function() {
    }
}

/**
 * platforms: Android
 */
function Titanium_Android_MenuItem() {
}
Titanium_Android_MenuItem.prototype = {

    /**
     * <p>set the enabled state of the item</p>
     * @type Boolean
     * @since 1.5 (Android)
     */
    enabled:null,

    /**
     * <p>groupId for this item</p>
     * @type Number
     * @since 1.5 (Android)
     */
    groupId:null,

    /**
     * <p>itemId for this item</p>
     * @type Number
     * @since 1.5 (Android)
     */
    itemId:null,

    /**
     * <p>integer used for controlling sort order</p>
     * @type Number
     * @since 1.5 (Android)
     */
    order:null,

    /**
     * <p>item title</p>
     * @type String
     * @since 1.5 (Android)
     */
    title:null,

    /**
     * <p>condensed item title</p>
     * @type String
     * @since 1.5 (Android)
     */
    titleCondensed:null,

    /**
     * <p>set the visible state of the item</p>
     * @type Boolean
     * @since 1.5 (Android)
     */
    visible:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.MenuItem.enabled} property.</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    getEnabled:function() {
    },

    /**
     * <p>retrieve the groupId for this item</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getGroupId:function() {
    },

    /**
     * <p>retrieve the itemId for this item</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getItemId:function() {
    },

    /**
     * <p>retrieve the sort order</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getOrder:function() {
    },

    /**
     * <p>retrieve the title of the item</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getTitle:function() {
    },

    /**
     * <p>retrieve the condensed title of the item</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getTitleCondensed:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.MenuItem.visible} property.</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    getVisible:function() {
    },

    /**
     * <p>retrieve the enabled state of the menu</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    isEnabled:function() {
    },

    /**
     * <p>retrieve the visible state of the menu</p>
     * @returns Boolean
     * @since 1.5 (Android)
     */
    isVisible:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>set the enabled state of the item</p>
     * @param {Boolean} enabled <p>true to enable item, false to disable</p>
     * @since 1.5 (Android)
     */
    setEnabled:function(enabled) {
    },

    /**
     * <p>set the icon for the item</p>
     * @param {Object} icon <p>icon to use with the item</p>
     * @since 1.5 (Android)
     */
    setIcon:function(icon) {
    },

    /**
     * <p>set the title for the item</p>
     * @param {String} title <p>new title</p>
     * @since 1.5 (Android)
     */
    setTitle:function(title) {
    },

    /**
     * <p>set the condensed title for the item</p>
     * @param {String} condensedTitle <p>new condensed title</p>
     * @since 1.5 (Android)
     */
    setTitleCondensed:function(condensedTitle) {
    },

    /**
     * <p>set the visible state of the item</p>
     * @param {Boolean} visible <p>true to show the item, false to hide</p>
     * @since 1.5 (Android)
     */
    setVisible:function(visible) {
    }
}

/**
 * platforms: Android
 * @namespace <p>If you pass contentTitle and/or contentText into {@link Titanium.Android.createNotification}, 
then setLatestEventInfo will automatically be called with those properties (there's no need 
to call it separately unless you want to). You can also use a custom layout.xml wrapped in 
a {@link Titanium.Android.RemoteViews} object in the contentView property, which gives more 
fine grained control and customization to how the notification actually behaves.</p>
<p>Also see {@link http://developer.android.com/guide/topics/ui/notifiers/notifications}</p>
 */
function Titanium_Android_Notification() {
}
Titanium_Android_Notification.prototype = {

    /**
     * <p>The audio stream type to use when playing the sound.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    audioStreamType:null,

    /**
     * <p>The {@link Titanium.Android.PendingIntent} to execute when the expanded status entry is clicked.</p>
     * @type Object
     * @since 1.5 (Android)
     */
    contentIntent:null,

    /**
     * <p>Description text of the notification.</p>
     * @type String
     * @since 1.5 (Android)
     */
    contentText:null,

    /**
     * <p>Title of the notification.</p>
     * @type String
     * @since 1.5 (Android)
     */
    contentTitle:null,

    /**
     * <p>Specifies which values should be taken from the defaults.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    defaults:null,

    /**
     * <p>The {@link Titanium.Android.PendingIntent} to execute when the status entry is deleted by the user with the "Clear All Notifications" button.</p>
     * @type Object
     * @since 1.5 (Android)
     */
    deleteIntent:null,

    /**
     * <p>Set of flags for the notification, defaults to {@link Titanium.Android.FLAG_AUTO_CANCEL}. Possible values: {@link Titanium.Android.FLAG_AUTO_CANCEL}, {@link Titanium.Android.FLAG_INSISTENT}, {@link Titanium.Android.FLAG_NO_CLEAR}, {@link Titanium.Android.FLAG_ONGOING_EVENT}, {@link Titanium.Android.FLAG_ONLY_ALERT_ONCE}, {@link Titanium.Android.FLAG_SHOW_LIGHTS}</p>
     * @type Number
     * @since 1.5 (Android)
     */
    flags:null,

    /**
     * <p>A resource id or URL to an icon (the URL must be an image located in Resources/android/images/<density> or an Android content URI)</p>
     * @type Number|String
     * @since 1.5 (Android)
     */
    icon:null,

    /**
     * <p>The color for the LED to blink</p>
     * @type Number
     * @since 1.5 (Android)
     */
    ledARGB:null,

    /**
     * <p>The number of milliseconds for the LED to be off while it's flashing.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    ledOffMS:null,

    /**
     * <p>The number of milliseconds for the LED to be on while it's flashing.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    ledOnMS:null,

    /**
     * <p>The number of events that this notification represents.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    number:null,

    /**
     * <p>A URL to the sound to play (supports Android + Titanium URLs)</p>
     * @type String
     * @since 1.5 (Android)
     */
    sound:null,

    /**
     * <p>Text to scroll across the screen when this item is added to the status bar.</p>
     * @type String
     * @since 1.5 (Android)
     */
    tickerText:null,

    /**
     * <p>The timestamp for the notification (defaults to the current time)</p>
     * @type Date|Number
     * @since 1.5 (Android)
     */
    when:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Notification.audioStreamType} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getAudioStreamType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Notification.contentIntent} property.</p>
     * @returns Object
     * @since 1.5 (Android)
     */
    getContentIntent:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Notification.contentText} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getContentText:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Notification.contentTitle} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getContentTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Notification.defaults} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getDefaults:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Notification.deleteIntent} property.</p>
     * @returns Object
     * @since 1.5 (Android)
     */
    getDeleteIntent:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Notification.flags} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getFlags:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Notification.icon} property.</p>
     * @returns Number
     * @returns String
     * @since 1.5 (Android)
     */
    getIcon:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Notification.ledARGB} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getLedARGB:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Notification.ledOffMS} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getLedOffMS:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Notification.ledOnMS} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getLedOnMS:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Notification.number} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getNumber:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Notification.sound} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getSound:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Notification.tickerText} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getTickerText:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Notification.when} property.</p>
     * @returns Date
     * @returns Number
     * @since 1.5 (Android)
     */
    getWhen:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Android.Notification.audioStreamType} property.</p>
     * @param {Number} audioStreamType <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setAudioStreamType:function(audioStreamType) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Android.Notification.contentIntent} property.</p>
     * @param {Object} contentIntent <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setContentIntent:function(contentIntent) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Android.Notification.contentText} property.</p>
     * @param {String} contentText <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setContentText:function(contentText) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Android.Notification.contentTitle} property.</p>
     * @param {String} contentTitle <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setContentTitle:function(contentTitle) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Android.Notification.defaults} property.</p>
     * @param {Number} defaults <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setDefaults:function(defaults) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Android.Notification.deleteIntent} property.</p>
     * @param {Object} deleteIntent <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setDeleteIntent:function(deleteIntent) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Android.Notification.flags} property.</p>
     * @param {Number} flags <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setFlags:function(flags) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Android.Notification.icon} property.</p>
     * @param {Number|String} icon <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setIcon:function(icon) {
    },

    /**
     * <p>Sets the latest event info using the builtin Notification View for this notification. See Android's documentation for {@link http://developer.android.com/reference/android/app/Notification.html#setLatestEventInfo(android.content.Context, java.lang.CharSequence, java.lang.CharSequence, android.app.PendingIntent)}</p>
     * @since 1.5 (Android)
     */
    setLatestEventInfo:function() {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Android.Notification.ledARGB} property.</p>
     * @param {Number} ledARGB <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setLedARGB:function(ledARGB) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Android.Notification.ledOffMS} property.</p>
     * @param {Number} ledOffMS <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setLedOffMS:function(ledOffMS) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Android.Notification.ledOnMS} property.</p>
     * @param {Number} ledOnMS <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setLedOnMS:function(ledOnMS) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Android.Notification.number} property.</p>
     * @param {Number} number <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setNumber:function(number) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Android.Notification.sound} property.</p>
     * @param {String} sound <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setSound:function(sound) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Android.Notification.tickerText} property.</p>
     * @param {String} tickerText <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setTickerText:function(tickerText) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Android.Notification.when} property.</p>
     * @param {Date|Number} when <p>New value for the property.</p>
     * @since 1.5 (Android)
     */
    setWhen:function(when) {
    }
}

/**
 * platforms: Android
 * @namespace <p>The <code>NotificationManager</code> module is a thin wrapper on the Android {@link http://developer.android.com/reference/android/app/NotificationManager} class. </p>
<p>The constants in this module are derived from the Android {@link http://developer.android.com/reference/android/app/Notification} class.</p>
 */
Titanium.Android.NotificationManager = {

    /**
     * <p>Use all default values (where applicable).</p>
     * @type Number
     * @since 1.5 (Android)
     */
    DEFAULT_ALL:null,

    /**
     * <p>Use the default notification lights.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    DEFAULT_LIGHTS:null,

    /**
     * <p>Use the default notification sound.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    DEFAULT_SOUND:null,

    /**
     * <p>Use the default notification vibrate.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    DEFAULT_VIBRATE:null,

    /**
     * <p>Bit to be bitwise-ored into the flags field that should be set if the notification should be canceled when it is clicked by the user.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_AUTO_CANCEL:null,

    /**
     * <p>Bit to be bitwise-ored into the flags field that if set, the audio will be repeated until the notification is cancelled or the notification window is opened.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_INSISTENT:null,

    /**
     * <p>Bit to be bitwise-ored into the flags field that should be set if the notification should not be canceled when the user clicks the Clear all button.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_NO_CLEAR:null,

    /**
     * <p>Bit to be bitwise-ored into the flags field that should be set if this notification is in reference to something that is ongoing, like a phone call.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ONGOING_EVENT:null,

    /**
     * <p>Bit to be bitwise-ored into the flags field that should be set if you want the sound and/or vibration play each time the notification is sent, even if it has not been canceled before that.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_ONLY_ALERT_ONCE:null,

    /**
     * <p>Bit to be bitwise-ored into the flags field that should be set if you want the LED on for this notification.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    FLAG_SHOW_LIGHTS:null,

    /**
     * <p>Use this constant as the value for audioStreamType to request that the default stream type for notifications be used.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    STREAM_DEFAULT:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Cancel a previously shown notification.</p>
     * @param {Number} id <p>The id you assigned to a notification.</p>
     * @since 1.5 (Android)
     */
    cancel:function(id) {
    },

    /**
     * <p>Cancel all previously shown notifications.</p>
     * @since 1.5 (Android)
     */
    cancelAll:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Add a persistent notification to the status bar.</p>
     * @param {Number} id <p>An id that may be used to cancel a shown notification.</p>
     * @param {Titanium_Android_Notification} notification <p>An instance of {@link Titanium.Android.Notification} created with {@link Titanium.Android.createNotification}.</p>
     * @since 1.5 (Android)
     */
    notify:function(id, notification) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android
 * @namespace <p>The type of Intent you choose will effect what kind of PendingIntent is created. Each type corresponds directly with a get method on Android's PendingIntent:</p>
<ul>
<li>{@link Titanium.Android.createIntent} uses {@link http://developer.android.com/reference/android/app/PendingIntent.html#getActivity(android.content.Context, int, android.content.Intent, int)}</li>
<li>{@link Titanium.Android.createBroadcastIntent} uses {@link http://developer.android.com/reference/android/app/PendingIntent.html#getBroadcast(android.content.Context, int, android.content.Intent, int)}</li>
<li>{@link Titanium.Android.createServiceIntent} uses {@link http://developer.android.com/reference/android/app/PendingIntent.html#getService(android.content.Context, int, android.content.Intent, int)}</li>
</ul>
 */
function Titanium_Android_PendingIntent() {
}
Titanium_Android_PendingIntent.prototype = {

    /**
     * <p>Flags used for creating the Pending Intent. Possible values are {@link Titanium.Android.FLAG_CANCEL_CURRENT}, {@link Titanium.Android.FLAG_NO_CREATE}, {@link Titanium.Android.FLAG_ONE_SHOT}, and {@link Titanium.Android.FLAG_UPDATE_CURRENT}.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    flags:null,

    /**
     * <p>The intent data to pass to the Activity launched by this PendingIntent</p>
     * @type Titanium_Android_Intent
     * @since 1.5 (Android)
     */
    intent:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.PendingIntent.flags} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getFlags:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.PendingIntent.intent} property.</p>
     * @returns Titanium_Android_Intent
     * @since 1.5 (Android)
     */
    getIntent:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android
 * @namespace <p>These properties and sub-properties are queried directly against the <code>android.R</code> class, and should have the same syntax. For example, to retrieve the "OK" string in Android:</p>
<p><code>Ti.Android.currentActivity.getString(Ti.Android.R.string.ok);</code></p>
 */
function Titanium_Android_R() {
}
Titanium_Android_R.prototype = {

    /**
     * <p>Animation resources, see {@link http://developer.android.com/reference/android/R.anim}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    anim:null,

    /**
     * <p>Array resources, see {@link http://developer.android.com/reference/android/R.array}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    array:null,

    /**
     * <p>Attribute resources, see {@link http://developer.android.com/reference/android/R.attr}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    attr:null,

    /**
     * <p>Color resources, see {@link http://developer.android.com/reference/android/R.color}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    color:null,

    /**
     * <p>Dimension resources, see {@link http://developer.android.com/reference/android/R.dimen}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    dimen:null,

    /**
     * <p>Drawable resources, see {@link http://developer.android.com/reference/android/R.drawable}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    drawable:null,

    /**
     * <p>ID resources, see {@link http://developer.android.com/reference/android/R.id}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    id:null,

    /**
     * <p>Integer resources, see {@link http://developer.android.com/reference/android/R.integer}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    integer:null,

    /**
     * <p>Layout resources, see {@link http://developer.android.com/reference/android/R.layout}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    layout:null,

    /**
     * <p>String resources, see {@link http://developer.android.com/reference/android/R.string}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    string:null,

    /**
     * <p>Style resources, see {@link http://developer.android.com/reference/android/R.style}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    style:null,

    /**
     * <p>Styleable reosurces, see {@link http://developer.android.com/reference/android/R.styleable}</p>
     * @type Object
     * @since 1.5 (Android)
     */
    styleable:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android
 * 
 * @example Create a RemoteViews based on a custom layout called "custom_layout.xml", and set a label's text.
 * <p>var AppR = Ti.App.Android.R;
var customLayout = Ti.Android.createRemoteViews(AppR.layout.custom_layout);
customLayout.setTextViewText(AppR.id.custom_text, "Hello World");</p>
 */
function Titanium_Android_RemoteViews() {
}
Titanium_Android_RemoteViews.prototype = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.6 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.6 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.6 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Call a method taking one boolean on a view in the layout for this RemoteViews. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setBoolean(int, java.lang.String, boolean)}</p>
     * @param {Number} viewId <p>The resource id of the View (also see {@link Titanium.App.Android.R})</p>
     * @param {String} methodName <p>The name of the method to call</p>
     * @param {Boolean} value <p>The boolean to pass to the method</p>
     * @since 1.6 (Android)
     */
    setBoolean:function(viewId, methodName, value) {
    },

    /**
     * <p>Sets a chronometer's base, format, and started flag. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setChronometer(int, long, java.lang.String, boolean)}</p>
     * @param {Number} viewId <p>The resource id of the Chronometer whose values will change (also see {@link Titanium.App.Android.R})</p>
     * @param {Date} base <p>The time at which the timer would have read 0:00</p>
     * @param {String} format <p>The Chronometer format string, or null to simply display the timer value</p>
     * @param {Boolean} started <p>True if you want the clock to be started, false if not</p>
     * @since 1.6 (Android)
     */
    setChronometer:function(viewId, base, format, started) {
    },

    /**
     * <p>Call a method taking one double on a view in the layout for this RemoteViews. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setDouble(int, java.lang.String, double)}</p>
     * @param {Number} viewId <p>The resource id of the View (also see {@link Titanium.App.Android.R})</p>
     * @param {String} methodName <p>The name of the method to call</p>
     * @param {Number} value <p>The double to pass to the method</p>
     * @since 1.6 (Android)
     */
    setDouble:function(viewId, methodName, value) {
    },

    /**
     * <p>Sets an ImageView's source given a Resource ID. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setImageViewResource(int, int)}</p>
     * @param {Number} viewId <p>The resource id of the ImageView whose image should change (also see {@link Titanium.App.Android.R})</p>
     * @param {Number} srcId <p>The resource id of the image</p>
     * @since 1.6 (Android)
     */
    setImageViewResource:function(viewId, srcId) {
    },

    /**
     * <p>Sets an ImageView's source given a URI (supports both Android and Titanium URLs). See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setImageViewUri(int, android.net.Uri)}</p>
     * @param {Number} viewId <p>The resource id of the ImageView whose image should change (also see {@link Titanium.App.Android.R})</p>
     * @param {String} uri <p>The URI of the image (both Android and Titanium URLs are supported)</p>
     * @since 1.6 (Android)
     */
    setImageViewUri:function(viewId, uri) {
    },

    /**
     * <p>Call a method taking one int on a view in the layout for this RemoteViews. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setInt(int, java.lang.String, int)}</p>
     * @param {Number} viewId <p>The resource id of the View (also see {@link Titanium.App.Android.R})</p>
     * @param {String} methodName <p>The name of the method to call</p>
     * @param {Number} value <p>The int to pass to the method</p>
     * @since 1.6 (Android)
     */
    setInt:function(viewId, methodName, value) {
    },

    /**
     * <p>Launches a {@link Titanium.Android.PendingIntent} when the specified view is clicked. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setOnClickPendingIntent(int, android.app.PendingIntent)}</p>
     * @param {Number} viewId <p>The resource id of the View to add a click listener to (also see {@link Titanium.App.Android.R})</p>
     * @param {Titanium_Android_PendingIntent} pendingIntent <p>The PendingIntent to execute when this view is clicked</p>
     * @since 1.6 (Android)
     */
    setOnClickPendingIntent:function(viewId, pendingIntent) {
    },

    /**
     * <p>Sets the progress, max value, and indeterminate flag of a ProgressBar. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setProgressBar(int, int, int, boolean)}</p>
     * @param {Number} viewId <p>The resource id of the ProgressBar to change (also see {@link Titanium.App.Android.R})</p>
     * @param {Number} max <p>The new max value of the ProgressBar</p>
     * @param {Number} progress <p>The new progress value of the ProgressBar (from 0..max)</p>
     * @param {Boolean} indeterminate <p>Whether or not the progress in indeterminate</p>
     * @since 1.6 (Android)
     */
    setProgressBar:function(viewId, max, progress, indeterminate) {
    },

    /**
     * <p>Call a method taking one String on a view in the layout for this RemoteViews. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setString(int, java.lang.String, java.lang.String)}</p>
     * @param {Number} viewId <p>The resource id of the View (also see {@link Titanium.App.Android.R})</p>
     * @param {String} methodName <p>The name of the method to call</p>
     * @param {String} value <p>The String to pass to the method</p>
     * @since 1.6 (Android)
     */
    setString:function(viewId, methodName, value) {
    },

    /**
     * <p>Sets the text color of a view. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setTextColor(int, int)}</p>
     * @param {Number} viewId <p>The resource id of the View whose text color will change (also see {@link Titanium.App.Android.R})</p>
     * @param {Number} color <p>A color as an integer</p>
     * @since 1.6 (Android)
     */
    setTextColor:function(viewId, color) {
    },

    /**
     * <p>Sets the text of a TextView. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setTextViewText(int, java.lang.CharSequence)}</p>
     * @param {Number} viewId <p>The resource id of the TextView whose text will change (also see {@link Titanium.App.Android.R})</p>
     * @param {String} text <p>The new text of the TextView</p>
     * @since 1.6 (Android)
     */
    setTextViewText:function(viewId, text) {
    },

    /**
     * <p>Call a method taking one Uri on a view in the layout for this RemoteViews. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setUri(int, java.lang.String, android.net.Uri)}</p>
     * @param {Number} viewId <p>The resource id of the View (also see {@link Titanium.App.Android.R})</p>
     * @param {String} methodName <p>The name of the method to call</p>
     * @param {String} value <p>The URI (as a string) to pass to the method</p>
     * @since 1.6 (Android)
     */
    setUri:function(viewId, methodName, value) {
    },

    /**
     * <p>Sets the visibility of a View. See Android's documentation for {@link http://developer.android.com/reference/android/widget/RemoteViews.html#setViewVisibility(int, int)}</p>
     * @param {Number} viewId <p>The resource id of the View whose visibility will change (also see {@link Titanium.App.Android.R})</p>
     * @param {Number} visibility <p>The visibility, one of <code>Titanium.Android.VISIBLE</code>, <code>Titanium.Android.INVISIBLE</code>, or <code>Titanium.Android.GONE</code></p>
     * @since 1.6 (Android)
     */
    setViewVisibility:function(viewId, visibility) {
    }
}

/**
 * platforms: Android
 * 
 * @example Hello World Service
 * <p>Your service code in its own Javascript file.  It reads the {@link Titanium.Android.Intent} which created it, to see what it should say besides "Hello World".</p>
<p>File: myservice.js:</p>
<pre><code>var service = Titanium.Android.currentService;
var intent = service.intent;
var message = intent.getStringExtra("message_to_echo");
Titanium.API.info("Hello World!  I am a Service.  I have this to say: " + message);
</code></pre>
<p>Register the service in tiapp.xml:</p>
<pre><code>&lt;android xmlns:android="http://schemas.android.com/apk/res/android"&gt;
    &lt;services&gt;
        &lt;service url="myservice.js" type="interval"/&gt;
    &lt;/services&gt;
&lt;/android&gt;
</code></pre>
<p>Code in "regular" Titanium file to launch the service and listen for pause/resume events.  Code also stops the service after its code runs 3 times.</p>
<pre><code>var intent = Titanium.Android.createServiceIntent( { url: 'myservice.js' } );
// Service should run its code every 2 seconds.
intent.putExtra('interval', 2000);
// A message that the service should 'echo'
intent.putExtra('message_to_echo', 'Titanium rocks!');

var service = Titanium.Android.createService(intent);
service.addEventListener('resume', function(e) {
    Titanium.API.info('Service code resumes, iteration ' + e.iteration);
});
service.addEventListener('pause', function(e) {
    Titanium.API.info('Service code pauses, iteration ' + e.iteration);
    if (e.iteration === 3) {
        Titanium.API.info('Service code has run 3 times, will now stop it.');
        service.stop();
    }
});
service.start();
</code></pre>
<p>Console Output:</p>
<pre><code>[INFO] [29,1942] Service code resumes, iteration 1
[INFO] [70,2029] Hello World! I am a Service. I have this to say: Titanium rocks!
[INFO] [3,2070] Service code pauses, iteration 1
[INFO] [2,3915] Service code resumes, iteration 2
[INFO] [31,3961] Hello World! I am a Service. I have this to say: Titanium rocks!
[INFO] [5,3968] Service code pauses, iteration 2
[INFO] [2,5917] Service code resumes, iteration 3
[INFO] [27,5961] Hello World! I am a Service. I have this to say: Titanium rocks!
[INFO] [16,5980] Service code pauses, iteration 3
[INFO] [1,5981] Service code has run 3 times, will now stop it.
</code></pre>
 */
function Titanium_Android_Service() {
}
Titanium_Android_Service.prototype = {

    /**
     * <p>The {@link Titanium.Android.Intent} used to start or bind to the Service.</p>
     * @type Titanium_Android_Intent
     * @since 1.5 (Android)
     */
    intent:null,

    /**
     * <p>A service can be started more than once -- this number (based on an incrementing integer) indicates which "start number" in the sequence the current service instance is.</p>
     * @type Number
     * @since 1.5 (Android)
     */
    serviceInstanceId:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Service.intent} property.</p>
     * @returns Titanium_Android_Intent
     * @since 1.5 (Android)
     */
    getIntent:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Android.Service.serviceInstanceId} property.</p>
     * @returns Number
     * @since 1.5 (Android)
     */
    getServiceInstanceId:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Start the Service.  Effective only if this instance of {@link Titanium.Android.Service} was created with {@link Titanium.Android.createService}.</p>
     * @since 1.5 (Android)
     */
    start:function() {
    },

    /**
     * <p>Stop this running instance of the Service.</p>
     * @since 1.5 (Android)
     */
    stop:function() {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Titanium.App = {

    /**
     * <p>the application's copyright</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    copyright:null,

    /**
     * <p>the application's description</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    description:null,

    /**
     * <p>the application's globally unique id (this is system generated and consistent through all versions)</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    guid:null,

    /**
     * <p>the application's app id as specified in Titanium Developer or Titanium Studio</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    id:null,

    /**
     * <p>property for controlling whether the phone screen will be locked on idle time. Can be set to true to disable the timer</p>
     * @type Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    idleTimerDisabled:null,

    /**
     * <p>the application's name</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    name:null,

    /**
     * <p>a boolean to indicate whether proximity detection is enabled</p>
     * @type Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    proximityDetection:null,

    /**
     * <p>the state of the device's proximity detector</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    proximityState:null,

    /**
     * <p>the application's publisher</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    publisher:null,

    /**
     * <p>the application url</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    url:null,

    /**
     * <p>the application's version</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    version:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>return the arguments passed to the application on startup as a dictionary</p>
     * @returns Object
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getArguments:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.App.copyright} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getCopyright:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.App.description} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getDescription:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.App.guid} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getGuid:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.App.id} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getId:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.App.idleTimerDisabled} property.</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getIdleTimerDisabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.App.name} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.App.proximityDetection} property.</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getProximityDetection:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.App.proximityState} property.</p>
     * @returns Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getProximityState:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.App.publisher} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getPublisher:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.App.url} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getUrl:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.App.version} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getVersion:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.App.idleTimerDisabled} property.</p>
     * @param {Boolean} idleTimerDisabled <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setIdleTimerDisabled:function(idleTimerDisabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.App.proximityDetection} property.</p>
     * @param {Boolean} proximityDetection <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setProximityDetection:function(proximityDetection) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.App.proximityState} property.</p>
     * @param {Number} proximityState <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setProximityState:function(proximityState) {
    }
}

/**
 * platforms: Android
 * 
 * @example Custom String Resource
 * <p>In Titanium, you can specify custom Android resources by placing them in <code>platform/android</code> under the top directory of your project. For example, to create a custom strings.xml, You could create and populate <code>platform/android/res/values/mystrings.xml</code> with the following data:</p>
<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;
    &lt;string name="mystring"&gt;testing 1 2 3&lt;/string&gt;
&lt;/resources&gt;
</code></pre>
<p>And in Javascript, you could retrieve like this:</p>
<pre><code>var activity = Ti.Android.currentActivity;
var R = Ti.App.Android.R;

var mystring = activity.getString(R.string.mystring);
Ti.API.debug("mystring="+mystring);
</code></pre>
 */
Titanium.App.Android = {

    /**
     * <p>The R namespace for Application Resources</p>
     * @type Titanium_App_Android_R
     * @since 1.5 (Android)
     */
    R:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android
 * @namespace <p>These properties and sub-properties are queried directly against your Application's <code>R</code> class, and should have the same syntax.  For example, if you have a file <code>platform/android/res/drawable/icon.png</code> in your project, you could then access its integer id like this:</p>
<pre><code>var resid = Titanium.App.Android.R.drawable.icon;
</code></pre>
 */
function Titanium_App_Android_R() {
}
Titanium_App_Android_R.prototype = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.5 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * 
 * @example Store a property
 * <p>In this example, we store a string property:</p>
<pre><code>Titanium.App.Properties.setString("my_prop","cool");
</code></pre>
 * 
 * @example Enumerate over saved properties
 * <p>In this example, we print out all the saved properties to the console:</p>
<pre><code>var props = Titanium.App.Properties.listProperties();
for (var c=0;c&lt;props.length;c++)
{
    var value = Titanium.App.Properties.getString(props[c]);
    Titanium.API.info(props[c]+" = "+value);
}
</code></pre>
 */
Titanium.App.Properties = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>return a boolean value</p>
     * @param {String} property <p>return a boolean value for property</p>
     * @param {Boolean} _default <p>optional default value if property is not found</p>
     * @returns Boolean
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    getBool:function(property, _default) {
    },

    /**
     * <p>return a double value</p>
     * @param {String} property <p>return a double value for property</p>
     * @param {Number} _default <p>optional default value if property is not found</p>
     * @returns Number
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    getDouble:function(property, _default) {
    },

    /**
     * <p>return an integer value</p>
     * @param {String} property <p>return a integer value for property</p>
     * @param {Number} _default <p>optional default value if property is not found</p>
     * @returns Number
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    getInt:function(property, _default) {
    },

    /**
     * <p>return a value as an array</p>
     * @param {String} property <p>return an array value for property</p>
     * @param {Array<Object>} _default <p>optional default value if property is not found</p>
     * @returns Array<Object>
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    getList:function(property, _default) {
    },

    /**
     * <p>return a string value</p>
     * @param {String} property <p>return a string value for property</p>
     * @param {String} _default <p>optional default value if property is not found</p>
     * @returns String
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    getString:function(property, _default) {
    },

    /**
     * <p>returns true if the property exists</p>
     * @param {String} property <p>property name to check</p>
     * @returns Boolean
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    hasProperty:function(property) {
    },

    /**
     * <p>return an array of property propertys</p>
     * @returns Array<Object>
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    listProperties:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>remove an existing property</p>
     * @param {String} property <p>property name to remove</p>
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    removeProperty:function(property) {
    },

    /**
     * <p>set a property as a boolean value</p>
     * @param {String} property <p>property name</p>
     * @param {Boolean} value <p>value</p>
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    setBool:function(property, value) {
    },

    /**
     * <p>set a property as a double value</p>
     * @param {String} property <p>property name</p>
     * @param {Number} value <p>value</p>
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    setDouble:function(property, value) {
    },

    /**
     * <p>set a property as an integer value</p>
     * @param {String} property <p>property name</p>
     * @param {Number} value <p>value</p>
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    setInt:function(property, value) {
    },

    /**
     * <p>set a property as an array value</p>
     * @param {String} property <p>property name</p>
     * @param {Array<Object>} value <p>value</p>
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    setList:function(property, value) {
    },

    /**
     * <p>set a property as a string value</p>
     * @param {String} property <p>property name</p>
     * @param {String} value <p>value</p>
     * @since 0.5 (Android), 0.5 (iPhone), 0.5 (iPad), 1.8 (Mobile Web)
     */
    setString:function(property, value) {
    }
}

/**
 * platforms: iPhone, iPad
 */
Titanium.App.iOS = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>cancel all scheduled local notifications</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    cancelAllLocalNotifications:function() {
    },

    /**
     * <p>cancel a specific local notification</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    cancelLocalNotification:function() {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.App.iOS.LocalNotification}.</p>
     * @param {Dictionary<Titanium_App_iOS_LocalNotification>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.App.iOS.LocalNotification}.</p>
     * @returns Titanium_App_iOS_LocalNotification
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    createLocalNotification:function(parameters) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>register a background service to run when the app is backgrounded</p>
     * @param {Object} params <p>dictionary of key/values that are used to create the service. the <code>url</code> property should point to a local JavaScript url that will be executed when the app is backgrounded.</p>
     * @returns Object
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    registerBackgroundService:function(params) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>schedule a local notification</p>
     * @param {Object} params <p>dictionary of key/values that are used to create the notification. the <code>date</code> property is when the notification should fire, <code>repeat</code> is an optional property of one of: <code>weekly</code>, <code>daily</code>, <code>yearly,</code> <code>monthly</code>, <code>alertBody</code> is an optional property that is the body of the alert when the notification is displayed, <code>alertAction</code> is an optional property that represents the alert button text or the 'slide to unlock...' slider in place of unlock, <code>alertLaunchImage</code> is an optional property that specifies the launch image to display instead of Default.png when launching the application, <code>badge</code> is the optional badge value for the application, <code>sound</code> is the optional property to specify the sound to play when the notification is triggered and <code>userInfo</code> is the optional property which specifies data passed to the application upon launch when the notification is triggered.</p>
     * @returns Object
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    scheduleLocalNotification:function(params) {
    }
}

/**
 * platforms: iPhone, iPad
 * @namespace <p>The BackgroundService is created by {@link Titanium.App.iOS.registerBackgroundService}. When
creating a background service, you specify a local URL to a JavaScript file. The code
in the JavaScript file is executed each time the background service runs.</p>
<p>The background service runs when the application is placed in the background and will 
continue to run until one of the following occurs:</p>
<ul>
<li>
<p>The application resumes.</p>
</li>
<li>
<p>The service is stopped with the <code>stop</code> method.</p>
</li>
<li>
<p>The OS terminates the service for one of the reasons discussed in 
  "Background Service Limitations", below.</p>
</li>
</ul>
<h4>Known Issues</h4>
<p>Note that there are several issues with the current implementation of 
background services:</p>
<ul>
<li>
<p>The background service runs when the Application is placed in the background and will 
  continue to run until the service is stopped with the <code>stop</code> method, however, this also
  unregisters the service.</p>
</li>
<li>
<p>Calling <code>unregister</code> on the background service <em>unregisters</em> the service, but does not
  stop the background task under which the service was launched. This can lead to having
  multiple tasks running in the background.</p>
</li>
<li>
<p>Calling <code>register</code> multiple times with the same URL results in multiple instances of
  the same service being run.</p>
</li>
</ul>
<p>These issues will be addressed in a future release. To work around these issues, the
application must:</p>
<ul>
<li>
<p>Unregister the background service when the application resumes.</p>
</li>
<li>
<p>Re-register the background service when the application pauses.</p>
</li>
</ul>
<h4>Background Service Limitations</h4>
<p>Note that even with these workarounds, the background service is subject to limitations
imposed by the operating system. In particular:</p>
<ul>
<li>
<p>The OS limits the total amount of time the background service can run for after the 
  application is suspended, typically to no more than 10 minutes.</p>
</li>
<li>
<p>The OS may terminate the background service at any point to reclaim resources.</p>
</li>
</ul>
 */
function Titanium_App_iOS_BackgroundService() {
}
Titanium_App_iOS_BackgroundService.prototype = {

    /**
     * <p>A local URL to a JavaScript file containing the code to run in the background.</p>
     * @type String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    url:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.App.iOS.BackgroundService.url} property.</p>
     * @returns String
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    getUrl:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Stops the service from running during the current background session to conserve resources.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    stop:function() {
    },

    /**
     * <p>Unregisters the background service.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    unregister:function() {
    }
}

/**
 * platforms: iPhone, iPad
 */
function Titanium_App_iOS_LocalNotification() {
}
Titanium_App_iOS_LocalNotification.prototype = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>cancel the pending notification</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    cancel:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (iPhone), 1.5 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_Blob() {
}
Titanium_Blob.prototype = {

    /**
     * <p>When this blob represents an image, this is the height of the image in pixels. Otherwise, this is 0.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    height:null,

    /**
     * <p>The length of this blob in bytes.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    length:null,

    /**
     * <p>The mime type of this blob.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    mimeType:null,

    /**
     * <p>When this blob represents a <code>Titanium.File</code>, this is the file URL that represents it</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    nativePath:null,

    /**
     * <p>When this blob represents an image, this is the total number of pixels in the image. Otherwise it returns the number of bytes in the binary data.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    size:null,

    /**
     * <p>A UTF-8 string representation of the data in this blob. If this blob represents pure binary data, the value will be <code>null</code>.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    text:null,

    /**
     * <p>When this blob represents an image, this is the width of the image in pixels. Otherwise, this is 0.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    width:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends the data from another blob to this blob.</p>
     * @param {Titanium_Blob} blob <p>The blob to append to this blob</p>
     * @since 0.9 (Android)
     */
    append:function(blob) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Blob.height} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Blob.length} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getLength:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Blob.mimeType} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getMimeType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Blob.nativePath} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNativePath:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Blob.size} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Blob.text} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getText:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Blob.width} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>When this blob represents an image, this creates a new blob by cropping the underlying image to the specified dimensions.</p>
     * @param {Dictionary<ImageAsCroppedDict>} options <p>imageAsCropped named options</p>
     * @returns Titanium_Blob The cropped image in a blob.
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    imageAsCropped:function(options) {
    },

    /**
     * <p>When this blob represents an image, this creates a new blob by resizing and scaling the underlying image to the specified dimensions.</p>
     * @param {Number} width <p>The width to resize this image to.</p>
     * @param {Number} height <p>The height to resize this image to.</p>
     * @returns Titanium_Blob The resized image in a blob.
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    imageAsResized:function(width, height) {
    },

    /**
     * <p>Generate a thumbnail version of an image, optionally with a border and rounded corners</p>
     * @param {Number} size <p>The size of the thumbnail, in either width or height</p>
     * @param {Number} borderSize <p>The width of the thumbnail's border.</p>
     * @param {Number} cornerRadius <p>The radius of the thumbnail's corners.</p>
     * @returns Titanium_Blob The image thumbnail in a blob.
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    imageAsThumbnail:function(size, borderSize, cornerRadius) {
    },

    /**
     * <p>When this blob represents an image, this adds an alpha channel to the underlying image.</p>
     * @returns Titanium_Blob The image with an alpha channel in a blob, or `null` if this blob is not an image.
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    imageWithAlpha:function() {
    },

    /**
     * <p>When this blob represents an image, this adds a rounded corner to the underlying image.</p>
     * @param {Number} cornerSize <p>The size of the rounded corners in pixels.</p>
     * @param {Number} borderSize <p>The size of the border in pixels.</p>
     * @returns Titanium_Blob The image with a rounded corner in a blob, or `null` if this blob is not an image.
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    imageWithRoundedCorner:function(cornerSize, borderSize) {
    },

    /**
     * <p>When this blob represents an image, this adds a transparent border to the underlying image.</p>
     * @param {Number} size <p>The size of the transparent border.</p>
     * @returns Titanium_Blob The image with a transparent border in a blob, or `null` if this blob is not an image.
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    imageWithTransparentBorder:function(size) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Converts this blob to a String</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toString:function() {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_BlobStream() {
}
Titanium_BlobStream.prototype = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>closes stream and throws exception on error</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    close:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Whether stream is readable.</p>
     * @returns Boolean true if stream is readable, false otherwise
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    isReadable:function() {
    },

    /**
     * <p>Whether stream is writeable.</p>
     * @returns Boolean true if stream is writeable, false otherwise
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    isWriteable:function() {
    },

    /**
     * <p>reads data from stream into a buffer</p>
     * @param {Titanium_Buffer} buffer <p>buffer to read stream data into</p>
     * @returns Number Number of bytes read.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    read:function(buffer) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>writes data from buffer to stream</p>
     * @param {Titanium_Buffer} buffer <p>buffer to write to stream</p>
     * @returns Number Number of bytes written.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    write:function(buffer) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_Buffer() {
}
Titanium_Buffer.prototype = {

    /**
     * <p>The byte order of this buffer. The OS native byte order is used by default.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    byteOrder:null,

    /**
     * <p>The length of the buffer in bytes. When <code>length</code> is modified the buffer will be re-sized while preserving existing data where possible. If the new buffer length is smaller than the length of the existing data then the existing data will be truncated down to the size of the new buffer.  Resizing the buffer via setting length should be used sparingly due to the associated overhead.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    length:null,

    /**
     * <p>The type of data encoding to use with <code>value</code>. Required when <code>value</code> is a Number. When <code>value</code> is a String, {@link Titanium.Codec.CHARSET_UTF8} is the default.</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    type:null,

    /**
     * <p>Data to be encoded. If <code>value</code> is a Number, <code>type</code> must also be set. (this is simply a convenient way of calling {@link Titanium.Codec.encodeString} or {@link Titanium.Codec.encodeNumber}).</p>
     * @type Number|String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    value:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>appends <code>sourceBuffer</code> to the current buffer.  Buffer is grown dynamically to accommodate the additional data if need be.</p>
     * @param {Titanium_Buffer} sourceBuffer <p>buffer to append to current buffer</p>
     * @returns Number The number of bytes appended.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    append:function(sourceBuffer) {
    },

    /**
     * <p>same as normal append except this allows appending only <code>sourceLength</code> bytes from the <code>sourceBuffer</code> starting at <code>sourceOffset</code>.</p>
     * @param {Titanium_Buffer} sourceBuffer <p>buffer to append to current buffer</p>
     * @param {Number} sourceOffset <p>offset to start reading buffer data from</p>
     * @param {Number} sourceLength <p>length of data to read from buffer</p>
     * @returns Number The number of bytes appended.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    append:function(sourceBuffer, sourceOffset, sourceLength) {
    },

    /**
     * <p>Clears buffer contents but does not change the size of the buffer</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    clear:function() {
    },

    /**
     * <p>create new copy of the current buffer</p>
     * @returns Titanium_Buffer
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    clone:function() {
    },

    /**
     * <p>Creates a new buffer from the original buffer contents starting at <code>offset</code> and ending at <code>offset</code> + <code>length</code></p>
     * @param {Number} offset <p>offset of buffer to start clone</p>
     * @param {Number} length <p>length of buffer data starting at offset to clone</p>
     * @returns Titanium_Buffer
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    clone:function(offset, length) {
    },

    /**
     * <p>copies the contents of <code>sourceBuffer</code> into the current buffer at <code>offset</code>.  will not expand buffer if there is not enough room in the current buffer to accomodate all the requested data from <code>sourceBuffer</code>.</p>
     * @param {Titanium_Buffer} sourceBuffer <p>buffer to copy into current buffer</p>
     * @param {Number} offset <p>offset to copy new buffer at</p>
     * @returns Number The number of bytes copied.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    copy:function(sourceBuffer, offset) {
    },

    /**
     * <p>copies <code>sourceLength</code> contents from <code>sourceBuffer</code> starting at <code>sourceOffset</code> into the current buffer at <code>offset</code>.  will not expand buffer if there is not enough room in the current buffer to accomodate all the request data from <code>sourceBuffer</code>.</p>
     * @param {Titanium_Buffer} sourceBuffer <p>buffer to copy into current buffer</p>
     * @param {Number} offset <p>offset to copy new buffer at</p>
     * @param {Number} sourceOffset <p>offset of sourceBuffer to copy data from</p>
     * @param {Number} sourceLength <p>length of data from sourceBuffer to copy</p>
     * @returns Number The number of bytes copied.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    copy:function(sourceBuffer, offset, sourceOffset, sourceLength) {
    },

    /**
     * <p>fills buffer with <code>fillByte</code></p>
     * @param {Number} fillByte <p>byte to fill buffer with</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    fill:function(fillByte) {
    },

    /**
     * <p>fills buffer starting from <code>offset</code> until <code>length</code> number of <code>fillByte</code> has been written or the end of the buffer is reached</p>
     * @param {Number} fillByte <p>byte to fill buffer with</p>
     * @param {Number} offset <p>offset of where to start fill</p>
     * @param {Number} length <p>number of bytes to fill</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    fill:function(fillByte, offset, length) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Buffer.byteOrder} property.</p>
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getByteOrder:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Buffer.length} property.</p>
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getLength:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Buffer.type} property.</p>
     * @returns String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Buffer.value} property.</p>
     * @returns Number
     * @returns String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getValue:function() {
    },

    /**
     * <p>inserts <code>sourceBuffer</code> into the current buffer at <code>offset</code>.  Buffer is grown to accommodate the new data.</p>
     * @param {Titanium_Buffer} sourceBuffer <p>buffer to insert into current buffer</p>
     * @param {Number} offset <p>offset to insert new buffer at</p>
     * @returns Number The number of bytes inserted.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    insert:function(sourceBuffer, offset) {
    },

    /**
     * <p>inserts <code>sourceLength</code> amount of data starting at <code>sourceOffset</code> from <code>sourceBuffer</code> into current buffer at <code>offset</code>.  Buffer is grown to accommodate the new data.</p>
     * @param {Titanium_Buffer} sourceBuffer <p>buffer to insert into current buffer</p>
     * @param {Number} offset <p>offset to insert new buffer at</p>
     * @param {Number} sourceOffset <p>offset of sourceBuffer to insert data from</p>
     * @param {Number} sourceLength <p>length of data from sourceBuffer to insert</p>
     * @returns Number The number of bytes inserted.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    insert:function(sourceBuffer, offset, sourceOffset, sourceLength) {
    },

    /**
     * <p>Releases the space allocated to the buffer, sets length to 0.  This is effectively the same as <code>buffer.length = 0</code></p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    release:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Buffer.length} property.</p>
     * @param {Number} length <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    setLength:function(length) {
    },

    /**
     * <p>Converts this buffer to a {@link Titanium.Blob}</p>
     * @returns Titanium_Blob
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    toBlob:function() {
    },

    /**
     * <p>Converts this buffer to a String</p>
     * @returns String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    toString:function() {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_BufferStream() {
}
Titanium_BufferStream.prototype = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>closes stream and throws exception on error</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    close:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Whether stream is readable.</p>
     * @returns Boolean true if stream is readable, false otherwise
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    isReadable:function() {
    },

    /**
     * <p>Whether stream is writeable.</p>
     * @returns Boolean true if stream is writeable, false otherwise
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    isWriteable:function() {
    },

    /**
     * <p>reads data from stream into a buffer</p>
     * @param {Titanium_Buffer} buffer <p>buffer to read stream data into</p>
     * @returns Number Number of bytes read.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    read:function(buffer) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>writes data from buffer to stream</p>
     * @param {Titanium_Buffer} buffer <p>buffer to write to stream</p>
     * @returns Number Number of bytes written.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    write:function(buffer) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
Titanium.Codec = {

    /**
     * <p>Big Endian (network) byte order, i.e. most significant byte first.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    BIG_ENDIAN:null,

    /**
     * <p>The {@link http://en.wikipedia.org/wiki/ASCII}</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    CHARSET_ASCII:null,

    /**
     * <p>The {@link http://en.wikipedia.org/wiki/ISO/IEC_8859}</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    CHARSET_ISO_LATIN_1:null,

    /**
     * <p>The {@link http://en.wikipedia.org/wiki/UTF}</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    CHARSET_UTF16:null,

    /**
     * <p>The {@link http://en.wikipedia.org/wiki/UTF} with Big Endian byte order</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    CHARSET_UTF16BE:null,

    /**
     * <p>The {@link http://en.wikipedia.org/wiki/UTF} with Little Endian byte order</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    CHARSET_UTF16LE:null,

    /**
     * <p>The {@link http://en.wikipedia.org/wiki/UTF}</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    CHARSET_UTF8:null,

    /**
     * <p>Little Endian byte order, i.e. least significant byte first.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    LITTLE_ENDIAN:null,

    /**
     * <p>8 bit integer encoding type</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    TYPE_BYTE:null,

    /**
     * <p>64 bit double precision floating-point type</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    TYPE_DOUBLE:null,

    /**
     * <p>32 bit single precision floating-point type</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    TYPE_FLOAT:null,

    /**
     * <p>32 bit integer encoding type</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    TYPE_INT:null,

    /**
     * <p>64 bit integer encoding type</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    TYPE_LONG:null,

    /**
     * <p>16 bit integer encoding type</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    TYPE_SHORT:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Decodes the <code>source</code> buffer (starting at the optional <code>position</code>) using the passed in data <code>type</code>.
Throws an Exception if <code>source</code> is null, or <code>position</code> is greater than <code>source.length</code></p>
     * @param {Dictionary<DecodeNumberDict>} options <p>decodeNumber named options</p>
     * @returns Number The Number decoded from `source`.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    decodeNumber:function(options) {
    },

    /**
     * <p>Decodes the <code>source</code> buffer into a String starting at <code>position</code>, with <code>length</code> bytes,
using the supplied character set <code>charset</code>. Throws an Exception if <code>charset</code> is not
a valid character set, <code>source</code> is null, or either <code>position</code>, <code>length</code>, or
<code>position</code>+<code>length</code> is greater than <code>source.length</code>.</p>
     * @param {Dictionary<DecodeStringDict>} options <p>decodeString named options</p>
     * @returns String The decoded string
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    decodeString:function(options) {
    },

    /**
     * <p>Encodes the Number <code>source</code> into <code>dest</code> using the passed in data <code>type</code>.</p>
     * @param {Dictionary<EncodeNumberDict>} options <p>encodeNumber named options</p>
     * @returns Number The position after the encoded number in `dest`.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    encodeNumber:function(options) {
    },

    /**
     * <p>Encodes the String <code>source</code> into <code>dest</code> using <code>charset</code>.
Throws an Exception if <code>charset</code> is not a valid character set,
<code>source</code> is null, or either <code>sourcePosition</code>, <code>sourceLength</code>, or
<code>sourcePosition</code>+<code>sourceLength</code> is greater than <code>source.length</code>.</p>
     * @param {Dictionary<EncodeStringDict>} options <p>encodeString named options</p>
     * @returns Number The position after the encoded String inside `dest`.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    encodeString:function(options) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Get the OS native byte order (either {@link Titanium.Codec.BIG_ENDIAN} or {@link Titanium.Codec.LITTLE_ENDIAN})</p>
     * @returns Number The OS native byte order
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getNativeByteOrder:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>Contacts on Android are currently only read-only, so methods such as <code>createPerson</code>, <code>removePerson</code>, etc., are not supported.
{@link Titanium.Contacts.Person} objects which have been removed from the database are invalidated after a save operation, whether from creating a new contact or explicitly calling <code>Titanium.Contacts.save()</code>.  Using them may result in unpredictable behavior, including crashes.</p>
 */
Titanium.Contacts = {

    /**
     * <p>constant for 'organization' kind property of Person object</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    CONTACTS_KIND_ORGANIZATION:null,

    /**
     * <p>constant for 'person' kind property of Person object</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    CONTACTS_KIND_PERSON:null,

    /**
     * <p>constant for sorting group members by first name</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    CONTACTS_SORT_FIRST_NAME:null,

    /**
     * <p>constant for sorting group members by last name</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    CONTACTS_SORT_LAST_NAME:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>create and return an instance of {@link Titanium.Contacts.Group}</p>
     * @param {Titanium_Contacts_Group} parameters <p>(optional) a dictionary object properties defined in {@link Titanium.Contacts.Group}</p>
     * @returns Titanium_Contacts_Group
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    createGroup:function(parameters) {
    },

    /**
     * <p>create and return an instance of {@link Titanium.Contacts.Person}</p>
     * @param {Titanium_Contacts_Person} parameters <p>(optional) a dictionary object properties defined in {@link Titanium.Contacts.Person}</p>
     * @returns Titanium_Contacts_Person
     * @since 0.8 (iPad), 0.8 (iPhone)
     */
    createPerson:function(parameters) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Returns an of all {@link Titanium.Contacts.Group} objects in the contacts database</p>
     * @since 0.8 (iPad), 0.8 (iPhone)
     */
    getAllGroups:function() {
    },

    /**
     * <p>Returns an array of all {@link Titanium.Contacts.Person} objects in the contacts database</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAllPeople:function() {
    },

    /**
     * <p>Returns a {@link Titanium.Contacts.Group} object with the given ID</p>
     * @param {Number} id <p>The database ID of the group to retrieve</p>
     * @returns Titanium_Contacts_Group
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getGroupByID:function(id) {
    },

    /**
     * <p>Returns an array of {@link Titanium.Contacts.Person} objects who have a name (first, last, middle, composite) which matches the given name</p>
     * @param {String} name <p>The name to match in the database</p>
     * @returns Array<Titanium_Contacts_Person>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getPeopleWithName:function(name) {
    },

    /**
     * <p>Returns a {@link Titanium.Contacts.Person} object with the given ID</p>
     * @param {Number} id <p>The database ID of the person to retrieve</p>
     * @returns Titanium_Contacts_Person
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getPersonByID:function(id) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Removes a group from the contacts database.</p>
     * @param {Titanium_Contacts_Group} group <p>The {@link Titanium.Contacts.Group} object to remove from the database.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removeGroup:function(group) {
    },

    /**
     * <p>Removes a person from the contacts database.</p>
     * @param {Titanium_Contacts_Person} person <p>The {@link Titanium.Contacts.Person} object to remove from the database.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removePerson:function(person) {
    },

    /**
     * <p>Reverts all changes made to the previous save of the database.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    revert:function() {
    },

    /**
     * <p>Saves all changes to contacts to the database.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    save:function() {
    },

    /**
     * <p>Displays the contact picker</p>
     * @param {Callback<Object>} cancel <p>The function to call when selection is cancelled</p>
     * @param {Callback<Object>} selectedPerson <p>The function to call when a person is selected.  Mutually exclusive with <code>selectedProperty</code></p>
     * @param {Callback<Object>} selectedProperty <p>The function to call when a property is selected.  Mutally exclusive with <code>selectedPerson</code></p>
     * @param {Boolean} animated <p>Whether or not to animate the show/hide of the contacts picker</p>
     * @param {Array<String>} fields <p>A list of field names to show when selecting properties, default is to show all available</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    showContacts:function(cancel, selectedPerson, selectedProperty, animated, fields) {
    }
}

/**
 * platforms: iPhone, iPad
 */
function Titanium_Contacts_Group() {
}
Titanium_Contacts_Group.prototype = {

    /**
     * <p>The name of the group</p>
     * @type String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    name:null,


    /**
     * <p>Adds a person to the group</p>
     * @param {Titanium_Contacts_Person} person <p>{@link Titanium.Contacts.Person} object to add to the group</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    add:function(person) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Group.name} property.</p>
     * @returns String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getName:function() {
    },

    /**
     * <p>The complete list of members of the group</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    members:function() {
    },

    /**
     * <p>Removes a person from the group</p>
     * @param {Titanium_Contacts_Person} person <p>{@link Titanium.Contacts.Person} object to remove from the group</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    remove:function(person) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Group.name} property.</p>
     * @param {String} name <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setName:function(name) {
    },

    /**
     * <p>A list of sorted members</p>
     * @param {Number} sortBy <p>Method for sorting.  Must be one of  {@link Titanium.Contacts.CONTACTS_SORT_FIRST_NAME} or {@link Titanium.Contacts.CONTACTS_SORT_LAST_NAME}</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    sortedMembers:function(sortBy) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>There are two kinds of properties: single value and multivalue.  Single value properties are returned as a direct value, while mutlivalue properties are returned as dictionary objects with keys which represent labels of the property, with values that are arrays of all values in the property which correspond to that label (e.g. {"home" : [address1, address2]})</p>
 */
function Titanium_Contacts_Person() {
}
Titanium_Contacts_Person.prototype = {

    /**
     * <p>The addresses for the person.  Multi-value, valid labels are: <code>home</code>, <code>work</code>, <code>other</code>.  Values are dictionaries.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    address:null,

    /**
     * <p>The birthday of the person.  Single value, format is "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000"</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    birthday:null,

    /**
     * <p>The date the person was created in the database.  Single value, format is "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000", read-only</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    created:null,

    /**
     * <p>Dates associated with the person.  Multi-value, valid labels are: <code>anniversary</code>.  Values are strings of format "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000"</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    date:null,

    /**
     * <p>The department of the person.  Single value</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    department:null,

    /**
     * <p>The email addresses for the person.  Multi-value, valid labels are: <code>home</code>, <code>work</code>, <code>other</code>.  Values are strings.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    email:null,

    /**
     * <p>The first name of the person.  Single value</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    firstName:null,

    /**
     * <p>The phonetic first name of the person.  Single value</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    firstPhonetic:null,

    /**
     * <p>The localized full name of the person.  Single value, read-only</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fullName:null,

    /**
     * <p>A blob object representing the image for the person.  Set to <code>null</code> to remove the image.  Single value</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    image:null,

    /**
     * <p>The instant messenger names for the person.  Multi-value, valid labels are: <code>aim</code>, <code>icq</code>, <code>jabber</code>, <code>msn</code>, <code>yahoo</code>.  Values are dictionaries.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    instantMessage:null,

    /**
     * <p>The job title of the person.  Single value</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    jobTitle:null,

    /**
     * <p>The kind of person.  Single value, one of {@link Titanium.Contacts.CONTACTS_KIND_PERSON} or {@link Titanium.Contacts.CONTACTS_KIND_ORGANIZATION}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    kind:null,

    /**
     * <p>The last name of the person.  Single value</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    lastName:null,

    /**
     * <p>The phonetic last name of the person.  Single value</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    lastPhonetic:null,

    /**
     * <p>The middle name of the person.  Single value</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    middleName:null,

    /**
     * <p>The phonetic middle name of the person.  Single value</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    middlePhonetic:null,

    /**
     * <p>The most recent date the person was modified.  Single value, format is "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000", read-only</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    modified:null,

    /**
     * <p>The nickname of the person.  Single value</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    nickname:null,

    /**
     * <p>Notes for the person.  Single value</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    note:null,

    /**
     * <p>The organization the person belongs to.  Single value</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    organization:null,

    /**
     * <p>The phone numbers for the person.  Multi-value, valid labels are: <code>home</code>, <code>work</code>, <code>other</code>, <code>mobile</code>, <code>pager</code>, <code>workFax</code>, <code>homeFax</code>, <code>main</code>, <code>iPhone</code>.  Values are strings.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    phone:null,

    /**
     * <p>The prefix for the person.  Single value</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    prefix:null,

    /**
     * <p>The names of people the person is related to.  Multi-value, valid labels are: <code>mother</code>, <code>father</code>, <code>parent</code>, <code>sister</code>, <code>brother</code>, <code>child</code>, <code>friend</code>, <code>spouse</code>, <code>partner</code>, <code>manager</code>, <code>assistant</code>.  Values are strings.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    relatedNames:null,

    /**
     * <p>The suffix for the person.  Single value</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    suffix:null,

    /**
     * <p>URLs of webpages associated with the person.  Multi-value, valid labels are: <code>home</code>, <code>work</code>, <code>other</code>, <code>homepage</code>.  Values are strings.</p>
     * @type Object
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    url:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.address} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAddress:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.birthday} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBirthday:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.created} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getCreated:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.date} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getDate:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.department} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getDepartment:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.email} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getEmail:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.firstName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getFirstName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.firstPhonetic} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getFirstPhonetic:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.fullName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getFullName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.image} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.instantMessage} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getInstantMessage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.jobTitle} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getJobTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.kind} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getKind:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.lastName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLastName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.lastPhonetic} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLastPhonetic:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.middleName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getMiddleName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.middlePhonetic} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getMiddlePhonetic:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.modified} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getModified:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.nickname} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNickname:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.note} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNote:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.organization} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getOrganization:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.phone} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getPhone:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.prefix} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getPrefix:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.relatedNames} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getRelatedNames:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.suffix} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getSuffix:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Contacts.Person.url} property.</p>
     * @returns Object
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getUrl:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.address} property.</p>
     * @param {Object} address <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setAddress:function(address) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.birthday} property.</p>
     * @param {String} birthday <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBirthday:function(birthday) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.created} property.</p>
     * @param {String} created <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setCreated:function(created) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.date} property.</p>
     * @param {Object} date <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setDate:function(date) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.department} property.</p>
     * @param {String} department <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setDepartment:function(department) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.email} property.</p>
     * @param {Object} email <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setEmail:function(email) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.firstName} property.</p>
     * @param {String} firstName <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setFirstName:function(firstName) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.firstPhonetic} property.</p>
     * @param {String} firstPhonetic <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setFirstPhonetic:function(firstPhonetic) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.fullName} property.</p>
     * @param {String} fullName <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setFullName:function(fullName) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.image} property.</p>
     * @param {Object} image <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setImage:function(image) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.instantMessage} property.</p>
     * @param {Object} instantMessage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setInstantMessage:function(instantMessage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.jobTitle} property.</p>
     * @param {String} jobTitle <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setJobTitle:function(jobTitle) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.kind} property.</p>
     * @param {Number} kind <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setKind:function(kind) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.lastName} property.</p>
     * @param {String} lastName <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLastName:function(lastName) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.lastPhonetic} property.</p>
     * @param {String} lastPhonetic <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLastPhonetic:function(lastPhonetic) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.middleName} property.</p>
     * @param {String} middleName <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setMiddleName:function(middleName) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.middlePhonetic} property.</p>
     * @param {String} middlePhonetic <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setMiddlePhonetic:function(middlePhonetic) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.modified} property.</p>
     * @param {String} modified <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setModified:function(modified) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.nickname} property.</p>
     * @param {String} nickname <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setNickname:function(nickname) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.note} property.</p>
     * @param {String} note <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setNote:function(note) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.organization} property.</p>
     * @param {String} organization <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setOrganization:function(organization) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.phone} property.</p>
     * @param {Object} phone <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setPhone:function(phone) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.prefix} property.</p>
     * @param {String} prefix <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setPrefix:function(prefix) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.relatedNames} property.</p>
     * @param {Object} relatedNames <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setRelatedNames:function(relatedNames) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.suffix} property.</p>
     * @param {String} suffix <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setSuffix:function(suffix) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Contacts.Person.url} property.</p>
     * @param {Object} url <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setUrl:function(url) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Titanium.Database = {

    /**
     * <p>constant for requesting a column's value returned in double form.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    FIELD_TYPE_DOUBLE:null,

    /**
     * <p>constant for requesting a column's value returned in float form.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    FIELD_TYPE_FLOAT:null,

    /**
     * <p>constant for requesting a column's value returned in integer form.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    FIELD_TYPE_INT:null,

    /**
     * <p>constant for requesting a column's value returned in string form.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    FIELD_TYPE_STRING:null,

    /**
     * <p>Returns a object representing the database itself.</p>
     * @type Titanium_Filesystem_File
     * @since 1.9 (iPhone), 1.9 (iPad)
     */
    file:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Database.file} property.</p>
     * @returns Titanium_Filesystem_File
     * @since 1.9 (iPhone), 1.9 (iPad)
     */
    getFile:function() {
    },

    /**
     * <p>install a database from the application Resources folder (at build time) and return a reference to the opened database. it is safe to call this method multiple times since this method will only install once if it doesn't already exist on the device.</p>
     * @param {String} path <p>the path (relative to the main application Resources folder at build time) to the db to install. this file must be in the SQLite 3 file format.</p>
     * @param {String} name <p>the name of the database</p>
     * @returns Titanium_Database_DB
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    install:function(path, name) {
    },

    /**
     * <p>open a database. if it doesn't yet exist, create it.</p>
     * @param {String} name <p>the name of the database</p>
     * @returns Titanium_Database_DB
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    open:function(name) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
function Titanium_Database_DB() {
}
Titanium_Database_DB.prototype = {

    /**
     * <p>the last row identifier by the last INSERT query</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    lastInsertRowId:null,

    /**
     * <p>the name of the database</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    name:null,

    /**
     * <p>the number of rows affected by the last query</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    rowsAffected:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>close the database and release resources from memory. once closed, this instance is no longer valid and must no longer be used.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    close:function() {
    },

    /**
     * <p>execute a SQL statement against the database and returns a ResultSet</p>
     * @param {String} sql <p>the SQL to execute</p>
     * @param {Array<Object>} vararg <p>one or more optional variable arguments passed to this function or an array of objects to be replaced in the query using <code>?</code> substitution.</p>
     * @returns Object
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    execute:function(sql, vararg) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Database.DB.lastInsertRowId} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getLastInsertRowId:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Database.DB.name} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Database.DB.rowsAffected} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getRowsAffected:function() {
    },

    /**
     * <p>remove the database files for this instance from disk. WARNING: this is a destructive operation and cannot be reversed. All data in the database will be lost upon calling this function. Use with caution.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    remove:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Database.DB.lastInsertRowId} property.</p>
     * @param {Number} lastInsertRowId <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setLastInsertRowId:function(lastInsertRowId) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Database.DB.name} property.</p>
     * @param {String} name <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setName:function(name) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Database.DB.rowsAffected} property.</p>
     * @param {Number} rowsAffected <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setRowsAffected:function(rowsAffected) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
function Titanium_Database_ResultSet() {
}
Titanium_Database_ResultSet.prototype = {

    /**
     * <p>the number of rows in the result set</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    rowCount:null,

    /**
     * <p>returns true if the current row is still valid</p>
     * @type Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    validRow:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>close the result set and release resources. once closed, this result set must no longer be used</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    close:function() {
    },

    /**
     * <p>retrieve a row value by field index</p>
     * @param {Number} index <p>column index (which is zero based)</p>
     * @param {Number} type <p>One of ({@link Titanium.Database.FIELD_TYPE_STRING} | {@link Titanium.Database.FIELD_TYPE_INT} | {@link Titanium.Database.FIELD_TYPE_FLOAT} | {@link Titanium.Database.FIELD_TYPE_DOUBLE})</p>
     * @returns Object
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    field:function(index, type) {
    },

    /**
     * <p>retrieve a row value by field name</p>
     * @param {String} name <p>column name from SQL query</p>
     * @param {Number} type <p>One of ({@link Titanium.Database.FIELD_TYPE_STRING} | {@link Titanium.Database.FIELD_TYPE_INT} | {@link Titanium.Database.FIELD_TYPE_FLOAT} | {@link Titanium.Database.FIELD_TYPE_DOUBLE})</p>
     * @returns Object
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fieldByName:function(name, type) {
    },

    /**
     * <p>return the number of columns in the result set</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fieldCount:function() {
    },

    /**
     * <p>return the field name for field index</p>
     * @param {Number} index <p>field name column index (which is zero based)</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fieldName:function(index) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Database.ResultSet.rowCount} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getRowCount:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Database.ResultSet.validRow} property.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getValidRow:function() {
    },

    /**
     * <p>return true if the row is a valid row</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    isValidRow:function() {
    },

    /**
     * <p>iterate to the next row in the result set.</p>
     * @returns Boolean If the next operation goes past the final row, this returns false.  Else true.

     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    next:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Database.ResultSet.rowCount} property.</p>
     * @param {Number} rowCount <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setRowCount:function(rowCount) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Database.ResultSet.validRow} property.</p>
     * @param {Boolean} validRow <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setValidRow:function(validRow) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_Event() {
}
Titanium_Event.prototype = {

    /**
     * <p>Source object that fired the event.</p>
     * @type Object
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    source:null,

    /**
     * <p>Name of the event fired.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    type:null,


    /**
     * <p>Gets the value of the {@link Titanium.Event.source} property.</p>
     * @returns Object
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    getSource:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Event.type} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    getType:function() {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Event.source} property.</p>
     * @param {Object} source <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    setSource:function(source) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Event.type} property.</p>
     * @param {String} type <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    setType:function(type) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>The Facebook module is used for connecting your application with 
Facebook through the {@link http://developers.facebook.com/docs/reference/api/} 
(see <code>requestWithGraphPath</code>) or the deprecated 
{@link http://developers.facebook.com/docs/reference/rest/} (see <code>request</code>).
Due to how the facebook login process works on iOS, your app will need to have the following 
in your tiapp.xml if you target those platforms:</p>
<property name="ti.facebook.appid">your_app_id_here</property>

<p>You must still set Ti.Facebook.appid within your app itself to use the facebook module.<br />
This property is used only for configuring your app to interface with the facebook 
login process.</p>
<h4>Previous Versions</h4>
<p>Titanium Mobile SDK 1.6.0 marked a significant change for this module.  Older versions of 
the module were not compatible with the new Graph API.  Applications written for the 
pre-1.6.0 version of this module will <strong>not</strong> work with the 1.6.0 and higher versions.<br />
Nor is the code shown in the examples here backwards-compatible with pre-1.6.0 Titanium 
Mobile SDK.</p>
 * 
 * @example Authorize
 * <p>Shows official Facebook dialog for logging in the user and prompting the user to approve your requested permissions.  Listen for the module's "login" event to determine success/failure.</p>
<pre><code>Titanium.Facebook.appid = '[YOUR APPID]';
Titanium.Facebook.permissions = ['publish_stream']; // Permissions your app needs
Titanium.Facebook.addEventListener('login', function(e) {
    if (e.success) {
        alert('Logged In');
    } else if (e.error) {
        alert(e.error);
    } else if (e.cancelled) {
        alert("Cancelled");
    }
});
Titanium.Facebook.authorize();
</code></pre>
 * 
 * @example Logout
 * <p>Logout the user and forget the authorization token.  Listen for the module's "logout" event to determine when logout is finished.</p>
<pre><code>Titanium.Facebook.addEventListener('logout', function(e) {
    alert('Logged out');
});
Titanium.Facebook.logout();
</code></pre>
 * 
 * @example Authorize/Logout via the special LoginButton
 * <p>We've provided the Facebook-themed LoginButton which updates its state automatically depending on whether the user is logged-in or not.  I.e., when the user is logged-in, then the button will show "Logout", and vice-versa.</p>
<p>Note that you don't need to set a click listener or anything else on the button.  It "just works".  To listen for the actual login and logout events (which are part of the Titanium Facebook module and not specific to the login button), add listeners at the module level as in the example below.</p>
<pre><code>// Don't forget to set your appid and requested permissions, else the login button
// won't be effective.
Titanium.Facebook.appid = '[your appid]';
Titanium.Facebook.permissions = ['publish_stream'];
Titanium.Facebook.addEventListener('login', function(e) {
    if (e.success) {
        alert('Logged in');
    }
});
Titanium.Facebook.addEventListener('logout', function(e) {
    alert('Logged out');
});

// add the button.  Note that it doesn't need a click event or anything.
Titanium.UI.currentWindow.add(Titanium.Facebook.createLoginButton({ top: 50, style: 'wide' }));
</code></pre>
<p>The <code>style:'wide'</code> shows a wide version of the button that displays "Connect with Facebook" instead of just "Connect".</p>
 * 
 * @example Simple Graph API call
 * <p>This example makes a call to the "me" graph path and displays the results, which will be JSON from Facebook.  It assumes the user is already logged-in (you can check this with {@link Titanium.Facebook.loggedIn}.)</p>
<pre><code>Titanium.Facebook.requestWithGraphPath('me', {}, 'GET', function(e) {
    if (e.success) {
        alert(e.result);
    } else if (e.error) {
        alert(e.error);
    } else {
        alert('Unknown response');
    }
});
</code></pre>
 * 
 * @example Create an Event with Graph API
 * <p>This example uses the Graph API to {@link http://developers.facebook.com/docs/reference/api/event/} in the logged-on user's Facebook account.  This requires the "create_event" permission.</p>
<pre><code>// First make sure this permission exists
Titanium.Facebook.permissions = ['create_event'];
Titanium.Facebook.authorize();

// ...
// ...

// Now create the event after you've confirmed authorize() was successful.
var starttime = new Date(2011, 4, 31, 17, 0);
var endtime = new Date(2011, 4, 31, 19, 0);
var title = "Barry's Birthday Celebration";
var description = "Barry will have a great party";
var data = {
    start_time: JSON.stringify(starttime), // API expects a JSON stringified date
    end_time: JSON.stringify(endtime),
    summary: description,
    name: title
};
Titanium.Facebook.requestWithGraphPath('me/events', data, 'POST', function(e) {
    if (e.success) {
        alert("Success! Returned from FB: " + e.result);
    } else {
        if (e.error) {
            alert(e.error);
        } else {
            alert("Unknown result");
        }
    }
});
</code></pre>
 * 
 * @example Set user's Facebook status with Graph API
 * <p>Use the Graph API to set the {@link http://developers.facebook.com/docs/reference/api/status/}.  Requires the "publish_stream" permissions.</p>
<pre><code>// First make sure this permission exists
Titanium.Facebook.permissions = ['publish_stream'];
Titanium.Facebook.authorize();

// ...
// ...

// Now create the status message after you've confirmed that authorize() succeeded
Titanium.Facebook.requestWithGraphPath('me/feed', {message: "Trying out FB Graph API and it's fun!"}, "POST", function(e) {
    if (e.success) {
        alert("Success!  From FB: " + e.result);
    } else {
        if (e.error) {
            alert(e.error);
        } else {
            alert("Unkown result");
        }
    }
});
</code></pre>
 * 
 * @example Post a photo using the Graph API
 * <p>This example {@link http://developers.facebook.com/docs/reference/api/photo/} using the Graph API.  Another example below shows how to do this with the REST API, if desired.  This requires the "publish_stream" permission.</p>
<pre><code>// First make sure this permission exists
Titanium.Facebook.permissions = ['publish_stream'];
Titanium.Facebook.authorize();

// ...
// ...

// Now post the photo after you've confirmed that authorize() succeeded
var f = Ti.Filesystem.getFile('pumpkin.jpg');
var blob = f.read();
var data = {
    message: 'This is a pumpkin',
    picture: blob
};
Titanium.Facebook.requestWithGraphPath('me/photos', data, 'POST', function(e){
    if (e.success) {
        alert("Success!  From FB: " + e.result);
    } else {
        if (e.error) {
            alert(e.error);
        } else {
            alert("Unkown result");
        }
    }
});
</code></pre>
 * 
 * @example Post a photo using the REST API
 * <p>This example {@link http://developers.facebook.com/docs/reference/rest/photos.upload/} using the REST API.  Another example above shows how to do this with the Graph API.  This requires the "publish_stream" permission.</p>
<pre><code>// First make sure this permission exists
Titanium.Facebook.permissions = ['publish_stream'];
Titanium.Facebook.authorize();

// ...
// ...

// Now post the photo after you've confirmed that authorize() succeeded
var f = Ti.Filesystem.getFile('pumpkin.jpg');
var blob = f.read();
var data = {
    caption: 'This is a pumpkin',
    picture: blob
};
Titanium.Facebook.request('photos.upload', data, function(e){
    if (e.success) {
        alert("Success!  From FB: " + e.result);
    } else {
        if (e.error) {
            alert(e.error);
        } else {
            alert("Unkown result");
        }
    }
});
</code></pre>
 * 
 * @example Show the Facebook Feed Dialog
 * <p>This example shows how to display the {@link http://developers.facebook.com/docs/reference/dialogs/feed/} for making a post to the user's feed.  In this example, we'll prefill some of the feed fields by passing a data dictionary to the dialog() method; this is not required.</p>
<pre><code>var data = {
    link: "http://www.appcelerator.com",
    name: "Appcelerator Titanium Mobile",
    message: "Checkout this cool open source project for creating mobile apps",
    caption: "Appcelerator Titanium Mobile",
    picture: "http://developer.appcelerator.com/assets/img/DEV_titmobile_image.png",
    description: "You've got the ideas, now you've got the power. Titanium translates your hard won web skills into native applications..."
};
Titanium.Facebook.dialog("feed", data, function(e) {
    if (e.success) {
        alert("Success!  From FB: " + e.result);
    } else {
        if (e.error) {
            alert(e.error);
        } else if (e.cancelled) {
            alert('Cancelled');
        } else {
            alert("Unkown result");
        }
    }
});
</code></pre>
 */
Titanium.Facebook = {

    /**
     * <p>OAuth token set after a successful <code>authorize</code>.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    accessToken:null,

    /**
     * <p>your Facebook application id.  You need to set this for anything to work.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    appid:null,

    /**
     * <p>Time at which the <code>accessToken</code> expires.</p>
     * @type Date
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    expirationDate:null,

    /**
     * <p>Set to false to enable "Single-Sign-On" in cases where the official Facebook app is on the device.  Default is true, meaning the traditional, dialog-based authentication is used rather than Single-Sign-On.  See {@link http://developers.facebook.com/docs/guides/mobile} for details of their Single-Sign-On schem.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    forceDialogAuth:null,

    /**
     * <p>returns true if the user has logged in</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    loggedIn:null,

    /**
     * <p>set/return an array of permissions to request for your app.  Be sure the permissions you want are set before calling <code>authorize</code>.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    permissions:null,

    /**
     * <p>the unique user id returned from Facebook.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    uid:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Login the user (if not already logged in) and authorize your application.  Be sure to set your desired <code>permissions</code> and your <code>appid</code> before calling this.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    authorize:function() {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.Facebook.LoginButton}.</p>
     * @param {Dictionary<Titanium_Facebook_LoginButton>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.Facebook.LoginButton}.</p>
     * @returns Titanium_Facebook_LoginButton
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    createLoginButton:function(parameters) {
    },

    /**
     * <p>Open a supported Facebook {@link http://developers.facebook.com/docs/reference/dialogs/}.  "feed" is just about the only useful one.</p>
     * @param {String} action <p>Specifies which dialog to show, such as "feed".</p>
     * @param {Object} params <p>A dictionary object for pre-filling some of the dialog's fields.  See example.</p>
     * @param {Callback<Object>} callback <p>A callback for when dialog is completed/cancelled.  The callback should accept a single argument which will be filled with a dictionary object concerning call results: items in the dictionary can be "success" (boolean), "error" (string with the error message), "cancelled" (set to true if user cancelled) and "result" (the data returned by Facebook.)</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    dialog:function(action, params, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.accessToken} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAccessToken:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.appid} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAppid:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.expirationDate} property.</p>
     * @returns Date
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getExpirationDate:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.forceDialogAuth} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getForceDialogAuth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.loggedIn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLoggedIn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.permissions} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getPermissions:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.uid} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getUid:function() {
    },

    /**
     * <p>Clear the OAuth <code>accessToken</code> and logout the user.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    logout:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Make a request to the deprecated {@link http://developers.facebook.com/docs/reference/rest/}.</p>
     * @param {String} method <p>The REST API method to call.</p>
     * @param {Object} params <p>A dictionary object for setting parameters required by the call, if any.  See examples.</p>
     * @param {Callback<Object>} callback <p>A callback for when call is completed.  The callback should accept a single argument which will be filled with a dictionary object concerning call results: items in the dictionary can be "success" (boolean), "error" (string with the error message), "method" (the REST method call you specified), "result" (the data returned by Facebook.)</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    request:function(method, params, callback) {
    },

    /**
     * <p>Make a {@link http://developers.facebook.com/docs/reference/api/} request.  If the request requires user authorization, be sure user is already logged-in and your app is authorized.  (You can check <code>loggedIn</code> for that.)</p>
     * @param {String} path <p>The graph API path to request.  For example, "me" requests {@link http://developers.facebook.com/docs/reference/api/user/}.</p>
     * @param {Object} params <p>A dictionary object for setting parameters required by the call, if any.  See examples.</p>
     * @param {String} httpMethod <p>The http method (GET/POST/DELETE) to use for the call.</p>
     * @param {Callback<Object>} callback <p>A callback for when call is completed.  The callback should accept a single argument which will be filled with a dictionary object concerning call results: items in the dictionary can be "success" (boolean), "error" (string with the error message), "path" (the graph call path you specified), "result" (the JSON returned by Facebook.)</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    requestWithGraphPath:function(path, params, httpMethod, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.accessToken} property.</p>
     * @param {String} accessToken <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setAccessToken:function(accessToken) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.appid} property.</p>
     * @param {String} appid <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setAppid:function(appid) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.expirationDate} property.</p>
     * @param {Date} expirationDate <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setExpirationDate:function(expirationDate) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.forceDialogAuth} property.</p>
     * @param {Boolean} forceDialogAuth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setForceDialogAuth:function(forceDialogAuth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.loggedIn} property.</p>
     * @param {Boolean} loggedIn <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLoggedIn:function(loggedIn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.permissions} property.</p>
     * @param {Object} permissions <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setPermissions:function(permissions) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.uid} property.</p>
     * @param {String} uid <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setUid:function(uid) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>The Login Button created by {@link Titanium.Facebook.createLoginButton}.  This is a 
Facebook-themed button that does not require a click event handler or any listeners.<br />
It "just works" and changes its label to reflect the current state of the Facebook 
session.  For example, if the user is already logged in, this button will show "Logout".</p>
<p>See the examples in the {@link Titanium.Facebook} documentation.</p>
 */
function Titanium_Facebook_LoginButton() {
}
Titanium_Facebook_LoginButton.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    center:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    right:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Sets the login button style.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    style:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.size} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.style} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Facebook.LoginButton.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.style} property.</p>
     * @param {String} style <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setStyle:function(style) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Facebook.LoginButton.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
Titanium.Filesystem = {

    /**
     * <p>constant for append mode for file operations</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    MODE_APPEND:null,

    /**
     * <p>constant for read mode for file operations</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    MODE_READ:null,

    /**
     * <p>constant for write mode for file operations</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    MODE_WRITE:null,

    /**
     * <p>constant where your application data directory is located. this directory should be used to place applications-specific files. on iPhone, this directory is also backed up.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    applicationDataDirectory:null,

    /**
     * <p>constant where your application is located</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    applicationDirectory:null,

    /**
     * <p>platform specific line ending constant</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    lineEnding:null,

    /**
     * <p>constant where your application resources are located</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    resourcesDirectory:null,

    /**
     * <p>path separator constant</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    separator:null,

    /**
     * <p>constant where your application can place temporary files</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    tempDirectory:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.Filesystem.File}.</p>
     * @param {Dictionary<Titanium_Filesystem_File>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.Filesystem.File}.</p>
     * @returns Titanium_Filesystem_File
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    createFile:function(parameters) {
    },

    /**
     * <p>create temp file and return a {@link Titanium.Filesystem.File}</p>
     * @returns Titanium_Filesystem_File
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    createTempDirectory:function() {
    },

    /**
     * <p>create a temp file and return a {@link Titanium.Filesystem.File}</p>
     * @returns Titanium_Filesystem_File
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    createTempFile:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Filesystem.applicationDataDirectory} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    getApplicationDataDirectory:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Filesystem.applicationDirectory} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    getApplicationDirectory:function() {
    },

    /**
     * <p>return a fully formed file path as a {@link Titanium.Filesystem.File} object</p>
     * @param {String} path <p>one or more path arguments to form the full path joined together with the platform specific path separator. if a relative path is passed, the full path will be relative to the application resource folder.</p>
     * @returns Titanium_Filesystem_File
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    getFile:function(path) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Filesystem.lineEnding} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    getLineEnding:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Filesystem.resourcesDirectory} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    getResourcesDirectory:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Filesystem.separator} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    getSeparator:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Filesystem.tempDirectory} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    getTempDirectory:function() {
    },

    /**
     * <p>returns true if the android device supports external storage such as an SD card. Returns false on iOS.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    isExternalStoragePresent:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_Filesystem_File() {
}
Titanium_Filesystem_File.prototype = {

    /**
     * <p>returns the fully resolved native path</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    nativePath:null,

    /**
     * <p>Value indicating whether or not to back up to a cloud service.</p>
     * @type Boolean
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    remoteBackup:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>create a directory at the path for the file object</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    createDirectory:function() {
    },

    /**
     * <p>create a file path at the path for the file object</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    createFile:function() {
    },

    /**
     * <p>return the created timestamp for the file</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    createTimestamp:function() {
    },

    /**
     * <p>delete the file directory path</p>
     * @param {Boolean} recursive <p>pass true to recursively delete any contents. defaults to false</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    deleteDirectory:function(recursive) {
    },

    /**
     * <p>delete the file</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    deleteFile:function() {
    },

    /**
     * <p>returns true if the file is executable</p>
     * @returns Boolean Returns true if file is executable.
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    executable:function() {
    },

    /**
     * <p>returns true if the file or directory exists on the device</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    exists:function() {
    },

    /**
     * <p>return the file extension</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    extension:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>return an array of paths in the directory of the file object</p>
     * @returns Array<String>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    getDirectoryListing:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Filesystem.File.nativePath} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    getNativePath:function() {
    },

    /**
     * <p>return the file parent</p>
     * @returns Titanium_Filesystem_File
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    getParent:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Filesystem.File.remoteBackup} property.</p>
     * @returns Boolean
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    getRemoteBackup:function() {
    },

    /**
     * <p>returns true if the file is hidden</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    hidden:function() {
    },

    /**
     * <p>return the last modification timestamp for the file</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    modificationTimestamp:function() {
    },

    /**
     * <p>move the file to another path</p>
     * @param {String|Object} newpath <p>new location</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    move:function(newpath) {
    },

    /**
     * <p>the name of the file</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    name:function() {
    },

    /**
     * <p>return the contents of file as blob</p>
     * @returns Titanium_Blob
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    read:function() {
    },

    /**
     * <p>returns true if the file is readonly</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    readonly:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>rename the file</p>
     * @param {String} newname <p>new name</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    rename:function(newname) {
    },

    /**
     * <p>make the file executable</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    setExecutable:function() {
    },

    /**
     * <p>make the file hidden</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    setHidden:function() {
    },

    /**
     * <p>make the file readonly</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    setReadonly:function() {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Filesystem.File.remoteBackup} property.</p>
     * @param {Boolean} remoteBackup <p>New value for the property.</p>
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    setRemoteBackup:function(remoteBackup) {
    },

    /**
     * <p>return boolean to indicate if the path has space available for storage</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    spaceAvailable:function() {
    },

    /**
     * <p>returns true if the file points to a symbolic link</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    symbolicLink:function() {
    },

    /**
     * <p>write the contents to file.</p>
     * @param {String|Titanium_Filesystem_File|Titanium_Blob} contents <p>write the contents of string, blob or {@link Titanium.Filesystem.File} to file</p>
     * @param {Boolean} append <p>(optional) append the string to the end of the file.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    write:function(contents, append) {
    },

    /**
     * <p>returns true if the file is writeable</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    writeable:function() {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_Filesystem_FileStream() {
}
Titanium_Filesystem_FileStream.prototype = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>closes file stream, exception is thrown on error</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    close:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Whether stream is readable.</p>
     * @returns Boolean true if stream is readable, false otherwise
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    isReadable:function() {
    },

    /**
     * <p>Whether stream is writeable.</p>
     * @returns Boolean true if stream is writeable, false otherwise
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    isWriteable:function() {
    },

    /**
     * <p>reads data from stream into a buffer</p>
     * @param {Titanium_Buffer} buffer <p>buffer to read stream data into</p>
     * @returns Number Number of bytes read.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    read:function(buffer) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>writes data from buffer to stream</p>
     * @param {Titanium_Buffer} buffer <p>buffer to write to stream</p>
     * @returns Number Number of bytes written.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    write:function(buffer) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Titanium.Geolocation = {

    /**
     * <p>accuracy constant</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    ACCURACY_BEST:null,

    /**
     * <p>accuracy constant</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    ACCURACY_HUNDRED_METERS:null,

    /**
     * <p>accuracy constant</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    ACCURACY_KILOMETER:null,

    /**
     * <p>accuracy constant</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    ACCURACY_NEAREST_TEN_METERS:null,

    /**
     * <p>accuracy constant</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    ACCURACY_THREE_KILOMETERS:null,

    /**
     * <p>authorization constant</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    AUTHORIZATION_AUTHORIZED:null,

    /**
     * <p>authorization constant (user disabled authorization)</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    AUTHORIZATION_DENIED:null,

    /**
     * <p>authorization constant (system disabled authorization)</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    AUTHORIZATION_RESTRICTED:null,

    /**
     * <p>authorization constant</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    AUTHORIZATION_UNKNOWN:null,

    /**
     * <p>error constant</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    ERROR_DENIED:null,

    /**
     * <p>error constant</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    ERROR_HEADING_FAILURE:null,

    /**
     * <p>error constant</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    ERROR_LOCATION_UNKNOWN:null,

    /**
     * <p>error constant</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    ERROR_NETWORK:null,

    /**
     * <p>error constant</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    ERROR_REGION_MONITORING_DELAYED:null,

    /**
     * <p>error constant</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    ERROR_REGION_MONITORING_DENIED:null,

    /**
     * <p>error constant</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    ERROR_REGION_MONITORING_FAILURE:null,

    /**
     * <p>The GPS location provider</p>
     * @type String
     * @since 0.1 (Android), 1.8 (Mobile Web)
     */
    PROVIDER_GPS:null,

    /**
     * <p>The Network location provider</p>
     * @type String
     * @since 0.1 (Android), 1.8 (Mobile Web)
     */
    PROVIDER_NETWORK:null,

    /**
     * <p>The minimum change of position (in meters) before a 'location' event is fired. Default is 0, meaning that location events are continuously generated.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    distanceFilter:null,

    /**
     * <p>The minium change of heading (in degrees) before a 'heading' event is fired. Default is 0, meaning that heading events are continuously generated.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    headingFilter:null,

    /**
     * <p>Returns an authorization constant indicating if the application has access to location services. Always returns AUTHORIZATION_UNKNOWN on pre-4.2 devices. Attempting to re-authorize when AUTHORIZATION_RESTRICTED will lead to issues</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    locationServicesAuthorization:null,

    /**
     * <p>returns true if the user has enabled or disable location services for the device (not the application).</p>
     * @type Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    locationServicesEnabled:null,

    /**
     * <p>allows setting of the preferred location provider.  Returns undefined when the preferred provider is auto-detected</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    preferredProvider:null,

    /**
     * <p>This property informs the end-user why location services are being requested by the application.  This string will be display in the permission dialog. This property is REQUIRED starting in 4.0.</p>
     * @type String
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    purpose:null,

    /**
     * <p>returns true if the calibration UI can show</p>
     * @type Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    showCalibration:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>tries to resolve an address to a location.</p>
     * @param {String} address <p>address to resolve.</p>
     * @param {Callback<Object>} callback <p>function to invoke on success or failure. The event object contains the properties described as the <code>place</code> dictionary in {@link Titanium.Geolocation.reverseGeocoder}.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    forwardGeocoder:function(address, callback) {
    },

    /**
     * <p>retrieve the current compass heading.</p>
     * @param {Callback<Object>} callback <p>function to invoke on success or failure of obtaining the current heading. See heading event in {@link Titanium.Geolocation}.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    getCurrentHeading:function(callback) {
    },

    /**
     * <p>retrieve the last known location from the device. On Android, the radios are not turned on to update the location. On iOS the radios MAY be used if the location is too "old".</p>
     * @param {Callback<Object>} callback <p>function to invoke on success or failure of obtaining the current location. See location event in {@link Titanium.Geolocation}.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getCurrentPosition:function(callback) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Geolocation.distanceFilter} property.</p>
     * @returns Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getDistanceFilter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Geolocation.headingFilter} property.</p>
     * @returns Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getHeadingFilter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Geolocation.locationServicesAuthorization} property.</p>
     * @returns Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getLocationServicesAuthorization:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Geolocation.locationServicesEnabled} property.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getLocationServicesEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Geolocation.preferredProvider} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getPreferredProvider:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Geolocation.purpose} property.</p>
     * @returns String
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getPurpose:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Geolocation.showCalibration} property.</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getShowCalibration:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>tries to resolve a location to an address.</p>
     * @param {Number} latitude <p>latitude to search</p>
     * @param {Number} longitude <p>longitude to search</p>
     * @param {Callback<Object>} callback <p>function to invoke on success or failure. The event object passed contains a <code>places</code> array of zero or more place dictionaries. Each <code>place</code> dictionary contains the following properties: <code>street</code>, <code>street1</code>, <code>city</code>, <code>region1</code>, <code>region2</code>, <code>postalCode</code>, <code>country</code>, <code>countryCode</code>, <code>longitude</code>, <code>latitude</code>, <code>displayAddress</code>, <code>address</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    reverseGeocoder:function(latitude, longitude, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Geolocation.distanceFilter} property.</p>
     * @param {Number} distanceFilter <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setDistanceFilter:function(distanceFilter) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Geolocation.headingFilter} property.</p>
     * @param {Number} headingFilter <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setHeadingFilter:function(headingFilter) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Geolocation.locationServicesAuthorization} property.</p>
     * @param {Number} locationServicesAuthorization <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setLocationServicesAuthorization:function(locationServicesAuthorization) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Geolocation.preferredProvider} property.</p>
     * @param {String} preferredProvider <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setPreferredProvider:function(preferredProvider) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Geolocation.purpose} property.</p>
     * @param {String} purpose <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setPurpose:function(purpose) {
    },

    /**
     * <p>configure the calibration UI. set the false to disable the calibration display.</p>
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setShowCalibration:function() {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Titanium.Gesture = {

    /**
     * <p>True if current window is considered landscape by the device, false otherwise</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    landscape:null,

    /**
     * <p>Orientation of the current window.  Value will be one of the following - {@link Titanium.UI.PORTRAIT}, {@link Titanium.UI.UPSIDE_PORTRAIT}, {@link Titanium.UI.LANDSCAPE_LEFT}, {@link Titanium.UI.LANDSCAPE_RIGHT} or {@link Titanium.UI.UNKNOWN}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    orientation:null,

    /**
     * <p>True if current window is considered portrait by the device, false otherwise</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    portrait:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Gesture.landscape} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLandscape:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Gesture.orientation} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getOrientation:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Gesture.portrait} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getPortrait:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 * 
 * @example write data to stream
 * <p>var outBuffer = Ti.createBuffer({data: "write me"});
var outStream = // stream object could be socket, file, buffer or blob</p>
<p>var bytesWritten = outStream.write(outBuffer);  // writes entire buffer to stream
Ti.API.info("Bytes written:" + bytesWritten);  // should be 8</p>
<p>bytesWritten = outStream.write(outBuffer, 2, 5);  // only writes "ite m" to stream
Ti.API.info("Bytes written:" + bytesWritten);  // should be 5</p>
 * 
 * @example read data from stream
 * <p>var inBuffer = Ti.createBuffer({length: 1024});</p>
<p>// assume the inStream contains the string "hello world"
var inStream = // stream object could be socket, file, buffer or blob</p>
<p>var bytesRead = inStream.read(inBuffer);  // reads "hello world" from stream
Ti.API.info("Bytes read:" + bytesRead);  // should be 11</p>
<p>bytesRead = inStream.read(inBuffer, 2, 5);  // only reads "llo w" from stream
Ti.API.info("Bytes read:" + bytesRead);  // should be 5</p>
 */
function Titanium_IOStream() {
}
Titanium_IOStream.prototype = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>closes stream and throws exception on error</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    close:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Whether stream is readable.</p>
     * @returns Boolean true if stream is readable, false otherwise
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    isReadable:function() {
    },

    /**
     * <p>Whether stream is writeable.</p>
     * @returns Boolean true if stream is writeable, false otherwise
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    isWriteable:function() {
    },

    /**
     * <p>reads data from stream into a buffer</p>
     * @param {Titanium_Buffer} buffer <p>buffer to read stream data into</p>
     * @returns Number Number of bytes read.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    read:function(buffer) {
    },

    /**
     * <p>reads data from stream into a buffer</p>
     * @param {Titanium_Buffer} buffer <p>buffer to read stream data into</p>
     * @param {Number} offset <p>offset to start reading buffer data from</p>
     * @param {Number} length <p>length of data to read from buffer</p>
     * @returns Number Number of bytes read.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    read:function(buffer, offset, length) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>writes data from buffer to stream</p>
     * @param {Titanium_Buffer} buffer <p>buffer to write to stream</p>
     * @returns Number Number of bytes written.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    write:function(buffer) {
    },

    /**
     * <p>reads data from stream into a buffer</p>
     * @param {Titanium_Buffer} buffer <p>buffer to write to stream</p>
     * @param {Number} offset <p>offset to start writing buffer data from</p>
     * @param {Number} length <p>length of data to write from buffer</p>
     * @returns Number Number of bytes written.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    write:function(buffer, offset, length) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>The <code>Locale</code> module works with localization files to which are generated during compilation 
into the operating system specific localization formats. The <code>Locale</code> module provides 
locale-specific strings which can be referenced at runtime.  Additionally, the module 
contains a few methods and properties for querying device locale information.</p>
<p>The macro <code>L</code> can be used as an alias for the {@link Titanium.Locale.getString} method.</p>
 */
Titanium.Locale = {

    /**
     * <p>return the current (default) ISO 2-letter country code for the device.</p>
     * @type String
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad)
     */
    currentCountry:null,

    /**
     * <p>return the current language for the device based on the user's settings</p>
     * @type String
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad)
     */
    currentLanguage:null,

    /**
     * <p>return the current locale string for the device based on the user's settings (e.g., en-US).</p>
     * @type String
     * @since 1.5 (Android)
     */
    currentLocale:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>format a telephone number according to the current locale.</p>
     * @param {String} number <p>the phone number to format</p>
     * @returns String
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad)
     */
    formatTelephoneNumber:function(number) {
    },

    /**
     * <p>return a currency code for a given locale.</p>
     * @param {String} locale <p>the locale for which you want to the currency code, e.g. getCurrencyCode('en-US') -&gt; 'USD'</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getCurrencyCode:function(locale) {
    },

    /**
     * <p>return a currency symbol for the given currency code.</p>
     * @param {String} currencyCode <p>the currency for which you want the symbol, e.g. getCurrencySymbol('USD') -&gt; '$'</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getCurrencySymbol:function(currencyCode) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Locale.currentCountry} property.</p>
     * @returns String
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad)
     */
    getCurrentCountry:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Locale.currentLanguage} property.</p>
     * @returns String
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad)
     */
    getCurrentLanguage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Locale.currentLocale} property.</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getCurrentLocale:function() {
    },

    /**
     * <p>return a currency symbol for the given locale.</p>
     * @param {String} locale <p>the locale whose currency symbol you want, e.g. getLocaleCurrencySymbol('en-US') -&gt; '$'</p>
     * @returns String
     * @since 1.5 (Android)
     */
    getLocaleCurrencySymbol:function(locale) {
    },

    /**
     * <p>return a localization string</p>
     * @param {String} key <p>the key to use when mapping into the localization file</p>
     * @param {String} hint <p>the text to use if no key found in the localization file</p>
     * @returns String
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad)
     */
    getString:function(key, hint) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Locale.currentCountry} property.</p>
     * @param {String} currentCountry <p>New value for the property.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad)
     */
    setCurrentCountry:function(currentCountry) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 * 
 * @example Map Example
 * <p>This is a basic map example that uses a custom annotation on the map.</p>
<pre><code>var mountainView = Titanium.Map.createAnnotation({
    latitude:37.390749,
    longitude:-122.081651,
    title:"Appcelerator Headquarters",
    subtitle:'Mountain View, CA',
    pincolor:Titanium.Map.ANNOTATION_RED,
    animate:true,
    leftButton: '../images/appcelerator_small.png',
    myid:1 // CUSTOM ATTRIBUTE THAT IS PASSED INTO EVENT OBJECTS
});

var mapview = Titanium.Map.createView({
    mapType: Titanium.Map.STANDARD_TYPE,
    region: {latitude:33.74511, longitude:-84.38993, 
            latitudeDelta:0.01, longitudeDelta:0.01},
    animate:true,
    regionFit:true,
    userLocation:true,
    annotations:[mountainView]
});

win.add(mapview);
</code></pre>
 */
Titanium.Map = {

    /**
     * <p>Displays a satellite image of the area with road and road name information layered on top.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    HYBRID_TYPE:null,

    /**
     * <p>Displays satellite imagery of the area.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    SATELLITE_TYPE:null,

    /**
     * <p>Displays a street map that shows the position of all roads and some road names.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    STANDARD_TYPE:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.Map.Annotation}.</p>
     * @param {Dictionary<Titanium_Map_Annotation>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.Map.Annotation}.</p>
     * @returns Titanium_Map_Annotation
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    createAnnotation:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.Map.View}.</p>
     * @param {Dictionary<Titanium_Map_View>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.Map.View}.</p>
     * @returns Titanium_Map_View
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    createView:function(parameters) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_Map_Annotation() {
}
Titanium_Map_Annotation.prototype = {

    /**
     * <p>boolean to indicate whether the pin should animate when dropped</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    animate:null,

    /**
     * <p>image for the pin instead of default image.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    image:null,

    /**
     * <p>the left button image on the annotation. must either be a button type constant or url</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    leftButton:null,

    /**
     * <p>a left view that is displayed on the annotation</p>
     * @type Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    leftView:null,

    /**
     * <p>Use {@link Titanium.Map.Annotation.image} property instead.</p>
     * @type String
     * @since 0.9 (Android)
     */
    pinImage:null,

    /**
     * <p>the pin color as one of <code>Titanium.Map.ANNOTATION_RED</code>, <code>Titanium.Map.ANNOTATION_GREEN</code> or <code>Titanium.Map.ANNOTATION_PURPLE</code>.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    pincolor:null,

    /**
     * <p>the right button image on the annotation. must either be a button type constant or url</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    rightButton:null,

    /**
     * <p>a right view that is displayed on the annotation</p>
     * @type Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    rightView:null,

    /**
     * <p>the secondary title of the annotation view</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    subtitle:null,

    /**
     * <p>the key in the locale file to use for the subtitle property</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    subtitleid:null,

    /**
     * <p>the primary title of the annotation view</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    title:null,

    /**
     * <p>the key in the locale file to use for the title property</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    titleid:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.Annotation.animate} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAnimate:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.Annotation.image} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.Annotation.leftButton} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getLeftButton:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.Annotation.leftView} property.</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getLeftView:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.Annotation.pinImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getPinImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.Annotation.pincolor} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getPincolor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.Annotation.rightButton} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getRightButton:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.Annotation.rightView} property.</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getRightView:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.Annotation.subtitle} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getSubtitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.Annotation.subtitleid} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getSubtitleid:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.Annotation.title} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.Annotation.titleid} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getTitleid:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.Annotation.animate} property.</p>
     * @param {Boolean} animate <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setAnimate:function(animate) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.Annotation.image} property.</p>
     * @param {String} image <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setImage:function(image) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.Annotation.leftButton} property.</p>
     * @param {Number|String} leftButton <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setLeftButton:function(leftButton) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.Annotation.leftView} property.</p>
     * @param {Object} leftView <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setLeftView:function(leftView) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.Annotation.pinImage} property.</p>
     * @param {String} pinImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setPinImage:function(pinImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.Annotation.pincolor} property.</p>
     * @param {Number} pincolor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setPincolor:function(pincolor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.Annotation.rightButton} property.</p>
     * @param {Number|String} rightButton <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setRightButton:function(rightButton) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.Annotation.rightView} property.</p>
     * @param {Object} rightView <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setRightView:function(rightView) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.Annotation.subtitle} property.</p>
     * @param {String} subtitle <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setSubtitle:function(subtitle) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.Annotation.subtitleid} property.</p>
     * @param {String} subtitleid <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setSubtitleid:function(subtitleid) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.Annotation.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setTitle:function(title) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.Annotation.titleid} property.</p>
     * @param {String} titleid <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setTitleid:function(titleid) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>With native maps, you can control the mapping location, the type of map, the zoom level 
and you can add custom annotations directly to the map. Use the {@link Titanium.Map.createView}
method to create a map view.</p>
<p>For Android, you will need to 
{@link http://code.google.com/android/maps} 
to use maps in your application. </p>
<p>On iPhone, you cannot call any methods on a map view until it has been added to a view.</p>
 */
function Titanium_Map_View() {
}
Titanium_Map_View.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>boolean is mapping actions should be animated</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animate:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>an array of annotations to add to the map</p>
     * @type Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    annotations:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    center:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    left:null,

    /**
     * <p>the map type constant of either {@link Titanium.Map.STANDARD_TYPE}, {@link Titanium.Map.SATELLITE_TYPE} or {@link Titanium.Map.HYBRID_TYPE}.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    mapType:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    opacity:null,

    /**
     * <p>a dictionary that specifies the following properties specifying the region location to set the map: <code>latitudeDelta</code>, <code>longitudeDelta</code>, <code>latitude</code>, <code>longitude</code>.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    region:null,

    /**
     * <p>boolean to indicate if the map should attempt to fit the map view into the region in the visible view</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    regionFit:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    right:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>boolean to indicate if the map should show the user's current device location as a pin on the map</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    userLocation:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>add a new annotation to the map</p>
     * @param {Dictionary<Titanium_Map_Annotation>|Titanium_Map_Annotation} annotation <p>either a dictionary of properties for the annotation or a {@link Titanium.Map.Annotation} instance.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addAnnotation:function(annotation) {
    },

    /**
     * <p>add one or more new annotation to the map</p>
     * @param {Array<Titanium_Map_Annotation>|Array<Dictionary<Titanium_Map_Annotation>>} annotations <p>an array of either a dictionary of properties for the annotation or a {@link Titanium.Map.Annotation} instance.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addAnnotations:function(annotations) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>add a route. currently only supported on iphone</p>
     * @param {Object} route <p>dictionary with the properties: <code>name</code> route name, <code>points</code> dictionary of values with longitude and latitude keys, <code>color</code> for the line color and <code>width</code> for the line width.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addRoute:function(route) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>cause the annotation to be deselected (hidden).</p>
     * @param {String|Titanium_Map_Annotation} annotation <p>either a string of the annotation title or a {@link Titanium.Map.Annotation} reference.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    deselectAnnotation:function(annotation) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.animate} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimate:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.annotations} property.</p>
     * @returns Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnnotations:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.mapType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getMapType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.region} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getRegion:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.regionFit} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getRegionFit:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.size} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.userLocation} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getUserLocation:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Map.View.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>removes all annotations added to the map</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeAllAnnotations:function() {
    },

    /**
     * <p>remove an existing annotation from the map</p>
     * @param {String|Titanium_Map_Annotation} annotation <p>either a string of the annotation title or a {@link Titanium.Map.Annotation} reference.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeAnnotation:function(annotation) {
    },

    /**
     * <p>remove one or more existing annotations from the map</p>
     * @param {Array<String>|Array<Titanium_Map_Annotation>} annotation <p>an array of either a string of the annotation title or a {@link Titanium.Map.Annotation} reference.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeAnnotations:function(annotation) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>remove a previously added route. currently only supported on iphone</p>
     * @param {Object} route <p>same route object used during addRoute</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeRoute:function(route) {
    },

    /**
     * <p>cause the annotation to be selected (shown).</p>
     * @param {String|Titanium_Map_Annotation} annotation <p>either a string of the annotation title or a {@link Titanium.Map.Annotation} reference.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    selectAnnotation:function(annotation) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.animate} property.</p>
     * @param {Boolean} animate <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setAnimate:function(animate) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.annotations} property.</p>
     * @param {Array<Object>} annotations <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setAnnotations:function(annotations) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>set and center the map location.</p>
     * @param {Object} location <p>a dictionary that specifies the following properties specifying the location to set the map: <code>latitudeDelta</code>, <code>longitudeDelta</code>, <code>latitude</code>, <code>longitude</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLocation:function(location) {
    },

    /**
     * <p>set the type of map (satellite, hybrid, standard)</p>
     * @param {Number} mapType <p>the map type constant of either {@link Titanium.Map.STANDARD_TYPE}, {@link Titanium.Map.SATELLITE_TYPE} or {@link Titanium.Map.HYBRID_TYPE}.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setMapType:function(mapType) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.region} property.</p>
     * @param {Object} region <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setRegion:function(region) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.regionFit} property.</p>
     * @param {Boolean} regionFit <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setRegionFit:function(regionFit) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.userLocation} property.</p>
     * @param {Boolean} userLocation <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setUserLocation:function(userLocation) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Map.View.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(f) {
    },

    /**
     * <p>zoom in or out of the map</p>
     * @param {Number} level <p>zoom level (can be positive or negative)</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    zoom:function(level) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
Titanium.Media = {

    /**
     * <p>audio file format 3GPP-2</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FILEFORMAT_3GP2:null,

    /**
     * <p>audio file format 3GPP</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FILEFORMAT_3GPP:null,

    /**
     * <p>audio file format AIFF</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FILEFORMAT_AIFF:null,

    /**
     * <p>audio file format AMR</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FILEFORMAT_AMR:null,

    /**
     * <p>audio file format Apple Compressed Audio Format (CAF)</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FILEFORMAT_CAF:null,

    /**
     * <p>audio file format MP3</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FILEFORMAT_MP3:null,

    /**
     * <p>audio file format MP4</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FILEFORMAT_MP4:null,

    /**
     * <p>audio file format MP4A</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FILEFORMAT_MP4A:null,

    /**
     * <p>audio file format WAVE</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FILEFORMAT_WAVE:null,

    /**
     * <p>audio format MPEG4 AAC encoding</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FORMAT_AAC:null,

    /**
     * <p>audio format 8-bit aLaw encoding</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FORMAT_ALAW:null,

    /**
     * <p>audio format apple lossless encoding</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FORMAT_APPLE_LOSSLESS:null,

    /**
     * <p>audio format iLBC encoding</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FORMAT_ILBC:null,

    /**
     * <p>audio format Apple IMA4 encoding</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FORMAT_IMA4:null,

    /**
     * <p>audio format Linear 16-bit, PCM encoding</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FORMAT_LINEAR_PCM:null,

    /**
     * <p>audio format 8-bit muLaw encoding</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_FORMAT_ULAW:null,

    /**
     * <p>constant for line type headphones</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_HEADPHONES:null,

    /**
     * <p>constant line type headphones and microphone</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_HEADPHONES_AND_MIC:null,

    /**
     * <p>constant line type headset in/out</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_HEADSET_INOUT:null,

    /**
     * <p>constant line type line out</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_LINEOUT:null,

    /**
     * <p>constant line type microphone</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_MICROPHONE:null,

    /**
     * <p>constant line type muted switch is on</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_MUTED:null,

    /**
     * <p>constant line type receiver and microphone</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_RECEIVER_AND_MIC:null,

    /**
     * <p>For long-duration sounds such as rain, car engine noise, and so on. It is also for 'play along' style applications, such a virtual piano that a user plays over iPod audio.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_SESSION_MODE_AMBIENT:null,

    /**
     * <p>For playing recorded music or other sounds that are central to the successful use of your application. When using this mode, your application audio continues with the Ring/Silent switch set to silent or when the screen locks. This property normally disallows iPod audio to mix with application audio</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_SESSION_MODE_PLAYBACK:null,

    /**
     * <p>Allows recording (input) and playback (output) of audio, such as for a VOIP (voice over IP) application. This category is appropriate for simultaneous recording and playback, and also for applications that record and play back but not simultaneously. If you want to ensure that sounds such as Messages alerts do not play while your application is recording, use  {@link Titanium.Media.AUDIO_SESSION_MODE_RECORD} instead. This category normally disallows iPod audio to mix with application audio.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_SESSION_MODE_PLAY_AND_RECORD:null,

    /**
     * <p>For recording audio; it silences playback audio.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_SESSION_MODE_RECORD:null,

    /**
     * <p>The solo ambient sound category is for long-duration sounds such as rain, car engine noise, and so on. When you use this category, audio from built-in applications, such as the iPod, is silenced. Your audio is silenced when the Ring/Silent switch is set to <code>silent</code> or when the screen locks.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_SESSION_MODE_SOLO_AMBIENT:null,

    /**
     * <p>constant line type speaker</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_SPEAKER:null,

    /**
     * <p>constant line type unavailable</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_UNAVAILABLE:null,

    /**
     * <p>constant line type unknown or not determined</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    AUDIO_UNKNOWN:null,

    /**
     * <p>constant for media device busy error</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    DEVICE_BUSY:null,

    /**
     * <p>media type constant to signify photo</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    MEDIA_TYPE_PHOTO:null,

    /**
     * <p>media type constant to signify video</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    MEDIA_TYPE_VIDEO:null,

    /**
     * <p>The constant for grouping query results by album</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_GROUP_ALBUM:null,

    /**
     * <p>The constant for grouping query results by album artist</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_GROUP_ALBUM_ARTIST:null,

    /**
     * <p>The constant for grouping query results by artist</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_GROUP_ARTIST:null,

    /**
     * <p>The constant for grouping query results by composer</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_GROUP_COMPOSER:null,

    /**
     * <p>The constant for grouping query results by genre</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_GROUP_GENRE:null,

    /**
     * <p>The constant for grouping query results by playlist</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_GROUP_PLAYLIST:null,

    /**
     * <p>The constant for grouping query results by podcast title</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_GROUP_PODCAST_TITLE:null,

    /**
     * <p>The constant for grouping query results by title</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_GROUP_TITLE:null,

    /**
     * <p>media containing any content</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_TYPE_ALL:null,

    /**
     * <p>media containing any audio content</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_TYPE_ANY_AUDIO:null,

    /**
     * <p>media containing audiobook content</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_TYPE_AUDIOBOOK:null,

    /**
     * <p>media containing music content</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_TYPE_MUSIC:null,

    /**
     * <p>media containing podcast content</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_MEDIA_TYPE_PODCAST:null,

    /**
     * <p>constant for repeating all setting</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_REPEAT_ALL:null,

    /**
     * <p>constant for user default repeat setting</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_REPEAT_DEFAULT:null,

    /**
     * <p>constant for no repeat setting</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_REPEAT_NONE:null,

    /**
     * <p>constant for repeating one item setting</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_REPEAT_ONE:null,

    /**
     * <p>constant for shuffling complete albums setting</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_SHUFFLE_ALBUMS:null,

    /**
     * <p>constant for user default shuffle setting</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_SHUFFLE_DEFAULT:null,

    /**
     * <p>constant for no shuffle setting</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_SHUFFLE_NONE:null,

    /**
     * <p>constant for shuffling songs setting</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_SHUFFLE_SONGS:null,

    /**
     * <p>constant for interrupted state</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_STATE_INTERRUPTED:null,

    /**
     * <p>constant for paused state</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_STATE_PAUSED:null,

    /**
     * <p>constant for playing state</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_STATE_PLAYING:null,

    /**
     * <p>constant for backward seek state</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_STATE_SEEK_BACKWARD:null,

    /**
     * <p>constant for forward seek state</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_STATE_SKEEK_FORWARD:null,

    /**
     * <p>constant for stopped state</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    MUSIC_PLAYER_STATE_STOPPED:null,

    /**
     * <p>constant for media no camera error</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    NO_CAMERA:null,

    /**
     * <p>constant for media no video error</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    NO_VIDEO:null,

    /**
     * <p>media type constant to use high-quality video recording. Recorded files are suitable for on-device playback and for wired transfer to the Desktop using Image Capture; they are likely to be too large for transfer using Wi-Fi.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    QUALITY_HIGH:null,

    /**
     * <p>media type constant to use use low-quality video recording. Recorded files can usually be transferred over the cellular network.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    QUALITY_LOW:null,

    /**
     * <p>media type constant to use medium-quality video recording. Recorded files can usually be transferred using Wi-Fi. This is the default video quality setting.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    QUALITY_MEDIUM:null,

    /**
     * <p>constant for unknown media error</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    UNKNOWN_ERROR:null,

    /**
     * <p>constant for video controls default</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_CONTROL_DEFAULT:null,

    /**
     * <p>Controls for an embedded view. Used in conjunction with movieControlStyle property of {@link Titanium.Media.VideoPlayer} in iPhone 3.2+</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_CONTROL_EMBEDDED:null,

    /**
     * <p>Controls for fullscreen. Used in conjunction with movieControlStyle property of {@link Titanium.Media.VideoPlayer} in iPhone 3.2+</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_CONTROL_FULLSCREEN:null,

    /**
     * <p>constant for video controls hidden</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_CONTROL_HIDDEN:null,

    /**
     * <p>No controls. Used in conjunction with movieControlStyle property of {@link Titanium.Media.VideoPlayer} in iPhone 3.2+</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_CONTROL_NONE:null,

    /**
     * <p>constant for video controls volume only</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_CONTROL_VOLUME_ONLY:null,

    /**
     * <p>the video playback ended normally</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_FINISH_REASON_PLAYBACK_ENDED:null,

    /**
     * <p>the video playback ended abnormally</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_FINISH_REASON_PLAYBACK_ERROR:null,

    /**
     * <p>the video playback ended by user action (such as clicking the <code>Done</code> button)</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_FINISH_REASON_USER_EXITED:null,

    /**
     * <p>the current media is playable</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    VIDEO_LOAD_STATE_PLAYABLE:null,

    /**
     * <p>playback will be automatically started in this state when <code>autoplay</code> is true</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    VIDEO_LOAD_STATE_PLAYTHROUGH_OK:null,

    /**
     * <p>playback will be automatically paused in this state, if started</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    VIDEO_LOAD_STATE_STALLED:null,

    /**
     * <p>the current load state is not known</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    VIDEO_LOAD_STATE_UNKNOWN:null,

    /**
     * <p>A audio type of media in the movie returned by {@link Titanium.Media.VideoPlayer} <code>mediaTypes</code> property</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_MEDIA_TYPE_AUDIO:null,

    /**
     * <p>An unknown type of media in the movie returned by {@link Titanium.Media.VideoPlayer} <code>mediaTypes</code> property.</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_MEDIA_TYPE_NONE:null,

    /**
     * <p>A video type of media in the movie returned by {@link Titanium.Media.VideoPlayer} <code>mediaTypes</code> property</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_MEDIA_TYPE_VIDEO:null,

    /**
     * <p>playback has been interrupted</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_PLAYBACK_STATE_INTERRUPTED:null,

    /**
     * <p>playback is paused</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    VIDEO_PLAYBACK_STATE_PAUSED:null,

    /**
     * <p>playback is playing</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    VIDEO_PLAYBACK_STATE_PLAYING:null,

    /**
     * <p>playback is rewinding</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_PLAYBACK_STATE_SEEKING_BACKWARD:null,

    /**
     * <p>playback is seeking forward</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_PLAYBACK_STATE_SEEKING_FORWARD:null,

    /**
     * <p>playback has stopped</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    VIDEO_PLAYBACK_STATE_STOPPED:null,

    /**
     * <p>constant for repeating no videos (IE, the one video will NOT repeat) during playback</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    VIDEO_REPEAT_MODE_NONE:null,

    /**
     * <p>constant for repeating one video (IE, the one video will repeat constantly) during playback</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    VIDEO_REPEAT_MODE_ONE:null,

    /**
     * <p>constant for video aspect where the movie will be scaled until the movie fills the entire screen. Content at the edges of the larger of the two dimensions is clipped so that the other dimension fits the screen exactly. The aspect ratio of the movie is preserved.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_SCALING_ASPECT_FILL:null,

    /**
     * <p>constant for video aspect fit where the movie will be scaled until one dimension fits on the screen exactly. In the other dimension, the region between the edge of the movie and the edge of the screen is filled with a black bar. The aspect ratio of the movie is preserved.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_SCALING_ASPECT_FIT:null,

    /**
     * <p>constant for video aspect where the movie will be scaled until both dimensions fit the screen exactly. The aspect ratio of the movie is not preserved.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_SCALING_MODE_FILL:null,

    /**
     * <p>constant for video scaling where the scaling is turn off. The movie will not be scaled.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_SCALING_NONE:null,

    /**
     * <p>the video source type is a file. Related to the <code>sourceType</code> property of {@link Titanium.Media.VideoPlayer}</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_SOURCE_TYPE_FILE:null,

    /**
     * <p>the video source type is a remote stream. Related to the <code>sourceType</code> property of {@link Titanium.Media.VideoPlayer}</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_SOURCE_TYPE_STREAMING:null,

    /**
     * <p>the video source type is unknown. Related to the <code>sourceType</code> property of {@link Titanium.Media.VideoPlayer}</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_SOURCE_TYPE_UNKNOWN:null,

    /**
     * <p>use the exact time</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_TIME_OPTION_EXACT:null,

    /**
     * <p>use the closest keyframe in the time</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    VIDEO_TIME_OPTION_NEAREST_KEYFRAME:null,

    /**
     * <p>an instance of {@link Titanium.Media.MusicPlayer} representing the app-specific music player.</p>
     * @type Object
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    appMusicPlayer:null,

    /**
     * <p>returns the line type constant for the current line type</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    audioLineType:null,

    /**
     * <p>returns true if the device is playing audio</p>
     * @type Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    audioPlaying:null,

    /**
     * <p>a constant for the audio session mode to be used. Must be set while the audio session is inactive (no sounds are playing, no listeners for audio properties on the Media module, but the iPod may be active).</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    audioSessionMode:null,

    /**
     * <p>return an array of media type constants supported for the camera</p>
     * @type Array<Object>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    availableCameraMediaTypes:null,

    /**
     * <p>return an array of media type constants supported for saving to the photo gallery</p>
     * @type Array<Object>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    availablePhotoGalleryMediaTypes:null,

    /**
     * <p>return an array of media type constants supported for the photo</p>
     * @type Array<Object>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    availablePhotoMediaTypes:null,

    /**
     * <p>return the current average microphone level in dB or -1 if microphone monitoring is disabled</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    averageMicrophonePower:null,

    /**
     * <p>returns true if the device has recording input device available</p>
     * @type Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    canRecord:null,

    /**
     * <p>returns true if the device has camera support</p>
     * @type Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    isCameraSupported:null,

    /**
     * <p>return the current microphone level peak power in dB or -1 if microphone monitoring is disabled</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    peakMicrophonePower:null,

    /**
     * <p>an instance of {@link Titanium.Media.MusicPlayer} representing the system-wide music player.</p>
     * @type Object
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    systemMusicPlayer:null,

    /**
     * <p>the current volume of the playback device</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    volume:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>play a device beep notification</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    beep:function() {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.Media.AudioPlayer}.</p>
     * @param {Dictionary<Titanium_Media_AudioPlayer>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.Media.AudioPlayer}.</p>
     * @returns Titanium_Media_AudioPlayer
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    createAudioPlayer:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.Media.AudioRecorder}.</p>
     * @param {Dictionary<Titanium_Media_AudioRecorder>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.Media.AudioRecorder}.</p>
     * @returns Titanium_Media_AudioRecorder
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    createAudioRecorder:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.Media.Item}.</p>
     * @param {Dictionary<Titanium_Media_Item>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.Media.Item}.</p>
     * @returns Titanium_Media_Item
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    createItem:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.Media.MusicPlayer}.</p>
     * @param {Dictionary<Titanium_Media_MusicPlayer>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.Media.MusicPlayer}.</p>
     * @returns Titanium_Media_MusicPlayer
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    createMusicPlayer:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.Media.Sound}.</p>
     * @param {Dictionary<Titanium_Media_Sound>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.Media.Sound}.</p>
     * @returns Titanium_Media_Sound
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    createSound:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.Media.VideoPlayer}.</p>
     * @param {Dictionary<Titanium_Media_VideoPlayer>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.Media.VideoPlayer}.</p>
     * @returns Titanium_Media_VideoPlayer
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    createVideoPlayer:function(parameters) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.appMusicPlayer} property.</p>
     * @returns Object
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getAppMusicPlayer:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.audioLineType} property.</p>
     * @returns Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getAudioLineType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.audioPlaying} property.</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getAudioPlaying:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.audioSessionMode} property.</p>
     * @returns Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getAudioSessionMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.availableCameraMediaTypes} property.</p>
     * @returns Array<Object>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getAvailableCameraMediaTypes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.availablePhotoGalleryMediaTypes} property.</p>
     * @returns Array<Object>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getAvailablePhotoGalleryMediaTypes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.availablePhotoMediaTypes} property.</p>
     * @returns Array<Object>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getAvailablePhotoMediaTypes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.averageMicrophonePower} property.</p>
     * @returns Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getAverageMicrophonePower:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.canRecord} property.</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getCanRecord:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.isCameraSupported} property.</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getIsCameraSupported:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.peakMicrophonePower} property.</p>
     * @returns Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getPeakMicrophonePower:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.systemMusicPlayer} property.</p>
     * @returns Object
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getSystemMusicPlayer:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.volume} property.</p>
     * @returns Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getVolume:function() {
    },

    /**
     * <p>hide the device camera UI. this must be called after calling <code>showCamera</code> and only when <code>autohide</code> is set to false. this method will cause the media capture device be hidden.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    hideCamera:function() {
    },

    /**
     * <p>hide the music library.  This must be called after calling <code>showMusicLibrary</code> and only when <code>autohide</code> is set to false.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    hideMusicLibrary:function() {
    },

    /**
     * <p>return boolean to indicate if the media type is supported</p>
     * @param {String} media <p>media type as a string of either <code>camera</code>, <code>photo</code> or <code>photogallery</code>.</p>
     * @param {String} type <p>the type of media to check</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    isMediaTypeSupported:function(media, type) {
    },

    /**
     * <p>open the photo gallery picker</p>
     * @param {Object} options <p>pass a dictionary with the following supported keys: <code>success</code> a function that will be called when the camera is completed, <code>error</code> a function that will be called upon receiving an error, <code>cancel</code> a function that will be called if the user presses the cancel button, <code>autohide</code> boolean if the camera should auto hide after the media capture is completed (defaults to true), <code>animated</code> boolean if the dialog should be animated (defaults to true) upon showing and hiding, <code>saveToPhotoGallery</code> boolean if the media should be saved to the photo gallery upon successful capture, <code>allowEditing</code> boolean if the media should be editable after capture in the UI interface, <code>mediaTypes</code> an array of media type constants supported by the capture device UI, <code>showControls</code> boolean to indicate if the built-in UI controls should be displayed, <code>overlay</code> view which is added as an overlay to the UI (on top), <code>transform</code> an transformation matrix that applies to the UI transform. For iPad, <code>popoverView</code> can be provided to position the photo gallery popover a specific view and <code>arrowDirection</code> can be provided to control the type of arrow and position of the gallery.</p>
     * @since 0.1 (iPhone), 0.1 (iPad), 0.1 (Android)
     */
    openPhotoGallery:function(options) {
    },

    /**
     * <p>run a search for music library items matching the specified search predicates.</p>
     * @param {Dictionary<MediaQueryType>} query <p>The query object to extract information from.</p>
     * @returns Array<MediaItemType>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    queryMusicLibrary:function(query) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>save media to photo gallery / camera roll</p>
     * @param {Object} media <p>save the media passed to the cameras photo roll/media gallery. must be one of Blob object or File object or an error will be generated.</p>
     * @param {Object} callbacks <p>pass a dictionary with the following supported keys: <code>success</code> a function that will be called when the save succeeds, and <code>error</code> a function that will be called upon anreceiving an error</p>
     * @since 0.1 (iPhone), 0.1 (iPad), 0.1 (Android)
     */
    saveToPhotoGallery:function(media, callbacks) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.appMusicPlayer} property.</p>
     * @param {Object} appMusicPlayer <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setAppMusicPlayer:function(appMusicPlayer) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.audioLineType} property.</p>
     * @param {Number} audioLineType <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setAudioLineType:function(audioLineType) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.audioPlaying} property.</p>
     * @param {Boolean} audioPlaying <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setAudioPlaying:function(audioPlaying) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.audioSessionMode} property.</p>
     * @param {Number} audioSessionMode <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setAudioSessionMode:function(audioSessionMode) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.availableCameraMediaTypes} property.</p>
     * @param {Array<Object>} availableCameraMediaTypes <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setAvailableCameraMediaTypes:function(availableCameraMediaTypes) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.availablePhotoGalleryMediaTypes} property.</p>
     * @param {Array<Object>} availablePhotoGalleryMediaTypes <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setAvailablePhotoGalleryMediaTypes:function(availablePhotoGalleryMediaTypes) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.availablePhotoMediaTypes} property.</p>
     * @param {Array<Object>} availablePhotoMediaTypes <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setAvailablePhotoMediaTypes:function(availablePhotoMediaTypes) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.averageMicrophonePower} property.</p>
     * @param {Number} averageMicrophonePower <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setAverageMicrophonePower:function(averageMicrophonePower) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.canRecord} property.</p>
     * @param {Boolean} canRecord <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setCanRecord:function(canRecord) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.isCameraSupported} property.</p>
     * @param {Boolean} isCameraSupported <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setIsCameraSupported:function(isCameraSupported) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.peakMicrophonePower} property.</p>
     * @param {Number} peakMicrophonePower <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setPeakMicrophonePower:function(peakMicrophonePower) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.systemMusicPlayer} property.</p>
     * @param {Object} systemMusicPlayer <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setSystemMusicPlayer:function(systemMusicPlayer) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.volume} property.</p>
     * @param {Number} volume <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setVolume:function(volume) {
    },

    /**
     * <p>show the camera</p>
     * @param {Object} options <p>pass a dictionary with the following supported keys: <code>success</code> a function that will be called when the camera is completed, <code>error</code> a function that will be called upon receiving an error, <code>cancel</code> a function that will be called if the user presses the cancel button, <code>autohide</code> boolean if the camera should auto hide after the media capture is completed (defaults to true), <code>animated</code> boolean if the dialog should be animated (defaults to true) upon showing and hiding, <code>saveToPhotoGallery</code> boolean if the media should be saved to the photo gallery upon successful capture, <code>allowEditing</code> boolean if the media should be editable after capture in the UI interface, <code>mediaTypes</code> an array of media type constants supported by the capture device UI, <code>videoMaximumDuration</code> float duration on how long in milliseconds to allow capture before completing, <code>videoQuality</code> constant to indicate the video quality during capture, <code>showControls</code> boolean to indicate if the built-in UI controls should be displayed, <code>overlay</code> view which is added as an overlay to the camera UI (on top), <code>transform</code> an transformation matrix that applies to the camera UI transform.</p>
     * @since 0.1 (iPhone), 0.1 (iPad), 0.1 (Android)
     */
    showCamera:function(options) {
    },

    /**
     * <p>show the music library.</p>
     * @param {Object} options <p>pass a dictionary with the following supported keys: <code>success</code> a function that will be called when the camera is completed, <code>error</code> a function that will be called upon receiving an error, <code>cancel</code> a function that will be called if the user presses the cancel button, <code>autohide</code> boolean if the library listing should auto hide after selection is completed (defaults to true), <code>animated</code> boolean if the dialog should be animated (defaults to true) upon showing and hiding, <code>mediaTypes</code> an array of media type constants defining selectable media (see MUSIC_MEDIA_TYPE_* properties below) as either an array or a bitwise-or single value, <code>allowMultipleSelections</code> boolean whether or not more than one media selection is allowed</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    showMusicLibrary:function(options) {
    },

    /**
     * <p>start the monitoring of microphone sound level</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    startMicrophoneMonitor:function() {
    },

    /**
     * <p>stop the monitoring of microphone sound level</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    stopMicrophoneMonitor:function() {
    },

    /**
     * <p>use the device camera to capture a photo. this must be called after calling <code>showCamera</code> and only when <code>autohide</code> is set to false. this method will cause the media capture device to capture a photo and call the <code>success</code> callback.</p>
     * @since 0.1 (iPhone), 0.1 (iPad), 0.1 (Android)
     */
    takePicture:function() {
    },

    /**
     * <p>take a screen shot of the visible UI on the device</p>
     * @param {Callback<Object>} callback <p>function that will be called upon capture. the event property <code>media</code> will contain an image Blob object of the screenshot</p>
     * @since 0.1 (iPhone), 0.1 (iPad), 0.1 (Android)
     */
    takeScreenshot:function(callback) {
    },

    /**
     * <p>play a device vibration</p>
     * @since 0.1 (iPhone), 0.1 (iPad), 0.1 (Android)
     */
    vibrate:function() {
    }
}

/**
 * platforms: Android
 */
Titanium.Media.Android = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.7.0 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.7.0 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.7.0 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Use the {@link http://developer.android.com/reference/android/media/MediaScannerConnection} to request immediate scan of particular files so that they become available to the appropriate media providers (Gallery, etc.).</p>
     * @param {Array<String>} paths <p>Array of paths to the files you want to be scanned.</p>
     * @param {Array<String>} mimeTypes <p>Array of mime types for the files in the paths parameter.  Can be null, in which case the mime type will be inferred at scan time.</p>
     * @param {Callback<Object>} callback <p>A function that will be called when each file is finished being scanned.  Check the callback argument's "path" and "uri" properties to see the path that was scanned and the resulting content uri.</p>
     * @since 1.7.0 (Android)
     */
    scanMediaFiles:function(paths, mimeTypes, callback) {
    },

    /**
     * <p>Set the system homescreen wallpaper</p>
     * @param {Object} image <p>Image blob such as what can be retrieved via callbacks for {@link Titanium.Media.openPhotoGallery} and {@link Titanium.Media.showCamera}, as well as from the return value of {@link Titanium.Filesystem.File.read}.</p>
     * @param {Boolean} scale <p>Set to true if you want the image to be scaled with respect to the system wallpaper desired width, or false to leave it as-is.</p>
     * @since 1.7.0 (Android)
     */
    setSystemWallpaper:function(image, scale) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_Media_AudioPlayer() {
}
Titanium_Media_AudioPlayer.prototype = {

    /**
     * <p>current playback is in the buffering from the network state</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    STATE_BUFFERING:null,

    /**
     * <p>current playback is in the initialization state</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    STATE_INITIALIZED:null,

    /**
     * <p>current playback is in the paused state</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    STATE_PAUSED:null,

    /**
     * <p>current playback is in the playing state</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    STATE_PLAYING:null,

    /**
     * <p>current playback is in the starting playback state</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    STATE_STARTING:null,

    /**
     * <p>current playback is in the stopped state</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    STATE_STOPPED:null,

    /**
     * <p>current playback is in the stopping state</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    STATE_STOPPING:null,

    /**
     * <p>current playback is in the waiting for audio data from the network state</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    STATE_WAITING_FOR_DATA:null,

    /**
     * <p>current playback is in the waiting for audio data to fill the queue state</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    STATE_WAITING_FOR_QUEUE:null,

    /**
     * <p>boolean to indicate if audio should continue playing even if Activity is paused</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    allowBackground:null,

    /**
     * <p>bit rate of the current playback stream</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    bitRate:null,

    /**
     * <p>the size of the buffer used for streaming, in bytes</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    bufferSize:null,

    /**
     * <p>returns boolean indicating if the playback is idle</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    idle:null,

    /**
     * <p>returns boolean indicating if the playback is paused</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    paused:null,

    /**
     * <p>returns boolean indicating if the playback is streaming audio</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    playing:null,

    /**
     * <p>returns the current playback progress. Will return zero if sampleRate has not yet been detected</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    progress:null,

    /**
     * <p>returns int for the current state of playback</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    state:null,

    /**
     * <p>returns the url for the current playback</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    url:null,

    /**
     * <p>returns boolean indicating if the playback is waiting for audio data from the network</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    waiting:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.AudioPlayer.allowBackground} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getAllowBackground:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.AudioPlayer.bitRate} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getBitRate:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.AudioPlayer.bufferSize} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBufferSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.AudioPlayer.idle} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getIdle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.AudioPlayer.paused} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getPaused:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.AudioPlayer.playing} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getPlaying:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.AudioPlayer.progress} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getProgress:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.AudioPlayer.state} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getState:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.AudioPlayer.url} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getUrl:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.AudioPlayer.waiting} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getWaiting:function() {
    },

    /**
     * <p>pause playback</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    pause:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.AudioPlayer.allowBackground} property.</p>
     * @param {Boolean} allowBackground <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setAllowBackground:function(allowBackground) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.AudioPlayer.bitRate} property.</p>
     * @param {Number} bitRate <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setBitRate:function(bitRate) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.AudioPlayer.bufferSize} property.</p>
     * @param {Number} bufferSize <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBufferSize:function(bufferSize) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.AudioPlayer.idle} property.</p>
     * @param {Boolean} idle <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setIdle:function(idle) {
    },

    /**
     * <p>control the playback of the audio</p>
     * @param {Boolean} paused <p>pass true to pause the current playback temporarily, false to unpause it</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setPaused:function(paused) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.AudioPlayer.playing} property.</p>
     * @param {Boolean} playing <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setPlaying:function(playing) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.AudioPlayer.progress} property.</p>
     * @param {Number} progress <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setProgress:function(progress) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.AudioPlayer.state} property.</p>
     * @param {Number} state <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setState:function(state) {
    },

    /**
     * <p>change the url of the audio playback</p>
     * @param {String} url <p>the new url</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setUrl:function(url) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.AudioPlayer.waiting} property.</p>
     * @param {Boolean} waiting <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setWaiting:function(waiting) {
    },

    /**
     * <p>start playback</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    start:function() {
    },

    /**
     * <p>convert a state into a textual description suitable for display</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    stateDescription:function() {
    },

    /**
     * <p>stop playback</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    stop:function() {
    }
}

/**
 * platforms: iPhone, iPad
 */
function Titanium_Media_AudioRecorder() {
}
Titanium_Media_AudioRecorder.prototype = {

    /**
     * <p>audio compression constant to be used for the recording</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    compression:null,

    /**
     * <p>audio format constant for used for the recording</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    format:null,

    /**
     * <p>readonly property to indicate if paused</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    paused:null,

    /**
     * <p>readonly property to indicate if recording</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    recording:null,

    /**
     * <p>readonly property to indicate if stopped</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    stopped:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.AudioRecorder.compression} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getCompression:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.AudioRecorder.format} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getFormat:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.AudioRecorder.paused} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getPaused:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.AudioRecorder.recording} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getRecording:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.AudioRecorder.stopped} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getStopped:function() {
    },

    /**
     * <p>called to temporarily pause recording</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    pause:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>called to resume audio recording</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    resume:function() {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.AudioRecorder.compression} property.</p>
     * @param {Number} compression <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setCompression:function(compression) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.AudioRecorder.format} property.</p>
     * @param {Number} format <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setFormat:function(format) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.AudioRecorder.paused} property.</p>
     * @param {Boolean} paused <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setPaused:function(paused) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.AudioRecorder.recording} property.</p>
     * @param {Boolean} recording <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setRecording:function(recording) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.AudioRecorder.stopped} property.</p>
     * @param {Boolean} stopped <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setStopped:function(stopped) {
    },

    /**
     * <p>called to start recording audio</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    start:function() {
    },

    /**
     * <p>called to stop recording audio</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    stop:function() {
    }
}

/**
 * platforms: iPhone, iPad
 */
function Titanium_Media_Item() {
}
Titanium_Media_Item.prototype = {

    /**
     * <p>the artist for the album of the item</p>
     * @type String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    albumArtist:null,

    /**
     * <p>the album title of the item</p>
     * @type String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    albumTitle:null,

    /**
     * <p>the number of tracks for the album of the item</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    albumTrackCount:null,

    /**
     * <p>the track number of the item</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    albumTrackNumber:null,

    /**
     * <p>the artist of the item</p>
     * @type String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    artist:null,

    /**
     * <p>a blob object containing the image for the item's artwork, or null if none</p>
     * @type Object
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    artwork:null,

    /**
     * <p>the composer of the item</p>
     * @type String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    composer:null,

    /**
     * <p>the total number of discs of the item</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    discCount:null,

    /**
     * <p>the disc number of the item</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    discNumber:null,

    /**
     * <p>the genre of the item</p>
     * @type String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    genre:null,

    /**
     * <p>true if the item is part of a compilation album</p>
     * @type Boolean
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    isCompilation:null,

    /**
     * <p>the lyrics of the item</p>
     * @type String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    lyrics:null,

    /**
     * <p>the type of the item</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    mediaType:null,

    /**
     * <p>the number of times the item has been played</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    playCount:null,

    /**
     * <p>the length (in seconds) of the item</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    playbackDuration:null,

    /**
     * <p>the title of a podcast item.  Only for media types of {@link Titanium.Media.MUSIC_MEDIA_TYPE_PODCAST}.</p>
     * @type String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    podcastTitle:null,

    /**
     * <p>the rating of the item</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    rating:null,

    /**
     * <p>the number of times the item has been skipped</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    skipCount:null,

    /**
     * <p>the title of the item</p>
     * @type String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    title:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Item.albumArtist} property.</p>
     * @returns String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getAlbumArtist:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Item.albumTitle} property.</p>
     * @returns String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getAlbumTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Item.albumTrackCount} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getAlbumTrackCount:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Item.albumTrackNumber} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getAlbumTrackNumber:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Item.artist} property.</p>
     * @returns String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getArtist:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Item.artwork} property.</p>
     * @returns Object
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getArtwork:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Item.composer} property.</p>
     * @returns String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getComposer:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Item.discCount} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getDiscCount:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Item.discNumber} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getDiscNumber:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Item.genre} property.</p>
     * @returns String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getGenre:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Item.isCompilation} property.</p>
     * @returns Boolean
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getIsCompilation:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Item.lyrics} property.</p>
     * @returns String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getLyrics:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Item.mediaType} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getMediaType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Item.playCount} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getPlayCount:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Item.playbackDuration} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getPlaybackDuration:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Item.podcastTitle} property.</p>
     * @returns String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getPodcastTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Item.rating} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getRating:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Item.skipCount} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getSkipCount:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Item.title} property.</p>
     * @returns String
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getTitle:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Item.albumArtist} property.</p>
     * @param {String} albumArtist <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setAlbumArtist:function(albumArtist) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Item.albumTitle} property.</p>
     * @param {String} albumTitle <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setAlbumTitle:function(albumTitle) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Item.albumTrackCount} property.</p>
     * @param {Number} albumTrackCount <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setAlbumTrackCount:function(albumTrackCount) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Item.albumTrackNumber} property.</p>
     * @param {Number} albumTrackNumber <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setAlbumTrackNumber:function(albumTrackNumber) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Item.artist} property.</p>
     * @param {String} artist <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setArtist:function(artist) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Item.artwork} property.</p>
     * @param {Object} artwork <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setArtwork:function(artwork) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Item.composer} property.</p>
     * @param {String} composer <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setComposer:function(composer) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Item.discCount} property.</p>
     * @param {Number} discCount <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setDiscCount:function(discCount) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Item.discNumber} property.</p>
     * @param {Number} discNumber <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setDiscNumber:function(discNumber) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Item.genre} property.</p>
     * @param {String} genre <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setGenre:function(genre) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Item.isCompilation} property.</p>
     * @param {Boolean} isCompilation <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setIsCompilation:function(isCompilation) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Item.lyrics} property.</p>
     * @param {String} lyrics <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setLyrics:function(lyrics) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Item.mediaType} property.</p>
     * @param {Number} mediaType <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setMediaType:function(mediaType) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Item.playCount} property.</p>
     * @param {Number} playCount <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setPlayCount:function(playCount) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Item.playbackDuration} property.</p>
     * @param {Number} playbackDuration <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setPlaybackDuration:function(playbackDuration) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Item.podcastTitle} property.</p>
     * @param {String} podcastTitle <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setPodcastTitle:function(podcastTitle) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Item.rating} property.</p>
     * @param {Number} rating <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setRating:function(rating) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Item.skipCount} property.</p>
     * @param {Number} skipCount <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setSkipCount:function(skipCount) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Item.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setTitle:function(title) {
    }
}

/**
 * platforms: iPhone, iPad
 */
function Titanium_Media_MusicPlayer() {
}
Titanium_Media_MusicPlayer.prototype = {

    /**
     * <p>the current point in song playback</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    currentPlaybackTime:null,

    /**
     * <p>an Item object which indicates the currently playing media</p>
     * @type Object
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    nowPlaying:null,

    /**
     * <p>the playback state; one of {@link Titanium.Media.MUSIC_PLAYER_STATE_STOPPED}, {@link Titanium.Media.MUSIC_PLAYER_STATE_PLAYING}, {@link Titanium.Media.MUSIC_PLAYER_STATE_PAUSED}, {@link Titanium.Media.MUSIC_PLAYER_STATE_INTERRUPTED}, {@link Titanium.Media.MUSIC_PLAYER_STATE_SKEEK_FORWARD}, {@link Titanium.Media.MUSIC_PLAYER_STATE_SEEK_BACKWARD}</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    playbackState:null,

    /**
     * <p>the repeat setting; one of {@link Titanium.Media.MUSIC_PLAYER_REPEAT_DEFAULT}, {@link Titanium.Media.MUSIC_PLAYER_REPEAT_NONE}, {@link Titanium.Media.MUSIC_PLAYER_REPEAT_ONE}, {@link Titanium.Media.MUSIC_PLAYER_REPEAT_ALL}</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    repeatMode:null,

    /**
     * <p>the shuffle setting; one of {@link Titanium.Media.MUSIC_PLAYER_SHUFFLE_DEFAULT}, {@link Titanium.Media.MUSIC_PLAYER_SHUFFLE_NONE}, {@link Titanium.Media.MUSIC_PLAYER_SHUFFLE_SONGS}, {@link Titanium.Media.MUSIC_PLAYER_SHUFFLE_ALBUMS}</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    shuffleMode:null,

    /**
     * <p>a value between 0.0 and 1.0 indicating the volume level for the music player</p>
     * @type Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    volume:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.MusicPlayer.currentPlaybackTime} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getCurrentPlaybackTime:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.MusicPlayer.nowPlaying} property.</p>
     * @returns Object
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getNowPlaying:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.MusicPlayer.playbackState} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getPlaybackState:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.MusicPlayer.repeatMode} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getRepeatMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.MusicPlayer.shuffleMode} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getShuffleMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.MusicPlayer.volume} property.</p>
     * @returns Number
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    getVolume:function() {
    },

    /**
     * <p>pause playback</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    pause:function() {
    },

    /**
     * <p>begin playback</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    play:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>seek backward in the currently playing media</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    seekBackward:function() {
    },

    /**
     * <p>seek forward in the currently playing media</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    seekForward:function() {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.MusicPlayer.currentPlaybackTime} property.</p>
     * @param {Number} currentPlaybackTime <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setCurrentPlaybackTime:function(currentPlaybackTime) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.MusicPlayer.nowPlaying} property.</p>
     * @param {Object} nowPlaying <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setNowPlaying:function(nowPlaying) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.MusicPlayer.playbackState} property.</p>
     * @param {Number} playbackState <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setPlaybackState:function(playbackState) {
    },

    /**
     * <p>set the media queue</p>
     * @param {Object} queue <p>a queue representation to set the player queue to.  Can be any of: A dictionary with an <code>items</code> key that is an array of {@link Titanium.Media.Item} objects, an array of {@link Titanium.Media.Item} objects, or a single {@link Titanium.Media.Item} object.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setQueue:function(queue) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.MusicPlayer.repeatMode} property.</p>
     * @param {Number} repeatMode <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setRepeatMode:function(repeatMode) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.MusicPlayer.shuffleMode} property.</p>
     * @param {Number} shuffleMode <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setShuffleMode:function(shuffleMode) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.MusicPlayer.volume} property.</p>
     * @param {Number} volume <p>New value for the property.</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    setVolume:function(volume) {
    },

    /**
     * <p>skip to the beginning of the currently playing media</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    skipToBeginning:function() {
    },

    /**
     * <p>skip to the next media in the queue</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    skipToNext:function() {
    },

    /**
     * <p>skip to the previous media in the queue</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    skipToPrevious:function() {
    },

    /**
     * <p>stop playback</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    stop:function() {
    },

    /**
     * <p>end a seek operation</p>
     * @since 1.4.0 (iPhone), 1.4.0 (iPad)
     */
    stopSeeking:function() {
    }
}

/**
 * platforms: Android, iPhone, iPad
 * 
 * @example Simple Example
 * <p>Simple example of playing a WAVE file from the Resources directory.</p>
<pre><code>var player = Ti.Media.createSound({url:"sound.wav"});
player.play();
</code></pre>
 */
function Titanium_Media_Sound() {
}
Titanium_Media_Sound.prototype = {

    /**
     * <p>boolean to indicate if audio should continue playing even if Activity is paused</p>
     * @type Boolean
     * @since 1.3.0 (Android)
     */
    allowBackground:null,

    /**
     * <p>the duration of the audio.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    duration:null,

    /**
     * <p>boolean to indicate if the audio should loop upon completion</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    looping:null,

    /**
     * <p>boolean to indicate if the audio is paused</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    paused:null,

    /**
     * <p>boolean to indicate if the audio is playing</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    playing:null,

    /**
     * <p>the time position of the audio.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    time:null,

    /**
     * <p>url to the audio</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    url:null,

    /**
     * <p>the volume of the audio. this volume only affects the media, not the device audio.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    volume:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Sound.allowBackground} property.</p>
     * @returns Boolean
     * @since 1.3.0 (Android)
     */
    getAllowBackground:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Sound.duration} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getDuration:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Sound.looping} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLooping:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Sound.paused} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getPaused:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Sound.playing} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getPlaying:function() {
    },

    /**
     * <p>return the current time position of the audio</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTime:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.Sound.url} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getUrl:function() {
    },

    /**
     * <p>return the value of the audio</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getVolume:function() {
    },

    /**
     * <p>returns true if the audio will loop</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    isLooping:function() {
    },

    /**
     * <p>returns true if the audio is paused</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    isPaused:function() {
    },

    /**
     * <p>returns true if the audio is playing</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    isPlaying:function() {
    },

    /**
     * <p>temporarily pause the audio. to resume, invoke <code>play</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    pause:function() {
    },

    /**
     * <p>starting playing the source. if paused, will resume.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    play:function() {
    },

    /**
     * <p>release all internal resources. this is typically unnecessary but can be useful if you load a large audio file in <code>app.js</code> and play it only once and you would like to release all releases after your final play to reduce memory.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    release:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>reset the audio to the beginning.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    reset:function() {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Sound.allowBackground} property.</p>
     * @param {Boolean} allowBackground <p>New value for the property.</p>
     * @since 1.3.0 (Android)
     */
    setAllowBackground:function(allowBackground) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Sound.duration} property.</p>
     * @param {Number} duration <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setDuration:function(duration) {
    },

    /**
     * <p>control whether the audio should loop</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLooping:function() {
    },

    /**
     * <p>control whether the audio is paused</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setPaused:function() {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Sound.playing} property.</p>
     * @param {Boolean} playing <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setPlaying:function(playing) {
    },

    /**
     * <p>set the time position of the audio</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTime:function() {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.Sound.url} property.</p>
     * @param {String} url <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setUrl:function(url) {
    },

    /**
     * <p>set the volume of the audio</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setVolume:function() {
    },

    /**
     * <p>stop playing the audio and reset it to the beginning.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    stop:function() {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_Media_VideoPlayer() {
}
Titanium_Media_VideoPlayer.prototype = {

    /**
     * <p>Whether or not the movie can be played on a remote device.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    allowsAirPlay:null,

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>indicates if a movie should automatically start playback when it is likely to finish uninterrupted based on e.g. network conditions. Defaults to true.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    autoplay:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>use url property instead.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    contentURL:null,

    /**
     * <p>the current playback time of the now playing item in seconds.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    currentPlaybackTime:null,

    /**
     * <p>The duration of the movie, or 0.0 if not known.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    duration:null,

    /**
     * <p>The end time of movie playback. Defaults to NaN in iOS, which indicates natural end time of the movie. On Android, this is always the same as <code>duration</code> (the natural end time) and there is no effect if you change the value.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    endPlaybackTime:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    focusable:null,

    /**
     * <p>Determines if the movie is presented in the entire screen (obscuring all other application content). Default is false. In iOS, setting this property to true before the movie player's view is visible will have no effect.  In Android, setting this value to true means that the video will have its own Android Activity rather than being embedded as a view.  In Android, this property is only relevant at creation time (e.g., <code>createVideoPlayer({fullscreen: true})</code>).</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fullscreen:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>The start time of movie playback. Defaults to NaN in iOS and 0 in Android, indicating the natural start time of the movie.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    initialPlaybackTime:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Returns the network load state of the movie player.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    loadState:null,

    /**
     * <p>the media object, either a File or Blob.</p>
     * @type Object
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    media:null,

    /**
     * <p>The style of the playback controls.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    mediaControlStyle:null,

    /**
     * <p>The types of media in the movie, or {@link Titanium.Media.VIDEO_MEDIA_TYPE_NONE} if not known.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    mediaTypes:null,

    /**
     * <p>deprecated in 3.2+ of the iPhone SDK - use <code>mediaControlStyle</code>. Provides the ability to set the control mode of the movie player. Defaults to {@link Titanium.Media.VIDEO_CONTROL_DEFAULT}.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    movieControlMode:null,

    /**
     * <p>returns a dictionary with properties <code>width</code> and <code>height</code>. Returns the natural size of the movie or 0 for both properties if not known or applicable.</p>
     * @type Object
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    naturalSize:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>The currently playable duration of the movie, for progressively downloaded network content. On Android, this is always the same as <code>duration</code>.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    playableDuration:null,

    /**
     * <p>Returns the current playback state of the music player</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    playbackState:null,

    /**
     * <p>Boolean to indicate if the player has started playing.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    playing:null,

    /**
     * <p>Determines how the movie player repeats when reaching the end of playback. Defaults to {@link Titanium.Media.VIDEO_REPEAT_MODE_NONE}.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    repeatMode:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Determines how the content scales to fit the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    scalingMode:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The playback type of the movie. Defaults to {@link Titanium.Media.VIDEO_SOURCE_TYPE_UNKNOWN}. Specifying a playback type before playing the movie can result in faster load times.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    sourceType:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    transform:null,

    /**
     * <p>url of the media to play.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    url:null,

    /**
     * <p>Indicates if the movie player should inherit the application's audio session instead of creating a new session (which would interrupt the application's session). Defaults to true. Setting this property during playback will not take effect until playback is stopped and started again.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    useApplicationAudioSession:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Cancels all pending asynchronous thumbnail requests.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    cancelAllThumbnailImageRequests:function() {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.allowsAirPlay} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAllowsAirPlay:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.anchorPoint} property.</p>
     * @returns Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.autoplay} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getAutoplay:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.backgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.backgroundImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.borderColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.borderRadius} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.borderWidth} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.center} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.contentURL} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getContentURL:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.currentPlaybackTime} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCurrentPlaybackTime:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.duration} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getDuration:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.endPlaybackTime} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getEndPlaybackTime:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.focusable} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.fullscreen} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getFullscreen:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.initialPlaybackTime} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getInitialPlaybackTime:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.layout} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.loadState} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLoadState:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.media} property.</p>
     * @returns Object
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getMedia:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.mediaControlStyle} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getMediaControlStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.mediaTypes} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getMediaTypes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.movieControlMode} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getMovieControlMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.naturalSize} property.</p>
     * @returns Object
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getNaturalSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.opacity} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.playableDuration} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getPlayableDuration:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.playbackState} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getPlaybackState:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.playing} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getPlaying:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.repeatMode} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRepeatMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.scalingMode} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getScalingMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.size} property.</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.sourceType} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getSourceType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.url} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getUrl:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.useApplicationAudioSession} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getUseApplicationAudioSession:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.visible} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Media.VideoPlayer.zIndex} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>pause playing the video.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    pause:function() {
    },

    /**
     * <p>start playing the video</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    play:function() {
    },

    /**
     * <p>release the internal video resources immediately.  this is not usually necessary but can help if you no longer need to use the player after it is used to help converse memory.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    release:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Asynchronously request thumbnails for one or more times, provided as an array of numbers (double). Fires a <code>thumbnail</code> event on completion. Optionally invokes the callback function passed in the method.</p>
     * @param {Array<Object>} times <p>array of doubles for each time to request</p>
     * @param {Number} option <p>either {@link Titanium.Media.VIDEO_TIME_OPTION_NEAREST_KEYFRAME} or {@link Titanium.Media.VIDEO_TIME_OPTION_EXACT}.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    requestThumbnailImagesAtTimes:function(times, option) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.allowsAirPlay} property.</p>
     * @param {Boolean} allowsAirPlay <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAllowsAirPlay:function(allowsAirPlay) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.autoplay} property.</p>
     * @param {Boolean} autoplay <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setAutoplay:function(autoplay) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>A view for customization which is always displayed behind movie content.</p>
     * @param {Object} view <p>view to set</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundView:function(view) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.contentURL} property.</p>
     * @param {String} contentURL <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setContentURL:function(contentURL) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.currentPlaybackTime} property.</p>
     * @param {Number} currentPlaybackTime <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCurrentPlaybackTime:function(currentPlaybackTime) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.duration} property.</p>
     * @param {Number} duration <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setDuration:function(duration) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.endPlaybackTime} property.</p>
     * @param {Number} endPlaybackTime <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setEndPlaybackTime:function(endPlaybackTime) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.fullscreen} property.</p>
     * @param {Boolean} fullscreen <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setFullscreen:function(fullscreen) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.initialPlaybackTime} property.</p>
     * @param {Number} initialPlaybackTime <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setInitialPlaybackTime:function(initialPlaybackTime) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>the a non-url based media to play, either a File or Blob.</p>
     * @param {Object} media <p>media to play</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setMedia:function(media) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.mediaControlStyle} property.</p>
     * @param {Number} mediaControlStyle <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setMediaControlStyle:function(mediaControlStyle) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.mediaTypes} property.</p>
     * @param {Number} mediaTypes <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setMediaTypes:function(mediaTypes) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.movieControlMode} property.</p>
     * @param {Number} movieControlMode <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setMovieControlMode:function(movieControlMode) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.naturalSize} property.</p>
     * @param {Object} naturalSize <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setNaturalSize:function(naturalSize) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.repeatMode} property.</p>
     * @param {Number} repeatMode <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRepeatMode:function(repeatMode) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.scalingMode} property.</p>
     * @param {Number} scalingMode <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setScalingMode:function(scalingMode) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.sourceType} property.</p>
     * @param {Number} sourceType <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setSourceType:function(sourceType) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.url} property.</p>
     * @param {String} url <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setUrl:function(url) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.useApplicationAudioSession} property.</p>
     * @param {Boolean} useApplicationAudioSession <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setUseApplicationAudioSession:function(useApplicationAudioSession) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Media.VideoPlayer.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>stop playing the video</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    stop:function() {
    },

    /**
     * <p>Returns a thumbnail at the given time as a blob.</p>
     * @param {Number} time <p>playback time</p>
     * @param {Number} option <p>either {@link Titanium.Media.VIDEO_TIME_OPTION_NEAREST_KEYFRAME} or {@link Titanium.Media.VIDEO_TIME_OPTION_EXACT}</p>
     * @returns Object
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    thumbnailImageAtTime:function(time, option) {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
Titanium.Module = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Titanium.Network = {

    /**
     * <p>constant value representing the ability for sockets to listen on any locally available network device</p>
     * @type String
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    INADDR_ANY:null,

    /**
     * <p>constant value to indicate that the network is LAN</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    NETWORK_LAN:null,

    /**
     * <p>constant value to indicate that the network is MOBILE</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    NETWORK_MOBILE:null,

    /**
     * <p>constant value to indicate that the network is not available</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    NETWORK_NONE:null,

    /**
     * <p>constant value to indicate that the network is not known</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    NETWORK_UNKNOWN:null,

    /**
     * <p>constant value to indicate that the network is WIFI</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    NETWORK_WIFI:null,

    /**
     * <p>constant value for the push notification alert type</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    NOTIFICATION_TYPE_ALERT:null,

    /**
     * <p>constant value for the push notification badge type</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    NOTIFICATION_TYPE_BADGE:null,

    /**
     * <p>constant value for the push notification sound type</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    NOTIFICATION_TYPE_SOUND:null,

    /**
     * <p>constant value specifying read-only mode for sockets</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    READ_MODE:null,

    /**
     * <p>constant value specifying read-write mode for sockets</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    READ_WRITE_MODE:null,

    /**
     * <p>constant value representing a socket in the CLOSED state</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    SOCKET_CLOSED:null,

    /**
     * <p>constant value representing a socket in the CONNECTED state</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    SOCKET_CONNECTED:null,

    /**
     * <p>constant value representing a socket in the ERROR state</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    SOCKET_ERROR:null,

    /**
     * <p>constant value representing a socket in the INITIALIZED state</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    SOCKET_INITIALIZED:null,

    /**
     * <p>constant value representing a socket in the LISTENING state</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    SOCKET_LISTENING:null,

    /**
     * <p>constant value specifying TLS version 1.0 for SSL</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    TLS_VERSION_1_0:null,

    /**
     * <p>constant value specifying TLS version 1.1 for SSL</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    TLS_VERSION_1_1:null,

    /**
     * <p>constant value specifying TLS version 1.2 for SSL</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    TLS_VERSION_1_2:null,

    /**
     * <p>constant value specifying write-only mode for sockets</p>
     * @type Number
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    WRITE_MODE:null,

    /**
     * <p>User-defined function that is called everytime HTTPClient connects to a remote resource.</p>
     * @type Callback<String>
     * @since 1.8 (Mobile Web)
     */
    httpURLFormatter:null,

    /**
     * <p>the network type value as a constant.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    networkType:null,

    /**
     * <p>the network type name constant. Returns one of <code>NONE</code>, <code>WIFI</code>, <code>LAN</code> or <code>MOBILE</code>.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    networkTypeName:null,

    /**
     * <p>boolean value that indicates if the network is reachable to the Internet either via WIFI or Carrier network</p>
     * @type Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    online:null,

    /**
     * <p>the remote device UUID if the device was registered with the Apple Push Notification Service or null if not set.</p>
     * @type String
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    remoteDeviceUUID:null,

    /**
     * <p>returns an array of network type constants enabled for the application.</p>
     * @type Array<Object>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    remoteNotificationTypes:null,

    /**
     * <p>returns true if remote notifications have been enabled.</p>
     * @type Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    remoteNotificationsEnabled:null,


    /**
     * <p>adds a connectivity listener to listen for network changes. This method has been deprecated in favor of listening for a <code>change</code> event.</p>
     * @param {Callback<Object>} callback <p>callback function to invoke upon network connectivity changes</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    addConnectivityListener:function(callback) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>create and return an instance of {@link Titanium.Network.BonjourBrowser}</p>
     * @param {String} serviceType <p>service to search for, must include the protocol type suffix (._tcp)</p>
     * @param {String} domain <p>the Bonjour service domain to conduct the search in.  Default value is 'local.'</p>
     * @param {Dictionary<Titanium_Network_BonjourBrowser>} parameters <p>A dictionary object of properties defined in {@link Titanium.Network.BonjourBrowser}</p>
     * @returns Titanium_Network_BonjourBrowser
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    createBonjourBrowser:function(serviceType, domain, parameters) {
    },

    /**
     * <p>create and return an instance of {@link Titanium.Network.BonjourService}</p>
     * @param {String} name <p>the name of the service.  Must be a unique identifier for this service type and domain.</p>
     * @param {String} type <p>the type of service.  Must include the protocol identifier (._tcp)</p>
     * @param {String} domain <p>the domain to publish the service in.  Default value is 'local.'</p>
     * @param {Dictionary<Titanium_Network_BonjourService>} parameters <p>A dictionary object with properties defined in {@link Titanium.Network.BonjourService}</p>
     * @returns Titanium_Network_BonjourService
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    createBonjourService:function(name, type, domain, parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.Network.HTTPClient}.</p>
     * @param {Dictionary<Titanium_Network_HTTPClient>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.Network.HTTPClient}.</p>
     * @returns Titanium_Network_HTTPClient
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    createHTTPClient:function(parameters) {
    },

    /**
     * <p>create and return an instance of {@link Titanium.Network.TCPSocket}</p>
     * @param {String} hostName <p>the host name to connect to/listen on</p>
     * @param {Number} port <p>the port for the socket</p>
     * @param {Number} mode <p>the socket's mode; one of {@link Titanium.Network.READ_MODE}, {@link Titanium.Network.WRITE_MODE}, {@link Titanium.Network.READ_WRITE_MODE}</p>
     * @param {Object} parameters <p>A dictionary object with properties defined in {@link Titanium.Network.TCPSocket}</p>
     * @returns Titanium_Network_TCPSocket
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    createTCPSocket:function(hostName, port, mode, parameters) {
    },

    /**
     * <p>decode a URI component part using URI encoding</p>
     * @param {String} value <p>input value to be decoded</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    decodeURIComponent:function(value) {
    },

    /**
     * <p>encode a URI component part using URI encoding</p>
     * @param {String} value <p>input value to be encoded</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    encodeURIComponent:function(value) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.httpURLFormatter} property.</p>
     * @returns Callback<String>
     * @since 1.8 (Mobile Web)
     */
    getHttpURLFormatter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.networkType} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getNetworkType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.networkTypeName} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getNetworkTypeName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.online} property.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getOnline:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.remoteDeviceUUID} property.</p>
     * @returns String
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getRemoteDeviceUUID:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.remoteNotificationTypes} property.</p>
     * @returns Array<Object>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getRemoteNotificationTypes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.remoteNotificationsEnabled} property.</p>
     * @returns Boolean
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getRemoteNotificationsEnabled:function() {
    },

    /**
     * <p>register for push notifications with the Apple Push Notification Service.</p>
     * @param {Object} config <p>dictionary of the following: <code>types</code> is an array of type constants that the application would like to receive, <code>success</code> is a callback function that is called when the push registration is successfully completed, <code>error</code> is a callback function that is called when an error is received during registration and <code>callback</code> is a callback function that is invoked upon receiving a new push notification. This method should be called at application startup.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    registerForPushNotifications:function(config) {
    },

    /**
     * <p>removes a connectivity listener. This method has been deprecated in favor of listening for a <code>change</code> event.</p>
     * @param {Callback<Object>} callback <p>callback function to remove</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    removeConnectivityListener:function(callback) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.httpURLFormatter} property.</p>
     * @param {Callback<String>} httpURLFormatter <p>New value for the property.</p>
     * @since 1.8 (Mobile Web)
     */
    setHttpURLFormatter:function(httpURLFormatter) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.remoteDeviceUUID} property.</p>
     * @param {String} remoteDeviceUUID <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setRemoteDeviceUUID:function(remoteDeviceUUID) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.remoteNotificationTypes} property.</p>
     * @param {Array<Object>} remoteNotificationTypes <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setRemoteNotificationTypes:function(remoteNotificationTypes) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.remoteNotificationsEnabled} property.</p>
     * @param {Boolean} remoteNotificationsEnabled <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setRemoteNotificationsEnabled:function(remoteNotificationsEnabled) {
    }
}

/**
 * platforms: iPhone, iPad
 * @namespace <p>Use the {@link Titanium.Network.createBonjourBrowser} method to create a <code>BonjourBrowser</code> instance.</p>
<p>If your application publishes Bonjour services itself, that service will be discovered 
by the browser if necessary; be prepared to perform a check if you do not want to list 
local services as available.  Bonjour service browsing is an asynchronous operation, 
meaning that you should be extremely careful when caching values from the <code>services</code> 
property returned by the <code>updatedServices</code> event.  In particular, if you maintain a 
local copy of available services and a user tries to connect to one, you should be prepared 
to handle failures gracefully; the next <code>updatedServices</code> event should provide the new 
services list, but you should not rely on it being delivered before user input.  When 
a window which uses Bonjour browsing is closed, if you do not want to continue searching, 
you must call the stop() method.</p>
 */
function Titanium_Network_BonjourBrowser() {
}
Titanium_Network_BonjourBrowser.prototype = {

    /**
     * <p>The domain the browser is searching in</p>
     * @type String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    domain:null,

    /**
     * <p>Whether or not the browser is currently searching</p>
     * @type Boolean
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    isSearching:null,

    /**
     * <p>The type of the service the browser searches for</p>
     * @type String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    serviceType:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.BonjourBrowser.domain} property.</p>
     * @returns String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    getDomain:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.BonjourBrowser.isSearching} property.</p>
     * @returns Boolean
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    getIsSearching:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.BonjourBrowser.serviceType} property.</p>
     * @returns String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    getServiceType:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Conduct a search for Bonjour services matching the type and domain specified during creation</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    search:function() {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.BonjourBrowser.domain} property.</p>
     * @param {String} domain <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    setDomain:function(domain) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.BonjourBrowser.isSearching} property.</p>
     * @param {Boolean} isSearching <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    setIsSearching:function(isSearching) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.BonjourBrowser.serviceType} property.</p>
     * @param {String} serviceType <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    setServiceType:function(serviceType) {
    },

    /**
     * <p>Halt an ongoing search</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    stopSearch:function() {
    }
}

/**
 * platforms: iPhone, iPad
 * @namespace <p>You can obtain a <code>BonjourService</code> instance by calling {@link Titanium.Network.createBonjourService} 
or from the <code>service</code> list from a {@link Titanium.Network.BonjourBrowser}<br />
<code>updatedServices</code> event. <br />
</p>
<p>You can only publish Bonjour services attached to a socket which is currently listening; 
you cannot publish a service for a remotely connected socket.  If you stop the Bonjour 
service and wish to close the socket it uses, it is strongly recommended that you stop 
the service first.  When a window which publishes a Bonjour service is closed, you must 
stop the service if the associated socket is also to be closed, or if it is no longer 
necessary to publish.  Unlike other network operations, Bonjour service resolution and 
publishing is synchronous, so be aware that your code may block while resolution is going 
on.  In particular, you may wish to display UI elements indicating background activity 
before beginning resolution.</p>
 */
function Titanium_Network_BonjourService() {
}
Titanium_Network_BonjourService.prototype = {

    /**
     * <p>the domain of the service</p>
     * @type String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    domain:null,

    /**
     * <p>whether or not the service is local to the device</p>
     * @type Boolean
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    isLocal:null,

    /**
     * <p>the name of the service</p>
     * @type String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    name:null,

    /**
     * <p>the TCPSocket object that is used to connect to the service</p>
     * @type Object
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    socket:null,

    /**
     * <p>the type of the service</p>
     * @type String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    type:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.BonjourService.domain} property.</p>
     * @returns String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    getDomain:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.BonjourService.isLocal} property.</p>
     * @returns Boolean
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    getIsLocal:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.BonjourService.name} property.</p>
     * @returns String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    getName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.BonjourService.socket} property.</p>
     * @returns Object
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    getSocket:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.BonjourService.type} property.</p>
     * @returns String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    getType:function() {
    },

    /**
     * <p>Publish a Bonjour service to the network.  Only works if isLocal is TRUE</p>
     * @param {Object} socket <p>a TCPSocket object to associate with the Bonjour service.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    publish:function(socket) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Resolve a Bonjour service from the network.  Must be done before attempting to access the service's socket information, if a remote service.  You cannot resolve a locally published service.</p>
     * @param {Number} timeout <p>the timeout for service resolution, in seconds.  Optional, default is 120s.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    resolve:function(timeout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.BonjourService.domain} property.</p>
     * @param {String} domain <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    setDomain:function(domain) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.BonjourService.isLocal} property.</p>
     * @param {Boolean} isLocal <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    setIsLocal:function(isLocal) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.BonjourService.name} property.</p>
     * @param {String} name <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    setName:function(name) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.BonjourService.socket} property.</p>
     * @param {Object} socket <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    setSocket:function(socket) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.BonjourService.type} property.</p>
     * @param {String} type <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    setType:function(type) {
    },

    /**
     * <p>Halts publication of a service.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad)
     */
    stop:function() {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Mobile web requires cross-domain origin policies to be configured on the web servers in order for cross-domain connections to work.</p>
 */
function Titanium_Network_HTTPClient() {
}
Titanium_Network_HTTPClient.prototype = {

    /**
     * <p>the DONE readyState constant</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    DONE:null,

    /**
     * <p>the HEADERS_RECEIVED readyState constant</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    HEADERS_RECEIVED:null,

    /**
     * <p>the LOADING readyState constant</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    LOADING:null,

    /**
     * <p>the OPENED readyState constant</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    OPENED:null,

    /**
     * <p>the UNSET readyState constant</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    UNSENT:null,

    /**
     * <p>boolean to indicate that the response was successful</p>
     * @type Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    connected:null,

    /**
     * <p>the connection type, normally either <code>GET</code> or <code>POST</code>.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    connectionType:null,

    /**
     * <p>file to download contents to.  Can only be set after calling open.</p>
     * @type String
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    file:null,

    /**
     * <p>the absolute URL of the request</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    location:null,

    /**
     * <p>set this to a function before calling open to cause the function to be called at regular intervals as the request data is being received. the <code>progress</code> property of the event will contain a value from 0.0-1.0 with the progress.</p>
     * @type Callback<Object>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    ondatastream:null,

    /**
     * <p>set this to a function before calling open to cause the function to be called upon a error response</p>
     * @type Callback<Object>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    onerror:null,

    /**
     * <p>set this to a function before calling open to cause the function to be called upon a successful response</p>
     * @type Callback<Object>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    onload:null,

    /**
     * <p>set this to a function before calling open to cause the function to be called for each readyState change</p>
     * @type Callback<Object>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    onreadystatechange:null,

    /**
     * <p>set this to a function before calling open to cause the function to be called at regular intervals as the request data is being transmitted. the <code>progress</code> property of the event will contain a value from 0.0-1.0 with the progress.</p>
     * @type Callback<Object>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    onsendstream:null,

    /**
     * <p>the readyState value</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    readyState:null,

    /**
     * <p>the response data as a Blob object.</p>
     * @type Titanium_Blob
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    responseData:null,

    /**
     * <p>the response as text or null if an error was received or no data was returned</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    responseText:null,

    /**
     * <p>the response object as an XML DOMDocument object. returns null if the content type returned by the server was not XML or the content could not be parsed</p>
     * @type Titanium_XML_Document
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    responseXML:null,

    /**
     * <p>the response HTTP status code</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    status:null,

    /**
     * <p>timeout is milliseconds when the connection should be aborted</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    timeout:null,

    /**
     * <p>Sets the TLS version to use for handshakes.</p>
     * @type Number
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    tlsVersion:null,

    /**
     * <p>set this to control how SSL certification validation is performed on connection.  defaults to false if in simulator or device testing and true if release for distribution mode.</p>
     * @type Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    validatesSecureCertificate:null,


    /**
     * <p>abort a pending request</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    abort:function() {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.HTTPClient.connected} property.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getConnected:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.HTTPClient.connectionType} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getConnectionType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.HTTPClient.file} property.</p>
     * @returns String
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    getFile:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.HTTPClient.location} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getLocation:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.HTTPClient.ondatastream} property.</p>
     * @returns Callback<Object>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getOndatastream:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.HTTPClient.onerror} property.</p>
     * @returns Callback<Object>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getOnerror:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.HTTPClient.onload} property.</p>
     * @returns Callback<Object>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getOnload:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.HTTPClient.onreadystatechange} property.</p>
     * @returns Callback<Object>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getOnreadystatechange:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.HTTPClient.onsendstream} property.</p>
     * @returns Callback<Object>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getOnsendstream:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.HTTPClient.readyState} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getReadyState:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.HTTPClient.responseData} property.</p>
     * @returns Titanium_Blob
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getResponseData:function() {
    },

    /**
     * <p>return the response header.</p>
     * @param {String} name <p>the header name</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getResponseHeader:function(name) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.HTTPClient.responseText} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getResponseText:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.HTTPClient.responseXML} property.</p>
     * @returns Titanium_XML_Document
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getResponseXML:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.HTTPClient.status} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getStatus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.HTTPClient.timeout} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getTimeout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.HTTPClient.tlsVersion} property.</p>
     * @returns Number
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    getTlsVersion:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.HTTPClient.validatesSecureCertificate} property.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getValidatesSecureCertificate:function() {
    },

    /**
     * <p>open the request and ready the connection</p>
     * @param {String} method <p>the HTTP method</p>
     * @param {String} url <p>the URL for the request</p>
     * @param {Boolean} async <p>optional property to indicate if asynchronous (default) or not</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    open:function(method, url, async) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>send the request (Only async is currently supported)</p>
     * @param {Object} data <p>the data to send in the request. can either be null, dictionary, string, File object or Blob.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    send:function(data) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.HTTPClient.connected} property.</p>
     * @param {Boolean} connected <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setConnected:function(connected) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.HTTPClient.connectionType} property.</p>
     * @param {String} connectionType <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setConnectionType:function(connectionType) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.HTTPClient.file} property.</p>
     * @param {String} file <p>New value for the property.</p>
     * @since 0.1 (iPhone), 0.1 (iPad)
     */
    setFile:function(file) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.HTTPClient.location} property.</p>
     * @param {String} location <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setLocation:function(location) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.HTTPClient.ondatastream} property.</p>
     * @param {Callback<Object>} ondatastream <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setOndatastream:function(ondatastream) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.HTTPClient.onerror} property.</p>
     * @param {Callback<Object>} onerror <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setOnerror:function(onerror) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.HTTPClient.onload} property.</p>
     * @param {Callback<Object>} onload <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setOnload:function(onload) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.HTTPClient.onreadystatechange} property.</p>
     * @param {Callback<Object>} onreadystatechange <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setOnreadystatechange:function(onreadystatechange) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.HTTPClient.onsendstream} property.</p>
     * @param {Callback<Object>} onsendstream <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setOnsendstream:function(onsendstream) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.HTTPClient.readyState} property.</p>
     * @param {Number} readyState <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setReadyState:function(readyState) {
    },

    /**
     * <p>set the request header. Must be called after <code>open</code> but before <code>send</code>.</p>
     * @param {String} name <p>name of the header</p>
     * @param {String} value <p>value of the header. May be null to clearing out a property, such as X-Requested-With</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setRequestHeader:function(name, value) {
    },

    /**
     * <p>set the request timeout</p>
     * @param {Number} timeout <p>the timeout in milliseconds</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setTimeout:function(timeout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.HTTPClient.tlsVersion} property.</p>
     * @param {Number} tlsVersion <p>New value for the property.</p>
     * @since 1.8.0 (iPhone), 1.8.0 (iPad)
     */
    setTlsVersion:function(tlsVersion) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.HTTPClient.validatesSecureCertificate} property.</p>
     * @param {Boolean} validatesSecureCertificate <p>New value for the property.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    setValidatesSecureCertificate:function(validatesSecureCertificate) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
Titanium.Network.Socket = {

    /**
     * <p>state representing the closed state of a socket</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    CLOSED:null,

    /**
     * <p>state representing the connected state of a socket</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    CONNECTED:null,

    /**
     * <p>state representing the error state of a socket</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    ERROR:null,

    /**
     * <p>state representing the initialized state of a socket</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    INITIALIZED:null,

    /**
     * <p>state representing the listening state of a socket</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    LISTENING:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>returns new TCP socket object, takes object containing properties list defined in <code>Titanium.Network.Socket.TCP</code>.  Some properties are only needed based on whether the socket will be a connecting socket or a listening socket.</p>
     * @param {Object} params <p>creation parameters</p>
     * @returns Titanium_Network_Socket_TCP New TCP socket.
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    createTCP:function(params) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_Network_Socket_TCP() {
}
Titanium_Network_Socket_TCP.prototype = {

    /**
     * <p>The callback to be fired when a listener accepts a connection</p>
     * @type Callback<AcceptedCallbackArgs>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    accepted:null,

    /**
     * <p>The callback to be fired after the socket enters the "connected" state. Only invoked following a successful connect() call</p>
     * @type Callback<ConnectedCallbackArgs>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    connected:null,

    /**
     * <p>The callback to be fired after the socket enters the ERROR state</p>
     * @type Callback<ErrorCallbackArgs>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    error:null,

    /**
     * <p>The host to connect to or listen on. Cannot be modified when not in the INITIALIZED state. Supports both IPv4 and IPv6</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    host:null,

    /**
     * <p>Max number of pending incoming connections to be allowed when listen() is called. Any incoming connections received while the max number of pending connections has been reached will be rejected.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    listenQueueSize:null,

    /**
     * <p>The port to connect to or listen on. Cannot be modified when not in the INITIALIZED state</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    port:null,

    /**
     * <p>current state of the socket</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    state:null,

    /**
     * <p>The timeout for connect() and all I/O write() operations. Cannot be modified when not in the INITIALIZED state</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    timeout:null,


    /**
     * <p>Tells a LISTENING socket to accept a connection request at the top of a listener's request queue when one becomes available. Takes an argument, a box object which assigns callbacks to the created socket. Note that the connected callback is not called (the socket does not "transition to" the CONNECTED state - it's created in the CONNECTED state) on the newly created socket.  The accepted callback is called when a new connection is accepted as a result of calling accept().  If the socket is already flagged to accept the next connection, the existing accept options will be update to use the newly specified options object. Throws an exception if the socket is not in a LISTENING state</p>
     * @param {Dictionary<AcceptDict>} options <p>options that contain callbacks to be set on next accepted socket</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    accept:function(options) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Closes a socket. Throws exception if the socket is not in a CONNECTED or LISTENING state. Blocking</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    close:function() {
    },

    /**
     * <p>Attempts to connect the socket to its host/port. Throws exception if the socket is in a CONNECTED or LISTENING state. Throws exception if a valid host and port has not been set on the proxy. Nonblocking; connection attempts are asynchronous</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    connect:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.Socket.TCP.accepted} property.</p>
     * @returns Callback<AcceptedCallbackArgs>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getAccepted:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.Socket.TCP.connected} property.</p>
     * @returns Callback<ConnectedCallbackArgs>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getConnected:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.Socket.TCP.error} property.</p>
     * @returns Callback<ErrorCallbackArgs>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getError:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.Socket.TCP.host} property.</p>
     * @returns String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getHost:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.Socket.TCP.listenQueueSize} property.</p>
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getListenQueueSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.Socket.TCP.port} property.</p>
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getPort:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.Socket.TCP.state} property.</p>
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getState:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.Socket.TCP.timeout} property.</p>
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    getTimeout:function() {
    },

    /**
     * <p>Attempts to start listening on the socket's host/port. listen() call will attempt to listen on the specified host and/or port property for the socket if they are set. This function blocks execution and throws an exception on error (and sets the socket state to ERROR) but does not fire the error callback in this event. Throws exception if the socket is in a LISTENING or CONNECTED state</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    listen:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.Socket.TCP.accepted} property.</p>
     * @param {Callback<AcceptedCallbackArgs>} accepted <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    setAccepted:function(accepted) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.Socket.TCP.connected} property.</p>
     * @param {Callback<ConnectedCallbackArgs>} connected <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    setConnected:function(connected) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.Socket.TCP.error} property.</p>
     * @param {Callback<ErrorCallbackArgs>} error <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    setError:function(error) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.Socket.TCP.host} property.</p>
     * @param {String} host <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    setHost:function(host) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.Socket.TCP.listenQueueSize} property.</p>
     * @param {Number} listenQueueSize <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    setListenQueueSize:function(listenQueueSize) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.Socket.TCP.port} property.</p>
     * @param {Number} port <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    setPort:function(port) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.Socket.TCP.timeout} property.</p>
     * @param {Number} timeout <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    setTimeout:function(timeout) {
    }
}

/**
 * platforms: iPhone, iPad, Mobile Web
 * @namespace <p>Sockets are nontrivial; it is recommended that anyone using them be familiar with the basics of BSD sockets.  All sockets use TCP connections, and are asynchronous for read operations, so your program should be ready to receive 'read' events at any point.  Socket references cannot be transferred to socket objects, and vice-versa - socket references are an internal mechanism which is used only to determine which sockets to send data to and read data from.  For listening sockets, it is highly recommended that you use the {@link Titanium.Network.INADDR_ANY} constant as the host name.  If a window containing a socket is closed, the socket MUST be closed also unless you intend to continue to receive data, otherwise the socket will consume resources (and potentially cause conflicts with opening the window again, if a listener) until the program is restarted.  Be aware of the differences between the listen() and connect() functions; attempting to use one when you mean the other may result in errors, unpredictable behavior, or both.</p>
 */
function Titanium_Network_TCPSocket() {
}
Titanium_Network_TCPSocket.prototype = {

    /**
     * <p>the host name to connect to.  Must be {@link Titanium.Network.INADDR_ANY} or an identifier for the local device in order to listen</p>
     * @type String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad), 1.8 (Mobile Web)
     */
    hostName:null,

    /**
     * <p>whether or not the socket is valid</p>
     * @type Boolean
     * @since 1.2.0 (iPhone), 1.2.0 (iPad), 1.8 (Mobile Web)
     */
    isValid:null,

    /**
     * <p>the socket's mode</p>
     * @type Number
     * @since 1.2.0 (iPhone), 1.2.0 (iPad), 1.8 (Mobile Web)
     */
    mode:null,

    /**
     * <p>the port to connect/listen on</p>
     * @type Number
     * @since 1.2.0 (iPhone), 1.2.0 (iPad), 1.8 (Mobile Web)
     */
    port:null,

    /**
     * <p>strip terminating null character when sending string data; default is false</p>
     * @type Boolean
     * @since 1.2.0 (iPhone), 1.2.0 (iPad), 1.8 (Mobile Web)
     */
    stripTerminator:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>close the socket</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad), 1.8 (Mobile Web)
     */
    close:function() {
    },

    /**
     * <p>connect the scocket to a TCP server</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad), 1.8 (Mobile Web)
     */
    connect:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.TCPSocket.hostName} property.</p>
     * @returns String
     * @since 1.2.0 (iPhone), 1.2.0 (iPad), 1.8 (Mobile Web)
     */
    getHostName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.TCPSocket.isValid} property.</p>
     * @returns Boolean
     * @since 1.2.0 (iPhone), 1.2.0 (iPad), 1.8 (Mobile Web)
     */
    getIsValid:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.TCPSocket.mode} property.</p>
     * @returns Number
     * @since 1.2.0 (iPhone), 1.2.0 (iPad), 1.8 (Mobile Web)
     */
    getMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.TCPSocket.port} property.</p>
     * @returns Number
     * @since 1.2.0 (iPhone), 1.2.0 (iPad), 1.8 (Mobile Web)
     */
    getPort:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Network.TCPSocket.stripTerminator} property.</p>
     * @returns Boolean
     * @since 1.2.0 (iPhone), 1.2.0 (iPad), 1.8 (Mobile Web)
     */
    getStripTerminator:function() {
    },

    /**
     * <p>set up the socket to receive connections</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad), 1.8 (Mobile Web)
     */
    listen:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.TCPSocket.hostName} property.</p>
     * @param {String} hostName <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad), 1.8 (Mobile Web)
     */
    setHostName:function(hostName) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.TCPSocket.isValid} property.</p>
     * @param {Boolean} isValid <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad), 1.8 (Mobile Web)
     */
    setIsValid:function(isValid) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.TCPSocket.mode} property.</p>
     * @param {Number} mode <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad), 1.8 (Mobile Web)
     */
    setMode:function(mode) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.TCPSocket.port} property.</p>
     * @param {Number} port <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad), 1.8 (Mobile Web)
     */
    setPort:function(port) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Network.TCPSocket.stripTerminator} property.</p>
     * @param {Boolean} stripTerminator <p>New value for the property.</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad), 1.8 (Mobile Web)
     */
    setStripTerminator:function(stripTerminator) {
    },

    /**
     * <p>write data to the socket, if the mode is WRITE_MODE or READ_WRITE_MODE</p>
     * @param {Object|String} data <p>either a string or blob object representing the data to be transferred</p>
     * @param {Number} sendTo <p>the socket reference to send the data to.  Default is to send to all connected sockets</p>
     * @since 1.2.0 (iPhone), 1.2.0 (iPad), 1.8 (Mobile Web)
     */
    write:function(data, sendTo) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Titanium.Platform = {

    /**
     * <p>the device is plugged in and currently being charged</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    BATTERY_STATE_CHARGING:null,

    /**
     * <p>the battery is fully charged</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    BATTERY_STATE_FULL:null,

    /**
     * <p>the battery state is unknown or not monitoring is not enabled</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    BATTERY_STATE_UNKNOWN:null,

    /**
     * <p>the device is unplugged</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    BATTERY_STATE_UNPLUGGED:null,

    /**
     * <p>the ip address that the device reports (only applicable on WIFI network)</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    address:null,

    /**
     * <p>the processor architecture that the device reports</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    architecture:null,

    /**
     * <p>return the amount of memory available on the device in bytes</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    availableMemory:null,

    /**
     * <p>the current device battery level. this property is only accessible if <code>batteryMonitoring</code> is enabled. on iPhone, this level only changes at 5% intervals.</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    batteryLevel:null,

    /**
     * <p>boolean to indicate if battery monitoring is enabled</p>
     * @type Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    batteryMonitoring:null,

    /**
     * <p>constant that represents the state of the battery. this property is only accessible if <code>batteryMonitoring</code> is enabled</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    batteryState:null,

    /**
     * <p>return the DisplayCaps object for platform</p>
     * @type Titanium_Platform_DisplayCaps
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    displayCaps:null,

    /**
     * <p>the unique id of the device</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    id:null,

    /**
     * <p>the primary language of the device that the user has enabled</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    locale:null,

    /**
     * <p>this property will return a unique identifier for the device</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    macaddress:null,

    /**
     * <p>the model of the phone that the device reports</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    model:null,

    /**
     * <p>the name of the platform returned by the device</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    name:null,

    /**
     * <p>the network mask that the device reports (only applicable on WIFI network)</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    netmask:null,

    /**
     * <p>the shortname of the operating system. for example, on an iPhone, will return <code>iphone</code>, iPad will return <code>ipad</code>, Android will return <code>android</code> and Mobile Web will return <code>mobileweb</code>.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    osname:null,

    /**
     * <p>the OS architecture, such as 32 bit</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    ostype:null,

    /**
     * <p>the number of processors the device reports</p>
     * @type Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    processorCount:null,

    /**
     * <p>Short name for the JavaScript runtime in use.</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    runtime:null,

    /**
     * <p>the username of the device, if set</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    username:null,

    /**
     * <p>the version of the platform returned by the device</p>
     * @type String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    version:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>returns whether or not a system URL can be opened.</p>
     * @param {String} url <p>the url to check</p>
     * @since 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    canOpenURL:function(url) {
    },

    /**
     * <p>create a globally unique identifier</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    createUUID:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.address} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getAddress:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.architecture} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getArchitecture:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.availableMemory} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getAvailableMemory:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.batteryLevel} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getBatteryLevel:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.batteryMonitoring} property.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getBatteryMonitoring:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.batteryState} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getBatteryState:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.displayCaps} property.</p>
     * @returns Titanium_Platform_DisplayCaps
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getDisplayCaps:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.id} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getId:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.locale} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getLocale:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.macaddress} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getMacaddress:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.model} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    getModel:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.name} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.netmask} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getNetmask:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.osname} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getOsname:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.ostype} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getOstype:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.processorCount} property.</p>
     * @returns Number
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getProcessorCount:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.runtime} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getRuntime:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.username} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getUsername:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.version} property.</p>
     * @returns String
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    getVersion:function() {
    },

    /**
     * <p>Whether device settings are set to show times in 24-hour format.</p>
     * @returns Boolean
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad)
     */
    is24HourTimeFormat:function() {
    },

    /**
     * <p>open a URL in the system default manner</p>
     * @param {String} url <p>the url to open</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    openURL:function(url) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>On iPhone, the <code>density</code> property will return <code>high</code> for retina devices and <code>medium</code> otherwise, the <code>dpi</code> property will return <code>160</code>. For iPad, the <code>density</code> property will return <code>medium</code> and the <code>dpi</code> property will return <code>130</code>.  For Android, these values are device specific.</p>
 */
function Titanium_Platform_DisplayCaps() {
}
Titanium_Platform_DisplayCaps.prototype = {

    /**
     * <p>returns the density property of the display device.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    density:null,

    /**
     * <p>the DPI of the display device.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    dpi:null,

    /**
     * <p>the height of the device screen</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    platformHeight:null,

    /**
     * <p>the width of the device screen</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    platformWidth:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.DisplayCaps.density} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getDensity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.DisplayCaps.dpi} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getDpi:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.DisplayCaps.platformHeight} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPlatformHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.Platform.DisplayCaps.platformWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPlatformWidth:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Platform.DisplayCaps.density} property.</p>
     * @param {String} density <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setDensity:function(density) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Platform.DisplayCaps.dpi} property.</p>
     * @param {Number} dpi <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setDpi:function(dpi) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Platform.DisplayCaps.platformHeight} property.</p>
     * @param {Number} platformHeight <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setPlatformHeight:function(platformHeight) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.Platform.DisplayCaps.platformWidth} property.</p>
     * @param {Number} platformWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setPlatformWidth:function(platformWidth) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
function Titanium_Proxy() {
}
Titanium_Proxy.prototype = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.1 (Android), 0.1 (iPhone), 0.1 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
Titanium.Stream = {

    /**
     * <p>append mode value.</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    MODE_APPEND:null,

    /**
     * <p>read only mode value</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    MODE_READ:null,

    /**
     * <p>write mode value</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    MODE_WRITE:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Creates stream from specified container.  Returns <code>Titanium.BufferStream</code> or <code>Titanium.BlobStream</code> depending on whether a Buffer or Blob is provided as the 'source' property in params.  Write and append mode only applies to Buffer as Blob is read only.</p>
     * @param {CreateStreamArgs} params <p>creation arguments</p>
     * @returns Titanium_IOStream
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    createStream:function(params) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Pumps data from input stream to handler method</p>
     * @param {Titanium_IOStream} inputStream <p>Stream to pump from</p>
     * @param {Callback<PumpCallbackArgs>} handler <p>handler method that will receive the pumped data</p>
     * @param {Number} maxChunkSize <p>max size of data to pump from inputStream to the handler method at once</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    pump:function(inputStream, handler, maxChunkSize) {
    },

    /**
     * <p>Variant of pump that allows for setting the async mode</p>
     * @param {Titanium_IOStream} inputStream <p>Stream to pump from</p>
     * @param {Callback<PumpCallbackArgs>} handler <p>handler method that will receive the pumped data</p>
     * @param {Number} maxChunkSize <p>max size of data to pump from inputStream to the handler method at once</p>
     * @param {Boolean} isAsync <p>true is pump operation should be async, false is not</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    pump:function(inputStream, handler, maxChunkSize, isAsync) {
    },

    /**
     * <p>Async version of read on <code>Titanium.IOStream</code></p>
     * @param {Titanium_IOStream} sourceStream <p>Stream to read from</p>
     * @param {Titanium_Buffer} buffer <p>Buffer to read into</p>
     * @param {Callback<ReadCallbackArgs>} resultsCallback <p>called with result of the read operation</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    read:function(sourceStream, buffer, resultsCallback) {
    },

    /**
     * <p>Async version of read on <code>Titanium.IOStream</code> that takes offset and length</p>
     * @param {Titanium_IOStream} sourceStream <p>Stream to read from</p>
     * @param {Titanium_Buffer} buffer <p>Buffer to read into</p>
     * @param {Number} offset <p>offset to start reading buffer data from</p>
     * @param {Number} length <p>length of data to read from buffer</p>
     * @param {Callback<ReadCallbackArgs>} resultsCallback <p>called with result of the read operation</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    read:function(sourceStream, buffer, offset, length, resultsCallback) {
    },

    /**
     * <p>reads all data from <code>Titanium.IOStream</code></p>
     * @param {Titanium_IOStream} sourceStream <p>Stream to read from</p>
     * @returns Titanium_Buffer
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    readAll:function(sourceStream) {
    },

    /**
     * <p>Async version of readAll</p>
     * @param {Titanium_IOStream} sourceStream <p>Stream to read from</p>
     * @param {Titanium_Buffer} buffer <p>Buffer to read into</p>
     * @param {Callback<ReadCallbackArgs>} resultsCallback <p>called with result of the read operation</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    readAll:function(sourceStream, buffer, resultsCallback) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Async version of write on <code>Titanium.IOStream</code></p>
     * @param {Titanium_IOStream} outputStream <p>Stream to write to</p>
     * @param {Titanium_Buffer} buffer <p>Buffer to write from</p>
     * @param {Callback<WriteCallbackArgs>} resultsCallback <p>called with result of the write operation</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    write:function(outputStream, buffer, resultsCallback) {
    },

    /**
     * <p>Async version of write on <code>Titanium.IOStream</code> that takes offset and length</p>
     * @param {Titanium_IOStream} outputStream <p>Stream to write to</p>
     * @param {Titanium_Buffer} buffer <p>Buffer to write from</p>
     * @param {Number} offset <p>offset to start writing buffer data from</p>
     * @param {Number} length <p>length of data to write from buffer</p>
     * @param {Callback<WriteCallbackArgs>} resultsCallback <p>called with result of the write operation</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    write:function(outputStream, buffer, offset, length, resultsCallback) {
    },

    /**
     * <p>Writes all data from input stream to output stream</p>
     * @param {Titanium_IOStream} inputStream <p>Stream to read from</p>
     * @param {Titanium_IOStream} outputStream <p>Stream to write to</p>
     * @param {Number} maxChunkSize <p>max size of data to write from inputStream to ouputStream at once</p>
     * @returns Number Number of bytes written
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    writeStream:function(inputStream, outputStream, maxChunkSize) {
    },

    /**
     * <p>Async version of writeStream</p>
     * @param {Titanium_IOStream} inputStream <p>Stream to read from</p>
     * @param {Titanium_IOStream} outputStream <p>Stream to write to</p>
     * @param {Number} maxChunkSize <p>max size of data to write from inputStream to ouputStream at once</p>
     * @param {Callback<WriteStreamCallbackArgs>} resultsCallback <p>called with result of the writeStream operation</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad)
     */
    writeStream:function(inputStream, outputStream, maxChunkSize, resultsCallback) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>The UI module is responsible for native user-interface components and interaction inside 
Titanium.  The goal of the UI module is to provide a native experience along with native 
performance by compiling Javascript code into their native counterparts as part of the 
build process.</p>
<h4>Design</h4>
<p>The UI module is broken down into 3 major area:</p>
<ul>
<li>
<p><strong>Views</strong> - {@link Titanium.UI.View} are containers that
host visual elements such as controls or other views.  Views can have
their properties customized, such as their border color and radius, can
fire events such as swipe events or touches, and can optionally contain a
hierarchy or other views as children. In Titanium, most views are
specialized to perform both a visual function and set of interaction
behaviors such as {@link Titanium.UI.TableView} or
{@link Titanium.UI.CoverFlowView}.  Views are always
named with the suffix <code>View</code>.</p>
</li>
<li>
<p><strong>Controls</strong> - controls, or sometimes referred as widgets, are visual
elements such as {@link Titanium.UI.Slider},
{@link Titanium.UI.Button} and
{@link Titanium.UI.Switch}. They provide a visual element
which has a defined behavior and typical have special configuration and
special events.  Controls themselves are views and also inherit a views
properties, functions and events.</p>
</li>
<li>
<p><strong>Windows</strong> - {@link Titanium.UI.Window} are typically
top-level visual constructs that are the main part of your interface. An
application will always have at least one window and windows can take
different shapes and sizes, can have display and interaction properties
such as fullscreen or modal and can be customized, such as changing their
opacity or background color. Windows themselves are views and also inherit
a views properties, functions and events. There are a few specialization
of Windows such as a {@link Titanium.UI.TabGroup} which
offer additional behavior beyond the basic Window.</p>
</li>
</ul>
<p>Titanium uses the <a href="http://en.wikipedia.org/wiki/Factory_method_pattern">Factory
Pattern</a> for
constructing objects and a general naming pattern for APIs.  For example,
to construct a {@link Titanium.UI.AlertDialog}, you
call the method {@link Titanium.UI.createAlertDialog}.  To create a
{@link Titanium.UI.TextArea}, you call the method
{@link Titanium.UI.createTextArea}.  Once an object is created, it will be
available until it goes out of scope.</p>
<h4>Optimizations</h4>
<p>UI objects are optimized by Titanium to not be realized into the drawing
context and placed into the device UI surface until needed.  That means that
you can create UI objects, set their properties and add them to their
hierarchy without much worry about memory or performance.  When the native
drawing surface needs to render a specific view or control, Titanium will
automatically create the view as needed.  Additionally, Titanium is
optimized to also release memory once the view is no longer needed, on
screen or in low memory situations.  However, it's a good idea to help
Titanium along in certain cases where you are no longer using objects.  For
example, you should call <code>close</code> on a
{@link Titanium.UI.Window} instance when you are no longer
using it.  You can safely call <code>open</code> on the window again to re-open it.</p>
<h4>Global Context and Threading</h4>
<p>Be careful with the objects that are created in <code>app.js</code> but only used once.
Since the <code>app.js</code> context is global and generally is not garbage collected
until the application exits, you should think about the design of your
application as it relates to this fact.</p>
<p>{@link Titanium.UI.Window} objects that are opened up with the
<code>url</code> property to another JavaScript file provide a nice way to decompose
your application into smaller units. </p>
<p>Additionally, Window objects created with a <code>url</code> value run in a
separate JavaScript context and thread. While all UI processing is done on
the main UI thread, other processing inside a Window or the <code>app.js</code> that
does not have UI interaction will run in its own thread.</p>
<p>The other benefit of using the <code>url</code> property is that when the
window is closed, resources allocated in the window's context can be
immediately cleaned up, saving resources such as memory and CPU.</p>
<p>For more information, see the sections "Sub-contexts" and "Passing Data Between Contexts"
on the {@link Titanium.UI.Window} reference page.</p>
<h4>Portability</h4>
<p>Titanium components are designed to be portable across as many platforms as
it supports.  However, there are cases where a device either does not
support a specific feature or capability or where it support additional
functionality.  For cases where the device OS supports capabilities that
other platforms do not, we attempt to place those capabilities in a separate
namespace, such as {@link Titanium.UI.iPhone}.
However, in cases where the control is in a common namespace and support
additional features, we continue to place that functionality directly on the
object.</p>
 */
Titanium.UI = {

    /**
     * <p>Use the animation curve constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    ANIMATION_CURVE_EASE_IN:null,

    /**
     * <p>Use the animation curve constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    ANIMATION_CURVE_EASE_IN_OUT:null,

    /**
     * <p>Use the animation curve constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    ANIMATION_CURVE_EASE_OUT:null,

    /**
     * <p>Use the animation curve constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    ANIMATION_CURVE_LINEAR:null,

    /**
     * <p>Use the text auto-detection constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    AUTODETECT_ADDRESS:null,

    /**
     * <p>Use the text auto-detection constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    AUTODETECT_ALL:null,

    /**
     * <p>Use the text auto-detection constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    AUTODETECT_CALENDAR:null,

    /**
     * <p>Use the text auto-detection constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    AUTODETECT_LINK:null,

    /**
     * <p>Use the text auto-detection constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    AUTODETECT_NONE:null,

    /**
     * <p>Use the text auto-detection constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    AUTODETECT_PHONE:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_CLEAR:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_COLOR:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_COLOR_BURN:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_COLOR_DODGE:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_COPY:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_DARKEN:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_DESTINATION_ATOP:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_DESTINATION_IN:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_DESTINATION_OUT:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_DESTINATION_OVER:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_DIFFERENCE:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_EXCLUSION:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_HARD_LIGHT:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_HUE:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_LIGHTEN:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_LUMINOSITY:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_MULTIPLY:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_NORMAL:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_OVERLAY:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_PLUS_DARKER:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_PLUS_LIGHTER:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_SATURATION:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_SCREEN:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_SOFT_LIGHT:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_SOURCE_ATOP:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_SOURCE_IN:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_SOURCE_OUT:null,

    /**
     * <p>Use the blend mode constants in {@link Titanium.UI.iOS} instead.</p>
     * @type Number
     * @since 0.4 (iPhone), 0.4 (iPad)
     */
    BLEND_MODE_XOR:null,

    /**
     * <p>Constant value for face-down orientation.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    FACE_DOWN:null,

    /**
     * <p>Constant value for face-up orientation.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    FACE_UP:null,

    /**
     * <p>Use a bezel-style border on the input field.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    INPUT_BORDERSTYLE_BEZEL:null,

    /**
     * <p>Use a simple line border on the input field.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    INPUT_BORDERSTYLE_LINE:null,

    /**
     * <p>Use no border on the input field.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    INPUT_BORDERSTYLE_NONE:null,

    /**
     * <p>Use a rounded-rectangle border on the input field.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    INPUT_BORDERSTYLE_ROUNDED:null,

    /**
     * <p>Always show buttons on the input field.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    INPUT_BUTTONMODE_ALWAYS:null,

    /**
     * <p>Never show buttons on the input field.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    INPUT_BUTTONMODE_NEVER:null,

    /**
     * <p>Show buttons on the input field when it loses focus.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    INPUT_BUTTONMODE_ONBLUR:null,

    /**
     * <p>Show buttons on the input field when it gains focus.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    INPUT_BUTTONMODE_ONFOCUS:null,

    /**
     * <p>Use a keyboard appearance suitable for entering text on an alert.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    KEYBOARD_APPEARANCE_ALERT:null,

    /**
     * <p>Use the default keyboard appearance.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    KEYBOARD_APPEARANCE_DEFAULT:null,

    /**
     * <p>Use an ASCII keyboard.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    KEYBOARD_ASCII:null,

    /**
     * <p>Use the default keyboard.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    KEYBOARD_DEFAULT:null,

    /**
     * <p>Use a keyboard suitable for composing email.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    KEYBOARD_EMAIL:null,

    /**
     * <p>Use a keyboard suitable for entering names and phone numbers.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    KEYBOARD_NAMEPHONE_PAD:null,

    /**
     * <p>Use a keyboard with numbers and punctuation only.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    KEYBOARD_NUMBERS_PUNCTUATION:null,

    /**
     * <p>Use a keyboard with a number pad only.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    KEYBOARD_NUMBER_PAD:null,

    /**
     * <p>Use a keyboard with a phone-style number pad.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    KEYBOARD_PHONE_PAD:null,

    /**
     * <p>Use an keyboard optimized for entering URLs.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    KEYBOARD_URL:null,

    /**
     * <p>Standard landscape orientation (home button on left).</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    LANDSCAPE_LEFT:null,

    /**
     * <p>Reverse landscape orientation (home button on right).</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    LANDSCAPE_RIGHT:null,

    /**
     * <p>Specifies a long duration for an Android Toast notification ({@link Titanium.UI.Notification}).</p>
     * @type Number
     * @since 0.4 (Android)
     */
    NOTIFICATION_DURATION_LONG:null,

    /**
     * <p>Specifies a short duration for an Android Toast notification ({@link Titanium.UI.Notification}).</p>
     * @type Number
     * @since 0.4 (Android)
     */
    NOTIFICATION_DURATION_SHORT:null,

    /**
     * <p>Use a picker with a countdown timer appearance, showing hours and minutes.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    PICKER_TYPE_COUNT_DOWN_TIMER:null,

    /**
     * <p>Use a date picker.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    PICKER_TYPE_DATE:null,

    /**
     * <p>Use a date and time picker.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    PICKER_TYPE_DATE_AND_TIME:null,

    /**
     * <p>Use a plain picker (for values other than date or time).</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    PICKER_TYPE_PLAIN:null,

    /**
     * <p>Use a time picker.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    PICKER_TYPE_TIME:null,

    /**
     * <p>Orientation constant for portrait mode orientation.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    PORTRAIT:null,

    /**
     * <p>Use the default return key on the virtual keyboard.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    RETURNKEY_DEFAULT:null,

    /**
     * <p>Set the return key text to "Done".</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    RETURNKEY_DONE:null,

    /**
     * <p>Set the return key text to "Emergency Call".</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    RETURNKEY_EMERGENCY_CALL:null,

    /**
     * <p>Set the return key text to "Go".</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    RETURNKEY_GO:null,

    /**
     * <p>Set the return key text to "Google".</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    RETURNKEY_GOOGLE:null,

    /**
     * <p>Set the return key text to "Join".</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    RETURNKEY_JOIN:null,

    /**
     * <p>Set the return key text to "Next".</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    RETURNKEY_NEXT:null,

    /**
     * <p>Set the return key text to "Route".</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    RETURNKEY_ROUTE:null,

    /**
     * <p>Set the return key text to "Search".</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    RETURNKEY_SEARCH:null,

    /**
     * <p>Set the return key text to "Send".</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    RETURNKEY_SEND:null,

    /**
     * <p>Set the return key text to "Yahoo".</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    RETURNKEY_YAHOO:null,

    /**
     * <p>Center align text.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    TEXT_ALIGNMENT_CENTER:null,

    /**
     * <p>Left align text.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    TEXT_ALIGNMENT_LEFT:null,

    /**
     * <p>Right align text.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    TEXT_ALIGNMENT_RIGHT:null,

    /**
     * <p>Auto-capitalize all text in the input field.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    TEXT_AUTOCAPITALIZATION_ALL:null,

    /**
     * <p>Do not auto-capitalize.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    TEXT_AUTOCAPITALIZATION_NONE:null,

    /**
     * <p>Use sentence-style auto-capitalization in the input field.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    TEXT_AUTOCAPITALIZATION_SENTENCES:null,

    /**
     * <p>Auto-capitalize the first letter of each word in the input field.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    TEXT_AUTOCAPITALIZATION_WORDS:null,

    /**
     * <p>Align text to the bottom of the view.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    TEXT_VERTICAL_ALIGNMENT_BOTTOM:null,

    /**
     * <p>Vertically align text to the center of the view.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    TEXT_VERTICAL_ALIGNMENT_CENTER:null,

    /**
     * <p>Align text to the top of the view.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    TEXT_VERTICAL_ALIGNMENT_TOP:null,

    /**
     * <p>Orientation constant representing an unknown orientation.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    UNKNOWN:null,

    /**
     * <p>Orientation constant for inverted portait orientation.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    UPSIDE_PORTRAIT:null,

    /**
     * <p>Sets the background color of the master view (when there are no windows or other top-level controls displayed).</p>
     * @type String
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Local path or URL to an image file for setting a background for the master view (when there are no windows or other top-level controls displayed).</p>
     * @type String
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>The currently active tab, if a tab group is open.</p>
     * @type Titanium_UI_Tab
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    currentTab:null,

    /**
     * <p>The active window associated with the executing JavaScript context.</p>
     * @type Titanium_UI_Window
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    currentWindow:null,

    /**
     * <p>Use {@link Titanium.UI.Window.orientationModes} instead.</p>
     * @type Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    orientation:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.2DMatrix}.</p>
     * @param {Dictionary<Titanium_UI_2DMatrix>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.2DMatrix}.</p>
     * @returns Titanium_UI_2DMatrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    create2DMatrix:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.3DMatrix}.</p>
     * @param {Dictionary<Titanium_UI_3DMatrix>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.3DMatrix}.</p>
     * @returns Titanium_UI_3DMatrix
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    create3DMatrix:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.ActivityIndicator}.</p>
     * @param {Dictionary<Titanium_UI_ActivityIndicator>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.ActivityIndicator}.</p>
     * @returns Titanium_UI_ActivityIndicator
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createActivityIndicator:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.AlertDialog}.</p>
     * @param {Dictionary<Titanium_UI_AlertDialog>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.AlertDialog}.</p>
     * @returns Titanium_UI_AlertDialog
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createAlertDialog:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.Animation}.</p>
     * @param {Dictionary<Titanium_UI_Animation>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.Animation}.</p>
     * @returns Titanium_UI_Animation
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    createAnimation:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.Button}.</p>
     * @param {Dictionary<Titanium_UI_Button>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.Button}.</p>
     * @returns Titanium_UI_Button
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createButton:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.ButtonBar}.</p>
     * @param {Dictionary<Titanium_UI_ButtonBar>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.ButtonBar}.</p>
     * @returns Titanium_UI_ButtonBar
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createButtonBar:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.DashboardItem}.</p>
     * @param {Dictionary<Titanium_UI_DashboardItem>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.DashboardItem}.</p>
     * @returns Titanium_UI_DashboardItem
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    createDashboardItem:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.DashboardView}.</p>
     * @param {Dictionary<Titanium_UI_DashboardView>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.DashboardView}.</p>
     * @returns Titanium_UI_DashboardView
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    createDashboardView:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.EmailDialog}.</p>
     * @param {Dictionary<Titanium_UI_EmailDialog>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.EmailDialog}.</p>
     * @returns Titanium_UI_EmailDialog
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    createEmailDialog:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.ImageView}.</p>
     * @param {Dictionary<Titanium_UI_ImageView>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.ImageView}.</p>
     * @returns Titanium_UI_ImageView
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createImageView:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.Label}.</p>
     * @param {Dictionary<Titanium_UI_Label>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.Label}.</p>
     * @returns Titanium_UI_Label
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createLabel:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.Notification}.</p>
     * @param {Dictionary<Titanium_UI_Notification>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.Notification}.</p>
     * @returns Titanium_UI_Notification
     * @since 0.8 (Android)
     */
    createNotification:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.OptionDialog}.</p>
     * @param {Dictionary<Titanium_UI_OptionDialog>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.OptionDialog}.</p>
     * @returns Titanium_UI_OptionDialog
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    createOptionDialog:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.Picker}.</p>
     * @param {Dictionary<Titanium_UI_Picker>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.Picker}.</p>
     * @returns Titanium_UI_Picker
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createPicker:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.PickerColumn}.</p>
     * @param {Dictionary<Titanium_UI_PickerColumn>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.PickerColumn}.</p>
     * @returns Titanium_UI_PickerColumn
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    createPickerColumn:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.PickerRow}.</p>
     * @param {Dictionary<Titanium_UI_PickerRow>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.PickerRow}.</p>
     * @returns Titanium_UI_PickerRow
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createPickerRow:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.ProgressBar}.</p>
     * @param {Dictionary<Titanium_UI_ProgressBar>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.ProgressBar}.</p>
     * @returns Titanium_UI_ProgressBar
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    createProgressBar:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.ScrollView}.</p>
     * @param {Dictionary<Titanium_UI_ScrollView>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.ScrollView}.</p>
     * @returns Titanium_UI_ScrollView
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createScrollView:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.ScrollableView}.</p>
     * @param {Dictionary<Titanium_UI_ScrollableView>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.ScrollableView}.</p>
     * @returns Titanium_UI_ScrollableView
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    createScrollableView:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.SearchBar}.</p>
     * @param {Dictionary<Titanium_UI_SearchBar>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.SearchBar}.</p>
     * @returns Titanium_UI_SearchBar
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createSearchBar:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.Slider}.</p>
     * @param {Dictionary<Titanium_UI_Slider>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.Slider}.</p>
     * @returns Titanium_UI_Slider
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createSlider:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.Switch}.</p>
     * @param {Dictionary<Titanium_UI_Switch>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.Switch}.</p>
     * @returns Titanium_UI_Switch
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createSwitch:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.Tab}.</p>
     * @param {Dictionary<Titanium_UI_Tab>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.Tab}.</p>
     * @returns Titanium_UI_Tab
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createTab:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.TabGroup}.</p>
     * @param {Dictionary<Titanium_UI_TabGroup>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.TabGroup}.</p>
     * @returns Titanium_UI_TabGroup
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createTabGroup:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.TabbedBar}.</p>
     * @param {Dictionary<Titanium_UI_TabbedBar>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.TabbedBar}.</p>
     * @returns Titanium_UI_TabbedBar
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    createTabbedBar:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.TableView}.</p>
     * @param {Dictionary<Titanium_UI_TableView>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.TableView}.</p>
     * @returns Titanium_UI_TableView
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createTableView:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.TableViewRow}.</p>
     * @param {Dictionary<Titanium_UI_TableViewRow>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.TableViewRow}.</p>
     * @returns Titanium_UI_TableViewRow
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createTableViewRow:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.TableViewSection}.</p>
     * @param {Dictionary<Titanium_UI_TableViewSection>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.TableViewSection}.</p>
     * @returns Titanium_UI_TableViewSection
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createTableViewSection:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.TextArea}.</p>
     * @param {Dictionary<Titanium_UI_TextArea>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.TextArea}.</p>
     * @returns Titanium_UI_TextArea
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createTextArea:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.TextField}.</p>
     * @param {Dictionary<Titanium_UI_TextField>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.TextField}.</p>
     * @returns Titanium_UI_TextField
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createTextField:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.Toolbar}.</p>
     * @param {Dictionary<Titanium_UI_Toolbar>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.Toolbar}.</p>
     * @returns Titanium_UI_Toolbar
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createToolbar:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.View}.</p>
     * @param {Dictionary<Titanium_UI_View>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.View}.</p>
     * @returns Titanium_UI_View
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createView:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.WebView}.</p>
     * @param {Dictionary<Titanium_UI_WebView>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.WebView}.</p>
     * @returns Titanium_UI_WebView
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    createWebView:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.Window}.</p>
     * @param {Dictionary<Titanium_UI_Window>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.Window}.</p>
     * @returns Titanium_UI_Window
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    createWindow:function(parameters) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.backgroundColor} property.</p>
     * @returns String
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.backgroundImage} property.</p>
     * @returns String
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.currentTab} property.</p>
     * @returns Titanium_UI_Tab
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    getCurrentTab:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.currentWindow} property.</p>
     * @returns Titanium_UI_Window
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    getCurrentWindow:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.orientation} property.</p>
     * @returns Number
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    getOrientation:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.currentTab} property.</p>
     * @param {Titanium_UI_Tab} currentTab <p>New value for the property.</p>
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad), 1.8 (Mobile Web)
     */
    setCurrentTab:function(currentTab) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.orientation} property.</p>
     * @param {Number} orientation <p>New value for the property.</p>
     * @since 0.4 (Android), 0.4 (iPhone), 0.4 (iPad)
     */
    setOrientation:function(orientation) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>The 2DMatrix is created by {@link Titanium.UI.create2DMatrix}. A 2D matrix is used to rotate, scale, translate, or skew the objects in a two-dimensional space. A 2D matrix is represented by a 3 by 3 matrix. Because the third column is always (0,0,1), the data structure contains values for only the first two columns.
You create an <code>identity matrix</code> by creating a 2D Matrix with an empty constructor.</p>
 */
function Titanium_UI_2DMatrix() {
}
Titanium_UI_2DMatrix.prototype = {

    /**
     * <p>The entry at position [1,1] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    a:null,

    /**
     * <p>The entry at position [1,2] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    b:null,

    /**
     * <p>The entry at position [2,1] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    c:null,

    /**
     * <p>The entry at position [2,2] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    d:null,

    /**
     * <p>The entry at position [3,1] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    tx:null,

    /**
     * <p>The entry at position [3,2] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    ty:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.2DMatrix.a} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getA:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.2DMatrix.b} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getB:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.2DMatrix.c} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getC:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.2DMatrix.d} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getD:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.2DMatrix.tx} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getTx:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.2DMatrix.ty} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getTy:function() {
    },

    /**
     * <p>Returns a matrix constructed by inverting an existing matrix</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    invert:function() {
    },

    /**
     * <p>Returns a matrix constructed by combining two existing matrix.</p>
     * @param {Object} t2 <p>The second matrix. This matrix is concatenated to the matrix instance against which the function is invoked.  The result of this function is the first matrix multiplied by the second matrix. You might perform several multiplications in order to create a single matrix that contains the cumulative effects of several transformations. Note that matrix operations are not commutative - the order in which you concatenate matrices is important. That is, the result of multiplying matrix t1 by matrix t2 does not necessarily equal the result of multiplying matrix t2 by matrix t1.</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    multiply:function(t2) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Returns a matrix constructed by rotating an existing matrix</p>
     * @param {Number} angle <p>The angle, in degrees, by which to rotate the matrix. A positive value specifies counterclockwise rotation and a negative value specifies clockwise rotation.</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    rotate:function(angle) {
    },

    /**
     * <p>Returns a matrix constructed by scaling an existing matrix</p>
     * @param {Number} sx <p>The value by which to scale x values of the matrix</p>
     * @param {Number} sy <p>The value by which to scale y values of the matrix</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    scale:function(sx, sy) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.2DMatrix.a} property.</p>
     * @param {Number} a <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setA:function(a) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.2DMatrix.b} property.</p>
     * @param {Number} b <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setB:function(b) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.2DMatrix.c} property.</p>
     * @param {Number} c <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setC:function(c) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.2DMatrix.d} property.</p>
     * @param {Number} d <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setD:function(d) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.2DMatrix.tx} property.</p>
     * @param {Number} tx <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setTx:function(tx) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.2DMatrix.ty} property.</p>
     * @param {Number} ty <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setTy:function(ty) {
    },

    /**
     * <p>Returns a matrix constructed by translating an existing matrix</p>
     * @param {Number} tx <p>The value by which to move x values with the matrix</p>
     * @param {Number} ty <p>The value by which to move y values with the matrix</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    translate:function(tx, ty) {
    }
}

/**
 * platforms: iPhone, iPad
 * @namespace <p>The 3D Matrix is an object for holding values for an affine transformation matrix. </p>
<p>The 3DMatrix is created by {@link Titanium.UI.create3DMatrix}. A 3D matrix is
used to rotate, scale, translate, or skew the objects in a three-dimensional
space. A 3D matrix is represented by a 4 by 4 matrix. </p>
<p>You create an <code>identity matrix</code> by creating a 3D Matrix with an empty
constructor.</p>
 */
function Titanium_UI_3DMatrix() {
}
Titanium_UI_3DMatrix.prototype = {

    /**
     * <p>The entry at position [1,1] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m11:null,

    /**
     * <p>The entry at position [1,2] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m12:null,

    /**
     * <p>The entry at position [1,3] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m13:null,

    /**
     * <p>The entry at position [1,4] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m14:null,

    /**
     * <p>The entry at position [2,1] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m21:null,

    /**
     * <p>The entry at position [2,2] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m22:null,

    /**
     * <p>The entry at position [2,3] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m23:null,

    /**
     * <p>The entry at position [2,4] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m24:null,

    /**
     * <p>The entry at position [3,1] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m31:null,

    /**
     * <p>The entry at position [3,2] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m32:null,

    /**
     * <p>The entry at position [3,3] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m33:null,

    /**
     * <p>The entry at position [3,4] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m34:null,

    /**
     * <p>The entry at position [4,1] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m41:null,

    /**
     * <p>The entry at position [4,2] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m42:null,

    /**
     * <p>The entry at position [4,3] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m43:null,

    /**
     * <p>The entry at position [4,4] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m44:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.3DMatrix.m11} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM11:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.3DMatrix.m12} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM12:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.3DMatrix.m13} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM13:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.3DMatrix.m14} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM14:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.3DMatrix.m21} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM21:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.3DMatrix.m22} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM22:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.3DMatrix.m23} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM23:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.3DMatrix.m24} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM24:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.3DMatrix.m31} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM31:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.3DMatrix.m32} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM32:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.3DMatrix.m33} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM33:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.3DMatrix.m34} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM34:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.3DMatrix.m41} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM41:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.3DMatrix.m42} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM42:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.3DMatrix.m43} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM43:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.3DMatrix.m44} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM44:function() {
    },

    /**
     * <p>Returns a matrix constructed by inverting an existing matrix</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    invert:function() {
    },

    /**
     * <p>Returns a matrix constructed by combining two existing matrix.</p>
     * @param {Titanium_UI_3DMatrix} t2 <p>The second matrix. This matrix is concatenated to the matrix instance against which the function is invoked.  The result of this function is the first matrix multiplied by the second matrix. You might perform several multiplications in order to create a single matrix that contains the cumulative effects of several transformations. Note that matrix operations are not commutative - the order in which you concatenate matrices is important. That is, the result of multiplying matrix t1 by matrix t2 does not necessarily equal the result of multiplying matrix t2 by matrix t1.</p>
     * @returns Titanium_UI_3DMatrix
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    multiply:function(t2) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Returns a matrix constructed by rotating an existing matrix</p>
     * @param {Number} angle <p>The angle, in degrees, by which to rotate the matrix. A positive value specifies counterclockwise rotation and a negative value specifies clockwise rotation.</p>
     * @param {Number} x <p>The x part of the vector about which to rotate</p>
     * @param {Number} y <p>The y part of the vector about which to rotate</p>
     * @param {Number} z <p>The z part of the vector about which to rotate</p>
     * @returns Titanium_UI_3DMatrix
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    rotate:function(angle, x, y, z) {
    },

    /**
     * <p>Returns a matrix constructed by scaling an existing matrix</p>
     * @param {Number} sx <p>The value by which to scale x values of the matrix</p>
     * @param {Number} sy <p>The value by which to scale y values of the matrix</p>
     * @param {Number} sz <p>The value by which to scale z values of the matrix</p>
     * @returns Titanium_UI_3DMatrix
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    scale:function(sx, sy, sz) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.3DMatrix.m11} property.</p>
     * @param {Number} m11 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM11:function(m11) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.3DMatrix.m12} property.</p>
     * @param {Number} m12 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM12:function(m12) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.3DMatrix.m13} property.</p>
     * @param {Number} m13 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM13:function(m13) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.3DMatrix.m14} property.</p>
     * @param {Number} m14 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM14:function(m14) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.3DMatrix.m21} property.</p>
     * @param {Number} m21 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM21:function(m21) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.3DMatrix.m22} property.</p>
     * @param {Number} m22 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM22:function(m22) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.3DMatrix.m23} property.</p>
     * @param {Number} m23 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM23:function(m23) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.3DMatrix.m24} property.</p>
     * @param {Number} m24 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM24:function(m24) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.3DMatrix.m31} property.</p>
     * @param {Number} m31 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM31:function(m31) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.3DMatrix.m32} property.</p>
     * @param {Number} m32 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM32:function(m32) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.3DMatrix.m33} property.</p>
     * @param {Number} m33 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM33:function(m33) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.3DMatrix.m34} property.</p>
     * @param {Number} m34 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM34:function(m34) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.3DMatrix.m41} property.</p>
     * @param {Number} m41 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM41:function(m41) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.3DMatrix.m42} property.</p>
     * @param {Number} m42 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM42:function(m42) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.3DMatrix.m43} property.</p>
     * @param {Number} m43 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM43:function(m43) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.3DMatrix.m44} property.</p>
     * @param {Number} m44 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM44:function(m44) {
    },

    /**
     * <p>Returns a matrix constructed by translating an existing matrix</p>
     * @param {Number} tx <p>The value by which to move x values with the matrix</p>
     * @param {Number} ty <p>The value by which to move y values with the matrix</p>
     * @param {Number} tz <p>The value by which to move z values with the matrix</p>
     * @returns Titanium_UI_3DMatrix
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    translate:function(tx, ty, tz) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>An activity indicator can be used to show the progress of an operation in the UI to 
let the user know some action is taking place. An activity indicator consists of a 
spinning animation and an optional text message, and is used to indicate an ongoing 
activity of indeterminate length. To show progress, use {@link Titanium.UI.ProgressBar} instead.</p>
<p>Use the {@link Titanium.UI.createActivityIndicator} method to create an Activity Indicator. </p>
<p>Activity indicators must be used differently on Android and iOS:</p>
<ul>
<li>
<p>On Android, the activity indicator is a modal dialog that blocks the UI. Calling 
  <code>show</code> displays the indicator, and calling <code>hide</code> removes it. </p>
</li>
<li>
<p>On iOS, the activity indicator is a view like any other view, and must be added 
  to a window or other top-level view before it can be shown. Note that unlike most views, 
  the activity indicator is hidden by default and must be shown explicitly.</p>
</li>
</ul>
 * 
 * @example Simple Activity Indicator (Android)
 * <p>In this example, we create a basic activity indicator and start it.</p>
<pre><code>var actInd = Titanium.UI.createActivityIndicator({
    height:50,
    width:10
});
actInd.show();
</code></pre>
 * 
 * @example Simple Activity Indicator (iOS)
 * <p>In iOS, the activity indicator must be added to a window or another view to appear.</p>
<pre><code>var actInd = Titanium.UI.createActivityIndicator({
    bottom:10,
    height:50,
    width:10
});
win.add(actInd);
actInd.show();
</code></pre>
 */
function Titanium_UI_ActivityIndicator() {
}
Titanium_UI_ActivityIndicator.prototype = {

    /**
     * <p>Color of the message text.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    color:null,

    /**
     * <p>Font to use for the message text.</p>
     * @type Font
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    font:null,

    /**
     * <p>Message text.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>Key identifying a string from the locale file to use for the message text.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    messageid:null,

    /**
     * <p>The style for the activity indicator.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    style:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ActivityIndicator.color} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ActivityIndicator.font} property.</p>
     * @returns Font
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFont:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ActivityIndicator.message} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getMessage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ActivityIndicator.messageid} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getMessageid:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ActivityIndicator.style} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getStyle:function() {
    },

    /**
     * <p>Hides the activity indicator and stops the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ActivityIndicator.color} property.</p>
     * @param {String} color <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setColor:function(color) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ActivityIndicator.font} property.</p>
     * @param {Font} font <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setFont:function(font) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ActivityIndicator.message} property.</p>
     * @param {String} message <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setMessage:function(message) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ActivityIndicator.messageid} property.</p>
     * @param {String} messageid <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setMessageid:function(messageid) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ActivityIndicator.style} property.</p>
     * @param {Number} style <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setStyle:function(style) {
    },

    /**
     * <p>Shows the activity indicator and starts the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>the global method <code>alert</code> is aliased to this object and can be invoked with a single message. For example:</p>
<pre><code>alert("this is a message");
</code></pre>
<p>Note: you should be careful not to call alert more than once while a pending alert is visible.</p>
<p>On iOS 4, alert dialogs will automatically be cancelled upon application suspend.</p>
 * 
 * @example Simple Alert Dialog
 * <p>In this example, we show a simple alert dialog.</p>
<pre><code>var alertDialog = Titanium.UI.createAlertDialog({
    title: 'Hello',
    message: 'You got mail',
    buttonNames: ['OK','Doh!']
});
alertDialog.show();
</code></pre>
 */
function Titanium_UI_AlertDialog() {
}
Titanium_UI_AlertDialog.prototype = {

    /**
     * <p>Titanium view that should be loaded inside the alert dialog</p>
     * @type Titanium_UI_View
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    androidView:null,

    /**
     * <p>array of button names as strings</p>
     * @type Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    buttonNames:null,

    /**
     * <p>an index to indicate which button should be the cancel button</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    cancel:null,

    /**
     * <p>the message of the dialog</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    message:null,

    /**
     * <p>the key in the locale file to use for the message property</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    messageid:null,

    /**
     * <p>Text for the OK button.  Useful for when you only want one button and therefore don't want to use the <code>buttonNames</code> property.  If you do use <code>buttonNames</code>, this property will be ignored.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ok:null,

    /**
     * <p>the key in the locale file to use for the <code>ok</code> property.  Note that if you use the <code>buttonNames</code> property to set the button titles, this will be ignored.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    okid:null,

    /**
     * <p>the title of the dialog</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    title:null,

    /**
     * <p>the key in the locale file to use for the title property</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    titleid:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.AlertDialog.androidView} property.</p>
     * @returns Titanium_UI_View
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAndroidView:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.AlertDialog.buttonNames} property.</p>
     * @returns Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getButtonNames:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.AlertDialog.cancel} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCancel:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.AlertDialog.message} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getMessage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.AlertDialog.ok} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getOk:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.AlertDialog.title} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTitle:function() {
    },

    /**
     * <p>hides the alert dialog and unblocks the background view</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.AlertDialog.androidView} property.</p>
     * @param {Titanium_UI_View} androidView <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setAndroidView:function(androidView) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.AlertDialog.buttonNames} property.</p>
     * @param {Array<Object>} buttonNames <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setButtonNames:function(buttonNames) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.AlertDialog.cancel} property.</p>
     * @param {Number} cancel <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCancel:function(cancel) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.AlertDialog.message} property.</p>
     * @param {String} message <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setMessage:function(message) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.AlertDialog.ok} property.</p>
     * @param {String} ok <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setOk:function(ok) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.AlertDialog.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTitle:function(title) {
    },

    /**
     * <p>shows the alert dialog and blocks the background view like a modal window</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    }
}

/**
 * platforms: Android
 */
Titanium.UI.Android = {

    /**
     * <p>Auto link all supported types.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    LINKIFY_ALL:null,

    /**
     * <p>Auto link email addresses.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    LINKIFY_EMAIL_ADDRESSES:null,

    /**
     * <p>Auto link physical addresses.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    LINKIFY_MAP_ADDRESSES:null,

    /**
     * <p>Convert all street addresses to clickable links</p>
     * @type Number
     * @since 1.0 (Android)
     */
    LINKIFY_MAP_LINKS:null,

    /**
     * <p>Auto link phone numbers.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    LINKIFY_PHONE_NUMBERS:null,

    /**
     * <p>Auto link web urls.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    LINKIFY_WEB_URLS:null,

    /**
     * <p>See {@link http://developer.android.com/reference/android/graphics/PixelFormat}</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_A_8:null,

    /**
     * <p>See {@link http://developer.android.com/reference/android/graphics/PixelFormat}</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_LA_88:null,

    /**
     * <p>See {@link http://developer.android.com/reference/android/graphics/PixelFormat}</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_L_8:null,

    /**
     * <p>System chooses an opaque format (no alpha bits required) {@link http://developer.android.com/reference/android/graphics/PixelFormat}</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_OPAQUE:null,

    /**
     * <p>See {@link http://developer.android.com/reference/android/graphics/PixelFormat}</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_RGBA_4444:null,

    /**
     * <p>See {@link http://developer.android.com/reference/android/graphics/PixelFormat}</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_RGBA_5551:null,

    /**
     * <p>See {@link http://developer.android.com/reference/android/graphics/PixelFormat}</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_RGBA_8888:null,

    /**
     * <p>See {@link http://developer.android.com/reference/android/graphics/PixelFormat}</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_RGBX_8888:null,

    /**
     * <p>See {@link http://developer.android.com/reference/android/graphics/PixelFormat}</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_RGB_332:null,

    /**
     * <p>See {@link http://developer.android.com/reference/android/graphics/PixelFormat}</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_RGB_565:null,

    /**
     * <p>See {@link http://developer.android.com/reference/android/graphics/PixelFormat}</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_RGB_888:null,

    /**
     * <p>System chooses a format that supports translucency (many alpha bits). {@link http://developer.android.com/reference/android/graphics/PixelFormat}</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_TRANSLUCENT:null,

    /**
     * <p>System chooses a format that supports transparency (at least 1 alpha bit). {@link http://developer.android.com/reference/android/graphics/PixelFormat}</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_TRANSPARENT:null,

    /**
     * <p>Allow the Window to select the format. {@link http://developer.android.com/reference/android/graphics/PixelFormat}</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    PIXEL_FORMAT_UNKNOWN:null,

    /**
     * <p>Pan contents when soft keyboard is visible. Use on Activity ("heavy weight window") to suggest how the virtual keyboard should treat the window contents. Must be specified in creation options.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SOFT_INPUT_ADJUST_PAN:null,

    /**
     * <p>Resize contents when soft keyboard is visible. Use on Activity ("heavy weight window") to suggest how the virtual keyboard should treat the window contents. Must be specified in creation options.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SOFT_INPUT_ADJUST_RESIZE:null,

    /**
     * <p>(default) If set in the AndroidManifest.xml use that setting. Otherwise, let the keyboard decided. Must be specified in creation options.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SOFT_INPUT_ADJUST_UNSPECIFIED:null,

    /**
     * <p>Attempt to hide the soft keyboard when control receives keyboard focus.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SOFT_INPUT_STATE_HIDDEN:null,

    /**
     * <p>Use OS default behavior for keyboard focus.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SOFT_INPUT_STATE_UNSPECIFIED:null,

    /**
     * <p>Attempt to show the soft keyboard when control receives keyboard focus.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SOFT_INPUT_STATE_VISIBLE:null,

    /**
     * <p>Use Android default soft keyboard handling. Same as not specifying a value.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SOFT_KEYBOARD_DEFAULT_ON_FOCUS:null,

    /**
     * <p>Request hide soft keyboard on focus. Note: OS can override request.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SOFT_KEYBOARD_HIDE_ON_FOCUS:null,

    /**
     * <p>Request show soft keyboard on focus. Note: OS can override request.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SOFT_KEYBOARD_SHOW_ON_FOCUS:null,

    /**
     * <p>Display Switch as an Android Checkbox</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SWITCH_STYLE_CHECKBOX:null,

    /**
     * <p>Display Switch as an Android Toggle Button (default)</p>
     * @type Number
     * @since 1.0 (Android)
     */
    SWITCH_STYLE_TOGGLEBUTTON:null,

    /**
     * <p>Disable plugins in {@link Titanium.UI.WebView}.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    WEBVIEW_PLUGINS_OFF:null,

    /**
     * <p>Enable plugins in {@link Titanium.UI.WebView}.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    WEBVIEW_PLUGINS_ON:null,

    /**
     * <p>Display a placeholder and only load plugins when user selects placeholder.</p>
     * @type Number
     * @since 1.0 (Android)
     */
    WEBVIEW_PLUGINS_ON_DEMAND:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.0 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.0 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>request that the soft keyboard hide. Note: It is not currently possible in the native Android API to detect that the keyboard is already visible. Note: It is not possible to globally show the keyboard at this point.</p>
     * @since 1.0 (Android)
     */
    hideSoftKeyboard:function() {
    },

    /**
     * <p>open Android native preferences UI activity. You need to place your preferences.xml file in the platform/android/res/xml/ folder of your project. Documentation on the file format may be found in the {@link http://developer.android.com/resources/samples/ApiDemos/res/xml/preferences}</p>
     * @since 1.0 (Android)
     */
    openPreferences:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.0 (Android)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 * 
 * @example Animation applied to a view
 * <p>Create a simple animation and apply it to the view.  In this example, the view will animate from red to black to orange over 2 seconds.</p>
<pre><code>var view = Titanium.UI.createView({
   backgroundColor:'red'
});
var animation = Titanium.UI.createAnimation();
animation.backgroundColor = 'black';
animation.duration = 1000;
var animationHandler = function() {
   animation.removeEventListener('complete',animationHandler);
   animation.backgroundColor = 'orange';
   view.animate(animation);
};
animation.addEventListener('complete',animationHandler);
view.animate(animation);
</code></pre>
 */
function Titanium_UI_Animation() {
}
Titanium_UI_Animation.prototype = {

    /**
     * <p>the property specifies if the animation should be replayed in reverse upon completion</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    autoreverse:null,

    /**
     * <p>value of the backgroundColor property to change during animation</p>
     * @type String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>value of the bottom property to change during animation</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    bottom:null,

    /**
     * <p>value of the center property to change during animation</p>
     * @type Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    center:null,

    /**
     * <p>value of the color property to change during animation</p>
     * @type String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    color:null,

    /**
     * <p>the curve of the animation</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    curve:null,

    /**
     * <p>the duration of time in milliseconds before starting the animation</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    delay:null,

    /**
     * <p>the duration of time in milliseconds to perform the animation</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    duration:null,

    /**
     * <p>value of the height property to change during animation</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    height:null,

    /**
     * <p>value of the left property to change during animation</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    left:null,

    /**
     * <p>value of the opacity property to change during animation</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    opacity:null,

    /**
     * <p>value of the opaque property to change during animation</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    opaque:null,

    /**
     * <p>the number of times the animation should be performed</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    repeat:null,

    /**
     * <p>value of the right property to change during animation</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    right:null,

    /**
     * <p>value of the top property to change during animation</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    top:null,

    /**
     * <p>value of the transform property to change during animation</p>
     * @type Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    transform:null,

    /**
     * <p>during a transition animation, this is the constant to the type of transition to use</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    transition:null,

    /**
     * <p>value of the visible property to change during animation</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    visible:null,

    /**
     * <p>value of the width property to change during animation</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    width:null,

    /**
     * <p>value of the zIndex property to change during animation</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Animation.autoreverse} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAutoreverse:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Animation.backgroundColor} property.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Animation.bottom} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Animation.center} property.</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Animation.color} property.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Animation.curve} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getCurve:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Animation.delay} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getDelay:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Animation.duration} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getDuration:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Animation.height} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Animation.left} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Animation.opacity} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Animation.opaque} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getOpaque:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Animation.repeat} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getRepeat:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Animation.right} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Animation.top} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Animation.transform} property.</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Animation.transition} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getTransition:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Animation.visible} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Animation.width} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Animation.zIndex} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Animation.autoreverse} property.</p>
     * @param {Boolean} autoreverse <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setAutoreverse:function(autoreverse) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Animation.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Animation.bottom} property.</p>
     * @param {Number} bottom <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Animation.center} property.</p>
     * @param {Object} center <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Animation.color} property.</p>
     * @param {String} color <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setColor:function(color) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Animation.curve} property.</p>
     * @param {Number} curve <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setCurve:function(curve) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Animation.delay} property.</p>
     * @param {Number} delay <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setDelay:function(delay) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Animation.duration} property.</p>
     * @param {Number} duration <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setDuration:function(duration) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Animation.height} property.</p>
     * @param {Number} height <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Animation.left} property.</p>
     * @param {Number} left <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Animation.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Animation.opaque} property.</p>
     * @param {Boolean} opaque <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setOpaque:function(opaque) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Animation.repeat} property.</p>
     * @param {Number} repeat <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setRepeat:function(repeat) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Animation.right} property.</p>
     * @param {Number} right <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Animation.top} property.</p>
     * @param {Number} top <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Animation.transform} property.</p>
     * @param {Object} transform <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Animation.transition} property.</p>
     * @param {Number} transition <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setTransition:function(transition) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Animation.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Animation.width} property.</p>
     * @param {Number} width <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Animation.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setZIndex:function(zIndex) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>A button widget that has four states, normal, disabled, focused and selected. You can specify background images for each state, as well as button text and a button icon. Use the {@link Titanium.UI.createButton} method to create a button. </p>
 * 
 * @example Simple Button Example
 * <p>var button = Titanium.UI.createButton({
   title: 'Hello',
   top: 10,
   width: 100,
   height: 50
});
button.addEventListener('click',function(e)
{
   Titanium.API.info("You clicked the button");
});</p>
 */
function Titanium_UI_Button() {
}
Titanium_UI_Button.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Background image for the button in its disabled state, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Background image for the button in its focused state, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the button in its normal state, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Background image for the button in its selected state, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Default button text color.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    color:null,

    /**
     * <p>Set to <code>true</code> to enable the button, <code>false</code> to disable the button.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    enabled:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>Font to use for the button text.</p>
     * @type Font
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    font:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Image to display on the button to the left of the title.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    image:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Button text color used to indicate the selected state.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    selectedColor:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Style constant for the button.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    style:null,

    /**
     * <p>Button title.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    title:null,

    /**
     * <p>Key identifying a string from the locale file to use for the button title.</p>
     * @type String
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    titleid:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.color} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.enabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.font} property.</p>
     * @returns Font
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFont:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.image} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.selectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.size} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.style} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.title} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.titleid} property.</p>
     * @returns String
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    getTitleid:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Button.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.color} property.</p>
     * @param {String} color <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setColor:function(color) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.enabled} property.</p>
     * @param {Boolean} enabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setEnabled:function(enabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.font} property.</p>
     * @param {Font} font <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setFont:function(font) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.image} property.</p>
     * @param {String} image <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setImage:function(image) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.selectedColor} property.</p>
     * @param {String} selectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSelectedColor:function(selectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.style} property.</p>
     * @param {Number} style <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setStyle:function(style) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTitle:function(title) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.titleid} property.</p>
     * @param {String} titleid <p>New value for the property.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    setTitleid:function(titleid) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Button.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: iPhone, iPad, Mobile Web
 * @namespace <p>For iPhone, the style constants are available in the constants defined in {@link Titanium.UI.iPhone.SystemButtonStyle}.</p>
 * 
 * @example Simple 3 button button bar
 * <p>var bb1 = Titanium.UI.createButtonBar({
    labels:['One', 'Two', 'Three'],
    backgroundColor:'#336699',
    top:50,
    style:Titanium.UI.iPhone.SystemButtonStyle.BAR,
    height:25,
    width:200
});
win.add(bb1);</p>
 */
function Titanium_UI_ButtonBar() {
}
Titanium_UI_ButtonBar.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>the selected index</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    index:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>the array of labels for the button bar. each object should have the properties <code>title</code>, <code>image</code>, <code>width</code> and <code>enabled</code>.</p>
     * @type Array<Object>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    labels:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>the style of the button bar</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    style:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.borderColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.center} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.index} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getIndex:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.labels} property.</p>
     * @returns Array<Object>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLabels:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.layout} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.opacity} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.size} property.</p>
     * @returns Object
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.style} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ButtonBar.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.index} property.</p>
     * @param {Number} index <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setIndex:function(index) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.labels} property.</p>
     * @param {Array<Object>} labels <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLabels:function(labels) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.style} property.</p>
     * @param {Number} style <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setStyle:function(style) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ButtonBar.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * 
 * @example Copying text to the clipboard
 * <p>copyButton.addEventListener('click', function() {
    Ti.UI.Clipboard.setText(data.url);
});</p>
 * 
 * @example Pasting text from the clipboard
 * <p>if (Ti.UI.Clipboard.hasText()) {
    doSomethingWith(Ti.UI.Clipboard.getText());
} else {
    alert('Hey there was no text.');
}</p>
 * 
 * @example Clipboard data types
 * <p>The <em>Text() functions are equivalent to calling </em>Data() with 'text' or 'text/plain' types, and work with plain Unicode strings.</p>
<p>On Android, only plain text is supported; other MIME types will be ignored.</p>
<p>On iOS, images will be returned as a {@link Titanium.Blob}; the special type 'image' or an explicit MIME type may be specified. URLs can be fetched with the special 'URL' or 'text/uri-list' types, and will return strings. Other data types may or may not be correctly mapped to clipboard types by the system, and will be retrieved as binary data in a {@link Titanium.Blob}.</p>
 */
Titanium.UI.Clipboard = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Clear data of the given mime-type from the clipboard. If no mime-type is given, clear all data from the clipboard.</p>
     * @param {String} type <p>(optional) The mime-type of the data to clear.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    clearData:function(type) {
    },

    /**
     * <p>Clear the text portion of the clipboard.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    clearText:function() {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Get the data on the clipboard from the portion which contains data of the given mime-type.</p>
     * @param {String} type <p>The mime-type of the data to get.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    getData:function(type) {
    },

    /**
     * <p>Get the current text on the clipboard.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    getText:function() {
    },

    /**
     * <p>Return true if there is any content of the given mime-type on the clipboard.</p>
     * @param {String} type <p>(optional) The mime-type of the data to check.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    hasData:function(type) {
    },

    /**
     * <p>Return true if there is any content in the text portion of the clipboard.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    hasText:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Set the data on the clipboard given a mime-type and the new data. This method will set data on the appropriate portion of the clipboard for the given mime-type.</p>
     * @param {String} type <p>The mime-type of the data to set.</p>
     * @param {Object} data <p>The new clipboard text.</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    setData:function(type, data) {
    },

    /**
     * <p>Set the text on the clipboard. This will overwrite the current contents of the clipboard.</p>
     * @param {String} text <p>The new clipboard text. If the text is an empty string</p>
     * @since 1.5 (Android), 1.5 (iPhone), 1.5 (iPad), 1.8 (Mobile Web)
     */
    setText:function(text) {
    }
}

/**
 * platforms: iPhone, iPad
 */
function Titanium_UI_DashboardItem() {
}
Titanium_UI_DashboardItem.prototype = {

    /**
     * <p>the badge value or <code>0</code> to remove the badge</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    badge:null,

    /**
     * <p>a boolean to indicate if this item can be deleted when it edit mode</p>
     * @type Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    canDelete:null,

    /**
     * <p>the URL to the image</p>
     * @type String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    image:null,

    /**
     * <p>the URL to the image to display when the item is depressed (clicked)</p>
     * @type String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    selectedImage:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardItem.badge} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBadge:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardItem.canDelete} property.</p>
     * @returns Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getCanDelete:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardItem.image} property.</p>
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardItem.selectedImage} property.</p>
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getSelectedImage:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardItem.badge} property.</p>
     * @param {Number} badge <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBadge:function(badge) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardItem.canDelete} property.</p>
     * @param {Boolean} canDelete <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setCanDelete:function(canDelete) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardItem.image} property.</p>
     * @param {String} image <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setImage:function(image) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardItem.selectedImage} property.</p>
     * @param {String} selectedImage <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setSelectedImage:function(selectedImage) {
    }
}

/**
 * platforms: iPhone, iPad
 */
function Titanium_UI_DashboardView() {
}
Titanium_UI_DashboardView.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    center:null,

    /**
     * <p>an array of {@link Titanium.UI.DashboardItem} objects to display in the view</p>
     * @type Array<Object>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    data:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 1.2 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 1.2 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    right:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 1.2 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    width:null,

    /**
     * <p>true (default) to wobble during edit, false to disable wobble effect</p>
     * @type Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    wobble:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.anchorPoint} property.</p>
     * @returns Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.backgroundColor} property.</p>
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.backgroundImage} property.</p>
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.backgroundTopCap} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.borderColor} property.</p>
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.borderRadius} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.borderWidth} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.center} property.</p>
     * @returns Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.data} property.</p>
     * @returns Array<Object>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getData:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.focusable} property.</p>
     * @returns Boolean
     * @since 1.2 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.height} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 1.2 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.layout} property.</p>
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.left} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.opacity} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.right} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.size} property.</p>
     * @returns Object
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 1.2 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.top} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.touchEnabled} property.</p>
     * @returns Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.visible} property.</p>
     * @returns Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.width} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.wobble} property.</p>
     * @returns Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getWobble:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.DashboardView.zIndex} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.data} property.</p>
     * @param {Array<Object>} data <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setData:function(data) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.wobble} property.</p>
     * @param {Boolean} wobble <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setWobble:function(wobble) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.DashboardView.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    show:function() {
    },

    /**
     * <p>put the dashboard in edit mode</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    startEditing:function() {
    },

    /**
     * <p>cancel editing</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    stopEditing:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 * 
 * @example Simple Email Dialog with Attachment
 * <p>In this example, we send an email with a file attachment.</p>
<pre><code>var emailDialog = Titanium.UI.createEmailDialog()
emailDialog.subject = "Hello from Titanium";
emailDialog.toRecipients = ['foo@yahoo.com'];
emailDialog.messageBody = '&lt;b&gt;Appcelerator Titanium Rocks!&lt;/b&gt;';
var f = Ti.Filesystem.getFile('cricket.wav');
emailDialog.addAttachment(f);
emailDialog.open();
</code></pre>
 */
function Titanium_UI_EmailDialog() {
}
Titanium_UI_EmailDialog.prototype = {

    /**
     * <p>constant for the CANCELLED status result</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    CANCELLED:null,

    /**
     * <p>constant for the FAILED status result</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    FAILED:null,

    /**
     * <p>constant for the SAVED status result</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    SAVED:null,

    /**
     * <p>constant for the SENT status result</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    SENT:null,

    /**
     * <p>the bar color of the email dialog window when opened</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    barColor:null,

    /**
     * <p>array of email BCC: recipients</p>
     * @type Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    bccRecipients:null,

    /**
     * <p>array of email CC: recipients</p>
     * @type Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ccRecipients:null,

    /**
     * <p>boolean to indicate whether the email messageBody should be sent as HTML content type. defaults to false. (Android note: you should not use html messages in 1.6: after that is okay.)</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    html:null,

    /**
     * <p>the email message body</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    messageBody:null,

    /**
     * <p>the subject line for the email</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    subject:null,

    /**
     * <p>array of email recipients</p>
     * @type Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toRecipients:null,


    /**
     * <p>add an attachment to the email. The attachment can either be a Blob or File object. Note: Versions before 1.7.1 will only support one attachment in Android.  Since version 1.7.1, our Android implementation will accept multiple attachments, but multiple attachments will only work if the user chooses to send via the Android Gmail app; the Android "Mail" app (which is anyway not available on some handsets) will only accept one attachment from a Titanium app.  K9 has also been tested successfully with multiple attachments.</p>
     * @param {Object} attachment <p>attachment object as either a Blob or File object</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addAttachment:function(attachment) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.EmailDialog.barColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBarColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.EmailDialog.bccRecipients} property.</p>
     * @returns Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBccRecipients:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.EmailDialog.ccRecipients} property.</p>
     * @returns Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getCcRecipients:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.EmailDialog.html} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getHtml:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.EmailDialog.messageBody} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getMessageBody:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.EmailDialog.subject} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getSubject:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.EmailDialog.toRecipients} property.</p>
     * @returns Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getToRecipients:function() {
    },

    /**
     * <p>return whether or not sending email is supported</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    isSupported:function() {
    },

    /**
     * <p>open the email dialog. the email dialog itself is a modal window</p>
     * @param {Object} properties <p>object of animation properties. pass <code>animated</code> property (as boolean) to indicate if the dialog should be animated on open.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    open:function(properties) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.EmailDialog.barColor} property.</p>
     * @param {String} barColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBarColor:function(barColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.EmailDialog.bccRecipients} property.</p>
     * @param {Array<Object>} bccRecipients <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBccRecipients:function(bccRecipients) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.EmailDialog.ccRecipients} property.</p>
     * @param {Array<Object>} ccRecipients <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setCcRecipients:function(ccRecipients) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.EmailDialog.html} property.</p>
     * @param {Boolean} html <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setHtml:function(html) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.EmailDialog.messageBody} property.</p>
     * @param {String} messageBody <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setMessageBody:function(messageBody) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.EmailDialog.subject} property.</p>
     * @param {String} subject <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setSubject:function(subject) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.EmailDialog.toRecipients} property.</p>
     * @param {Array<Object>} toRecipients <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setToRecipients:function(toRecipients) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>If you specify a <code>width</code> and/or <code>height</code> property for the image view, the image will be 
scaled to fit into this space while maintaining its original aspect ratio.</p>
<p>Use the {@link Titanium.UI.createImageView} method to create an image view.</p>
 * 
 * @example Basic Image View
 * <p>In this example, we create a simple image view:</p>
<pre><code>var image = Titanium.UI.createImageView({url:'myimage.png'});
view.add(image);
</code></pre>
 */
function Titanium_UI_ImageView() {
}
Titanium_UI_ImageView.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p><code>true</code> if the animation is running.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    animating:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>Allow the user to scale the image (using pinch-zoom or the optional zoom controls).</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    canScale:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Number of times to retry decoding the bitmap at this URL.</p>
     * @type Number
     * @since 1.7.0 (Android)
     */
    decodeRetries:null,

    /**
     * <p>url to the default image to display while loading a remote image</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    defaultImage:null,

    /**
     * <p>amount of time in milliseconds to animate one cycle</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    duration:null,

    /**
     * <p>Show zoom controls when the user touches the image view.</p>
     * @type Boolean
     * @since 1.3.0 (Android)
     */
    enableZoomControls:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Indicates whether or not the source image is in 2x resolution for Retina displays. 
Use for remote images ONLY.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hires:null,

    /**
     * <p>Image to display. Specify using a local file path or URL, or pass a <code>Blob</code> or 
<code>File</code> object containing image data.</p>
     * @type String|Titanium_Blob|Titanium_Filesystem_File
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    image:null,

    /**
     * <p>Array of images to display in an animation. Accepts the same types as <code>image</code>.</p>
     * @type Array<Object>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    images:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>Boolean value indicating if the animation is paused.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    paused:null,

    /**
     * <p>Set to <code>true</code> to <strong>disable</strong> display of the default image while loading a remote image.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    preventDefaultImage:null,

    /**
     * <p>Number of times to repeat the image animation.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    repeatCount:null,

    /**
     * <p>Boolean value indicating if the animation should happen in reverse (from last to first).</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    reverse:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    transform:null,

    /**
     * <p>URL to the image to display. Deprecated: use {@link Titanium.UI.ImageView.image} instead.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    url:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.anchorPoint} property.</p>
     * @returns Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.animating} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getAnimating:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.backgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.backgroundImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.borderColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.borderRadius} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.borderWidth} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.canScale} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getCanScale:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.center} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.decodeRetries} property.</p>
     * @returns Number
     * @since 1.7.0 (Android)
     */
    getDecodeRetries:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.defaultImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getDefaultImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.duration} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getDuration:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.enableZoomControls} property.</p>
     * @returns Boolean
     * @since 1.3.0 (Android)
     */
    getEnableZoomControls:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.focusable} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.hires} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHires:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.image} property.</p>
     * @returns String
     * @returns Titanium_Blob
     * @returns Titanium_Filesystem_File
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.images} property.</p>
     * @returns Array<Object>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getImages:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.layout} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.opacity} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.paused} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getPaused:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.preventDefaultImage} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getPreventDefaultImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.repeatCount} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRepeatCount:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.reverse} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getReverse:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.size} property.</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.url} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getUrl:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.visible} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ImageView.zIndex} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Pause a running animation.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    pause:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.canScale} property.</p>
     * @param {Boolean} canScale <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setCanScale:function(canScale) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.decodeRetries} property.</p>
     * @param {Number} decodeRetries <p>New value for the property.</p>
     * @since 1.7.0 (Android)
     */
    setDecodeRetries:function(decodeRetries) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.defaultImage} property.</p>
     * @param {String} defaultImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setDefaultImage:function(defaultImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.duration} property.</p>
     * @param {Number} duration <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setDuration:function(duration) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.enableZoomControls} property.</p>
     * @param {Boolean} enableZoomControls <p>New value for the property.</p>
     * @since 1.3.0 (Android)
     */
    setEnableZoomControls:function(enableZoomControls) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.hires} property.</p>
     * @param {Boolean} hires <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHires:function(hires) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.image} property.</p>
     * @param {String|Titanium_Blob|Titanium_Filesystem_File} image <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setImage:function(image) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.images} property.</p>
     * @param {Array<Object>} images <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setImages:function(images) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.preventDefaultImage} property.</p>
     * @param {Boolean} preventDefaultImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setPreventDefaultImage:function(preventDefaultImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.repeatCount} property.</p>
     * @param {Number} repeatCount <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRepeatCount:function(repeatCount) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.reverse} property.</p>
     * @param {Boolean} reverse <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setReverse:function(reverse) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.url} property.</p>
     * @param {String} url <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setUrl:function(url) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ImageView.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Start the image animation. This method only works if you set multiple images.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    start:function() {
    },

    /**
     * <p>Stop a running animation and reset the index to the first image.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    stop:function() {
    },

    /**
     * <p>Return the image as a Blob object.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toBlob:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Use the {@link Titanium.UI.createLabel} method to create a label.</p>
 * 
 * @example Basic Label
 * <p>Create a label with a nice text shadow, 48px font that's aligned <code>center</code> and height <code>auto</code>.</p>
<pre><code>var l2 = Titanium.UI.createLabel({
    text:'Appcelerator',
    height:'auto',
    width:'auto',
    shadowColor:'#aaa',
    shadowOffset:{x:5,y:5},
    color:'#900',
    font:{fontSize:48},
    textAlign:'center'
});
</code></pre>
 */
function Titanium_UI_Label() {
}
Titanium_UI_Label.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Automatically convert certain text items in the label to clickable links.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    autoLink:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Number of pixels to extend the background image past the label on the bottom.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundPaddingBottom:null,

    /**
     * <p>Number of pixels to extend the background image past the label on the left.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundPaddingLeft:null,

    /**
     * <p>Number of pixels to extend the background image past the label on the right.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundPaddingRight:null,

    /**
     * <p>Number of pixels to extend the background image past the label on the top.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundPaddingTop:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Color of the label text.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    color:null,

    /**
     * <p>Turn on/off the addition of ellipses at the end of the label if the text is too large to fit.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    ellipsize:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>Font to use for the label text.</p>
     * @type Font
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    font:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Color of the label when in the highlighted state.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    highlightedColor:null,

    /**
     * <p>Simple HTML formatting.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    html:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Minimum font size when the font is sized based on the contents.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    minimumFontSize:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Text shadow color.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    shadowColor:null,

    /**
     * <p>Shadow offset as a dictionary with the properties <code>x</code> and <code>y</code>.</p>
     * @type Object
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    shadowOffset:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Label text.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    text:null,

    /**
     * <p>Text alignment, specified using one of the {@link Titanium.UI} text alignment constants: {@link Titanium.UI.TEXT_ALIGNMENT_LEFT}, {@link Titanium.UI.TEXT_ALIGNMENT_CENTER}, or {@link Titanium.UI.TEXT_ALIGNMENT_RIGHT}.</p>
     * @type String|Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    textAlign:null,

    /**
     * <p>Key identifying a string from the locale file to use for the label text.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    textid:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Enable or disable word wrapping in the label.</p>
     * @type Boolean
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    wordWrap:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.autoLink} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getAutoLink:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.backgroundPaddingBottom} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundPaddingBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.backgroundPaddingLeft} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundPaddingLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.backgroundPaddingRight} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundPaddingRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.backgroundPaddingTop} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundPaddingTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.color} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.ellipsize} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getEllipsize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.font} property.</p>
     * @returns Font
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFont:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.highlightedColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getHighlightedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.html} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getHtml:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.minimumFontSize} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getMinimumFontSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.shadowColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getShadowColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.shadowOffset} property.</p>
     * @returns Object
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getShadowOffset:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.size} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.text} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getText:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.textAlign} property.</p>
     * @returns String
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTextAlign:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.textid} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTextid:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.wordWrap} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getWordWrap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Label.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.autoLink} property.</p>
     * @param {Number} autoLink <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setAutoLink:function(autoLink) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.backgroundPaddingBottom} property.</p>
     * @param {Number} backgroundPaddingBottom <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundPaddingBottom:function(backgroundPaddingBottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.backgroundPaddingLeft} property.</p>
     * @param {Number} backgroundPaddingLeft <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundPaddingLeft:function(backgroundPaddingLeft) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.backgroundPaddingRight} property.</p>
     * @param {Number} backgroundPaddingRight <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundPaddingRight:function(backgroundPaddingRight) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.backgroundPaddingTop} property.</p>
     * @param {Number} backgroundPaddingTop <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundPaddingTop:function(backgroundPaddingTop) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.color} property.</p>
     * @param {String} color <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setColor:function(color) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.ellipsize} property.</p>
     * @param {Boolean} ellipsize <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setEllipsize:function(ellipsize) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.font} property.</p>
     * @param {Font} font <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setFont:function(font) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.highlightedColor} property.</p>
     * @param {String} highlightedColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setHighlightedColor:function(highlightedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.html} property.</p>
     * @param {String} html <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setHtml:function(html) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.minimumFontSize} property.</p>
     * @param {Number} minimumFontSize <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setMinimumFontSize:function(minimumFontSize) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.shadowColor} property.</p>
     * @param {String} shadowColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setShadowColor:function(shadowColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.shadowOffset} property.</p>
     * @param {Object} shadowOffset <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setShadowOffset:function(shadowOffset) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.text} property.</p>
     * @param {String} text <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setText:function(text) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.textAlign} property.</p>
     * @param {String|Number} textAlign <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTextAlign:function(textAlign) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.textid} property.</p>
     * @param {String} textid <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTextid:function(textid) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.wordWrap} property.</p>
     * @param {Boolean} wordWrap <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setWordWrap:function(wordWrap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Label.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android
 * @namespace <p>A Toast notification is an unobtrusive, pop-up notification that doesn't 
block the UI. Use the {@link Titanium.UI.createNotification} method to create a Toast notification.</p>
<p>By default, a Toast notification appears centered on the bottom half of the screen.</p>
<p>This object will be moved to the Android namespace in a future release.</p>
 * 
 * @example Simple Toast Notification
 * <p>The simplest use case is also the most common.</p>
<pre><code>var toast = Ti.UI.createNotification({
    message:"Please Stand By",
    duration: Ti.UI.NOTIFICATION_DURATION_LONG
});
toast.show();
</code></pre>
 */
function Titanium_UI_Notification() {
}
Titanium_UI_Notification.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (Android)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (Android)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android)
     */
    center:null,

    /**
     * <p>Determines how long the notification stays on screen.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    duration:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android)
     */
    height:null,

    /**
     * <p>Horizontal placement of the notification, <em>as a fraction of the screen width</em>.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    horizontalMargin:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android)
     */
    left:null,

    /**
     * <p>Notification text to display.</p>
     * @type String
     * @since 0.8 (Android)
     */
    message:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android)
     */
    right:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.8 (Android)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android)
     */
    transform:null,

    /**
     * <p>Vertical placement of the notifcation, <em>as a fraction of the screen height</em>.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    verticalMargin:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android)
     */
    width:null,

    /**
     * <p>X offset from the default position, in pixels.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    xOffset:null,

    /**
     * <p>Y offset from the default position, in pixels.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    yOffset:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.8 (Android)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (Android)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.center} property.</p>
     * @returns Point
     * @since 0.8 (Android)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.duration} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getDuration:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.horizontalMargin} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getHorizontalMargin:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.layout} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.message} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getMessage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.size} property.</p>
     * @returns Object
     * @since 0.8 (Android)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.verticalMargin} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getVerticalMargin:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.xOffset} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getXOffset:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.yOffset} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getYOffset:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Notification.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.duration} property.</p>
     * @param {Number} duration <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setDuration:function(duration) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.horizontalMargin} property.</p>
     * @param {Number} horizontalMargin <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setHorizontalMargin:function(horizontalMargin) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.message} property.</p>
     * @param {String} message <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setMessage:function(message) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.verticalMargin} property.</p>
     * @param {Number} verticalMargin <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setVerticalMargin:function(verticalMargin) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.xOffset} property.</p>
     * @param {Number} xOffset <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setXOffset:function(xOffset) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.yOffset} property.</p>
     * @param {Number} yOffset <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setYOffset:function(yOffset) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Notification.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Show the notification.</p>
     * @since 0.8 (Android)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.8 (Android)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 * 
 * @example Simple Options Dialog with 2 Options
 * <p>In this example, we show a simple option dialog.</p>
<pre><code>var dialog = Titanium.UI.createOptionDialog({
    title: 'Hello',
    options: ['Option 1','Option 2'],
    cancel:1
});
dialog.show();
</code></pre>
 */
function Titanium_UI_OptionDialog() {
}
Titanium_UI_OptionDialog.prototype = {

    /**
     * <p>A Titanium.UI.View. Allows for arbitrary contents inside a native dialog. Works for any dialog.</p>
     * @type Object
     * @since 0.8 (Android)
     */
    androidView:null,

    /**
     * <p>an index to indicate which button should be the cancel button. If no button should be the cancel button, use -1. If there is a cancel button, it MUST be the last button for use on iPad.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    cancel:null,

    /**
     * <p>the destructive button (indicated by a visual clue in the UI)</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    destructive:null,

    /**
     * <p>array of button names as strings</p>
     * @type Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    options:null,

    /**
     * <p>set an initially selected option. Only valid when options has been specified.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    selectedIndex:null,

    /**
     * <p>the title of the dialog</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    title:null,

    /**
     * <p>the key in the locale file to use for the title property</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    titleid:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.OptionDialog.androidView} property.</p>
     * @returns Object
     * @since 0.8 (Android)
     */
    getAndroidView:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.OptionDialog.cancel} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getCancel:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.OptionDialog.destructive} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getDestructive:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.OptionDialog.options} property.</p>
     * @returns Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getOptions:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.OptionDialog.selectedIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSelectedIndex:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.OptionDialog.title} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.OptionDialog.titleid} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTitleid:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.OptionDialog.androidView} property.</p>
     * @param {Object} androidView <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setAndroidView:function(androidView) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.OptionDialog.cancel} property.</p>
     * @param {Number} cancel <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setCancel:function(cancel) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.OptionDialog.destructive} property.</p>
     * @param {Number} destructive <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setDestructive:function(destructive) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.OptionDialog.options} property.</p>
     * @param {Array<Object>} options <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setOptions:function(options) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.OptionDialog.selectedIndex} property.</p>
     * @param {Number} selectedIndex <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSelectedIndex:function(selectedIndex) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.OptionDialog.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTitle:function(title) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.OptionDialog.titleid} property.</p>
     * @param {String} titleid <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTitleid:function(titleid) {
    },

    /**
     * <p>cause the dialog to become visible</p>
     * @param {Titanium_UI_View} view <p>name of the view the OptionDialog needs to be attached to. Only used on iPad.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    show:function(view) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>For Android, note the <code>useSpinner</code> property above.  By default, when you create a picker you will get Android's native picker control, which looks more like the classic "dropdown" widget.  If you'd prefer to use something that looks more like iOS's picker -- which looks like one or more spinning wheels --, you can set <code>useSpinner: true</code>.</p>
<p>Titanium's Android picker control (both the native and the <code>useSpinner</code> variety) does not support/display views that are added to picker rows.  Only the <code>title</code> of the row will be displayed within the control.
Titanium for Android does not support the DateTime or Count Down Timer picker type.</p>
 * 
 * @example Basic Single Column Picker
 * <p>In this basic picker example, we create a one column picker with 4 rows. </p>
<pre><code>var picker = Titanium.UI.createPicker();
var data = [];
data[0]=Titanium.UI.createPickerRow({title:'Bananas'});
data[1]=Titanium.UI.createPickerRow({title:'Strawberries'});
data[2]=Titanium.UI.createPickerRow({title:'Mangos'});
data[3]=Titanium.UI.createPickerRow({title:'Grapes'});
picker.add(data);
</code></pre>
 * 
 * @example Custom View for Row
 * <p>In this example, we use a custom label for each row in a column.</p>
<pre><code>var picker = Titanium.UI.createPicker();
var row = Titanium.UI.createPickerRow();
var label = Titanium.UI.createLabel({
    text:text,
    font:{fontSize:24,fontWeight:'bold'},
    color:text,
    width:'auto',
    height:'auto'
});
row.add(label);
picker.add(row);
</code></pre>
 */
function Titanium_UI_Picker() {
}
Titanium_UI_Picker.prototype = {

    /**
     * <p>array of column values</p>
     * @type Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    columns:null,

    /**
     * <p>the duration value in milliseconds for count down timer pickers. (Note that Titanium's Android implementation does not support the countdown timer.)</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    countDownDuration:null,

    /**
     * <p>(applicable only to the {@link Titanium.UI.PICKER_TYPE_TIME} picker.)  If true, a 24-hour cloc will be used, with hours 0 through 23.  If false, a 12-hour clock will be used, with hours 1 through 12 and am/pm controls.  For reasons of backward compatibility, the default value depends on the type of time picker being used.  For the native time picker (when "useSpinner" is either un-set or false), the default is false.  For the spinner-style time picker, the default is true.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    format24:null,

    /**
     * <p>the locale used for displaying Date/Time pickers values</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    locale:null,

    /**
     * <p>the minimum Date/Time for value for date pickers</p>
     * @type Date
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    minDate:null,

    /**
     * <p>property to set the interval displayed by the minutes wheel (for example, 15 minutes). The interval value must be evenly divided into 60; if it is not, the default value is used. The default and minimum values are 1; the maximum value is 30.  (Not currently supported on Android.)</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    minuteInterval:null,

    /**
     * <p>for basic picker, boolean value to indicate whether the visual selection style is shown. On the iPhone, this is a blue selected bar.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    selectionIndicator:null,

    /**
     * <p>the type constant for the picker. One of {@link Titanium.UI.PICKER_TYPE_PLAIN} (default), {@link Titanium.UI.PICKER_TYPE_DATE_AND_TIME}, {@link Titanium.UI.PICKER_TYPE_DATE}, {@link Titanium.UI.PICKER_TYPE_TIME} or {@link Titanium.UI.PICKER_TYPE_COUNT_DOWN_TIMER}. (Note that Titanium's Android implementation does not support the countdown timer or date+time varieties.)</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    type:null,

    /**
     * <p>An indicator that you wish to use a non-native Android control that looks and behaves more like the iOS picker in the sense that the user selects values by spinning a wheel.  (The native Android spinner is more like a conventional "dropdown".)  Note that this option works both plain pickers, date pickers and time pickers.  Set it preferably immediately when creating the picker, i.e., <code>Titanium.UI.createPicker({useSpinner:true});</code>, but definitely before <code>.add()</code>ing the picker to its parent.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    useSpinner:null,

    /**
     * <p>the Date/Time value for date pickers</p>
     * @type Date
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    value:null,

    /**
     * <p>This is relevant only if you set <code>useSpinner</code> to <code>true</code>, and it is relevant only for the plain picker (not date/time).  By default, the spinner-style Android picker will show 5 rows: the one in the middle which is selected, and then 2 above and below.  You can set this to allow more (use an odd number to be sure the selected row is in the middle.)</p>
     * @type Number
     * @since 0.8 (Android)
     */
    visibleItems:null,


    /**
     * <p>add an array of rows, a single row or a column to the picker</p>
     * @param {Array<Titanium_UI_PickerRow>|Titanium_UI_PickerColumn|Titanium_UI_PickerRow} data <p>add an array of rows, a single row or a column to the picker</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(data) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Picker.columns} property.</p>
     * @returns Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getColumns:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Picker.countDownDuration} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCountDownDuration:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Picker.format24} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFormat24:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Picker.locale} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLocale:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Picker.minDate} property.</p>
     * @returns Date
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getMinDate:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Picker.minuteInterval} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getMinuteInterval:function() {
    },

    /**
     * <p>get the selected row object for column</p>
     * @param {Number} index <p>for the column index, return the row object or nil if not found</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSelectedRow:function(index) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Picker.selectionIndicator} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSelectionIndicator:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Picker.type} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Picker.useSpinner} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getUseSpinner:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Picker.value} property.</p>
     * @returns Date
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Picker.visibleItems} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getVisibleItems:function() {
    },

    /**
     * <p>causes the picker to reload the values from the new column.</p>
     * @param {Object} column <p>new column to load</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    reloadColumn:function(column) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Picker.columns} property.</p>
     * @param {Array<Object>} columns <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setColumns:function(columns) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Picker.countDownDuration} property.</p>
     * @param {Number} countDownDuration <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCountDownDuration:function(countDownDuration) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Picker.format24} property.</p>
     * @param {Boolean} format24 <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFormat24:function(format24) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Picker.locale} property.</p>
     * @param {String} locale <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLocale:function(locale) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Picker.minDate} property.</p>
     * @param {Date} minDate <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setMinDate:function(minDate) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Picker.minuteInterval} property.</p>
     * @param {Number} minuteInterval <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setMinuteInterval:function(minuteInterval) {
    },

    /**
     * <p>set the column's row to the selected state</p>
     * @param {Number} column <p>the column index</p>
     * @param {Number} row <p>the row index</p>
     * @param {Boolean} animated <p>boolean to indicate if the selection should be animated (default) (optional)</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSelectedRow:function(column, row, animated) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Picker.selectionIndicator} property.</p>
     * @param {Boolean} selectionIndicator <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSelectionIndicator:function(selectionIndicator) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Picker.type} property.</p>
     * @param {Number} type <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setType:function(type) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Picker.useSpinner} property.</p>
     * @param {Boolean} useSpinner <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setUseSpinner:function(useSpinner) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Picker.value} property.</p>
     * @param {Date} value <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setValue:function(value) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Picker.visibleItems} property.</p>
     * @param {Number} visibleItems <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setVisibleItems:function(visibleItems) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_UI_PickerColumn() {
}
Titanium_UI_PickerColumn.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    center:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    right:null,

    /**
     * <p>number of rows in the column</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    rowCount:null,

    /**
     * <p>an array of rows</p>
     * @type Array<Object>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    rows:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>add a row to the column.</p>
     * @param {Titanium_UI_PickerRow} row <p>The row to add.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    addRow:function(row) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.anchorPoint} property.</p>
     * @returns Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.backgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.backgroundImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.borderColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.borderRadius} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.borderWidth} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.center} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.focusable} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.layout} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.opacity} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.rowCount} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getRowCount:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.rows} property.</p>
     * @returns Array<Object>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getRows:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.size} property.</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.visible} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerColumn.zIndex} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>remove a row from the column.</p>
     * @param {Titanium_UI_PickerRow} row <p>The row to remove.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeRow:function(row) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.rows} property.</p>
     * @param {Array<Object>} rows <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setRows:function(rows) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerColumn.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Use the {@link Titanium.UI.createPickerRow} method to create a picker row.</p>
 * 
 * @example Custom Views for a Picker Row
 * <p>Since the row object is itself a view, you can add views and widgets to it to customize the 
the row's display. In the example below, we create a custom label for the row.</p>
<pre><code>var row = Ti.UI.createPickerRow();
var label = Ti.UI.createLabel({
    text:text,
    font:{fontSize:24,fontWeight:'bold'},
    color:text,
    width:'auto',
    height:'auto'
});
row.add(label);
picker.add(row);
</code></pre>
 */
function Titanium_UI_PickerRow() {
}
Titanium_UI_PickerRow.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    focusable:null,

    /**
     * <p>Font size for displaying item text. Ignored when using a custom view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fontSize:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>When set to <code>true</code> in the <code>createPickerRow</code> method, sets the row to selected on initial display.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    selected:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Item text.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    title:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.anchorPoint} property.</p>
     * @returns Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.backgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.backgroundImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.borderColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.borderRadius} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.borderWidth} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.center} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.focusable} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.fontSize} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getFontSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.layout} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.opacity} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.selected} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSelected:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.size} property.</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.title} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.visible} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.PickerRow.zIndex} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.fontSize} property.</p>
     * @param {Number} fontSize <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setFontSize:function(fontSize) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.selected} property.</p>
     * @param {Boolean} selected <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setSelected:function(selected) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTitle:function(title) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.PickerRow.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>A progress bar is used for displaying an ongoing activity with a defined progression. 
For an activity without a defined progression, you can use {@link Titanium.UI.ActivityIndicator}. </p>
<p>Unlike most views, progress bars are hidden by default, so you must explicitly 
show the progress bar.</p>
<p>Use the {@link Titanium.UI.createProgressBar} method to create a progress bar.</p>
 * 
 * @example Simple Progress Bar
 * <p>In this example we create a progress bar with the min value of <code>0</code> and the max value 
of <code>10</code> and the current value of <code>0</code>. Changing the <code>value</code> property causes the 
displayed progress bar to update.</p>
<pre><code>var pb=Titanium.UI.createProgressBar({
    top:10,
    width:250,
    height:'auto',
    min:0,
    max:10,
    value:0,
    color:'#fff',
    message:'Downloading 0 of 10',
    font:{fontSize:14, fontWeight:'bold'},
    style:Titanium.UI.iPhone.ProgressBarStyle.PLAIN,
});
win.add(pb);
pb.show();
</code></pre>
 */
function Titanium_UI_ProgressBar() {
}
Titanium_UI_ProgressBar.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    center:null,

    /**
     * <p>Color of the progress bar text.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    color:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>Font for the progress bar text.</p>
     * @type Font
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    font:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    left:null,

    /**
     * <p>Maximum value of the progress bar.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    max:null,

    /**
     * <p>Progress bar text.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    message:null,

    /**
     * <p>Minimum value of the progress bar.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    min:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    right:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Style of the progress bar.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    style:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Current value of the progress bar.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    value:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.color} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.font} property.</p>
     * @returns Font
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getFont:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.max} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getMax:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.message} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getMessage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.min} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getMin:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.size} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.style} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.value} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ProgressBar.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.color} property.</p>
     * @param {String} color <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setColor:function(color) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.font} property.</p>
     * @param {Font} font <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setFont:function(font) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.max} property.</p>
     * @param {Number} max <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setMax:function(max) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.message} property.</p>
     * @param {String} message <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setMessage:function(message) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.min} property.</p>
     * @param {Number} min <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setMin:function(min) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.style} property.</p>
     * @param {Number} style <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setStyle:function(style) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.value} property.</p>
     * @param {Number} value <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setValue:function(value) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ProgressBar.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Views added to the Scroll View will be scrolled based on the content size of the 
Scroll View. The Scroll View is created by the method {@link Titanium.UI.createScrollView}. </p>
<p>If your scrollable region fits within the size of the content area the scroll view will not scroll.</p>
<h4>Android Implementation Notes</h4>
<p>In Android, Scroll Views can only scroll in one direction, either vertical 
or horizontal, but not both at the same time. Use the {@link Titanium.UI.ScrollView.scrollType} 
property to set the scroll direction explicitly.</p>
<p>If the <code>scrollType</code> property is <em>not</em> set, the scroll view
attempts to deduce the scroll direction based on some of the other
properties that have been set.  Specifically, if <code>contentWidth</code> and <code>width</code>
are both set and are equal to each other, or if they are both set <em>and</em>
<code>showVerticalScrollIndicator</code> is set to <code>true</code>, then the scroll direction
is set to "vertical".  If <code>contentHeight</code> and <code>height</code> are both set and are
equal, or if they are both set and <code>showHorizontalScrollIndicator</code> is set
to <code>true</code>, then the scroll direction is set to "horizontal".  If
<code>scrollType</code> is set, it overrides the deduced setting.</p>
 * 
 * @example Simple Scroll View
 * <p>Create a scroll view with content.</p>
<pre><code>var scrollView = Titanium.UI.createScrollView({
    contentWidth:'auto',
    contentHeight:'auto',
    top:0,
    showVerticalScrollIndicator:true,
    showHorizontalScrollIndicator:true
});
var view = Ti.UI.createView({
    backgroundColor:'#336699',
    borderRadius:10,
    width:300,
    height:2000,
    top:10
});
scrollView.add(view);
Titanium.UI.currentWindow.add(scrollView);
</code></pre>
 */
function Titanium_UI_ScrollView() {
}
Titanium_UI_ScrollView.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>boolean to indicate if the scroll view can cancel subview touches in order to scroll instead. Default of true</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    canCancelEvents:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>the height of the scrollable area</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    contentHeight:null,

    /**
     * <p>an object (with x and y properties) to indicate the offset of the content area</p>
     * @type Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    contentOffset:null,

    /**
     * <p>the width of the scrollable area</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    contentWidth:null,

    /**
     * <p>disable view bouncing.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    disableBounce:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>boolean to control the horizontal bounce during scrolling</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    horizontalBounce:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>the maximum scale of the content</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    maxZoomScale:null,

    /**
     * <p>the minimum scale of the content</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    minZoomScale:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>For explicitly setting the direction -- "vertical" or "horizontal" -- in which the ScrollView will scroll.
See also the documentation notes for more information concerning how Android deduces the scroll
direction when this property is <em>not</em> set.</p>
     * @type String
     * @since 0.9 (Android)
     */
    scrollType:null,

    /**
     * <p>boolean to indicate whether the horizontal scroll indicator is visible</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    showHorizontalScrollIndicator:null,

    /**
     * <p>boolean to indicate whether the vertical scroll indicator is visible</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    showVerticalScrollIndicator:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    transform:null,

    /**
     * <p>boolean to control the vertical bounce during scrolling</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    verticalBounce:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,

    /**
     * <p>set the zoom scale for the current content area</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    zoomScale:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.anchorPoint} property.</p>
     * @returns Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.backgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.backgroundImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.borderColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.borderRadius} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.borderWidth} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.canCancelEvents} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCanCancelEvents:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.center} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.contentHeight} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getContentHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.contentOffset} property.</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getContentOffset:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.contentWidth} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getContentWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.disableBounce} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getDisableBounce:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.focusable} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.horizontalBounce} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getHorizontalBounce:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.layout} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.maxZoomScale} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getMaxZoomScale:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.minZoomScale} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getMinZoomScale:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.opacity} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.scrollType} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getScrollType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.showHorizontalScrollIndicator} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getShowHorizontalScrollIndicator:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.showVerticalScrollIndicator} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getShowVerticalScrollIndicator:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.size} property.</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.verticalBounce} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getVerticalBounce:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.visible} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.zIndex} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollView.zoomScale} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getZoomScale:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>scrollTo a particular point</p>
     * @param {Number} x <p>the x point within the view</p>
     * @param {Number} y <p>the y point within the view</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    scrollTo:function(x, y) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.canCancelEvents} property.</p>
     * @param {Boolean} canCancelEvents <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCanCancelEvents:function(canCancelEvents) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.contentHeight} property.</p>
     * @param {Number} contentHeight <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setContentHeight:function(contentHeight) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.contentOffset} property.</p>
     * @param {Object} contentOffset <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setContentOffset:function(contentOffset) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.contentWidth} property.</p>
     * @param {Number} contentWidth <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setContentWidth:function(contentWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.disableBounce} property.</p>
     * @param {Boolean} disableBounce <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setDisableBounce:function(disableBounce) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.horizontalBounce} property.</p>
     * @param {Boolean} horizontalBounce <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setHorizontalBounce:function(horizontalBounce) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.maxZoomScale} property.</p>
     * @param {Number} maxZoomScale <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setMaxZoomScale:function(maxZoomScale) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.minZoomScale} property.</p>
     * @param {Number} minZoomScale <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setMinZoomScale:function(minZoomScale) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.scrollType} property.</p>
     * @param {String} scrollType <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setScrollType:function(scrollType) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.showHorizontalScrollIndicator} property.</p>
     * @param {Boolean} showHorizontalScrollIndicator <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setShowHorizontalScrollIndicator:function(showHorizontalScrollIndicator) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.showVerticalScrollIndicator} property.</p>
     * @param {Boolean} showVerticalScrollIndicator <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setShowVerticalScrollIndicator:function(showVerticalScrollIndicator) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.verticalBounce} property.</p>
     * @param {Boolean} verticalBounce <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setVerticalBounce:function(verticalBounce) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollView.zoomScale} property.</p>
     * @param {Number} zoomScale <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setZoomScale:function(zoomScale) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 * 
 * @example Simple Scrollable View with 3 Views
 * <p>Create three views and place each into a scrollable view.</p>
<pre><code>var view1 = Titanium.UI.createView({backgroundColor:'#123'});
var view2 = Titanium.UI.createView({backgroundColor:'#123'});
var view3 = Titanium.UI.createView({backgroundColor:'#123'});
var scrollView = Titanium.UI.createScrollableView({
    views:[view1,view2,view3],
    showPagingControl:true
});
win.add(scrollView);
</code></pre>
 */
function Titanium_UI_ScrollableView() {
}
Titanium_UI_ScrollableView.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    bottom:null,

    /**
     * <p>The number of views to cache (prerender).  Views are rendered in the range (currentPage +/- (cacheSize - 1)/2), ROUNDED DOWN for even values (i.e. cacheSize=4 renders 3 views into the cache).  Keep in mind that improved performance (larger cache) will lead to faster performance, but more memory usage.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    cacheSize:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    center:null,

    /**
     * <p>the current page visible in the view</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    currentPage:null,

    /**
     * <p>disable view bouncing.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    disableBounce:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    opacity:null,

    /**
     * <p>the color of the paging control. defaults to black.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    pagingControlColor:null,

    /**
     * <p>the height in pixels of the paging control, if visible. defaults to 20</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    pagingControlHeight:null,

    /**
     * <p>number of milliseconds to wait before hiding the paging control. Less than or equal to 0 disables timeout keeping controls displayed.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    pagingControlTimeout:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    right:null,

    /**
     * <p>boolean to indicate whether the paging control UI is visible</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    showPagingControl:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>array of view objects to place in the view</p>
     * @type Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    views:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>add a new view to the Scrollable View</p>
     * @param {Object} view <p>the view to add</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addView:function(view) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.cacheSize} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getCacheSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.currentPage} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getCurrentPage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.disableBounce} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getDisableBounce:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.pagingControlColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getPagingControlColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.pagingControlHeight} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getPagingControlHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.pagingControlTimeout} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getPagingControlTimeout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.showPagingControl} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getShowPagingControl:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.size} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.views} property.</p>
     * @returns Array<Object>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getViews:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.ScrollableView.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>remove an existing view from the Scrollable View</p>
     * @param {Object} view <p>the view to remove</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeView:function(view) {
    },

    /**
     * <p>scroll to a specific view</p>
     * @param {Number|Object} view <p>either an integer index or the view object to bring into view as the currentPage</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    scrollToView:function(view) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.cacheSize} property.</p>
     * @param {Number} cacheSize <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setCacheSize:function(cacheSize) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.currentPage} property.</p>
     * @param {Number} currentPage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setCurrentPage:function(currentPage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.disableBounce} property.</p>
     * @param {Boolean} disableBounce <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setDisableBounce:function(disableBounce) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.pagingControlColor} property.</p>
     * @param {String} pagingControlColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setPagingControlColor:function(pagingControlColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.pagingControlHeight} property.</p>
     * @param {Number} pagingControlHeight <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setPagingControlHeight:function(pagingControlHeight) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.showPagingControl} property.</p>
     * @param {Boolean} showPagingControl <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setShowPagingControl:function(showPagingControl) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.views} property.</p>
     * @param {Array<Object>} views <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setViews:function(views) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.ScrollableView.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * 
 * @example Simple Search Bar
 * <p>var search = Titanium.UI.createSearchBar({
    barColor:'#000', 
    showCancel:true,
    height:43,
    top:0,
});</p>
 */
function Titanium_UI_SearchBar() {
}
Titanium_UI_SearchBar.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>One of {@link Titanium.UI.TEXT_AUTOCAPITALIZATION_NONE}, {@link Titanium.UI.TEXT_AUTOCAPITALIZATION_WORDS}, {@link Titanium.UI.TEXT_AUTOCAPITALIZATION_SENTENCES}, or {@link Titanium.UI.TEXT_AUTOCAPITALIZATION_ALL} to indicate how the field should be capitalized during typing.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    autocapitalization:null,

    /**
     * <p>boolean to indicate if the text in the field should be autocorrected as typed</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    autocorrect:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>the bar color of the search bar view</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    barColor:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>the text to show when the search bar field is not focused</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hintText:null,

    /**
     * <p>the key in the locale file to use for the hintText property</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hinttextid:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>the keyboard type constant to use when the field is focused</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    keyboardType:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>a single line of text displayed at the top of the search bar</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    prompt:null,

    /**
     * <p>the key in the locale file to use for the prompt property</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    promptid:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>boolean indicates whether the cancel button is displayed</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    showCancel:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>the value of the search bar</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    value:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>called to force the search bar to lose focus</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    blur:function() {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>called to force the search bar to focus</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    focus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.autocapitalization} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getAutocapitalization:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.autocorrect} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getAutocorrect:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.barColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBarColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.hintText} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHintText:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.hinttextid} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHinttextid:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.keyboardType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getKeyboardType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.prompt} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPrompt:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.promptid} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPromptid:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.showCancel} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getShowCancel:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.size} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.value} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.SearchBar.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.autocapitalization} property.</p>
     * @param {Number} autocapitalization <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setAutocapitalization:function(autocapitalization) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.autocorrect} property.</p>
     * @param {Boolean} autocorrect <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setAutocorrect:function(autocorrect) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.barColor} property.</p>
     * @param {String} barColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBarColor:function(barColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.hintText} property.</p>
     * @param {String} hintText <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHintText:function(hintText) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.hinttextid} property.</p>
     * @param {String} hinttextid <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHinttextid:function(hinttextid) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.keyboardType} property.</p>
     * @param {Number} keyboardType <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setKeyboardType:function(keyboardType) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.prompt} property.</p>
     * @param {String} prompt <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setPrompt:function(prompt) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.promptid} property.</p>
     * @param {String} promptid <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setPromptid:function(promptid) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.showCancel} property.</p>
     * @param {Boolean} showCancel <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setShowCancel:function(showCancel) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.value} property.</p>
     * @param {String} value <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setValue:function(value) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.SearchBar.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
function Titanium_UI_Slider() {
}
Titanium_UI_Slider.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>the image url of the slider left track when in the disabled state</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    disabledLeftTrackImage:null,

    /**
     * <p>the image url of the slider right track when in the disabled state</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    disabledRightTrackImage:null,

    /**
     * <p>the image url of the slider thumb when in the disabled state</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    disabledThumbImage:null,

    /**
     * <p>boolean to indicate the enabled state of the slider</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    enabled:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>the image url of the slider left track when in the highlighted state</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    highlightedLeftTrackImage:null,

    /**
     * <p>the image url of the slider right track when in the highlighted state</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    highlightedRightTrackImage:null,

    /**
     * <p>the image url of the slider thumb when in the highlighted state</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    highlightedThumbImage:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>the image url of the slider left track</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    leftTrackImage:null,

    /**
     * <p>the maximum slider value</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    max:null,

    /**
     * <p>value can't be moved higher than maxRange. maxRange equals max by default. (Android)</p>
     * @type Number
     * @since 0.8 (Android)
     */
    maxRange:null,

    /**
     * <p>the minimum slider value</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    min:null,

    /**
     * <p>value can't be moved lower than minRange. minRange equals min by default. (Android)</p>
     * @type Number
     * @since 0.8 (Android)
     */
    minRange:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>the image url of the slider right track</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    rightTrackImage:null,

    /**
     * <p>the image url of the slider left track when in the selected state</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    selectedLeftTrackImage:null,

    /**
     * <p>the image url of the slider right track when in the selected state</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    selectedRightTrackImage:null,

    /**
     * <p>the image url of the slider thumb when in the selected state</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    selectedThumbImage:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>the image url to the slider thumb</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    thumbImage:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>the value of the slider</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    value:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.disabledLeftTrackImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getDisabledLeftTrackImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.disabledRightTrackImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getDisabledRightTrackImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.disabledThumbImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getDisabledThumbImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.enabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.highlightedLeftTrackImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getHighlightedLeftTrackImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.highlightedRightTrackImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getHighlightedRightTrackImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.highlightedThumbImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getHighlightedThumbImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.leftTrackImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLeftTrackImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.max} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getMax:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.maxRange} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getMaxRange:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.min} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getMin:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.minRange} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getMinRange:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.rightTrackImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRightTrackImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.selectedLeftTrackImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSelectedLeftTrackImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.selectedRightTrackImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSelectedRightTrackImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.selectedThumbImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSelectedThumbImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.size} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.thumbImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getThumbImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.value} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Slider.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.disabledLeftTrackImage} property.</p>
     * @param {String} disabledLeftTrackImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setDisabledLeftTrackImage:function(disabledLeftTrackImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.disabledRightTrackImage} property.</p>
     * @param {String} disabledRightTrackImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setDisabledRightTrackImage:function(disabledRightTrackImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.disabledThumbImage} property.</p>
     * @param {String} disabledThumbImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setDisabledThumbImage:function(disabledThumbImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.enabled} property.</p>
     * @param {Boolean} enabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setEnabled:function(enabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.highlightedLeftTrackImage} property.</p>
     * @param {String} highlightedLeftTrackImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setHighlightedLeftTrackImage:function(highlightedLeftTrackImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.highlightedRightTrackImage} property.</p>
     * @param {String} highlightedRightTrackImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setHighlightedRightTrackImage:function(highlightedRightTrackImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.highlightedThumbImage} property.</p>
     * @param {String} highlightedThumbImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setHighlightedThumbImage:function(highlightedThumbImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.leftTrackImage} property.</p>
     * @param {String} leftTrackImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLeftTrackImage:function(leftTrackImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.max} property.</p>
     * @param {Number} max <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setMax:function(max) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.maxRange} property.</p>
     * @param {Number} maxRange <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setMaxRange:function(maxRange) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.min} property.</p>
     * @param {Number} min <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setMin:function(min) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.minRange} property.</p>
     * @param {Number} minRange <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setMinRange:function(minRange) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.rightTrackImage} property.</p>
     * @param {String} rightTrackImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRightTrackImage:function(rightTrackImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.selectedLeftTrackImage} property.</p>
     * @param {String} selectedLeftTrackImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSelectedLeftTrackImage:function(selectedLeftTrackImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.selectedRightTrackImage} property.</p>
     * @param {String} selectedRightTrackImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSelectedRightTrackImage:function(selectedRightTrackImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.selectedThumbImage} property.</p>
     * @param {String} selectedThumbImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSelectedThumbImage:function(selectedThumbImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.thumbImage} property.</p>
     * @param {String} thumbImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setThumbImage:function(thumbImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.value} property.</p>
     * @param {String} value <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setValue:function(value) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Slider.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * 
 * @example Simple Switch Example
 * <p>The following is a simple example of a switch and receiving <code>change</code> events.</p>
<pre><code>var basicSwitch = Titanium.UI.createSwitch({
    value:false
});
basicSwitch.addEventListener('change',function(e)
{
    Titanium.API.info('Basic Switch value = ' + e.value + ' act val ' + basicSwitch.value);
});
</code></pre>
 */
function Titanium_UI_Switch() {
}
Titanium_UI_Switch.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>boolean for the state of the switch</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    enabled:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>one of <code>Ti.UI.Android.SWITCH_STYLE_CHECKBOX</code> or <code>Ti.UI.Android.SWITCH_STYLE_TOGGLEBUTTON</code> (default).</p>
     * @type Number
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    style:null,

    /**
     * <p>text to display with checkbox. Used if style is <code>Ti.UI.Android.SWITCH_STYLE_CHECKBOX</code></p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    title:null,

    /**
     * <p>text to display when value is <code>false</code>. used if style is <code>Ti.UI.Android.SWITCH_STYLE_TOGGLEBUTTON</code></p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    titleOff:null,

    /**
     * <p>text to display when value is <code>true</code>. used if style is <code>Ti.UI.Android.SWITCH_STYLE_TOGGLEBUTTON</code></p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    titleOn:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>boolean value of the switch where true is the switch is <code>on</code> and false the switch if <code>off</code></p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    value:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.enabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.size} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.style} property.</p>
     * @returns Number
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.title} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.titleOff} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getTitleOff:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.titleOn} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getTitleOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.value} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Switch.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.enabled} property.</p>
     * @param {Boolean} enabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setEnabled:function(enabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.style} property.</p>
     * @param {Number} style <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setStyle:function(style) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setTitle:function(title) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.titleOff} property.</p>
     * @param {String} titleOff <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setTitleOff:function(titleOff) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.titleOn} property.</p>
     * @param {String} titleOn <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setTitleOn:function(titleOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.value} property.</p>
     * @param {Boolean} value <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setValue:function(value) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Switch.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>A <code>TabGroup</code> tab instance. Each tab includes a button and one or more windows, which 
holds the "contents" of the tab. Users can select a tab by clicking on the tab button.</p>
<p>Use {@link Titanium.UI.TabGroup.setActiveTab} to switch between tabs 
in a tab group. The {@link Titanium.UI.currentTab} property provides a global reference to 
the currently active tab. Use the {@link Titanium.UI.createTab} method to create a tab.</p>
<h4>Platform Implementation Notes</h4>
<p>The behavior of tabs and tab groups follows the platform's native navigation style, 
which varies significantly between platforms.</p>
<p>On iOS, the tab maintains a stack of windows. Windows on top of the stack can partially 
or totally obscure windows lower in the stack.  Calling {@link Titanium.UI.Tab.open} 
opens a new window on top of the window stack. When a window is closed, either by the 
user or by code, the window is removed from the stack, making the previous window 
visible. The root tab window cannot be removed. On iOS the tab controls are generally 
kept on screen to allow a user to navigate inside the app. Tab controls are hidden 
when the user is performing a modal task (for example, composing a message). In this case,
the app should open the new window as modal and provide a button in the navigation 
bar to return to the previous screen.</p>
<p>On Android, calling {@link Titanium.UI.Tab.open} opens a new, heavyweight window, which 
by default covers the tab group entirely. This seems quite different from the iOS model,
but it is the standard model for Android applications. Users can use the <strong>Back</strong> button 
to close the tab and return to the tab group.</p>
 * 
 * @example Simple Tab Example
 * <p>In this example, we create a simple tab and add it to a tab group.</p>
<pre><code>var tab = Titanium.UI.createTab({
    window:mywin,
    title:'Hello',
    icon:'myicon.png'
});
tabGroup.addTab(tab);
</code></pre>
 */
function Titanium_UI_Tab() {
}
Titanium_UI_Tab.prototype = {

    /**
     * <p><code>true</code> if this tab is active, <code>false</code> if it is not. </p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    active:null,

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Badge value for this tab. <code>null</code> indicates no badge.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    badge:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Icon URL for this tab.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    icon:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Title for this tab.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    title:null,

    /**
     * <p>Key identifying a string from the locale file to use for the tab title. Only one of <code>title</code> or <code>titleid</code> should be specified.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    titleid:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Root level tab window.  All tabs must have at least one root level tab window.</p>
     * @type Titanium_UI_Window
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    window:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Closes the top-level window for this tab.</p>
     * @param {Object} options <p>Dictionary of display and animation settings to use when opening the window. Identical to the <code>options</code> parameter to {@link Titanium.UI.Window.close}.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    close:function(options) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.active} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getActive:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.badge} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBadge:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.icon} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getIcon:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.size} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.title} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.titleid} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTitleid:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.window} property.</p>
     * @returns Titanium_UI_Window
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWindow:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Tab.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Opens a new window.</p>
     * @param {Titanium_UI_Window} window <p>Window to open.</p>
     * @param {Object} options <p>Dictionary of display and animation settings to use when opening the window. Identical to the <code>options</code> parameter to {@link Titanium.UI.Window.open}.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    open:function(window, options) {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.active} property.</p>
     * @param {Boolean} active <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setActive:function(active) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.badge} property.</p>
     * @param {String} badge <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBadge:function(badge) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.icon} property.</p>
     * @param {String} icon <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setIcon:function(icon) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTitle:function(title) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.titleid} property.</p>
     * @param {String} titleid <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTitleid:function(titleid) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.window} property.</p>
     * @param {Titanium_UI_Window} window <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWindow:function(window) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Tab.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>The Tab Group allows you to manage a tabbed UI of one or more windows. 
Use the {@link Titanium.UI.createTabGroup} method to create a tab group.</p>
<p>A tab group can contain one or more {@link Titanium.UI.Tab} objects, each of which 
has an associated tab button and a stack of windows. The user can switch between
tabs by tapping a tab button. </p>
<p>You can add tabs to the group using {@link Titanium.UI.TabGroup.addTab},
and switch active tabs by calling 
{@link Titanium.UI.TabGroup.setActiveTab}. </p>
<h4>Platform Implementation Notes</h4>
<p>When using a tab group, note the following differences between platforms: </p>
<p>On Android, tabs cannot be removed from the tab group once added, and the 
tabs cannot be reordered. </p>
<p>On iOS, tabs can be removed, and the user may (optionally) 
be allowed to reorder tabs.</p>
<p>On iOS, it is 
also possible to add tabs by updating the {@link Titanium.UI.TabGroup.tabs} property, 
and to switch active tabs by setting the {@link Titanium.UI.Tab.active} 
property on one of the tabs to <code>true</code>. Since these mechanisms are platform-specific,
it is recommended that you use <code>addTab</code> and <code>setActiveTab</code> instead.</p>
<p>If you use the iOS-specific mechanisms, it is possible to add multiple active tabs 
to a tab group. In this case, the result of which tab is initially selected is 
undefined.</p>
 */
function Titanium_UI_TabGroup() {
}
Titanium_UI_TabGroup.prototype = {

    /**
     * <p>Active tab.</p>
     * @type Titanium_UI_Tab
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    activeTab:null,

    /**
     * <p>Set to <code>true</code> to allow the user to reorder tabs in the tab group, <code>false</code> to prevent reordering. When customization is enabled, the user can reorder tabs using the <strong>Edit</strong>  button on the <strong>More</strong> tab.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    allowUserCustomization:null,

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Default navigation bar color (typically for the <strong>More</strong> tab).</p>
     * @type String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    barColor:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Title for the edit button on the <strong>More</strong> tab.</p>
     * @type String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    editButtonTitle:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Array of tab objects that are managed by the tab group. This property is not supported across all platforms: use {@link Titanium.UI.TabGroup.getTabs} instead.</p>
     * @type Array<Titanium_UI_Tab>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    tabs:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Determines how the tab group is treated when a soft input method (such as a virtual keyboard) is displayed. One of {@link Titanium.UI.Android.SOFT_INPUT_ADJUST_PAN}, {@link Titanium.UI.Android.SOFT_INPUT_ADJUST_RESIZE}, or {@link Ti.UI.Android.SOFT_INPUT_ADJUST_UNSPECIFIED}. For more information see the Android API Reference: {@link http://developer.android.com/reference/android/view/Window.html#setSoftInputMode(int)}.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    windowSoftInputMode:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Adds a tab to the tab group.</p>
     * @param {Titanium_UI_Tab} tab <p>Tab to add.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addTab:function(tab) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Closes the tab group and removes it from the UI.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    close:function() {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.activeTab} property.</p>
     * @returns Titanium_UI_Tab
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getActiveTab:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.allowUserCustomization} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAllowUserCustomization:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.anchorPoint} property.</p>
     * @returns Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.backgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.backgroundImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.barColor} property.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBarColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.borderColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.borderRadius} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.borderWidth} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.center} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.editButtonTitle} property.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getEditButtonTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.focusable} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.layout} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.opacity} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.size} property.</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Returns an array of tab objects that are managed by the tab group.</p>
     * @returns Array<Titanium_UI_Tab>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTabs:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.visible} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.windowSoftInputMode} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getWindowSoftInputMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabGroup.zIndex} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Opens the tab group and makes it visible.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    open:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Removes a tab from the tab group.</p>
     * @param {Titanium_UI_Tab} tab <p>Tab to remove.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeTab:function(tab) {
    },

    /**
     * <p>Selects the currently active tab in a tab group.</p>
     * @param {Number|Titanium_UI_Tab} indexOrObject <p>Tab object to switch to, or the index of the tab object to switch to.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setActiveTab:function(indexOrObject) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.allowUserCustomization} property.</p>
     * @param {Boolean} allowUserCustomization <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAllowUserCustomization:function(allowUserCustomization) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.barColor} property.</p>
     * @param {String} barColor <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBarColor:function(barColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.editButtonTitle} property.</p>
     * @param {String} editButtonTitle <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setEditButtonTitle:function(editButtonTitle) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.tabs} property.</p>
     * @param {Array<Titanium_UI_Tab>} tabs <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setTabs:function(tabs) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.windowSoftInputMode} property.</p>
     * @param {Number} windowSoftInputMode <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setWindowSoftInputMode:function(windowSoftInputMode) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabGroup.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: iPhone, iPad
 * @namespace <p>A Tabbed Bar is created by the method {@link Titanium.UI.createTabbedBar}. The difference between the Tabbed Bar and the Button Bar is that the tabbed bar visually maintains a state (visually distinguished as a pressed or selected look). This module has been deprecated and is moved to Ti.UI.iOS.TabbedBar</p>
<p>For iPhone, the style constants are available in the constants defined in {@link Titanium.UI.iPhone.SystemButtonStyle}.</p>
 * 
 * @example Simple Tabbed Bar with 3 items
 * <p>var bb1 = Titanium.UI.createTabbedBar({
    labels:['One', 'Two', 'Three'],
    backgroundColor:'#336699',
    top:50,
    style:Titanium.UI.iPhone.SystemButtonStyle.BAR,
    height:25,
    width:200
});
win.add(bb1);</p>
 */
function Titanium_UI_TabbedBar() {
}
Titanium_UI_TabbedBar.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    center:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    height:null,

    /**
     * <p>the selected index</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    index:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>the array of labels for the tabbed bar. each object should have the properties <code>title</code>, <code>image</code>, <code>width</code> and <code>enabled</code>.</p>
     * @type Array<Object>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    labels:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    right:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>the style of the tabbed bar</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    style:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.borderColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.center} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.index} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getIndex:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.labels} property.</p>
     * @returns Array<Object>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLabels:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.layout} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.opacity} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.size} property.</p>
     * @returns Object
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.style} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TabbedBar.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.index} property.</p>
     * @param {Number} index <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setIndex:function(index) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.labels} property.</p>
     * @param {Array<Object>} labels <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLabels:function(labels) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.style} property.</p>
     * @param {Number} style <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setStyle:function(style) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TabbedBar.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>A table view can contain a set of {@link Titanium.UI.TableViewRow}s, each displaying 
an item of data. The default <code>TableViewRow</code> has properties for adding text, as well as 
optional images on the left and right sides, and various system-provided indicators, 
such as check marks. Table view rows can also be fully customized by adding child views, 
such as labels, buttons, or image views.</p>
<p>When adding rows to a table view, each row can be passed as a 
{@link Titanium.UI.TableViewRow} object, or as dictionary specifying 
the properties for a table row, in which case the <code>TableView</code> will create 
<code>TableViewRow</code> objects as needed. </p>
<p>Use the {@link Titanium.UI.createTableView} method to create a table view.</p>
 * 
 * @example Simple Table View with Basic Rows
 * <p>The most basic example of a table view.</p>
<pre><code>var data = [{title:"Row 1"},{title:"Row 2"}];
var table = Titanium.UI.createTableView({data:data});
win.add(table);
</code></pre>
 */
function Titanium_UI_TableView() {
}
Titanium_UI_TableView.prototype = {

    /**
     * <p>True if the rows can be selected.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    allowsSelection:null,

    /**
     * <p>True if the rows can be selected while editing the table.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    allowsSelectionDuringEditing:null,

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Array of objects to be used for the rows of the table view.</p>
     * @type Array<Titanium_UI_TableViewRow>|Array<Titanium_UI_TableViewSection>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    data:null,

    /**
     * <p>Allow the user to edit the table view (this must be <code>true</code> for swipe-to-delete).</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    editable:null,

    /**
     * <p>Boolean to control the editing state of the table view.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    editing:null,

    /**
     * <p>Filter attribute to be used when searching.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    filterAttribute:null,

    /**
     * <p>Boolean to indicate if the search should be case sensitive or case insensitive.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    filterCaseInsensitive:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>Table view footer title.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    footerTitle:null,

    /**
     * <p>Table view footer as a view that will be rendered instead of a label.</p>
     * @type Titanium_UI_View
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    footerView:null,

    /**
     * <p>Table view header title.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    headerTitle:null,

    /**
     * <p>Table view header as a view that will be rendered instead of a label.</p>
     * @type Titanium_UI_View
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    headerView:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Array of objects (with <code>title</code> and <code>index</code> properties) to control the table view index.</p>
     * @type Array<TableViewIndexEntry>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    index:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Maximum row height for table view rows.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    maxRowHeight:null,

    /**
     * <p>Minimum row height for table view rows.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    minRowHeight:null,

    /**
     * <p>Boolean to control the moveable state of the table view.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    moving:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Default row height for table view rows.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    rowHeight:null,

    /**
     * <p>If <code>true</code>, the tableview can be scrolled.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    scrollable:null,

    /**
     * <p>Search field to use for the table view.</p>
     * @type Titanium_UI_SearchBar
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    search:null,

    /**
     * <p>Boolean to control the visibility of the search field.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    searchHidden:null,

    /**
     * <p>Separator color between rows, specified as a hex or named value.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    separatorColor:null,

    /**
     * <p>Separator style constant. For iOS specify one of the {@link Titanium.UI.iPhone.TableViewSeparatorStyle} constants.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    separatorStyle:null,

    /**
     * <p>Whether table view displays vertical scroll indicator</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    showVerticalScrollIndicator:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Style of the table view, specified using one of the constants from {@link Titanium.UI.iPhone.TableViewStyle}.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    style:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Appends one or more rows to the table.</p>
     * @param {Titanium_UI_TableViewRow|Dictionary<Titanium_UI_TableViewRow>|Array<Titanium_UI_TableViewRow>|Array<Dictionary<Titanium_UI_TableViewRow>>} row <p>If appending a single row, this should contain only the row being appended. If appending multiple rows, this should be an array of the rows being appended.</p>
     * @param {TableViewAnimationProperties} properties <p>Animation properties, only used on iOS.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    appendRow:function(row, properties) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Deletes an existing row.</p>
     * @param {Number} row <p>Index of the row to delete.</p>
     * @param {TableViewAnimationProperties} properties <p>Animation properties. Only used on iOS.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    deleteRow:function(row, properties) {
    },

    /**
     * <p>Programmatically deselects a row.</p>
     * @param {Number} row <p>Row index to deselect.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    deselectRow:function(row) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.allowsSelection} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAllowsSelection:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.allowsSelectionDuringEditing} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAllowsSelectionDuringEditing:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.data} property.</p>
     * @returns Array<Titanium_UI_TableViewRow>
     * @returns Array<Titanium_UI_TableViewSection>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getData:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.editable} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getEditable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.editing} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getEditing:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.filterAttribute} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getFilterAttribute:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.filterCaseInsensitive} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getFilterCaseInsensitive:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.footerTitle} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFooterTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.footerView} property.</p>
     * @returns Titanium_UI_View
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getFooterView:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.headerTitle} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeaderTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.headerView} property.</p>
     * @returns Titanium_UI_View
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeaderView:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.index} property.</p>
     * @returns Array<TableViewIndexEntry>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getIndex:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.maxRowHeight} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getMaxRowHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.minRowHeight} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getMinRowHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.moving} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getMoving:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.rowHeight} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRowHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.scrollable} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getScrollable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.search} property.</p>
     * @returns Titanium_UI_SearchBar
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getSearch:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.searchHidden} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getSearchHidden:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.separatorColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSeparatorColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.separatorStyle} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSeparatorStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.showVerticalScrollIndicator} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getShowVerticalScrollIndicator:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.size} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.style} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableView.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Inserts a row after another row.</p>
     * @param {Number} index <p>Index of the row to insert after.</p>
     * @param {Titanium_UI_TableViewRow|Dictionary<Titanium_UI_TableViewRow>} row <p>Row to insert.</p>
     * @param {TableViewAnimationProperties} properties <p>Animation properties. Only used on iOS.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    insertRowAfter:function(index, row, properties) {
    },

    /**
     * <p>Inserts a row before another row.</p>
     * @param {Number} index <p>Index of the row to insert before.</p>
     * @param {Titanium_UI_TableViewRow|Dictionary<Titanium_UI_TableViewRow>} row <p>Row to insert.</p>
     * @param {TableViewAnimationProperties} properties <p>Animation properties. Only used on iOS.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    insertRowBefore:function(index, row, properties) {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Scrolls the table view to ensure that the specified row is on screen.</p>
     * @param {Number} index <p>Row index to scroll to.</p>
     * @param {TableViewAnimationProperties} properties <p>Animation properties. Only used on iOS.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    scrollToIndex:function(index, properties) {
    },

    /**
     * <p>Scrolls the table to a specific top position where 0 is the topmost y position in the table view.</p>
     * @param {Number} top <p>Y position for the top of the table view.</p>
     * @param {TableViewAnimationProperties} properties <p>Animation properties. Only used on iOS.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    scrollToTop:function(top, properties) {
    },

    /**
     * <p>Programmatically selects a row.</p>
     * @param {Number} row <p>Row index to select.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    selectRow:function(row) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.allowsSelection} property.</p>
     * @param {Boolean} allowsSelection <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAllowsSelection:function(allowsSelection) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.allowsSelectionDuringEditing} property.</p>
     * @param {Boolean} allowsSelectionDuringEditing <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAllowsSelectionDuringEditing:function(allowsSelectionDuringEditing) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the data in the table.</p>
     * @param {Array<Titanium_UI_TableViewRow>|Array<Dictionary<Titanium_UI_TableViewRow>>|Array<Titanium_UI_TableViewSection>} data <p>Array of rows (or sections).</p>
     * @param {TableViewAnimationProperties} properties <p>Animation properties. Only used on iOS.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setData:function(data, properties) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.editable} property.</p>
     * @param {Boolean} editable <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setEditable:function(editable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.editing} property.</p>
     * @param {Boolean} editing <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setEditing:function(editing) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.filterAttribute} property.</p>
     * @param {String} filterAttribute <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setFilterAttribute:function(filterAttribute) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.filterCaseInsensitive} property.</p>
     * @param {Boolean} filterCaseInsensitive <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setFilterCaseInsensitive:function(filterCaseInsensitive) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.footerTitle} property.</p>
     * @param {String} footerTitle <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setFooterTitle:function(footerTitle) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.footerView} property.</p>
     * @param {Titanium_UI_View} footerView <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setFooterView:function(footerView) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.headerTitle} property.</p>
     * @param {String} headerTitle <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeaderTitle:function(headerTitle) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.headerView} property.</p>
     * @param {Titanium_UI_View} headerView <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeaderView:function(headerView) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.index} property.</p>
     * @param {Array<TableViewIndexEntry>} index <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setIndex:function(index) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.maxRowHeight} property.</p>
     * @param {Number} maxRowHeight <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setMaxRowHeight:function(maxRowHeight) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.minRowHeight} property.</p>
     * @param {Number} minRowHeight <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setMinRowHeight:function(minRowHeight) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.moving} property.</p>
     * @param {Boolean} moving <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setMoving:function(moving) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.rowHeight} property.</p>
     * @param {Number} rowHeight <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRowHeight:function(rowHeight) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.scrollable} property.</p>
     * @param {Boolean} scrollable <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setScrollable:function(scrollable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.search} property.</p>
     * @param {Titanium_UI_SearchBar} search <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setSearch:function(search) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.searchHidden} property.</p>
     * @param {Boolean} searchHidden <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setSearchHidden:function(searchHidden) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.separatorColor} property.</p>
     * @param {String} separatorColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSeparatorColor:function(separatorColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.separatorStyle} property.</p>
     * @param {Number} separatorStyle <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSeparatorStyle:function(separatorStyle) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.showVerticalScrollIndicator} property.</p>
     * @param {Boolean} showVerticalScrollIndicator <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setShowVerticalScrollIndicator:function(showVerticalScrollIndicator) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.style} property.</p>
     * @param {Number} style <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setStyle:function(style) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableView.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(f) {
    },

    /**
     * <p>Updates an existing row, optionally with animation</p>
     * @param {Number} index <p>Index of the row to update.</p>
     * @param {Titanium_UI_TableViewRow} row <p>Row data to update.</p>
     * @param {TableViewAnimationProperties} properties <p>Animation properties. Only used on iOS.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    updateRow:function(index, row, properties) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Make sure you set the tableClass on each row instance if using more than one type of row layout. You can use the same value for each instance of a row where the layout is the same - even if the value of the elements inside the row have different values.  For example, if the text is the only thing different between two cells but the layout is the same, both row instances should have the same value for tableClass.</p>
<p>You can listen for table row events on all rows by adding an event listener to the table view instance.  Events automatically propagate to parent views.</p>
 * 
 * @example Simple Table View Row example
 * <p>In this simple example, we create a table view row with a red square in the cell.</p>
<pre><code>var row = Titanium.UI.createTableViewRow();
var view = Titanium.UI.createView({backgroundColor:'red',width:20,height:20});
row.height = 'auto';
row.add(view);
</code></pre>
 */
function Titanium_UI_TableViewRow() {
}
Titanium_UI_TableViewRow.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>the class name of the table. each table view cell must have a unique class name if the cell layout is different. however, use the same name for rows that have the same structural layout (even if the content is different) to provide maximum rendering performance.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    className:null,

    /**
     * <p>default color of the row when not selected</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    color:null,

    /**
     * <p>whether or not the row can be deleted</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    editable:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    focusable:null,

    /**
     * <p>render a system provided check mark in the right image area of the row cell</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hasCheck:null,

    /**
     * <p>render a system provided right arrow in the right image area of the row cell</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hasChild:null,

    /**
     * <p>render a system provided blue indicator icon in the right image area of the row cell</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hasDetail:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>the indention level for the cell (defaults to 0)</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    indentionLevel:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>the layout algorithm to use for the layout. either absolute (default) or vertical.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>image url to render in the left image area of the row cell</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    leftImage:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>image url to render in the right image area of the row cell</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    rightImage:null,

    /**
     * <p>the background color to render when the row cell is selected</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    selectedBackgroundColor:null,

    /**
     * <p>the background image to render when the row cell is selected</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    selectedBackgroundImage:null,

    /**
     * <p>color of the row during selection</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    selectedColor:null,

    /**
     * <p>a selection style constant to control the selection color. For iPhone, use the constants from Titanium.UI.iPhone.TableViewCellSelectionStyle</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    selectionStyle:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>the title cell value. do not specify if using views as children of the row</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    title:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.anchorPoint} property.</p>
     * @returns Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.backgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.backgroundImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.borderColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.borderRadius} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.borderWidth} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.center} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.className} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getClassName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.color} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.editable} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getEditable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.focusable} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.hasCheck} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHasCheck:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.hasChild} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHasChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.hasDetail} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHasDetail:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.indentionLevel} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getIndentionLevel:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.layout} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.leftImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeftImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.opacity} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.rightImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRightImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.selectedBackgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSelectedBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.selectedBackgroundImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSelectedBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.selectedColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.selectionStyle} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSelectionStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.size} property.</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.title} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.visible} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewRow.zIndex} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.className} property.</p>
     * @param {String} className <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setClassName:function(className) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.color} property.</p>
     * @param {String} color <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setColor:function(color) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.editable} property.</p>
     * @param {Boolean} editable <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setEditable:function(editable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.hasCheck} property.</p>
     * @param {Boolean} hasCheck <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHasCheck:function(hasCheck) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.hasChild} property.</p>
     * @param {Boolean} hasChild <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHasChild:function(hasChild) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.hasDetail} property.</p>
     * @param {Boolean} hasDetail <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHasDetail:function(hasDetail) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.indentionLevel} property.</p>
     * @param {Number} indentionLevel <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setIndentionLevel:function(indentionLevel) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.leftImage} property.</p>
     * @param {String} leftImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeftImage:function(leftImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.rightImage} property.</p>
     * @param {String} rightImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRightImage:function(rightImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.selectedBackgroundColor} property.</p>
     * @param {String} selectedBackgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setSelectedBackgroundColor:function(selectedBackgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.selectedBackgroundImage} property.</p>
     * @param {String} selectedBackgroundImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setSelectedBackgroundImage:function(selectedBackgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.selectedColor} property.</p>
     * @param {String} selectedColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setSelectedColor:function(selectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.selectionStyle} property.</p>
     * @param {Number} selectionStyle <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setSelectionStyle:function(selectionStyle) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTitle:function(title) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewRow.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * 
 * @example Simple Table View Section Example
 * <p>In this example, we create a section with the header <code>Hello</code> and add two rows to it.</p>
<pre><code>var section = Titanium.UI.createTableViewSection();
section.headerTitle = "Hello";
var row1 = Titanium.UI.createTableViewRow({title:"Hello 1"});
var row2 = Titanium.UI.createTableViewRow({title:"Hello 2"});
section.add(row1);
section.add(row2);
tableview.add(section);
</code></pre>
 */
function Titanium_UI_TableViewSection() {
}
Titanium_UI_TableViewSection.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    focusable:null,

    /**
     * <p>the title of the section footer</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    footerTitle:null,

    /**
     * <p>a view to use instead of the default label when rendering the section footer</p>
     * @type Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    footerView:null,

    /**
     * <p>the title of the section header</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    headerTitle:null,

    /**
     * <p>a view to use instead of the default label when rendering the section header</p>
     * @type Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    headerView:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>the number of rows in the section</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    rowCount:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.anchorPoint} property.</p>
     * @returns Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.backgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.backgroundImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.borderColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.borderRadius} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.borderWidth} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.center} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.focusable} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.footerTitle} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getFooterTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.footerView} property.</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getFooterView:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.headerTitle} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeaderTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.headerView} property.</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeaderView:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.layout} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.opacity} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.rowCount} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRowCount:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.size} property.</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.visible} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TableViewSection.zIndex} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.footerTitle} property.</p>
     * @param {String} footerTitle <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setFooterTitle:function(footerTitle) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.footerView} property.</p>
     * @param {Object} footerView <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setFooterView:function(footerView) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.headerTitle} property.</p>
     * @param {String} headerTitle <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeaderTitle:function(headerTitle) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.headerView} property.</p>
     * @param {Object} headerView <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeaderView:function(headerView) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TableViewSection.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Use the {@link Titanium.UI.createTextArea} method to create a text area. </p>
<p>On iOS, the <code>color</code> property is required for the text area to work
properly. This is a known issue.</p>
 * 
 * @example Basic Text Area with Customizations
 * <p>This example creates a highly customized text area.</p>
<pre><code>var ta1 = Titanium.UI.createTextArea({
    value : 'I am a textarea',
    height : 70,
    width : 300,
    top : 60,
    font : {fontSize:20,fontFamily:'Marker Felt', fontWeight:'bold'},
    color : '#888',
    textAlign : 'left',
    appearance : Titanium.UI.KEYBOARD_APPEARANCE_ALERT, 
    keyboardType : Titanium.UI.KEYBOARD_NUMBERS_PUNCTUATION,
    returnKeyType : Titanium.UI.RETURNKEY_EMERGENCY_CALL,
    borderWidth : 2,
    borderColor : '#bbb',
    borderRadius : 5
});
</code></pre>
 * 
 * @example Text Area with Custom Keyboard Toolbar (iOS)
 * <p>On iOS, a configurable toolbar can be displayed above the virtual keyboard. 
Toolbars can be used with both text areas and text fields. See {@link Titanium.UI.iOS.Toolbar}
for more information.</p>
<p>This code excerpt creates a text area with a toolbar:</p>
<p>Example using a custom keyboard toolbar:</p>
<pre><code>var send = Titanium.UI.createButton({
    title : 'Send',
    style : Titanium.UI.iPhone.SystemButtonStyle.DONE,
});

var camera = Titanium.UI.createButton({
    systemButton : Titanium.UI.iPhone.SystemButton.CAMERA,
});

var cancel = Titanium.UI.createButton({
    systemButton : Titanium.UI.iPhone.SystemButton.CANCEL
});

var flexSpace = Titanium.UI.createButton({
    systemButton : Titanium.UI.iPhone.SystemButton.FLEXIBLE_SPACE
});

var textarea = Titanium.UI.createTextArea({
    color : '#000',
    value : 'Focus to see keyboard with toolbar',
    height : 120,
    width : 300,
    top : 10,
    borderColor : '#000',
    keyboardToolbar : [cancel, flexSpace, camera, flexSpace, send],
    keyboardToolbarColor : '#999',
    keyboardToolbarHeight : 40,
});
</code></pre>
 */
function Titanium_UI_TextArea() {
}
Titanium_UI_TextArea.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Determines the appearance of the keyboard displayed when this text area is focused.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    appearance:null,

    /**
     * <p>Automatically convert text within this area to clickable links.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    autoLink:null,

    /**
     * <p>Specifies how text should be capitalized during typing.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    autocapitalization:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Is the text area editable?</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    editable:null,

    /**
     * <p>Is the text area enabled?</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    enabled:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Array of toolbar button objects to be used when the keyboard is displayed.</p>
     * @type Array<Object>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    keyboardToolbar:null,

    /**
     * <p>Color of the keyboard toolbar.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    keyboardToolbarColor:null,

    /**
     * <p>Height of the keyboard toolbar.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    keyboardToolbarHeight:null,

    /**
     * <p>Specifies the keyboard type to display when this text area is focused, such as {@link Titanium.UI.KEYBOARD_EMAIL} or {@link Titanium.UI.KEYBOARD_NUMBER_PAD}.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    keyboardType:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>Specifies the text to display on the keyboard <strong>Return</strong> key when this text area is focused.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    returnKeyType:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Can the text area be scrolled?</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    scrollable:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Should the return key be suppressed during entry?</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    suppressReturn:null,

    /**
     * <p>Text alignment, specified using one of the {@link Titanium.UI} text alignment constants: {@link Titanium.UI.TEXT_ALIGNMENT_LEFT}, {@link Titanium.UI.TEXT_ALIGNMENT_CENTER}, or {@link Titanium.UI.TEXT_ALIGNMENT_RIGHT}.</p>
     * @type String|Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    textAlign:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Value of the text area.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    value:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Forces the text area to lose focus.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    blur:function() {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Forces the text area to gain focus.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    focus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.appearance} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAppearance:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.autoLink} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAutoLink:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.autocapitalization} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAutocapitalization:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.editable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getEditable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.enabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.keyboardToolbar} property.</p>
     * @returns Array<Object>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getKeyboardToolbar:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.keyboardToolbarColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getKeyboardToolbarColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.keyboardToolbarHeight} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getKeyboardToolbarHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.keyboardType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getKeyboardType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.returnKeyType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getReturnKeyType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.scrollable} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getScrollable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.size} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.suppressReturn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSuppressReturn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.textAlign} property.</p>
     * @returns String
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTextAlign:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.value} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextArea.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Returns <code>true</code> if the text area contains text, <code>false</code> if it is empty.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hasText:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.appearance} property.</p>
     * @param {Number} appearance <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAppearance:function(appearance) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.autoLink} property.</p>
     * @param {Number} autoLink <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAutoLink:function(autoLink) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.autocapitalization} property.</p>
     * @param {Number} autocapitalization <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setAutocapitalization:function(autocapitalization) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.editable} property.</p>
     * @param {Boolean} editable <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setEditable:function(editable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.enabled} property.</p>
     * @param {Boolean} enabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setEnabled:function(enabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.keyboardToolbar} property.</p>
     * @param {Array<Object>} keyboardToolbar <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setKeyboardToolbar:function(keyboardToolbar) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.keyboardToolbarColor} property.</p>
     * @param {String} keyboardToolbarColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setKeyboardToolbarColor:function(keyboardToolbarColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.keyboardToolbarHeight} property.</p>
     * @param {Number} keyboardToolbarHeight <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setKeyboardToolbarHeight:function(keyboardToolbarHeight) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.keyboardType} property.</p>
     * @param {Number} keyboardType <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setKeyboardType:function(keyboardType) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.returnKeyType} property.</p>
     * @param {Number} returnKeyType <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setReturnKeyType:function(returnKeyType) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.scrollable} property.</p>
     * @param {Boolean} scrollable <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setScrollable:function(scrollable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.suppressReturn} property.</p>
     * @param {Boolean} suppressReturn <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSuppressReturn:function(suppressReturn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.textAlign} property.</p>
     * @param {String|Number} textAlign <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTextAlign:function(textAlign) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.value} property.</p>
     * @param {String} value <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setValue:function(value) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextArea.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Use the {@link Titanium.UI.createTextField} method to create a text field.</p>
 * 
 * @example Basic Text Field with rounded border
 * <p>Create a simple text field with a round border style.</p>
<pre><code>var tf1 = Titanium.UI.createTextField({
    color:'#336699',
    height:35,
    top:10,
    left:10,
    width:250,
    borderStyle:Titanium.UI.INPUT_BORDERSTYLE_ROUNDED
});
</code></pre>
 * 
 * @example Custom Keyboard Toolbar (iOS)
 * <p>On iOS, a configurable toolbar can be displayed above the virtual keyboard. 
Toolbars can be used with both text areas and text fields. See {@link Titanium.UI.iOS.Toolbar}
for more information.</p>
<p>This code excerpt creates a text field with a toolbar:</p>
<pre><code>var send = Titanium.UI.createButton({
    title : 'Send',
    style : Titanium.UI.iPhone.SystemButtonStyle.DONE,
});

var camera = Titanium.UI.createButton({
    systemButton : Titanium.UI.iPhone.SystemButton.CAMERA,
});

var cancel = Titanium.UI.createButton({
    systemButton : Titanium.UI.iPhone.SystemButton.CANCEL
});

var flexSpace = Titanium.UI.createButton({
    systemButton : Titanium.UI.iPhone.SystemButton.FLEXIBLE_SPACE
});

var textfield = Titanium.UI.createTextField({
    hintText : 'Focus to see keyboard with toolbar',
    height : 35,
    width : 300,
    top : 10,
    borderStyle : Titanium.UI.INPUT_BORDERSTYLE_BEZEL,
    keyboardToolbar : [cancel, flexSpace, camera, flexSpace, send],
    keyboardToolbarColor : '#999',
    keyboardToolbarHeight : 40,
});
</code></pre>
 */
function Titanium_UI_TextField() {
}
Titanium_UI_TextField.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Determines the appearance of the keyboard displayed when this field is focused.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    appearance:null,

    /**
     * <p>Determines how text is capitalized during typing.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    autocapitalization:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border style for the field.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderStyle:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>When to display the clear button.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    clearButtonMode:null,

    /**
     * <p>Should the value of the field be cleared when the user starts editing?</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    clearOnEdit:null,

    /**
     * <p>Is the field editable?</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    editable:null,

    /**
     * <p>Is the field enabled?</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    enabled:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Hint text to display when the field is unfocused.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hintText:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Array of toolbar button objects to be used when the keyboard is displayed.</p>
     * @type Array<Object>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    keyboardToolbar:null,

    /**
     * <p>Color of the keyboard toolbar.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    keyboardToolbarColor:null,

    /**
     * <p>Height of the keyboard toolbar.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    keyboardToolbarHeight:null,

    /**
     * <p>Specifies the keyboard type to display when this field is focused, such as {@link Titanium.UI.KEYBOARD_EMAIL} or {@link Titanium.UI.KEYBOARD_NUMBER_PAD}.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    keyboardType:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Left button view. Using an object other than a {@link Titanium.UI.Button} may have unpredictable results.</p>
     * @type Object
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    leftButton:null,

    /**
     * <p>When to display the left button view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    leftButtonMode:null,

    /**
     * <p>Padding between the left button and the edge of the field.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    leftButtonPadding:null,

    /**
     * <p>Maximum length of text field input.</p>
     * @type Number
     * @since 0.8 (iPhone)
     */
    maxLength:null,

    /**
     * <p>Minimum size of the font when the font is sized based on the contents.  Enables font scaling to fit.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    minimumFontSize:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>Left padding of the text field.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    paddingLeft:null,

    /**
     * <p>Right padding of the text field.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    paddingRight:null,

    /**
     * <p>Set to <code>true</code> to hide entered characters.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    passwordMask:null,

    /**
     * <p>Specifies the text to display on the keyboard <strong>Return</strong> key when this field is focused.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    returnKeyType:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Right button view.</p>
     * @type Object
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    rightButton:null,

    /**
     * <p>When to display the right button view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    rightButtonMode:null,

    /**
     * <p>Padding between the right button and the edge of the field.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    rightButtonPadding:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Should the return key should be suppressed during entry?</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    suppressReturn:null,

    /**
     * <p>Text alignment, specified using one of the {@link Titanium.UI} text alignment constants: {@link Titanium.UI.TEXT_ALIGNMENT_LEFT}, {@link Titanium.UI.TEXT_ALIGNMENT_CENTER}, or {@link Titanium.UI.TEXT_ALIGNMENT_RIGHT}.</p>
     * @type String|Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    textAlign:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Value of the field.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    value:null,

    /**
     * <p>Vertical alignment for the text field, specified using one of the 
vertical alignment constants from {@link Titanium.UI}: 
{@link Titanium.UI.TEXT_VERTICAL_ALIGNMENT_BOTTOM}, 
{@link Titanium.UI.TEXT_VERTICAL_ALIGNMENT_CENTER}, or 
{@link Titanium.UI.TEXT_VERTICAL_ALIGNMENT_TOP}.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    verticalAlign:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Forces the field to lose focus.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    blur:function() {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Forces the field to gain focus.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    focus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.appearance} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAppearance:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.autocapitalization} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getAutocapitalization:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.borderStyle} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.clearButtonMode} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getClearButtonMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.clearOnEdit} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getClearOnEdit:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.editable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getEditable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.enabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.hintText} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHintText:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.keyboardToolbar} property.</p>
     * @returns Array<Object>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getKeyboardToolbar:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.keyboardToolbarColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getKeyboardToolbarColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.keyboardToolbarHeight} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getKeyboardToolbarHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.keyboardType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getKeyboardType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.leftButton} property.</p>
     * @returns Object
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLeftButton:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.leftButtonMode} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLeftButtonMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.leftButtonPadding} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLeftButtonPadding:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.maxLength} property.</p>
     * @returns Number
     * @since 0.8 (iPhone)
     */
    getMaxLength:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.minimumFontSize} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getMinimumFontSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.paddingLeft} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPaddingLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.paddingRight} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPaddingRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.passwordMask} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getPasswordMask:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.returnKeyType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getReturnKeyType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.rightButton} property.</p>
     * @returns Object
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getRightButton:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.rightButtonMode} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getRightButtonMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.rightButtonPadding} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getRightButtonPadding:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.size} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.suppressReturn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSuppressReturn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.textAlign} property.</p>
     * @returns String
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTextAlign:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.value} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.verticalAlign} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVerticalAlign:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.TextField.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Returns <code>true</code> if the field contains text, <code>false</code> if it is empty.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hasText:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.appearance} property.</p>
     * @param {Number} appearance <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAppearance:function(appearance) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.autocapitalization} property.</p>
     * @param {Number} autocapitalization <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setAutocapitalization:function(autocapitalization) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.borderStyle} property.</p>
     * @param {Number} borderStyle <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderStyle:function(borderStyle) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.clearButtonMode} property.</p>
     * @param {Number} clearButtonMode <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setClearButtonMode:function(clearButtonMode) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.clearOnEdit} property.</p>
     * @param {Boolean} clearOnEdit <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setClearOnEdit:function(clearOnEdit) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.editable} property.</p>
     * @param {Boolean} editable <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setEditable:function(editable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.enabled} property.</p>
     * @param {Boolean} enabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setEnabled:function(enabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.hintText} property.</p>
     * @param {String} hintText <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHintText:function(hintText) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.keyboardToolbar} property.</p>
     * @param {Array<Object>} keyboardToolbar <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setKeyboardToolbar:function(keyboardToolbar) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.keyboardToolbarColor} property.</p>
     * @param {String} keyboardToolbarColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setKeyboardToolbarColor:function(keyboardToolbarColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.keyboardToolbarHeight} property.</p>
     * @param {Number} keyboardToolbarHeight <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setKeyboardToolbarHeight:function(keyboardToolbarHeight) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.keyboardType} property.</p>
     * @param {Number} keyboardType <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setKeyboardType:function(keyboardType) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.leftButton} property.</p>
     * @param {Object} leftButton <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLeftButton:function(leftButton) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.leftButtonMode} property.</p>
     * @param {Number} leftButtonMode <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLeftButtonMode:function(leftButtonMode) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.leftButtonPadding} property.</p>
     * @param {Number} leftButtonPadding <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLeftButtonPadding:function(leftButtonPadding) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.maxLength} property.</p>
     * @param {Number} maxLength <p>New value for the property.</p>
     * @since 0.8 (iPhone)
     */
    setMaxLength:function(maxLength) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.minimumFontSize} property.</p>
     * @param {Number} minimumFontSize <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setMinimumFontSize:function(minimumFontSize) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.paddingLeft} property.</p>
     * @param {Number} paddingLeft <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setPaddingLeft:function(paddingLeft) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.paddingRight} property.</p>
     * @param {Number} paddingRight <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setPaddingRight:function(paddingRight) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.passwordMask} property.</p>
     * @param {Boolean} passwordMask <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setPasswordMask:function(passwordMask) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.returnKeyType} property.</p>
     * @param {Number} returnKeyType <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setReturnKeyType:function(returnKeyType) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.rightButton} property.</p>
     * @param {Object} rightButton <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setRightButton:function(rightButton) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.rightButtonMode} property.</p>
     * @param {Number} rightButtonMode <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setRightButtonMode:function(rightButtonMode) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.rightButtonPadding} property.</p>
     * @param {Number} rightButtonPadding <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setRightButtonPadding:function(rightButtonPadding) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.suppressReturn} property.</p>
     * @param {Boolean} suppressReturn <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSuppressReturn:function(suppressReturn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.textAlign} property.</p>
     * @param {String|Number} textAlign <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTextAlign:function(textAlign) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.value} property.</p>
     * @param {String} value <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setValue:function(value) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.verticalAlign} property.</p>
     * @param {Number|String} verticalAlign <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVerticalAlign:function(verticalAlign) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.TextField.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: iPhone, iPad, Mobile Web
 * @namespace <p>A Toolbar is created by the method {@link Titanium.UI.iOS.createToolbar}.  A Toolbar can be placed at the bottom of a window and contain buttons.</p>
 */
function Titanium_UI_Toolbar() {
}
Titanium_UI_Toolbar.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.borderColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.center} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.layout} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.opacity} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.size} property.</p>
     * @returns Object
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Toolbar.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Toolbar.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * 
 * @example Round View Example
 * <p>Create a rounded view.</p>
<pre><code>var view = Titanium.UI.createView({
   borderRadius:10,
   backgroundColor:'red',
   width:50,
   height:50
});
window.add(view);
</code></pre>
 */
Titanium.UI.View = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.anchorPoint} property.</p>
     * @returns Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.backgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.backgroundImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.borderColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.borderRadius} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.borderWidth} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.center} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.focusable} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.layout} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.opacity} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.size} property.</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.visible} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.View.zIndex} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.View.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>Creating webviews are more expensive than creating pure native views because of the requirement to
load the HTML browser into memory.</p>
<p>Since a webview internally wants to handle its own events, scrolling and other related touch events against it's own view surface, you cannot have both Titanium style events against the webview instance and internal Javascript events in the DOM.  You must choose between one or the other.</p>
 * 
 * @example Basic Web View to external URL example
 * <p>Create a web view to a remote URL and open the window as modal.</p>
<pre><code>    var webview = Titanium.UI.createWebView({url:'http://www.appcelerator.com'});
    var window = Titanium.UI.createWindow();
    window.add(webview);
    window.open({modal:true});
</code></pre>
 */
function Titanium_UI_WebView() {
}
Titanium_UI_WebView.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>a data blob or file that is used to load the web document</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    data:null,

    /**
     * <p>sets whether the zoom controls are enabled</p>
     * @type Boolean
     * @since 1.8.0 (Android)
     */
    enableZoomControls:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>the html content of the web document</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    html:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>boolean indicating if the webview is loading content</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    loading:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    opacity:null,

    /**
     * <p>set how plugins are processed. Accepts one of {@link Titanium.UI.Android.WEBVIEW_PLUGINS_OFF}, {@link Titanium.UI.Android.WEBVIEW_PLUGINS_ON}, or {@link Titanium.UI.Android.WEBVIEW_PLUGINS_ON_DEMAND}. See Android documentation for {@link http://developer.android.com/reference/android/webkit/WebSettings.PluginState}. Only works on Android devices at API Level 8 or greater.</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    pluginState:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>whether the webview should scale it's contents or not</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    scalesPageToFit:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>the url to the web document. this property will change as the content of the webview changes (such as from internal hyperlinks, etc)</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    url:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>returns true if the webview can go back in history</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    canGoBack:function() {
    },

    /**
     * <p>returns true if the webview can go forward in history</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    canGoForward:function() {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>invoke JavaScript inside the context of the webview and optionally, return a result</p>
     * @param {String} content <p>JavaScript code as a string. The code will be evaluated inside the webview context.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    evalJS:function(content) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.borderColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.center} property.</p>
     * @returns Point
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.data} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getData:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.enableZoomControls} property.</p>
     * @returns Boolean
     * @since 1.8.0 (Android)
     */
    getEnableZoomControls:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.html} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getHtml:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.layout} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.loading} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getLoading:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.opacity} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.pluginState} property.</p>
     * @returns Number
     * @since 1.8.0 (Android)
     */
    getPluginState:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.scalesPageToFit} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getScalesPageToFit:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.size} property.</p>
     * @returns Object
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.url} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getUrl:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.WebView.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>go back one entry in history to the previous page</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    goBack:function() {
    },

    /**
     * <p>go forward one entry in history to the page before the current page</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    goForward:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>reload the current webpage</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    reload:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>force the webview to repaint its contents</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    repaint:function() {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>set the basic authentication for the webview instance to be used on subsequent url requests</p>
     * @param {String} username <p>the username</p>
     * @param {String} password <p>the password</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setBasicAuthentication:function(username, password) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.data} property.</p>
     * @param {Object} data <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setData:function(data) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.enableZoomControls} property.</p>
     * @param {Boolean} enableZoomControls <p>New value for the property.</p>
     * @since 1.8.0 (Android)
     */
    setEnableZoomControls:function(enableZoomControls) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.html} property.</p>
     * @param {String} html <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setHtml:function(html) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.loading} property.</p>
     * @param {Boolean} loading <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setLoading:function(loading) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.pluginState} property.</p>
     * @param {Number} pluginState <p>New value for the property.</p>
     * @since 1.8.0 (Android)
     */
    setPluginState:function(pluginState) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.scalesPageToFit} property.</p>
     * @param {Boolean} scalesPageToFit <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setScalesPageToFit:function(scalesPageToFit) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.url} property.</p>
     * @param {String} url <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setUrl:function(url) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.WebView.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>stop loading a currently loading page</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad), 1.8 (Mobile Web)
     */
    stopLoading:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 * @namespace <p>A window is a top-level container which can contain other views. Windows can
be <em>opened</em> and <em>closed</em>.  Opening a window causes the window and its child 
views to be added to the application's render stack, on top of any previously opened 
windows. Closing a window removes the window and its children from the render stack.</p>
<p>Windows <em>contain</em> other views, but in general they are not <em>contained</em> inside
other views. There are a few specialized top-level views that manage windows,
including:</p>
<ul>
<li>{@link Titanium.UI.iPhone.NavigationGroup}</li>
<li>{@link Titanium.UI.iPad.SplitWindow}</li>
<li>{@link Titanium.UI.TabGroup}. </li>
</ul>
<p>By default, windows occupy the entire screen except for the navigation bar, 
status bar, and in the case of windows contained in tab groups, the tab bar.
To take up the entire screen, covering any other UI, specify <code>fullscreen:true</code>
when creating the window.</p>
<p>Use the {@link Titanium.UI.createWindow} method to create a window.</p>
<h4>Sub-contexts</h4>
<p>Windows can be loaded from another JavaScript file by specifying the property <code>url</code>,
referencing a file relative to your application <code>Resources</code> folder.  It's important
to note that Titanium will refuse to load JavaScript files from a remote URL. Loading
remote JavaScript from a URL and providing it with the full capabilities of the Titanium
API would be very dangerous.</p>
<p>When your Window is loaded from a separate JavaScript file, the code will be executed in
a separate JavaScript context (called a "sub-context") than your <code>app.js</code> global context.
It will also execute in its own separate thread.</p>
<p>On Android, a new context is also created when you create a heavyweight window. See the
section, "Android Heavyweight and Lightweight Windows" for more information.</p>
<p>The special property {@link Titanium.UI.currentWindow} is available inside a sub-context that
points to the JavaScript instance by reference in the global context.</p>
<h4>Passing Data Between Contexts</h4>
<p>By default, sub-context variables cannot access JavaScript references in the global context.
There are two ways to pass data between the global context and the sub-context:</p>
<ul>
<li>Shared references</li>
<li>Events</li>
</ul>
<p><strong>Note that in both cases, you cannot pass functions between contexts, only serializable data.</strong>
<em>Serializable data</em> includes any JavaScript primitive or simple object composed
of JavaScript primitives.</p>
<h5>Passing Data with Shared References</h5>
<p>You can allow a sub-context access to
properties in the global context by reference assignment.  An example best illustrates
how to do this.</p>
<p>In <code>app.js</code>, you could define a property:</p>
<pre><code>var message = "Hi world!";
</code></pre>
<p>Now, you can create a new Window - let's call it <code>foo.js</code> - in your <code>app.js</code>.</p>
<pre><code>var w = Titanium.UI.createWindow({
    url:'foo.js'
});
</code></pre>
<p>To <em>give</em> your new window access to <code>message</code>, you would need to assign it to a
property on the new window reference, <code>w</code>.</p>
<pre><code>w.alertMessage = message;
</code></pre>
<p>This creates a new <code>alertMessage</code> property on the new window that holds a reference to the
<code>message</code> property in the global context.  Now, let's look at the code for <code>foo.js</code>.</p>
<pre><code>alert(Titanium.UI.currentWindow.alertMessage);
</code></pre>
<p>In the above code, the <code>foo.js</code> will show an alert containing the text from the <code>message</code>
property in the global context.</p>
<h5>Passing Data with Events</h5>
<p>If you'd like to send events to a window from the global context and vice versa, you could
use the built-in event mechanism.  For example, you could define a custom event called <code>foo</code>.
The window could listen for this event and then respond with some action. For example, in
your sub-context you might define:</p>
<pre><code>Titanium.UI.currentWindow.addEventListener('foo',function(e)
{
    Titanium.API.info("foo event received = "+JSON.stringify(e));
});
</code></pre>
<p>You could now fire the event from <code>app.js</code> like this:</p>
<pre><code>var window = Titanium.UI.createWindow({
    url:'bar.js'
});
window.open();
window.fireEvent('foo',{a:'b'});
</code></pre>
<p>It's worth noting two important limitations of the example above:</p>
<ul>
<li>
<p>You must open the window before you can send events to it. You also may have to fire
  the event after a specified amount of time if you intend to immediately send data to
  the window. This is because windows are opened asynchronously and on a separate thread
  than the caller thread.</p>
</li>
<li>
<p>You can only send JSON-serializable data in <code>fireEvent</code>. If you attempt to send objects
  that have function references, they will be null.</p>
</li>
</ul>
<h4>Animations</h4>
<p>Windows can be animated like any normal {@link Titanium.UI.View}.  To transition between
2 windows, you can use the <code>transition</code> property on an animation.  For example, to flip
right-to-left between two windows, you could do the following:</p>
<pre><code>var window2 = Titanium.UI.createWindow({url:'foo.js'});
var t = Ti.UI.iPhone.AnimationStyle.FLIP_FROM_LEFT;
window1.animate({view:window2,transition:t});
</code></pre>
<p>In the above example, the <code>window2</code> view will be animated from the right-to-left over <code>window1</code>.</p>
<p>Windows can be opened or closed with animation.  In the example below, we create a window
that will open from small to large with a bounce effect.  This is done by applying a
transformation at initialization time that scales the original size of the window to 0.
When the window is opened, a new 2D transformation is applied that will scale the window
size from 0 to 110% of it's original size and then, after 1/20th of a second, will scale it
back to it's original size at 100%. This gives the bounce effect during animation.</p>
<pre><code>var t = Titanium.UI.create2DMatrix().scale(0);

// create a window with the initial transform scaled to 0
var w = Titanium.UI.createWindow({
    backgroundColor:'#336699',
    borderWidth:8,
    borderColor:'#999',
    height:400,
    width:300,
    borderRadius:10,
    opacity:0.92,
    transform:t
});

// create first transform to go beyond normal size
var t1 = Titanium.UI.create2DMatrix().scale(1.1);

var a = Titanium.UI.createAnimation();
a.transform = t1;
a.duration = 200;

// when this animation completes, scale to normal size
a.addEventListener('complete', function()
{
    // we can use the identity transform to take it back to it's real size
    var t2 = Titanium.UI.create2DMatrix();
    w.animate({transform:t2, duration:200});
});
</code></pre>
<h4>iPad Modal Windows</h4>
<p>For iPad, iPhone SDK 3.2 and Titanium 1.2 introduced several new ways of presenting
modal windows. In addition to full-screen modal windows, the iPad supports "Page sheet"
and "Form sheet" style windows:</p>
<ul>
<li>
<p><strong>Page sheet</strong> style windows have a fixed width, equal to the width of the screen 
  in portait mode, and a height equal to the <em>current</em> height of the screen. This means
  that in portrait mode, the window covers the entire screen. In landscape mode, 
  the window is centered on the screen horizontally.</p>
</li>
<li>
<p><strong>Form sheet</strong> style windows are smaller than the screen size, and centered on the screen.</p>
</li>
</ul>
<p>The example below is a modal window using the Form sheet style:</p>
<p><img alt="modal" src="http://img.skitch.com/20100406-bqb3f8pb6e4ger7wkcdcw5mbar.png" /></p>
<p>You can create this type of modal window on iPad with the following code snippet:</p>
<pre><code>var window = Titanium.UI.createWindow();
window.open({
    modal:true,
    modalTransitionStyle: Ti.UI.iPhone.MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL,
    modalStyle: Ti.UI.iPhone.MODAL_PRESENTATION_FORMSHEET
})
</code></pre>
<h4>Android Heavyweight and Lightweight Windows</h4>
<p>In Android, Titanium windows can be heavyweight or lightweight:</p>
<ul>
<li>
<p>A <em>heavyweight</em> window is associated with a new Android 
  {@link Titanium.Android.Activity}. Creating a heavyweight window always 
  creates a new JavaScript context.</p>
</li>
<li>
<p>A <em>lightweight</em> window is a fullscreen view, and runs in the same Android Activity 
  as the code that created it. Creating a lightweight window creates a new 
  JavaScript context if it was created with the 'url' property set.</p>
</li>
</ul>
<p>The {@link Titanium.UI.createWindow} call creates a heavyweight window 
if any of the following properties are true on creation:</p>
<ul>
<li><code>fullscreen</code></li>
<li><code>navBarHidden</code></li>
<li><code>modal</code></li>
<li><code>windowSoftInputMode</code></li>
</ul>
<p>A heavyweight window is always created when you open a new window from inside a 
{@link Titanium.UI.TabGroup}.</p>
<h4>Android "root" Windows</h4>
<p>In Android, you may wish to specify that a window which you create (such as the first
window) should be considered the root window and that the application should exit when
the back button is pressed from that window.  This is particularly useful if your application
is not using a Tab Group and therefore the splash screen window is appearing whenever you
press the back button from your lowest window on the stack.</p>
<p>To indicate that a particular window should cause an application to exit when the back
button is pressed, pass <code>exitOnClose: true</code> as one of the creation arguments, as shown here:</p>
<pre><code>var win = Titanium.UI.createWindow({
    title: 'My Root Window',
    exitOnClose: true
});
</code></pre>
 * 
 * @example Full Screen Window example
 * <p>Create a fullscreen window with a red background.</p>
<pre><code>var window = Titanium.UI.createWindow({
   backgroundColor:'red'
});
window.open({fullscreen:true});
</code></pre>
 */
function Titanium_UI_Window() {
}
Titanium_UI_Window.prototype = {

    /**
     * <p>For heavyweight windows, this property contains a reference to the
Android Activity object associated with this window.</p>
     * @type Titanium_Android_Activity
     * @since 0.9 (Android)
     */
    activity:null,

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Title for the back button. This is only valid when the window is a child of a tab.</p>
     * @type String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backButtonTitle:null,

    /**
     * <p>URL to an image to show as the back button. This is only valid when the window is a child of a tab.</p>
     * @type String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backButtonTitleImage:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Background color for the nav bar, specified as a hex color or color name.</p>
     * @type String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    barColor:null,

    /**
     * <p>Background image for the nav bar, specified as a URL to a local image.</p>
     * @type String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    barImage:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    center:null,

    /**
     * <p>Boolean value indicating if the application should exit when the Android
Back button is pressed while the window is being shown.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    exitOnClose:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    focusable:null,

    /**
     * <p>Boolean value indicating if the window is fullscreen.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    fullscreen:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.9 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    left:null,

    /**
     * <p>View to show in the left nav bar area.</p>
     * @type Titanium_UI_View
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    leftNavButton:null,

    /**
     * <p>Boolean to indicate if the window should be opened modal in front of other windows.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    modal:null,

    /**
     * <p>For modal windows, hide the nav bar (<code>true</code>) or show the nav bar (<code>false</code>).</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    navBarHidden:null,

    /**
     * <p>The opacity from 0.0-1.0.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    opacity:null,

    /**
     * <p>Current orientation of the window.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    orientation:null,

    /**
     * <p>Array of supported orientation modes, specified using the orientation
constants defined in {@link Titanium.UI}.</p>
     * @type Array<Number>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    orientationModes:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    right:null,

    /**
     * <p>View to show in the right nav bar area.</p>
     * @type Titanium_UI_View
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    rightNavButton:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Boolean value indicating if the tab bar should be hidden. </p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    tabBarHidden:null,

    /**
     * <p>Title of the window.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    title:null,

    /**
     * <p>View to show in the title area of the nav bar.</p>
     * @type Titanium_UI_View
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    titleControl:null,

    /**
     * <p>Image to show in the title area of the nav bar, specified as a local file path or URL.</p>
     * @type String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    titleImage:null,

    /**
     * <p>Title prompt for the window.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    titlePrompt:null,

    /**
     * <p>Key identifying a string from the locale file to use for the window title.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    titleid:null,

    /**
     * <p>Key identifying a string from the locale file to use for the window title prompt.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    titlepromptid:null,

    /**
     * <p>Array of button objects to show in the window's toolbar. This is only valid when
the window is the child of a tab.</p>
     * @type Array<Object>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    toolbar:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating if the nav bar is translucent.</p>
     * @type Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    translucent:null,

    /**
     * <p>Local URL to a JavaScript file with the windows instructions.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    url:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    width:null,

    /**
     * <p>Set the pixel format for the Activity's Window.</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    windowPixelFormat:null,

    /**
     * <p>Determines how the window is treated when a soft input method (such as a
virtual keyboard) is displayed.</p>
     * @type Number
     * @since 0.9 (Android)
     */
    windowSoftInputMode:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Closes the window.</p>
     * @param {Object} options <p>Optional animation or display properties to use when closing the window.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    close:function(options) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.activity} property.</p>
     * @returns Titanium_Android_Activity
     * @since 0.9 (Android)
     */
    getActivity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.anchorPoint} property.</p>
     * @returns Point
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.backButtonTitle} property.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackButtonTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.backButtonTitleImage} property.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackButtonTitleImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.backgroundColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.9 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.backgroundImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.barColor} property.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBarColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.barImage} property.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getBarImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.borderColor} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.borderRadius} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.borderWidth} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.center} property.</p>
     * @returns Point
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.exitOnClose} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getExitOnClose:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.focusable} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.fullscreen} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getFullscreen:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.9 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.layout} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.leftNavButton} property.</p>
     * @returns Titanium_UI_View
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getLeftNavButton:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.modal} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getModal:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.navBarHidden} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNavBarHidden:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.opacity} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.orientation} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getOrientation:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.orientationModes} property.</p>
     * @returns Array<Number>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getOrientationModes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.rightNavButton} property.</p>
     * @returns Titanium_UI_View
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getRightNavButton:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.size} property.</p>
     * @returns Object
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.tabBarHidden} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getTabBarHidden:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.title} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.titleControl} property.</p>
     * @returns Titanium_UI_View
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getTitleControl:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.titleImage} property.</p>
     * @returns String
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getTitleImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.titlePrompt} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTitlePrompt:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.titleid} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTitleid:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.titlepromptid} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTitlepromptid:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.toolbar} property.</p>
     * @returns Array<Object>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getToolbar:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.translucent} property.</p>
     * @returns Boolean
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getTranslucent:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.url} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getUrl:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.visible} property.</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.windowPixelFormat} property.</p>
     * @returns Number
     * @since 1.8.0 (Android)
     */
    getWindowPixelFormat:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.windowSoftInputMode} property.</p>
     * @returns Number
     * @since 0.9 (Android)
     */
    getWindowSoftInputMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.Window.zIndex} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    hide:function() {
    },

    /**
     * <p>Hides the tab bar. Must be called before opening the window.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    hideTabBar:function() {
    },

    /**
     * <p>Opens the window.</p>
     * @param {Object} options <p>Optional animation or display properties to use when opening the window.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    open:function(options) {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.activity} property.</p>
     * @param {Titanium_Android_Activity} activity <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setActivity:function(activity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.backButtonTitle} property.</p>
     * @param {String} backButtonTitle <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackButtonTitle:function(backButtonTitle) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.backButtonTitleImage} property.</p>
     * @param {String} backButtonTitleImage <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackButtonTitleImage:function(backButtonTitleImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.9 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.barColor} property.</p>
     * @param {String} barColor <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBarColor:function(barColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.barImage} property.</p>
     * @param {String} barImage <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setBarImage:function(barImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.fullscreen} property.</p>
     * @param {Boolean} fullscreen <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setFullscreen:function(fullscreen) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.leftNavButton} property.</p>
     * @param {Titanium_UI_View} leftNavButton <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setLeftNavButton:function(leftNavButton) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.modal} property.</p>
     * @param {Boolean} modal <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setModal:function(modal) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.navBarHidden} property.</p>
     * @param {Boolean} navBarHidden <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setNavBarHidden:function(navBarHidden) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.orientation} property.</p>
     * @param {Number} orientation <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setOrientation:function(orientation) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.orientationModes} property.</p>
     * @param {Array<Number>} orientationModes <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setOrientationModes:function(orientationModes) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.rightNavButton} property.</p>
     * @param {Titanium_UI_View} rightNavButton <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setRightNavButton:function(rightNavButton) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.9 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.tabBarHidden} property.</p>
     * @param {Boolean} tabBarHidden <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setTabBarHidden:function(tabBarHidden) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTitle:function(title) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.titleControl} property.</p>
     * @param {Titanium_UI_View} titleControl <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setTitleControl:function(titleControl) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.titleImage} property.</p>
     * @param {String} titleImage <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setTitleImage:function(titleImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.titlePrompt} property.</p>
     * @param {String} titlePrompt <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTitlePrompt:function(titlePrompt) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.titleid} property.</p>
     * @param {String} titleid <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTitleid:function(titleid) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.titlepromptid} property.</p>
     * @param {String} titlepromptid <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTitlepromptid:function(titlepromptid) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.toolbar} property.</p>
     * @param {Array<Object>} toolbar <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setToolbar:function(toolbar) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.translucent} property.</p>
     * @param {Boolean} translucent <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setTranslucent:function(translucent) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.windowPixelFormat} property.</p>
     * @param {Number} windowPixelFormat <p>New value for the property.</p>
     * @since 1.8.0 (Android)
     */
    setWindowPixelFormat:function(windowPixelFormat) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.Window.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: iPhone, iPad
 */
Titanium.UI.iOS = {

    /**
     * <p>animation curve constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    ANIMATION_CURVE_EASE_IN:null,

    /**
     * <p>animation curve constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    ANIMATION_CURVE_EASE_IN_OUT:null,

    /**
     * <p>animation curve constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    ANIMATION_CURVE_EASE_OUT:null,

    /**
     * <p>animation curve constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    ANIMATION_CURVE_LINEAR:null,

    /**
     * <p>text autodetection constant (iOS 4.0+)</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    AUTODETECT_ADDRESS:null,

    /**
     * <p>text autodetection constant (iOS)</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    AUTODETECT_ALL:null,

    /**
     * <p>text autodetection constant (iOS 4.0+)</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    AUTODETECT_CALENDAR:null,

    /**
     * <p>text autodetection constant (iOS)</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    AUTODETECT_LINK:null,

    /**
     * <p>text autodetection constant (iOS)</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    AUTODETECT_NONE:null,

    /**
     * <p>text autodetection constant (iOS)</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    AUTODETECT_PHONE:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_CLEAR:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_COLOR:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_COLOR_BURN:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_COLOR_DODGE:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_COPY:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_DARKEN:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_DESTINATION_ATOP:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_DESTINATION_IN:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_DESTINATION_OUT:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_DESTINATION_OVER:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_DIFFERENCE:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_EXCLUSION:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_HARD_LIGHT:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_HUE:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_LIGHTEN:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_LUMINOSITY:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_MULTIPLY:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_NORMAL:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_OVERLAY:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_PLUS_DARKER:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_PLUS_LIGHTER:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_SATURATION:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_SCREEN:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_SOFT_LIGHT:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_SOURCE_ATOP:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_SOURCE_IN:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_SOURCE_OUT:null,

    /**
     * <p>image mode constant</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    BLEND_MODE_XOR:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.iOS.3DMatrix}.</p>
     * @param {Dictionary<Titanium_UI_iOS_3DMatrix>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.iOS.3DMatrix}.</p>
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    create3DMatrix:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.iOS.AdView}.</p>
     * @param {Dictionary<Titanium_UI_iOS_AdView>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.iOS.AdView}.</p>
     * @returns Titanium_UI_iOS_AdView
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    createAdView:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.iOS.CoverFlowView}.</p>
     * @param {Dictionary<Titanium_UI_iOS_CoverFlowView>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.iOS.CoverFlowView}.</p>
     * @returns Titanium_UI_iOS_CoverFlowView
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    createCoverFlowView:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.iOS.TabbedBar}.</p>
     * @param {Dictionary<Titanium_UI_iOS_TabbedBar>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.iOS.TabbedBar}.</p>
     * @returns Titanium_UI_iOS_TabbedBar
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    createTabbedBar:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.iOS.Toolbar}.</p>
     * @param {Dictionary<Titanium_UI_iOS_Toolbar>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.iOS.Toolbar}.</p>
     * @returns Titanium_UI_iOS_Toolbar
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    createToolbar:function(parameters) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: iPhone, iPad
 * @namespace <p>The 3DMatrix is created by {@link Titanium.UI.iOS.create3DMatrix}.  A 3D matrix is
used to rotate, scale, translate, or skew the objects in a three-dimensional
space. A 3D matrix is represented by a 4 by 4 matrix. </p>
<p>You create an <code>identity matrix</code> by creating a 3D Matrix with an empty
constructor.</p>
 */
function Titanium_UI_iOS_3DMatrix() {
}
Titanium_UI_iOS_3DMatrix.prototype = {

    /**
     * <p>The entry at position [1,1] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m11:null,

    /**
     * <p>The entry at position [1,2] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m12:null,

    /**
     * <p>The entry at position [1,3] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m13:null,

    /**
     * <p>The entry at position [1,4] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m14:null,

    /**
     * <p>The entry at position [2,1] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m21:null,

    /**
     * <p>The entry at position [2,2] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m22:null,

    /**
     * <p>The entry at position [2,3] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m23:null,

    /**
     * <p>The entry at position [2,4] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m24:null,

    /**
     * <p>The entry at position [3,1] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m31:null,

    /**
     * <p>The entry at position [3,2] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m32:null,

    /**
     * <p>The entry at position [3,3] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m33:null,

    /**
     * <p>The entry at position [3,4] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m34:null,

    /**
     * <p>The entry at position [4,1] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m41:null,

    /**
     * <p>The entry at position [4,2] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m42:null,

    /**
     * <p>The entry at position [4,3] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m43:null,

    /**
     * <p>The entry at position [4,4] in the matrix.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    m44:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.3DMatrix.m11} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM11:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.3DMatrix.m12} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM12:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.3DMatrix.m13} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM13:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.3DMatrix.m14} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM14:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.3DMatrix.m21} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM21:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.3DMatrix.m22} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM22:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.3DMatrix.m23} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM23:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.3DMatrix.m24} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM24:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.3DMatrix.m31} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM31:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.3DMatrix.m32} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM32:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.3DMatrix.m33} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM33:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.3DMatrix.m34} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM34:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.3DMatrix.m41} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM41:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.3DMatrix.m42} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM42:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.3DMatrix.m43} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM43:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.3DMatrix.m44} property.</p>
     * @returns Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    getM44:function() {
    },

    /**
     * <p>Returns a matrix constructed by inverting an existing matrix</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    invert:function() {
    },

    /**
     * <p>Returns a matrix constructed by combining two existing matrix.</p>
     * @param {Titanium_UI_iOS_3DMatrix} t2 <p>The second matrix. This matrix is concatenated to the matrix instance against which the function is invoked.  The result of this function is the first matrix multiplied by the second matrix. You might perform several multiplications in order to create a single matrix that contains the cumulative effects of several transformations. Note that matrix operations are not commutative - the order in which you concatenate matrices is important. That is, the result of multiplying matrix t1 by matrix t2 does not necessarily equal the result of multiplying matrix t2 by matrix t1.</p>
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    multiply:function(t2) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Returns a matrix constructed by rotating an existing matrix</p>
     * @param {Number} angle <p>The angle, in degrees, by which to rotate the matrix. A positive value specifies counterclockwise rotation and a negative value specifies clockwise rotation.</p>
     * @param {Number} x <p>The x part of the vector about which to rotate</p>
     * @param {Number} y <p>The y part of the vector about which to rotate</p>
     * @param {Number} z <p>The z part of the vector about which to rotate</p>
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    rotate:function(angle, x, y, z) {
    },

    /**
     * <p>Returns a matrix constructed by scaling an existing matrix</p>
     * @param {Number} sx <p>The value by which to scale x values of the matrix</p>
     * @param {Number} sy <p>The value by which to scale y values of the matrix</p>
     * @param {Number} sz <p>The value by which to scale z values of the matrix</p>
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    scale:function(sx, sy, sz) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.3DMatrix.m11} property.</p>
     * @param {Number} m11 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM11:function(m11) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.3DMatrix.m12} property.</p>
     * @param {Number} m12 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM12:function(m12) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.3DMatrix.m13} property.</p>
     * @param {Number} m13 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM13:function(m13) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.3DMatrix.m14} property.</p>
     * @param {Number} m14 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM14:function(m14) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.3DMatrix.m21} property.</p>
     * @param {Number} m21 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM21:function(m21) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.3DMatrix.m22} property.</p>
     * @param {Number} m22 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM22:function(m22) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.3DMatrix.m23} property.</p>
     * @param {Number} m23 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM23:function(m23) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.3DMatrix.m24} property.</p>
     * @param {Number} m24 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM24:function(m24) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.3DMatrix.m31} property.</p>
     * @param {Number} m31 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM31:function(m31) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.3DMatrix.m32} property.</p>
     * @param {Number} m32 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM32:function(m32) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.3DMatrix.m33} property.</p>
     * @param {Number} m33 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM33:function(m33) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.3DMatrix.m34} property.</p>
     * @param {Number} m34 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM34:function(m34) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.3DMatrix.m41} property.</p>
     * @param {Number} m41 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM41:function(m41) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.3DMatrix.m42} property.</p>
     * @param {Number} m42 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM42:function(m42) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.3DMatrix.m43} property.</p>
     * @param {Number} m43 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM43:function(m43) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.3DMatrix.m44} property.</p>
     * @param {Number} m44 <p>New value for the property.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    setM44:function(m44) {
    },

    /**
     * <p>Returns a matrix constructed by translating an existing matrix</p>
     * @param {Number} tx <p>The value by which to move x values with the matrix</p>
     * @param {Number} ty <p>The value by which to move y values with the matrix</p>
     * @param {Number} tz <p>The value by which to move z values with the matrix</p>
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    translate:function(tx, ty, tz) {
    }
}

/**
 * platforms: iPhone, iPad
 */
function Titanium_UI_iOS_AdView() {
}
Titanium_UI_iOS_AdView.prototype = {

    /**
     * <p>constant for 320x50 ad sizes</p>
     * @type String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    SIZE_320x50:null,

    /**
     * <p>constant for 480x32 ad sizes</p>
     * @type String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    SIZE_480x32:null,

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 1.4 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.4 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 1.4 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.4 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 1.4 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.4 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    center:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 1.4 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 1.4 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    right:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 1.4 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>A banner view action can cover your application's user interface. However, your application continues to run, and receives events normally. If your application receives an event that requires the user's attention, it can programmatically cancel the action and uncover its interface by calling cancelAction. Canceling actions frequently can cause a loss of revenue for your application.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    cancelAction:function() {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.anchorPoint} property.</p>
     * @returns Point
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.backgroundColor} property.</p>
     * @returns String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 1.4 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 1.4 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 1.4 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 1.4 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.backgroundImage} property.</p>
     * @returns String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 1.4 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 1.4 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.backgroundTopCap} property.</p>
     * @returns Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.borderColor} property.</p>
     * @returns String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.borderRadius} property.</p>
     * @returns Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.borderWidth} property.</p>
     * @returns Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.center} property.</p>
     * @returns Point
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.focusable} property.</p>
     * @returns Boolean
     * @since 1.4 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.height} property.</p>
     * @returns Number
     * @returns String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 1.4 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.layout} property.</p>
     * @returns String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.left} property.</p>
     * @returns Number
     * @returns String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.opacity} property.</p>
     * @returns Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.right} property.</p>
     * @returns Number
     * @returns String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.SIZE_320x50} property.</p>
     * @returns String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getSIZE_320x50:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.SIZE_480x32} property.</p>
     * @returns String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getSIZE_480x32:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.size} property.</p>
     * @returns Object
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 1.4 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.top} property.</p>
     * @returns Number
     * @returns String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.touchEnabled} property.</p>
     * @returns Boolean
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.visible} property.</p>
     * @returns Boolean
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.width} property.</p>
     * @returns Number
     * @returns String
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.AdView.zIndex} property.</p>
     * @returns Number
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 1.4 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 1.4 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 1.4 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 1.4 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 1.4 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 1.4 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 1.4 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 1.4 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 1.4 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.AdView.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 1.4 (iPhone), 1.4 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: iPhone, iPad
 * 
 * @example Simple 3 image cover flow example
 * <p>Create a simple cover flow view.</p>
<pre><code>var view = Titanium.UI.iOS.createCoverFlowView({
    images:['a.png','b.png','c.png'],
    backgroundColor:'#000'
});
window.add(view);
</code></pre>
 */
function Titanium_UI_iOS_CoverFlowView() {
}
Titanium_UI_iOS_CoverFlowView.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    center:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    height:null,

    /**
     * <p>array of images to display in the view</p>
     * @type Array<Object>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    images:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    right:null,

    /**
     * <p>index to make selected</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    selected:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.borderColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.center} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.images} property.</p>
     * @returns Array<Object>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getImages:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.layout} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.opacity} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.selected} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getSelected:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.size} property.</p>
     * @returns Object
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.CoverFlowView.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>change an image for a index</p>
     * @param {Number} index <p>index to change</p>
     * @param {Object} image <p>the image to set the index to. May be a TiBlob, TiFile, URL, or dictionary with 'image' (may be any of TiBlob, TiFile, URL), 'width', 'height' keys.  'auto' is not allowed, only exact sizes (although a size may be omitted to keep the image at that size).  If passed as a TiFile or URL, will perform a check for '@2x' on Retina displays</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setImage:function(index, image) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.images} property.</p>
     * @param {Array<Object>} images <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setImages:function(images) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.selected} property.</p>
     * @param {Number} selected <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setSelected:function(selected) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.CoverFlowView.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: iPhone, iPad
 * @namespace <p>A Tabbed Bar is created by the method {@link Titanium.UI.iOS.createTabbedBar}. The 
difference between the Tabbed Bar and the Button Bar is that the tabbed bar visually 
maintains a state (visually distinguished as a pressed or selected look).</p>
 * 
 * @example Simple Tabbed Bar with 3 items
 * <p>var bb1 = Titanium.UI.iOS.createTabbedBar({
    labels:['One', 'Two', 'Three'],
    backgroundColor:'#336699',
    top:50,
    style:Titanium.UI.iPhone.SystemButtonStyle.BAR,
    height:25,
    width:200
});
win.add(bb1);</p>
 */
function Titanium_UI_iOS_TabbedBar() {
}
Titanium_UI_iOS_TabbedBar.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    center:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    height:null,

    /**
     * <p>the selected index</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    index:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>the array of labels for the tabbed bar. each object should have the properties <code>title</code>, <code>image</code>, <code>width</code> and <code>enabled</code>.</p>
     * @type Array<Object>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    labels:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    right:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Style of the tabbed bar.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    style:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.borderColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.center} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.index} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getIndex:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.labels} property.</p>
     * @returns Array<Object>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLabels:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.layout} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.opacity} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.size} property.</p>
     * @returns Object
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.style} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getStyle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.TabbedBar.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.index} property.</p>
     * @param {Number} index <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setIndex:function(index) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.labels} property.</p>
     * @param {Array<Object>} labels <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLabels:function(labels) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.style} property.</p>
     * @param {Number} style <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setStyle:function(style) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.TabbedBar.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: iPhone, iPad
 * @namespace <p>A toolbar can contain buttons, as well as certain other widgets, including 
text fields and labels.</p>
<p>To provide spacing between items in the toolbar, you can use the special iOS system
button types, {@link Titanium.UI.iPhone.SystemButton.FIXED_SPACE} and 
{@link Titanium.UI.iPhone.SystemButton.FLEXIBLE_SPACE}.</p>
<p>Note that toolbars are positioned like other views (using the <code>top</code> and <code>bottom</code> properties, 
for example), but the iOS Human Interface Guidelines have specific requirements for
placing toolbars: on iPhone, a toolbar should be at the bottom 
of the window. On the iPad, a toolbar should appear at the top or bottom of a window.</p>
<p>Use the {@link Titanium.UI.iOS.createToolbar} method to create a toolbar.</p>
 * 
 * @example Simple Toolbar
 * <p>The following code excerpt creates a simple toolbar, placed at the bottom of the
window. </p>
<pre><code>var send = Titanium.UI.createButton({
    title: 'Send',
    style: Titanium.UI.iPhone.SystemButtonStyle.DONE,
});

var camera = Titanium.UI.createButton({
    systemButton: Titanium.UI.iPhone.SystemButton.CAMERA,
});

var cancel = Titanium.UI.createButton({
    systemButton: Titanium.UI.iPhone.SystemButton.CANCEL
});

flexSpace = Titanium.UI.createButton({
    systemButton:Titanium.UI.iPhone.SystemButton.FLEXIBLE_SPACE
});

var toolbar = Titanium.UI.createToolbar({
    items:[send, flexSpace, camera, flexSpace, cancel],
    bottom:0,
    borderTop:true,
    borderBottom:false
}); 
win.add(toolbar);
</code></pre>
<p>Note the use of the flexible space for positioning the toolbar buttons -- the 
<code>FLEXIBLE_SPACE</code> button doesn't appear as a button, but a variable space between the
controls on either side of it. Available space in the toolbar is divided between 
all of the flexible space buttons in the toolbar. Without the flexible spaces in
this example, the toolbar buttons would be grouped tightly together on the left 
side of the toolbar.</p>
 */
function Titanium_UI_iOS_Toolbar() {
}
Titanium_UI_iOS_Toolbar.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Background color for the toolbar.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    barColor:null,

    /**
     * <p>If <code>true</code>, a border is drawn on the bottom of the toolbar.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderBottom:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderRadius:null,

    /**
     * <p>If <code>true</code>, a border is drawn on the top of the toolbar.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderTop:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    center:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    height:null,

    /**
     * <p>An array of buttons (or other widgets) contained in the toolbar.</p>
     * @type Array<Titanium_UI_View>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    items:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 0.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    right:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 0.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    transform:null,

    /**
     * <p>If <code>true</code>, a translucent background color is used for the toolbar.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    translucent:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.anchorPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.backgroundColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 0.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.backgroundImage} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.backgroundTopCap} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.barColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBarColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.borderBottom} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.borderColor} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.borderRadius} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.borderTop} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.borderWidth} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.center} property.</p>
     * @returns Point
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.focusable} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.height} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.items} property.</p>
     * @returns Array<Titanium_UI_View>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getItems:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 0.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.layout} property.</p>
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.left} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.opacity} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.right} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.size} property.</p>
     * @returns Object
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 0.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.top} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.touchEnabled} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.translucent} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getTranslucent:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.visible} property.</p>
     * @returns Boolean
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.width} property.</p>
     * @returns Number
     * @returns String
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iOS.Toolbar.zIndex} property.</p>
     * @returns Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 0.8 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.barColor} property.</p>
     * @param {String} barColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBarColor:function(barColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.borderBottom} property.</p>
     * @param {Boolean} borderBottom <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderBottom:function(borderBottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.borderTop} property.</p>
     * @param {Boolean} borderTop <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderTop:function(borderTop) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.items} property.</p>
     * @param {Array<Titanium_UI_View>} items <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setItems:function(items) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 0.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.translucent} property.</p>
     * @param {Boolean} translucent <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setTranslucent:function(translucent) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iOS.Toolbar.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: iPad
 * @namespace <p>All properties, methods and events in this namespace will only work on the Apple iPad 
related devices.  To develop for iPad, you will need the Apple iPhone SDK 3.2 or later 
and Titanium Mobile SDK 1.2 or later. </p>
<p>For iPad UI programming guidelines, please review the [iPad Human Interface Guidelines]
(http://developer.apple.com/iphone/library/documentation/General/Conceptual/iPadHIG/Introduction/Introduction.html).</p>
 */
Titanium.UI.iPad = {

    /**
     * <p>An arrow that points in any direction.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    POPOVER_ARROW_DIRECTION_ANY:null,

    /**
     * <p>An arrow that points downward.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    POPOVER_ARROW_DIRECTION_DOWN:null,

    /**
     * <p>An arrow that points toward the left.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    POPOVER_ARROW_DIRECTION_LEFT:null,

    /**
     * <p>An arrow that points toward the right.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    POPOVER_ARROW_DIRECTION_RIGHT:null,

    /**
     * <p>The status of the arrow is currently unknown.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    POPOVER_ARROW_DIRECTION_UNKNOWN:null,

    /**
     * <p>An arrow that points upward.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    POPOVER_ARROW_DIRECTION_UP:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.2 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.iPad.DocumentViewer}.</p>
     * @param {Dictionary<Titanium_UI_iPad_DocumentViewer>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.iPad.DocumentViewer}.</p>
     * @returns Titanium_UI_iPad_DocumentViewer
     * @since 1.8 (iPad)
     */
    createDocumentViewer:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.iPad.Popover}.</p>
     * @param {Dictionary<Titanium_UI_iPad_Popover>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.iPad.Popover}.</p>
     * @returns Titanium_UI_iPad_Popover
     * @since 1.2 (iPad)
     */
    createPopover:function(parameters) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.iPad.SplitWindow}.</p>
     * @param {Dictionary<Titanium_UI_iPad_SplitWindow>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.iPad.SplitWindow}.</p>
     * @returns Titanium_UI_iPad_SplitWindow
     * @since 1.2 (iPad)
     */
    createSplitWindow:function(parameters) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.2 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.2 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: iPad
 * @namespace <p>For example, an email program might use this class to allow the user to preview 
attachments and open them in other apps. Use this class to present an appropriate 
user interface for previewing or printing a specified file. The DocumentViewer is 
created by the method {@link Titanium.UI.iPad.createDocumentViewer}.</p>
 * 
 * @example Document Viewer Example
 * <p>In this example, we create a document viewer with a window button and right navigation button.</p>
<p>//-----------example--------
    Titanium.UI.setBackgroundColor('#000');
    //creating the window
    var win1 = Titanium.UI.createWindow({
        title:'win 1',
        backgroundColor:'#fff'
        });
     //add window - navigation bar
     var modalWin = Ti.UI.createWindow();
     //nav bar
     var navmodal = Ti.UI.iPhone.createNavigationGroup({
        window:modalWin
        });
     win1.add(navmodal);
     //button for the nav bar
     var b2t = Titanium.UI.createButton({
       title:'Launch'
       });
     modalWin.RightNavButton = b2t;
     //button for the window
     var b1t = Titanium.UI.createButton({
       title:'Launch',
       height:40,
       width:200,
       top:270
       });
     win1.add(b1t);
     //Setting up the documentviewer
     z = Ti.UI.iPad.createDocumentViewer({url:'Example.pdf'});
     //documentviewer with animation set on and a quicklook view poping up next to a view
     b1t.addEventListener('click', function(){z.show({animated:false,view:b2t});});
     //documentviewer with animation set off
     b2t.addEventListener('click', function(){z.show();});
     win1.open();</p>
 */
function Titanium_UI_iPad_DocumentViewer() {
}
Titanium_UI_iPad_DocumentViewer.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 1.8 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 1.8 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 1.8 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 1.8 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.8 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 1.8 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.8 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 1.8 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.8 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 1.8 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 1.8 (iPad)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.8 (iPad)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 1.8 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 1.8 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 1.8 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 1.8 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.8 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 1.8 (iPad)
     */
    center:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 1.8 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 1.8 (iPad)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 1.8 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 1.8 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.8 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 1.8 (iPad)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.8 (iPad)
     */
    right:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 1.8 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 1.8 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 1.8 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 1.8 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 1.8 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 1.8 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 1.8 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 1.8 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 1.8 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 1.8 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 1.8 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.anchorPoint} property.</p>
     * @returns Point
     * @since 1.8 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 1.8 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.backgroundColor} property.</p>
     * @returns String
     * @since 1.8 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 1.8 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 1.8 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 1.8 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 1.8 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 1.8 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.backgroundImage} property.</p>
     * @returns String
     * @since 1.8 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 1.8 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 1.8 (iPad)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 1.8 (iPad)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.backgroundTopCap} property.</p>
     * @returns Number
     * @since 1.8 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.borderColor} property.</p>
     * @returns String
     * @since 1.8 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.borderRadius} property.</p>
     * @returns Number
     * @since 1.8 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.borderWidth} property.</p>
     * @returns Number
     * @since 1.8 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 1.8 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.center} property.</p>
     * @returns Point
     * @since 1.8 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.focusable} property.</p>
     * @returns Boolean
     * @since 1.8 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.height} property.</p>
     * @returns Number
     * @returns String
     * @since 1.8 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 1.8 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.layout} property.</p>
     * @returns String
     * @since 1.8 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.left} property.</p>
     * @returns Number
     * @returns String
     * @since 1.8 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.opacity} property.</p>
     * @returns Number
     * @since 1.8 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.right} property.</p>
     * @returns Number
     * @returns String
     * @since 1.8 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.size} property.</p>
     * @returns Object
     * @since 1.8 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 1.8 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.top} property.</p>
     * @returns Number
     * @returns String
     * @since 1.8 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.touchEnabled} property.</p>
     * @returns Boolean
     * @since 1.8 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 1.8 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.visible} property.</p>
     * @returns Boolean
     * @since 1.8 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.width} property.</p>
     * @returns Number
     * @returns String
     * @since 1.8 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.DocumentViewer.zIndex} property.</p>
     * @returns Number
     * @since 1.8 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 1.8 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 1.8 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 1.8 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 1.8 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 1.8 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 1.8 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 1.8 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 1.8 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 1.8 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>change the url of the document viewer</p>
     * @param {String} url <p>the new url</p>
     * @since 1.8 (iPad)
     */
    setUrl:function(url) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.DocumentViewer.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 1.8 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>to display the document viewer over the current view.</p>
     * @param {Boolean} animated <p>is a boolean indicating if the showing of the viewer should be animated.</p>
     * @param {Object} view <p>The view property would specify the view relative to where the viewer should display.</p>
     * @since 1.8 (iPad)
     */
    show:function(animated, view) {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 1.8 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: iPad
 * @namespace <p>You use popovers to present information temporarily but in a way that does not take over 
the entire screen like a modal view does. The popover content is layered on top of your 
existing content in a special type of window. The popover remains visible until the user 
taps outside of the popover window or you explicitly dismiss it. The Popover is created 
by the method {@link Titanium.UI.iPad.createPopover}.</p>
<p><img alt="popover" src="http://img.skitch.com/20100406-pmssjk1a3a65s6ui8qnbqi59c4.png" /></p>
 * 
 * @example Simple Popover
 * <p>In this example, we create a simple popover and position it near the button</p>
<pre><code>var popover = Ti.UI.iPad.createPopover({height:100,width:100});
popover.add(view);
popover.show({view:button});
</code></pre>
 * 
 * @example Popover with title and nav button
 * <p>In this example, we create a popover with a title and right navigation button.</p>
<pre><code>var popover = Ti.UI.iPad.createPopover({ 
    width:250, 
    height:100,
    title: "Yo Yo",
    rightNavButton:button
});
</code></pre>
 */
function Titanium_UI_iPad_Popover() {
}
Titanium_UI_iPad_Popover.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 1.2 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 1.2 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>return the arrow direction of the popover</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    arrowDirection:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 1.2 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 1.2 (iPad)
     */
    center:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 1.2 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 1.2 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    left:null,

    /**
     * <p>the left button in the nav area of the popover</p>
     * @type Object
     * @since 1.2 (iPad)
     */
    leftNavButton:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    right:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 1.2 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 1.2 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>the title of the nav area of the popover</p>
     * @type String
     * @since 1.2 (iPad)
     */
    title:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 1.2 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 1.2 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 1.2 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 1.2 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.2 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 1.2 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 1.2 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.2 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.anchorPoint} property.</p>
     * @returns Point
     * @since 1.2 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 1.2 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.arrowDirection} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getArrowDirection:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.backgroundColor} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 1.2 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.backgroundImage} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.backgroundTopCap} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.borderColor} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.borderRadius} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.borderWidth} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.center} property.</p>
     * @returns Point
     * @since 1.2 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.focusable} property.</p>
     * @returns Boolean
     * @since 1.2 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.height} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 1.2 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.layout} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.left} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.leftNavButton} property.</p>
     * @returns Object
     * @since 1.2 (iPad)
     */
    getLeftNavButton:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.opacity} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.right} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.size} property.</p>
     * @returns Object
     * @since 1.2 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 1.2 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.title} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.top} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.touchEnabled} property.</p>
     * @returns Boolean
     * @since 1.2 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 1.2 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.visible} property.</p>
     * @returns Boolean
     * @since 1.2 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.width} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.Popover.zIndex} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 1.2 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 1.2 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.2 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.arrowDirection} property.</p>
     * @param {Number} arrowDirection <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setArrowDirection:function(arrowDirection) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>change the height of the popover</p>
     * @param {Number|String} height <p>height of the popover</p>
     * @since 1.2 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.leftNavButton} property.</p>
     * @param {Object} leftNavButton <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setLeftNavButton:function(leftNavButton) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>set the passthrough views for the popover</p>
     * @param {Array<Object>} passthroughViews <p>array of views which the user can interact with while the popover is open (i.e. clicking on these views will interact with these views, and not dismiss the popover).</p>
     * @since 1.2 (iPad)
     */
    setPassthroughViews:function(passthroughViews) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTitle:function(title) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>change the width of the popover</p>
     * @param {Number|String} width <p>width of the popover</p>
     * @since 1.2 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.Popover.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 1.2 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 1.2 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: iPad
 * @namespace <p>You use this class to implement a master-detail interface, in which the 
left-side view presents a list of items and the right-side presents details of the 
selected item. The SplitView is for use exclusively on iPad devices. </p>
<p>By default, the SplitView shows both master and detail views in landscape orientation. 
When the device switches into portrait orientation, the detail view occupies the entire 
screen. The user can click a button to bring up the master view as floating, "popover" 
view. (To show the master view in both orientations, set <code>showMasterInPortrait</code> to <code>true</code>.)</p>
<p>Use the {@link Titanium.UI.iPad.createSplitWindow} method to create a SplitWindow. The 
<code>masterView</code> and <code>detailView</code> properties are required in the constructor of the 
SplitWindow and cannot be changed once set.</p>
<p>The SplitWindow inherits its methods and properties from {@link Titanium.UI.Window}.</p>
<p>The SplitWindow is a top-level window and cannot be contained within another window or view.
<img alt="splitview" src="http://img.skitch.com/20100406-1f85bm9cx8t768xgsjqax1ng6y.png" /></p>
 * 
 * @example Split Window Example
 * <p>This is an example of a Split Window.</p>
<pre><code>var win = Ti.UI.createWindow();

var nav = Ti.UI.iPhone.createNavigationGroup({
   window: win
});

var splitwin = Ti.UI.iPad.createSplitWindow({
    detailView:nav,
    masterView:masterView
});

splitwin.addEventListener('visible',function(e)
{
    if (e.view == 'detail')
    {
        e.button.title = "Master";
        win.leftNavButton = e.button;
    }
    else if (e.view == 'master')
    {
        win.leftNavButton = null;
    }
});

splitwin.open();
</code></pre>
 */
function Titanium_UI_iPad_SplitWindow() {
}
Titanium_UI_iPad_SplitWindow.prototype = {

    /**
     * <p>For heavyweight windows, this property contains a reference to the
Android Activity object associated with this window.</p>
     * @type Titanium_Android_Activity
     * @since 1.2 (Android)
     */
    activity:null,

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 1.2 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 1.2 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Title for the back button. This is only valid when the window is a child of a tab.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    backButtonTitle:null,

    /**
     * <p>URL to an image to show as the back button. This is only valid when the window is a child of a tab.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    backButtonTitleImage:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 1.2 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Background color for the nav bar, specified as a hex color or color name.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    barColor:null,

    /**
     * <p>Background image for the nav bar, specified as a URL to a local image.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    barImage:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 1.2 (iPad)
     */
    center:null,

    /**
     * <p>View for the detail view section of the SplitWindow.</p>
     * @type Titanium_UI_View
     * @since 1.2 (iPad)
     */
    detailView:null,

    /**
     * <p>Boolean value indicating if the application should exit when the Android
Back button is pressed while the window is being shown.</p>
     * @type Boolean
     * @since 1.2 (Android)
     */
    exitOnClose:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 1.2 (Android)
     */
    focusable:null,

    /**
     * <p>Boolean value indicating if the window is fullscreen.</p>
     * @type Boolean
     * @since 1.2 (iPad)
     */
    fullscreen:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 1.2 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    left:null,

    /**
     * <p>View to show in the left nav bar area.</p>
     * @type Titanium_UI_View
     * @since 1.2 (iPad)
     */
    leftNavButton:null,

    /**
     * <p>View for the master view section of the SplitWindow.</p>
     * @type Titanium_UI_View
     * @since 1.2 (iPad)
     */
    masterView:null,

    /**
     * <p>Boolean to indicate if the window should be opened modal in front of other windows.</p>
     * @type Boolean
     * @since 1.2 (iPad)
     */
    modal:null,

    /**
     * <p>For modal windows, hide the nav bar (<code>true</code>) or show the nav bar (<code>false</code>).</p>
     * @type Boolean
     * @since 1.2 (iPad)
     */
    navBarHidden:null,

    /**
     * <p>The opacity from 0.0-1.0.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    opacity:null,

    /**
     * <p>Current orientation of the window.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    orientation:null,

    /**
     * <p>Array of supported orientation modes, specified using the orientation
constants defined in {@link Titanium.UI}.</p>
     * @type Array<Number>
     * @since 1.2 (iPad)
     */
    orientationModes:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    right:null,

    /**
     * <p>View to show in the right nav bar area.</p>
     * @type Titanium_UI_View
     * @since 1.2 (iPad)
     */
    rightNavButton:null,

    /**
     * <p>Whether or not to show the master view in portrait orientation.</p>
     * @type Boolean
     * @since 1.7.2 (iPad)
     */
    showMasterInPortrait:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 1.2 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 1.2 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>Boolean value indicating if the tab bar should be hidden. </p>
     * @type Boolean
     * @since 1.2 (iPad)
     */
    tabBarHidden:null,

    /**
     * <p>Title of the window.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    title:null,

    /**
     * <p>View to show in the title area of the nav bar.</p>
     * @type Titanium_UI_View
     * @since 1.2 (iPad)
     */
    titleControl:null,

    /**
     * <p>Image to show in the title area of the nav bar, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    titleImage:null,

    /**
     * <p>Title prompt for the window.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    titlePrompt:null,

    /**
     * <p>Key identifying a string from the locale file to use for the window title.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    titleid:null,

    /**
     * <p>Key identifying a string from the locale file to use for the window title prompt.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    titlepromptid:null,

    /**
     * <p>Array of button objects to show in the window's toolbar. This is only valid when
the window is the child of a tab.</p>
     * @type Array<Object>
     * @since 1.2 (iPad)
     */
    toolbar:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 1.2 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 1.2 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating if the nav bar is translucent.</p>
     * @type Boolean
     * @since 1.2 (iPad)
     */
    translucent:null,

    /**
     * <p>Local URL to a JavaScript file with the windows instructions.</p>
     * @type String
     * @since 1.2 (iPad)
     */
    url:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 1.2 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPad)
     */
    width:null,

    /**
     * <p>Set the pixel format for the Activity's Window.</p>
     * @type Number
     * @since 1.8.0 (Android)
     */
    windowPixelFormat:null,

    /**
     * <p>Determines how the window is treated when a soft input method (such as a
virtual keyboard) is displayed.</p>
     * @type Number
     * @since 1.2 (Android)
     */
    windowSoftInputMode:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 1.2 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 1.2 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.2 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 1.2 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>Closes the window.</p>
     * @param {Object} options <p>Optional animation or display properties to use when closing the window.</p>
     * @since 1.2 (iPad)
     */
    close:function(options) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 1.2 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.2 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.activity} property.</p>
     * @returns Titanium_Android_Activity
     * @since 1.2 (Android)
     */
    getActivity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.anchorPoint} property.</p>
     * @returns Point
     * @since 1.2 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 1.2 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.backButtonTitle} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBackButtonTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.backButtonTitleImage} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBackButtonTitleImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.backgroundColor} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 1.2 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.backgroundImage} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.backgroundTopCap} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.barColor} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBarColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.barImage} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBarImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.borderColor} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.borderRadius} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.borderWidth} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.center} property.</p>
     * @returns Point
     * @since 1.2 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.detailView} property.</p>
     * @returns Titanium_UI_View
     * @since 1.2 (iPad)
     */
    getDetailView:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.exitOnClose} property.</p>
     * @returns Boolean
     * @since 1.2 (Android)
     */
    getExitOnClose:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.focusable} property.</p>
     * @returns Boolean
     * @since 1.2 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.fullscreen} property.</p>
     * @returns Boolean
     * @since 1.2 (iPad)
     */
    getFullscreen:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.height} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 1.2 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.layout} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.left} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.leftNavButton} property.</p>
     * @returns Titanium_UI_View
     * @since 1.2 (iPad)
     */
    getLeftNavButton:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.masterView} property.</p>
     * @returns Titanium_UI_View
     * @since 1.2 (iPad)
     */
    getMasterView:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.modal} property.</p>
     * @returns Boolean
     * @since 1.2 (iPad)
     */
    getModal:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.navBarHidden} property.</p>
     * @returns Boolean
     * @since 1.2 (iPad)
     */
    getNavBarHidden:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.opacity} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.orientation} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getOrientation:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.orientationModes} property.</p>
     * @returns Array<Number>
     * @since 1.2 (iPad)
     */
    getOrientationModes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.right} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.rightNavButton} property.</p>
     * @returns Titanium_UI_View
     * @since 1.2 (iPad)
     */
    getRightNavButton:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.showMasterInPortrait} property.</p>
     * @returns Boolean
     * @since 1.7.2 (iPad)
     */
    getShowMasterInPortrait:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.size} property.</p>
     * @returns Object
     * @since 1.2 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 1.2 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.tabBarHidden} property.</p>
     * @returns Boolean
     * @since 1.2 (iPad)
     */
    getTabBarHidden:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.title} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getTitle:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.titleControl} property.</p>
     * @returns Titanium_UI_View
     * @since 1.2 (iPad)
     */
    getTitleControl:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.titleImage} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getTitleImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.titlePrompt} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getTitlePrompt:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.titleid} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getTitleid:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.titlepromptid} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getTitlepromptid:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.toolbar} property.</p>
     * @returns Array<Object>
     * @since 1.2 (iPad)
     */
    getToolbar:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.top} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.touchEnabled} property.</p>
     * @returns Boolean
     * @since 1.2 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 1.2 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.translucent} property.</p>
     * @returns Boolean
     * @since 1.2 (iPad)
     */
    getTranslucent:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.url} property.</p>
     * @returns String
     * @since 1.2 (iPad)
     */
    getUrl:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.visible} property.</p>
     * @returns Boolean
     * @since 1.2 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.width} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.windowPixelFormat} property.</p>
     * @returns Number
     * @since 1.8.0 (Android)
     */
    getWindowPixelFormat:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.windowSoftInputMode} property.</p>
     * @returns Number
     * @since 1.2 (Android)
     */
    getWindowSoftInputMode:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPad.SplitWindow.zIndex} property.</p>
     * @returns Number
     * @since 1.2 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 1.2 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>Hides the tab bar. Must be called before opening the window.</p>
     * @since 1.2 (iPad)
     */
    hideTabBar:function() {
    },

    /**
     * <p>Opens the window.</p>
     * @param {Object} options <p>Optional animation or display properties to use when opening the window.</p>
     * @since 1.2 (iPad)
     */
    open:function(options) {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 1.2 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.2 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.activity} property.</p>
     * @param {Titanium_Android_Activity} activity <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setActivity:function(activity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.backButtonTitle} property.</p>
     * @param {String} backButtonTitle <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackButtonTitle:function(backButtonTitle) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.backButtonTitleImage} property.</p>
     * @param {String} backButtonTitleImage <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackButtonTitleImage:function(backButtonTitleImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.barColor} property.</p>
     * @param {String} barColor <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBarColor:function(barColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.barImage} property.</p>
     * @param {String} barImage <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBarImage:function(barImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.fullscreen} property.</p>
     * @param {Boolean} fullscreen <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setFullscreen:function(fullscreen) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.leftNavButton} property.</p>
     * @param {Titanium_UI_View} leftNavButton <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setLeftNavButton:function(leftNavButton) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.modal} property.</p>
     * @param {Boolean} modal <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setModal:function(modal) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.navBarHidden} property.</p>
     * @param {Boolean} navBarHidden <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setNavBarHidden:function(navBarHidden) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.orientation} property.</p>
     * @param {Number} orientation <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setOrientation:function(orientation) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.orientationModes} property.</p>
     * @param {Array<Number>} orientationModes <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setOrientationModes:function(orientationModes) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.rightNavButton} property.</p>
     * @param {Titanium_UI_View} rightNavButton <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setRightNavButton:function(rightNavButton) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.showMasterInPortrait} property.</p>
     * @param {Boolean} showMasterInPortrait <p>New value for the property.</p>
     * @since 1.7.2 (iPad)
     */
    setShowMasterInPortrait:function(showMasterInPortrait) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.tabBarHidden} property.</p>
     * @param {Boolean} tabBarHidden <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTabBarHidden:function(tabBarHidden) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.title} property.</p>
     * @param {String} title <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTitle:function(title) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.titleControl} property.</p>
     * @param {Titanium_UI_View} titleControl <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTitleControl:function(titleControl) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.titleImage} property.</p>
     * @param {String} titleImage <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTitleImage:function(titleImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.titlePrompt} property.</p>
     * @param {String} titlePrompt <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTitlePrompt:function(titlePrompt) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.titleid} property.</p>
     * @param {String} titleid <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTitleid:function(titleid) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.titlepromptid} property.</p>
     * @param {String} titlepromptid <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTitlepromptid:function(titlepromptid) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.toolbar} property.</p>
     * @param {Array<Object>} toolbar <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setToolbar:function(toolbar) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.translucent} property.</p>
     * @param {Boolean} translucent <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setTranslucent:function(translucent) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.windowPixelFormat} property.</p>
     * @param {Number} windowPixelFormat <p>New value for the property.</p>
     * @since 1.8.0 (Android)
     */
    setWindowPixelFormat:function(windowPixelFormat) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPad.SplitWindow.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 1.2 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 1.2 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 1.2 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: iPhone, iPad
 */
Titanium.UI.iPhone = {

    /**
     * <p>The view is presented using the same style as its parent window.</p>
     * @type Number
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    MODAL_PRESENTATION_CURRENT_CONTEXT:null,

    /**
     * <p>The width and height of the presented window are smaller than those of the screen and the view is centered on the screen. If the device is in a landscape orientation and the keyboard is visible, the position of the view is adjusted upward so that the view remains visible. All uncovered areas are dimmed to prevent the user from interacting with them.</p>
     * @type Number
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    MODAL_PRESENTATION_FORMSHEET:null,

    /**
     * <p>The presented window covers the screen.</p>
     * @type Number
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    MODAL_PRESENTATION_FULLSCREEN:null,

    /**
     * <p>The height of the presented window is set to the height of the screen and the view's width is set to the width of the screen in a portrait orientation. Any uncovered areas are dimmed to prevent the user from interacting with them. (In portrait orientations, this option is essentially the same as {@link Titanium.UI.iPhone.MODAL_PRESENTATION_FULLSCREEN}).</p>
     * @type Number
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    MODAL_PRESENTATION_PAGESHEET:null,

    /**
     * <p>When the window is presented, its view slides up from the bottom of the screen. On dismissal, the view slides back down. This is the default transition style.</p>
     * @type Number
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    MODAL_TRANSITION_STYLE_COVER_VERTICAL:null,

    /**
     * <p>When the window is presented, the current view fades out while the new view fades in at the same time. On dismissal, a similar type of cross-fade is used to return to the original view.</p>
     * @type Number
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    MODAL_TRANSITION_STYLE_CROSS_DISSOLVE:null,

    /**
     * <p>When the window is presented, the current view initiates a horizontal 3D flip from right-to-left, resulting in the revealing of the new view as if it were on the back of the previous view. On dismissal, the flip occurs from left-to-right, returning to the original view.</p>
     * @type Number
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL:null,

    /**
     * <p>When the window is presented, one corner of the current view curls up to reveal the modal view underneath. On dismissal, the curled up page unfurls itself back on top of the modal view. A modal view presented using this transition is itself prevented from presenting any additional modal views. This transition style is supported only if the window is presenting a {@link Titanium.UI.iPhone.MODAL_PRESENTATION_FULLSCREEN} modal presentation style.</p>
     * @type Number
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    MODAL_TRANSITION_STYLE_PARTIAL_CURL:null,

    /**
     * <p>set the application badge for the application's icon in the springboard</p>
     * @type String
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    appBadge:null,

    /**
     * <p>control whether the shake to edit system wide capability is enabled</p>
     * @type Boolean
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    appSupportsShakeToEdit:null,

    /**
     * <p>control the status bar visibility</p>
     * @type Boolean
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    statusBarHidden:null,

    /**
     * <p>constant that controls the status bar color style</p>
     * @type Number
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    statusBarStyle:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Create and return an instance of {@link Titanium.UI.iPhone.NavigationGroup}.</p>
     * @param {Dictionary<Titanium_UI_iPhone_NavigationGroup>} parameters <p>(Optional) A dictionary object with properties as defined in {@link Titanium.UI.iPhone.NavigationGroup}.</p>
     * @returns Titanium_UI_iPhone_NavigationGroup
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    createNavigationGroup:function(parameters) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.appBadge} property.</p>
     * @returns String
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    getAppBadge:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.appSupportsShakeToEdit} property.</p>
     * @returns Boolean
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    getAppSupportsShakeToEdit:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.statusBarHidden} property.</p>
     * @returns Boolean
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    getStatusBarHidden:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.statusBarStyle} property.</p>
     * @returns Number
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    getStatusBarStyle:function() {
    },

    /**
     * <p>convenience method to hide the status bar</p>
     * @param {Boolean} animated <p>boolean to indicate if the action should be animated</p>
     * @param {Number} animationStyle <p>the animation style</p>
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    hideStatusBar:function(animated, animationStyle) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.appBadge} property.</p>
     * @param {String} appBadge <p>New value for the property.</p>
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    setAppBadge:function(appBadge) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.appSupportsShakeToEdit} property.</p>
     * @param {Boolean} appSupportsShakeToEdit <p>New value for the property.</p>
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    setAppSupportsShakeToEdit:function(appSupportsShakeToEdit) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.statusBarHidden} property.</p>
     * @param {Boolean} statusBarHidden <p>New value for the property.</p>
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    setStatusBarHidden:function(statusBarHidden) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.statusBarStyle} property.</p>
     * @param {Number} statusBarStyle <p>New value for the property.</p>
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    setStatusBarStyle:function(statusBarStyle) {
    },

    /**
     * <p>convenience method to show the status bar</p>
     * @param {Boolean} animated <p>boolean to indicate if the action should be animated</p>
     * @param {Number} animationStyle <p>the animation style</p>
     * @since 0.5 (iPhone), 0.5 (iPad)
     */
    showStatusBar:function(animated, animationStyle) {
    }
}

/**
 * platforms: iPhone, iPad
 */
function Titanium_UI_iPhone_ActivityIndicatorStyle() {
}
Titanium_UI_iPhone_ActivityIndicatorStyle.prototype = {

    /**
     * <p>The large white style of indicator.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    BIG:null,

    /**
     * <p>The standard gray style of indicator.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    DARK:null,

    /**
     * <p>The standard white style of indicator (the default).</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    PLAIN:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: iPhone, iPad
 */
function Titanium_UI_iPhone_AnimationStyle() {
}
Titanium_UI_iPhone_AnimationStyle.prototype = {

    /**
     * <p>Curl downwards during a transition animation</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    CURL_DOWN:null,

    /**
     * <p>Curl upwards during a transition animation</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    CURL_UP:null,

    /**
     * <p>Flip from left to right during a transition animation</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    FLIP_FROM_LEFT:null,

    /**
     * <p>Flip from right to left during a transition animation</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    FLIP_FROM_RIGHT:null,

    /**
     * <p>No animation</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    NONE:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: iPhone, iPad
 * @namespace <p>The Navigation Group is created by the method {@link Titanium.UI.iPhone.NavigationGroup}.</p>
<p><img alt="navgroup" src="http://img.skitch.com/20100406-rwe44533tkd94fdnbqqudxynpe.png" /></p>
<p>A Navigation Group is very similar to Tab Bars with the exception that they do not 
maintain a group of windows with a interface bar at the bottom.</p>
<p>The <code>window</code> property must be set initially in the constructor when creating a 
navigation group to the root level window.  All Navigation Groups must have at 
least one root window that cannot be removed.</p>
 * 
 * @example Simple Navigation Group
 * <p>In this example, we open 2 windows in a navigation group.  When you run this, the initial window 
should be blue.  When you click the back button, you should see a window that should be red.</p>
<pre><code>var win = Titanium.UI.createWindow();
var win1 = Titanium.UI.createWindow({
    backgroundColor:"red",
    title:"Red Window"
});
var nav = Titanium.UI.iPhone.createNavigationGroup({
   window: win1
});
win.add(nav);
win.open();
var win2 = Titanium.UI.createWindow({
    backgroundColor:"blue",
    title:"Blue Window"
});
nav.open(win2,{animated:true});
</code></pre>
 */
function Titanium_UI_iPhone_NavigationGroup() {
}
Titanium_UI_iPhone_NavigationGroup.prototype = {

    /**
     * <p>Anchor point where animation should occur, relative to the view's boundaries.</p>
     * @type Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    anchorPoint:null,

    /**
     * <p>Current position of the view during an animation.</p>
     * @type Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    animatedCenterPoint:null,

    /**
     * <p>Background color of the view.</p>
     * @type String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    backgroundColor:null,

    /**
     * <p>Disabled background color of the view.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundDisabledColor:null,

    /**
     * <p>Disabled background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundDisabledImage:null,

    /**
     * <p>Focused background color of the view.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundFocusedColor:null,

    /**
     * <p>Focused background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (Android)
     */
    backgroundFocusedImage:null,

    /**
     * <p>A background gradient for the view.</p>
     * @type Gradient
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    backgroundGradient:null,

    /**
     * <p>Background image for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    backgroundImage:null,

    /**
     * <p>Size of the left end cap.</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    backgroundLeftCap:null,

    /**
     * <p>Selected background color of the view.</p>
     * @type String
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedColor:null,

    /**
     * <p>Selected background image url for the view, specified as a local file path or URL.</p>
     * @type String
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    backgroundSelectedImage:null,

    /**
     * <p>Size of the top end cap.</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    backgroundTopCap:null,

    /**
     * <p>Border color of the view.</p>
     * @type String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    borderColor:null,

    /**
     * <p>Border radius of the view.</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    borderRadius:null,

    /**
     * <p>Border width of the view.</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    borderWidth:null,

    /**
     * <p>View's bottom position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    bottom:null,

    /**
     * <p>View's center position, in the parent view's coordinates.</p>
     * @type Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    center:null,

    /**
     * <p>Whether view should be focusable while navigating with the trackball.</p>
     * @type Boolean
     * @since 1.2 (Android)
     */
    focusable:null,

    /**
     * <p>View height, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    height:null,

    /**
     * <p>Whether to keep the device screen on.</p>
     * @type Boolean
     * @since 1.2 (Android)
     */
    keepScreenOn:null,

    /**
     * <p>Specifies how the view positions its children. 
One of: 'absolute', 'vertical', or 'horizontal'.</p>
     * @type String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    layout:null,

    /**
     * <p>View's left position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    left:null,

    /**
     * <p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    opacity:null,

    /**
     * <p>View's right position, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    right:null,

    /**
     * <p>Size of the view as a dictionary of width and height properties.</p>
     * @type Object
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    size:null,

    /**
     * <p>Determines keyboard behavior when this view is focused.</p>
     * @type Number
     * @since 1.2 (Android)
     */
    softKeyboardOnFocus:null,

    /**
     * <p>The view's top position.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    top:null,

    /**
     * <p>Whether view should receive touch events.</p>
     * @type Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    touchEnabled:null,

    /**
     * <p>Transformation matrix to apply to the view.</p>
     * @type Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    transform:null,

    /**
     * <p>Boolean value indicating whether the view is visible.</p>
     * @type Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    visible:null,

    /**
     * <p>View's width, in platform-specific units.</p>
     * @type Number|String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    width:null,

    /**
     * <p>Z index position relative to other sibling views.</p>
     * @type Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    zIndex:null,


    /**
     * <p>Adds a child to this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to add to this view's hierarchy</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    add:function(view) {
    },

    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Animates this view.</p>
     * @param {Titanium_UI_Animation|Dictionary<Titanium_UI_Animation>} obj <p>Either a dictionary of animation properties or an 
{@link Titanium.UI.Animation} object.</p>
     * @param {Callback<Object>} callback <p>Function to be invoked upon completion of the animation.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    animate:function(obj, callback) {
    },

    /**
     * <p>close a window and remove it from the navigation group</p>
     * @param {Object} window <p>window to close</p>
     * @param {Object} properties <p>optional dictionary. the only current property supported is <code>animated</code> which is a boolean to indicate if the window should be closed animated (default) or not.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    close:function(window, properties) {
    },

    /**
     * <p>Translates a point from this view's coordinate system to another 
view's coordinate system.</p>
     * @param {Point} point <p>A point in this view's coordinate system.<br />
If this argument is missing an <code>x</code> or <code>y</code> property, or the properties can not 
be converted into numbers, an exception will be raised.</p>
     * @param {Titanium_UI_View} destinationView <p>View that specifies the destination coordinate system to convert to.
If this argument is not a view, an exception will be raised.</p>
     * @returns Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    convertPointToView:function(point, destinationView) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.anchorPoint} property.</p>
     * @returns Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getAnchorPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.animatedCenterPoint} property.</p>
     * @returns Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getAnimatedCenterPoint:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.backgroundColor} property.</p>
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBackgroundColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.backgroundDisabledColor} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundDisabledColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.backgroundDisabledImage} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundDisabledImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.backgroundFocusedColor} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundFocusedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.backgroundFocusedImage} property.</p>
     * @returns String
     * @since 1.2 (Android)
     */
    getBackgroundFocusedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.backgroundGradient} property.</p>
     * @returns Gradient
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBackgroundGradient:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.backgroundImage} property.</p>
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBackgroundImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.backgroundLeftCap} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBackgroundLeftCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.backgroundSelectedColor} property.</p>
     * @returns String
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.backgroundSelectedImage} property.</p>
     * @returns String
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    getBackgroundSelectedImage:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.backgroundTopCap} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBackgroundTopCap:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.borderColor} property.</p>
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBorderColor:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.borderRadius} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBorderRadius:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.borderWidth} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBorderWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.bottom} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getBottom:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.center} property.</p>
     * @returns Point
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getCenter:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.focusable} property.</p>
     * @returns Boolean
     * @since 1.2 (Android)
     */
    getFocusable:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.height} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getHeight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.keepScreenOn} property.</p>
     * @returns Boolean
     * @since 1.2 (Android)
     */
    getKeepScreenOn:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.layout} property.</p>
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getLayout:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.left} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getLeft:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.opacity} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getOpacity:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.right} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getRight:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.size} property.</p>
     * @returns Object
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getSize:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.softKeyboardOnFocus} property.</p>
     * @returns Number
     * @since 1.2 (Android)
     */
    getSoftKeyboardOnFocus:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.top} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getTop:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.touchEnabled} property.</p>
     * @returns Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getTouchEnabled:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.transform} property.</p>
     * @returns Titanium_UI_2DMatrix
     * @returns Titanium_UI_iOS_3DMatrix
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getTransform:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.visible} property.</p>
     * @returns Boolean
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getVisible:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.width} property.</p>
     * @returns Number
     * @returns String
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getWidth:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.UI.iPhone.NavigationGroup.zIndex} property.</p>
     * @returns Number
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    getZIndex:function() {
    },

    /**
     * <p>Hides this view.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    hide:function() {
    },

    /**
     * <p>open a window within the navigation group</p>
     * @param {Object} window <p>window to open within the tab group</p>
     * @param {Object} properties <p>optional dictionary. the only current property supported is <code>animated</code> which is a boolean to indicate if the window should be opened animated (default) or not.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    open:function(window, properties) {
    },

    /**
     * <p>Removes a child view from this view's hierarchy.</p>
     * @param {Titanium_UI_View} view <p>View to remove from this view's hierarchy.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    remove:function(view) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.anchorPoint} property.</p>
     * @param {Point} anchorPoint <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setAnchorPoint:function(anchorPoint) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.backgroundColor} property.</p>
     * @param {String} backgroundColor <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBackgroundColor:function(backgroundColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.backgroundDisabledColor} property.</p>
     * @param {String} backgroundDisabledColor <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundDisabledColor:function(backgroundDisabledColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.backgroundDisabledImage} property.</p>
     * @param {String} backgroundDisabledImage <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundDisabledImage:function(backgroundDisabledImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.backgroundFocusedColor} property.</p>
     * @param {String} backgroundFocusedColor <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundFocusedColor:function(backgroundFocusedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.backgroundFocusedImage} property.</p>
     * @param {String} backgroundFocusedImage <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setBackgroundFocusedImage:function(backgroundFocusedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.backgroundGradient} property.</p>
     * @param {Gradient} backgroundGradient <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBackgroundGradient:function(backgroundGradient) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.backgroundImage} property.</p>
     * @param {String} backgroundImage <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBackgroundImage:function(backgroundImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.backgroundLeftCap} property.</p>
     * @param {Number} backgroundLeftCap <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBackgroundLeftCap:function(backgroundLeftCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.backgroundSelectedColor} property.</p>
     * @param {String} backgroundSelectedColor <p>New value for the property.</p>
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedColor:function(backgroundSelectedColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.backgroundSelectedImage} property.</p>
     * @param {String} backgroundSelectedImage <p>New value for the property.</p>
     * @since 1.2 (Android), 1.8 (Mobile Web)
     */
    setBackgroundSelectedImage:function(backgroundSelectedImage) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.backgroundTopCap} property.</p>
     * @param {Number} backgroundTopCap <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBackgroundTopCap:function(backgroundTopCap) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.borderColor} property.</p>
     * @param {String} borderColor <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBorderColor:function(borderColor) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.borderRadius} property.</p>
     * @param {Number} borderRadius <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBorderRadius:function(borderRadius) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.borderWidth} property.</p>
     * @param {Number} borderWidth <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBorderWidth:function(borderWidth) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.bottom} property.</p>
     * @param {Number|String} bottom <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setBottom:function(bottom) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.center} property.</p>
     * @param {Point} center <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setCenter:function(center) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.focusable} property.</p>
     * @param {Boolean} focusable <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setFocusable:function(focusable) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.height} property.</p>
     * @param {Number|String} height <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setHeight:function(height) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.keepScreenOn} property.</p>
     * @param {Boolean} keepScreenOn <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setKeepScreenOn:function(keepScreenOn) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.layout} property.</p>
     * @param {String} layout <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setLayout:function(layout) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.left} property.</p>
     * @param {Number|String} left <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setLeft:function(left) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.opacity} property.</p>
     * @param {Number} opacity <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setOpacity:function(opacity) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.right} property.</p>
     * @param {Number|String} right <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setRight:function(right) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.size} property.</p>
     * @param {Object} size <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setSize:function(size) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.softKeyboardOnFocus} property.</p>
     * @param {Number} softKeyboardOnFocus <p>New value for the property.</p>
     * @since 1.2 (Android)
     */
    setSoftKeyboardOnFocus:function(softKeyboardOnFocus) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.top} property.</p>
     * @param {Number|String} top <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setTop:function(top) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.touchEnabled} property.</p>
     * @param {Boolean} touchEnabled <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setTouchEnabled:function(touchEnabled) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.transform} property.</p>
     * @param {Titanium_UI_2DMatrix|Titanium_UI_iOS_3DMatrix} transform <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setTransform:function(transform) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.visible} property.</p>
     * @param {Boolean} visible <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setVisible:function(visible) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.width} property.</p>
     * @param {Number|String} width <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setWidth:function(width) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.UI.iPhone.NavigationGroup.zIndex} property.</p>
     * @param {Number} zIndex <p>New value for the property.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    setZIndex:function(zIndex) {
    },

    /**
     * <p>Makes this view visible.</p>
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    show:function() {
    },

    /**
     * <p>Returns an image of the rendered view, as a Blob.</p>
     * @param {Callback<Object>} f <p>Function to be invoked upon completion. If non-null, this method will be 
performed asynchronously. If null, it will be performed immediately.</p>
     * @returns Titanium_Blob
     * @since 1.2 (iPhone), 1.2 (iPad)
     */
    toImage:function(f) {
    }
}

/**
 * platforms: iPhone, iPad
 */
function Titanium_UI_iPhone_ProgressBarStyle() {
}
Titanium_UI_iPhone_ProgressBarStyle.prototype = {

    /**
     * <p>The style of progress view that is used in a toolbar.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    BAR:null,

    /**
     * <p>he standard progress-view style. This is the default.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    DEFAULT:null,

    /**
     * <p>The standard progress-view style. Same as <code>DEFAULT</code>.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    PLAIN:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: iPhone, iPad
 */
function Titanium_UI_iPhone_RowAnimationStyle() {
}
Titanium_UI_iPhone_RowAnimationStyle.prototype = {

    /**
     * <p>The inserted row or rows slides in from the bottom; the deleted row or rows slides out toward the bottom.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    BOTTOM:null,

    /**
     * <p>The inserted or deleted row or rows fades into or out of the table view.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    FADE:null,

    /**
     * <p>The inserted row or rows slides in from the left; the deleted row or rows slides out to the left.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    LEFT:null,

    /**
     * <p>No animation is performed. The new cell value appears as if the cell had just been reloaded.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    NONE:null,

    /**
     * <p>The inserted row or rows slides in from the right; the deleted row or rows slides out to the right.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    RIGHT:null,

    /**
     * <p>The inserted row or rows slides in from the top; the deleted row or rows slides out toward the top.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    TOP:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: iPhone, iPad
 */
function Titanium_UI_iPhone_ScrollIndicatorStyle() {
}
Titanium_UI_iPhone_ScrollIndicatorStyle.prototype = {

    /**
     * <p>A style of indicator which is black smaller than the default style. This style is good against a white content background.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    BLACK:null,

    /**
     * <p>The default style of scroll indicator, which is black with a white border. This style is good against any content background.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    DEFAULT:null,

    /**
     * <p>A style of indicator is white and smaller than the default style. This style is good against a black content background.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    WHITE:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: iPhone, iPad
 */
function Titanium_UI_iPhone_StatusBar() {
}
Titanium_UI_iPhone_StatusBar.prototype = {

    /**
     * <p>The default status bar style</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    DEFAULT:null,

    /**
     * <p>The gray colored status bar style</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    GRAY:null,

    /**
     * <p>The opaque black status bar style.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    OPAQUE_BLACK:null,

    /**
     * <p>The translucent black status bar style. This style provides some level of transparency to the device background.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    TRANSLUCENT_BLACK:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: iPhone, iPad
 */
function Titanium_UI_iPhone_SystemButton() {
}
Titanium_UI_iPhone_SystemButton.prototype = {

    /**
     * <p>action icon. Usable in nav bars and toolbars only.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    ACTION:null,

    /**
     * <p>special style that shows an activity indicator. when visible, the activity indicator is already started.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    ACTIVITY:null,

    /**
     * <p>add icon. Usable in nav bars and toolbars only.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    ADD:null,

    /**
     * <p>bookmarks icon. Usable in nav bars and toolbars only.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    BOOKMARKS:null,

    /**
     * <p>camera icon. Usable in nav bars and toolbars only.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    CAMERA:null,

    /**
     * <p>cancel icon. localized. Usable in nav bars and toolbars only.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    CANCEL:null,

    /**
     * <p>compose icon. Usable in nav bars and toolbars only.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    COMPOSE:null,

    /**
     * <p>green style plus (+) icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    CONTACT_ADD:null,

    /**
     * <p>disclosure style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    DISCLOSURE:null,

    /**
     * <p>done icon. localized. Usable in nav bars and toolbars only.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    DONE:null,

    /**
     * <p>edit icon. localized. Usable in nav bars and toolbars only.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    EDIT:null,

    /**
     * <p>fast forward icon. Usable in nav bars and toolbars only.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    FAST_FORWARD:null,

    /**
     * <p>Blank space to add between other items. Only the <code>width</code> property is used when this value is set.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    FIXED_SPACE:null,

    /**
     * <p>Blank space to add between other items. The space is distributed equally between the other items. Other item properties are ignored when this value is set.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    FLEXIBLE_SPACE:null,

    /**
     * <p>a dark style info circle icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    INFO_DARK:null,

    /**
     * <p>a light style info circle icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    INFO_LIGHT:null,

    /**
     * <p>organize icon. Usable in nav bars and toolbars only.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    ORGANIZE:null,

    /**
     * <p>pause icon. Usable in nav bars and toolbars only.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    PAUSE:null,

    /**
     * <p>play icon. Usable in nav bars and toolbars only.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    PLAY:null,

    /**
     * <p>refresh icon. Usable in nav bars and toolbars only.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    REFRESH:null,

    /**
     * <p>reply icon. Usable in nav bars and toolbars only.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    REPLY:null,

    /**
     * <p>rewind icon. Usable in nav bars and toolbars only.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    REWIND:null,

    /**
     * <p>save icon. localized. Usable in nav bars and toolbars only.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    SAVE:null,

    /**
     * <p>same as ACTIVITY</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    SPINNER:null,

    /**
     * <p>stop icon. Usable in nav bars and toolbars only.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    STOP:null,

    /**
     * <p>trash icon. Usable in nav bars and toolbars only.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    TRASH:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: iPhone, iPad
 */
function Titanium_UI_iPhone_SystemButtonStyle() {
}
Titanium_UI_iPhone_SystemButtonStyle.prototype = {

    /**
     * <p>Used by tabbed bar and button bar only to use the more condensed style used in nav bars and tool bars.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    BAR:null,

    /**
     * <p>A simple button style with a border.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    BORDERED:null,

    /**
     * <p>The style for a done button - for example, a button that completes some task and returns to the previous view.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    DONE:null,

    /**
     * <p>Glows when tapped. The default item style.</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    PLAIN:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: iPhone, iPad
 */
function Titanium_UI_iPhone_SystemIcon() {
}
Titanium_UI_iPhone_SystemIcon.prototype = {

    /**
     * <p>Bookmark style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    BOOKMARKS:null,

    /**
     * <p>Contacts style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    CONTACTS:null,

    /**
     * <p>Downloads style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    DOWNLOADS:null,

    /**
     * <p>Favorites style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    FAVORITES:null,

    /**
     * <p>Featured style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    FEATURED:null,

    /**
     * <p>History style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    HISTORY:null,

    /**
     * <p>More style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    MORE:null,

    /**
     * <p>Most recent style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    MOST_RECENT:null,

    /**
     * <p>Most viewed style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    MOST_VIEWED:null,

    /**
     * <p>Recents style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    RECENTS:null,

    /**
     * <p>Search style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    SEARCH:null,

    /**
     * <p>Top rated style icon</p>
     * @type Number
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    TOP_RATED:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: iPhone, iPad
 */
function Titanium_UI_iPhone_TableViewCellSelectionStyle() {
}
Titanium_UI_iPhone_TableViewCellSelectionStyle.prototype = {

    /**
     * <p>The cell when selected has a blue background. This is the default value.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    BLUE:null,

    /**
     * <p>Then cell when selected has a gray background.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    GRAY:null,

    /**
     * <p>The cell has no distinct style for when it is selected.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    NONE:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: iPhone, iPad
 */
function Titanium_UI_iPhone_TableViewScrollPosition() {
}
Titanium_UI_iPhone_TableViewScrollPosition.prototype = {

    /**
     * <p>The table view scrolls the row of interest to the bottom of the visible table view.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    BOTTOM:null,

    /**
     * <p>The table view scrolls the row of interest to the middle of the visible table view.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    MIDDLE:null,

    /**
     * <p>The table view scrolls the row of interest to be fully visible with a minimum of movement. If the row is already fully visible, no scrolling occurs. For example, if the row is above the visible area, the behavior is identical to that specified by <code>TOP</code>. This is the default.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    NONE:null,

    /**
     * <p>The table view scrolls the row of interest to the top of the visible table view.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    TOP:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: iPhone, iPad
 */
function Titanium_UI_iPhone_TableViewSeparatorStyle() {
}
Titanium_UI_iPhone_TableViewSeparatorStyle.prototype = {

    /**
     * <p>The separator cell has no distinct style.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    NONE:null,

    /**
     * <p>The separator cell has a single line running across its width. This is the default value.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    SINGLE_LINE:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: iPhone, iPad
 */
function Titanium_UI_iPhone_TableViewStyle() {
}
Titanium_UI_iPhone_TableViewStyle.prototype = {

    /**
     * <p>A table view whose sections present distinct groups of rows. The section headers and footers do not float.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    GROUPED:null,

    /**
     * <p>A plain table view. Any section headers or footers are displayed as inline separators and float when the table view is scrolled.</p>
     * @type Number
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    PLAIN:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Titanium.Utils = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>decode a Base64 string</p>
     * @param {Object} obj <p>the string or Titanium.Blob to use for the input</p>
     * @returns Titanium_Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    base64decode:function(obj) {
    },

    /**
     * <p>encode a string into Base64</p>
     * @param {Object} obj <p>the string or Titanium.Blob to use for the input</p>
     * @returns Titanium_Blob
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    base64encode:function(obj) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>compute a MD5 hash algorithm against the input and return a hex-based string</p>
     * @param {Object} obj <p>the string or Titanium.Blob to use for the input</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    md5HexDigest:function(obj) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>compute a SHA-1 hash algorithm against the input and return a hex-based string</p>
     * @param {Object} obj <p>the string or Titanium.Blob to use for the input</p>
     * @returns String
     * @since 1.3.2 (Android), 1.3.2 (iPhone), 1.3.2 (iPad), 1.8 (Mobile Web)
     */
    sha1:function(obj) {
    },

    /**
     * <p>compute a SHA-256 hash algorithm against the input and return a hex-based string</p>
     * @param {Object} obj <p>the string or Titanium.Blob to use for the input</p>
     * @returns String
     * @since 1.8.0 (Android), 1.8.0 (iPhone), 1.8.0 (iPad), 1.8.0 (Mobile Web)
     */
    sha256:function(obj) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
Titanium.XML = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Parses an XML string into a {@link Titanium.XML.Document} object. Throws an exception if the string is unable to be parsed into a valid document.</p>
     * @param {String} xml <p>the XML content as a string</p>
     * @returns Titanium_XML_Document
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    parseString:function(xml) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Serializes a {@link Titanium.XML.Document} object into a string.</p>
     * @param {Titanium_XML_Node} node <p>The XML DOMNode or DOMDocument to serialize</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad), 1.8 (Mobile Web)
     */
    serializeToString:function(node) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_XML_Attr() {
}
Titanium_XML_Attr.prototype = {

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Attr}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ATTRIBUTE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a CData section (a type of {@link Titanium.XML.Text})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    CDATA_SECTION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a <code>Titanium.XML.Comment</code></p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    COMMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a <code>Titanium.XML.DocumentFragment</code></p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    DOCUMENT_FRAGMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Document}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    DOCUMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.DocumentType}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    DOCUMENT_TYPE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Element}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ELEMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Entity}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ENTITY_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is an {@link http://www.w3.org/TR/2000/REC} (a type of {@link Titanium.XML.Node})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ENTITY_REFERENCE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Notation}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    NOTATION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.ProcessingInstruction}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    PROCESSING_INSTRUCTION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Text}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    TEXT_NODE:null,

    /**
     * <p>A map of this node's attributes</p>
     * @type Titanium_XML_NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    attributes:null,

    /**
     * <p>A {@link Titanium.XML.NodeList} of this node's children</p>
     * @type Titanium_XML_NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    childNodes:null,

    /**
     * <p>This node's first child</p>
     * @type Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    firstChild:null,

    /**
     * <p>This node's last child</p>
     * @type Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    lastChild:null,

    /**
     * <p>The local part of the qualified name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    localName:null,

    /**
     * <p>Attribute name</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    name:null,

    /**
     * <p>The namespace URI of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    namespaceURI:null,

    /**
     * <p>This node's next sibling</p>
     * @type Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    nextSibling:null,

    /**
     * <p>The name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    nodeName:null,

    /**
     * <p>This node's type. One of <ELEMENT_NODE>, <ATTRIBUTE_NODE>, <TEXT_NODE>, <CDATA_SECTION_NODE>, <ENTITY_REFERENCE_NODE>, <ENTITY_NODE>, <PROCESSING_INSTRUCTION_NODE>, <COMMENT_NODE>, <DOCUMENT_NODE>, <DOCUMENT_TYPE_NODE>, <DOCUMENT_FRAGMENT_NODE>, <NOTATION_NODE></p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    nodeType:null,

    /**
     * <p>The content (value) of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    nodeValue:null,

    /**
     * <p>This node's owning Document</p>
     * @type Titanium_XML_Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ownerDocument:null,

    /**
     * <p>The {@link Titanium.XML.Element} to which the attribute belongs.</p>
     * @type Titanium_XML_Element
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ownerElement:null,

    /**
     * <p>This node's parent node</p>
     * @type Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    parentNode:null,

    /**
     * <p>The namespace prefix of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    prefix:null,

    /**
     * <p>This node's previous sibling</p>
     * @type Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    previousSibling:null,

    /**
     * <p>True if this attribute was explicitly given a value in the instance document, false otherwise.</p>
     * @type Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    specified:null,

    /**
     * <p>The attribute value as a string.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    value:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends the node <code>newChild</code> as a child of this node</p>
     * @param {Titanium_XML_Node} newChild <p>The new node to append</p>
     * @returns Titanium_XML_Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    appendChild:function(newChild) {
    },

    /**
     * <p>Returns a duplicate of this node</p>
     * @param {Boolean} deep <p>Whether or not to perform a deep copy of this node</p>
     * @returns Titanium_XML_Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    cloneNode:function(deep) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Attr.attributes} property.</p>
     * @returns Titanium_XML_NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAttributes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Attr.childNodes} property.</p>
     * @returns Titanium_XML_NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getChildNodes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Attr.firstChild} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getFirstChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Attr.lastChild} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLastChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Attr.localName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLocalName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Attr.name} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Attr.namespaceURI} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNamespaceURI:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Attr.nextSibling} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNextSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Attr.nodeName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNodeName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Attr.nodeType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNodeType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Attr.nodeValue} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNodeValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Attr.ownerDocument} property.</p>
     * @returns Titanium_XML_Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getOwnerDocument:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Attr.ownerElement} property.</p>
     * @returns Titanium_XML_Element
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getOwnerElement:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Attr.parentNode} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getParentNode:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Attr.prefix} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getPrefix:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Attr.previousSibling} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getPreviousSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Attr.specified} property.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getSpecified:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Attr.value} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getValue:function() {
    },

    /**
     * <p>Whether or not this node has attributes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    hasAttributes:function() {
    },

    /**
     * <p>Whether or not this node has child nodes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    hasChildNodes:function() {
    },

    /**
     * 
     * @param {Titanium_XML_Node} newChild <p>The node to insert</p>
     * @param {Titanium_XML_Node} refChild <p>The node to insert <code>newChild</code> before</p>
     * @returns Titanium_XML_Node The inserted node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    insertBefore:function(newChild, refChild) {
    },

    /**
     * <p>Tests whether the DOM implementation supports a specific feature</p>
     * @param {String} feature <p>The name of the feature</p>
     * @param {String} version <p>The version number of the feature</p>
     * @returns Boolean Whether or not the feature is supported
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    isSupported:function(feature, version) {
    },

    /**
     * <p>Normalizes text and attribute nodes in this node's child hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    normalize:function() {
    },

    /**
     * <p>Removes a child node from this node</p>
     * @param {Titanium_XML_Node} oldChild <p>The node to remove</p>
     * @returns Titanium_XML_Node The node that was removed
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeChild:function(oldChild) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Replaces the node <code>oldChild</code> with the node <code>newChild</code></p>
     * @param {Titanium_XML_Node} newChild <p>The new node</p>
     * @param {Titanium_XML_Node} oldChild <p>The node being replaced</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    replaceChild:function(newChild, oldChild) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.XML.Attr.localName} property.</p>
     * @param {String} localName <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLocalName:function(localName) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.XML.Attr.value} property.</p>
     * @param {String} value <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setValue:function(value) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_XML_CharacterData() {
}
Titanium_XML_CharacterData.prototype = {

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Attr}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    ATTRIBUTE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a CData section (a type of {@link Titanium.XML.Text})</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    CDATA_SECTION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a <code>Titanium.XML.Comment</code></p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    COMMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a <code>Titanium.XML.DocumentFragment</code></p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    DOCUMENT_FRAGMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Document}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    DOCUMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.DocumentType}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    DOCUMENT_TYPE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Element}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    ELEMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Entity}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    ENTITY_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is an {@link http://www.w3.org/TR/2000/REC} (a type of {@link Titanium.XML.Node})</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    ENTITY_REFERENCE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Notation}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    NOTATION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.ProcessingInstruction}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    PROCESSING_INSTRUCTION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Text}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    TEXT_NODE:null,

    /**
     * <p>A map of this node's attributes</p>
     * @type Titanium_XML_NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    attributes:null,

    /**
     * <p>A {@link Titanium.XML.NodeList} of this node's children</p>
     * @type Titanium_XML_NodeList
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    childNodes:null,

    /**
     * <p>The character data of the node that implements this interface. Throws an exception during setting if this node is readonly.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    data:null,

    /**
     * <p>This node's first child</p>
     * @type Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    firstChild:null,

    /**
     * <p>This node's last child</p>
     * @type Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    lastChild:null,

    /**
     * <p>The number of characters that are available through data and the substringData method. This may have the value zero, i.e., {@link Titanium.XML.CharacterData} may be empty.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    length:null,

    /**
     * <p>The local part of the qualified name of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    localName:null,

    /**
     * <p>The namespace URI of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    namespaceURI:null,

    /**
     * <p>This node's next sibling</p>
     * @type Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    nextSibling:null,

    /**
     * <p>The name of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    nodeName:null,

    /**
     * <p>This node's type. One of <ELEMENT_NODE>, <ATTRIBUTE_NODE>, <TEXT_NODE>, <CDATA_SECTION_NODE>, <ENTITY_REFERENCE_NODE>, <ENTITY_NODE>, <PROCESSING_INSTRUCTION_NODE>, <COMMENT_NODE>, <DOCUMENT_NODE>, <DOCUMENT_TYPE_NODE>, <DOCUMENT_FRAGMENT_NODE>, <NOTATION_NODE></p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    nodeType:null,

    /**
     * <p>The content (value) of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    nodeValue:null,

    /**
     * <p>This node's owning Document</p>
     * @type Titanium_XML_Document
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    ownerDocument:null,

    /**
     * <p>This node's parent node</p>
     * @type Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    parentNode:null,

    /**
     * <p>The namespace prefix of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    prefix:null,

    /**
     * <p>This node's previous sibling</p>
     * @type Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    previousSibling:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends the node <code>newChild</code> as a child of this node</p>
     * @param {Titanium_XML_Node} newChild <p>The new node to append</p>
     * @returns Titanium_XML_Node The appended node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    appendChild:function(newChild) {
    },

    /**
     * <p>Append the string to the end of the character data of the node. Upon success, data provides access to the concatenation of data and the string specified. Throws an exception if this node is readonly.</p>
     * @param {String} arg <p>The string to append.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    appendData:function(arg) {
    },

    /**
     * <p>Returns a duplicate of this node</p>
     * @param {Boolean} deep <p>Whether or not to perform a deep copy of this node</p>
     * @returns Titanium_XML_Node The appended node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    cloneNode:function(deep) {
    },

    /**
     * <p>Remove a range of characters from the node. Upon success, data and length reflect the change. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.</p>
     * @param {Number} offset <p>The offset from which to start removing.</p>
     * @param {Number} count <p>The number of characters to delete. If the sum of offset and count exceeds length then all characters from offset to the end of the data are deleted.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    deleteData:function(offset, count) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.CharacterData.attributes} property.</p>
     * @returns Titanium_XML_NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAttributes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.CharacterData.childNodes} property.</p>
     * @returns Titanium_XML_NodeList
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getChildNodes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.CharacterData.data} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getData:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.CharacterData.firstChild} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getFirstChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.CharacterData.lastChild} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getLastChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.CharacterData.length} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getLength:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.CharacterData.localName} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getLocalName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.CharacterData.namespaceURI} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNamespaceURI:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.CharacterData.nextSibling} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNextSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.CharacterData.nodeName} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNodeName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.CharacterData.nodeType} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNodeType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.CharacterData.nodeValue} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNodeValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.CharacterData.ownerDocument} property.</p>
     * @returns Titanium_XML_Document
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getOwnerDocument:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.CharacterData.parentNode} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getParentNode:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.CharacterData.prefix} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getPrefix:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.CharacterData.previousSibling} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getPreviousSibling:function() {
    },

    /**
     * <p>Whether or not this node has attributes</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    hasAttributes:function() {
    },

    /**
     * <p>Whether or not this node has child nodes</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    hasChildNodes:function() {
    },

    /**
     * 
     * @param {Titanium_XML_Node} newChild <p>The node to insert</p>
     * @param {Titanium_XML_Node} refChild <p>The node to insert <code>newChild</code> before</p>
     * @returns Titanium_XML_Node The inserted node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    insertBefore:function(newChild, refChild) {
    },

    /**
     * <p>Insert a string at the specified offset. Throws an exception if this node is readonly, if offset is negative, or if offset is beyond the data's length.</p>
     * @param {Number} offset <p>The character offset at which to insert.</p>
     * @param {String} arg <p>The string to insert.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    insertData:function(offset, arg) {
    },

    /**
     * <p>Tests whether the DOM implementation supports a specific feature</p>
     * @param {String} feature <p>The name of the feature</p>
     * @param {String} version <p>The version number of the feature</p>
     * @returns Boolean Whether or not the feature is supported
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    isSupported:function(feature, version) {
    },

    /**
     * <p>Normalizes text and attribute nodes in this node's child hierarchy</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    normalize:function() {
    },

    /**
     * <p>Removes a child node from this node</p>
     * @param {Titanium_XML_Node} oldChild <p>The node to remove</p>
     * @returns Titanium_XML_Node The node that was removed
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeChild:function(oldChild) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Replaces the node <code>oldChild</code> with the node <code>newChild</code></p>
     * @param {Titanium_XML_Node} newChild <p>The new node</p>
     * @param {Titanium_XML_Node} oldChild <p>The node being replaced</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    replaceChild:function(newChild, oldChild) {
    },

    /**
     * <p>Replace the characters starting at the specified offset with the specified string. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.</p>
     * @param {Number} offset <p>The offset from which to start replacing.</p>
     * @param {Number} count <p>The number of characters to replace. If the sum of offset and count exceeds length, then all characters to the end of the data are replaced; (i.e., the effect is the same as a remove method call with the same range, followed by an append method invocation).</p>
     * @param {String} arg <p>The string with which the range must be replaced.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    replaceData:function(offset, count, arg) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.XML.CharacterData.data} property.</p>
     * @param {String} data <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setData:function(data) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.XML.CharacterData.localName} property.</p>
     * @param {String} localName <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setLocalName:function(localName) {
    },

    /**
     * <p>Extracts a range of data from the node. Throws an exception if offset is negative, offset is beyond the data's length, or if count is negative.</p>
     * @param {Number} offset <p>Start offset of substring to extract.</p>
     * @param {Number} count <p>The number of characters units to extract.</p>
     * @returns String The specified substring. If the sum of offset and count exceeds the length, then all 16-bit units to the end of the data are returned.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    substringData:function(offset, count) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_XML_DOMImplementation() {
}
Titanium_XML_DOMImplementation.prototype = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 1.8 (Android), 1.8 (iPhone), 1.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Creates an {@link Titanium.XML.Document} object of the specified type with its document element. Raises an exception if qualifiedName is malformed, contains an illegal character, or is inconsistent with namespaceURI. Also raises an exception if doctype has already been used with a different document.</p>
     * @param {String} namespaceURI <p>The namespace URI of the document element to create.</p>
     * @param {String} qualifiedName <p>The qualified name of the document element to be created.</p>
     * @param {Titanium_XML_DocumentType} doctype <p>The type of document to be created or null. When doctype is not null, its Node.ownerDocument attribute is set to the document being created.</p>
     * @returns Titanium_XML_Document A new <Titanium.XML.Document> object
     * @since 1.8 (Android), 1.8 (iPhone), 1.8 (iPad)
     */
    createDocument:function(namespaceURI, qualifiedName, doctype) {
    },

    /**
     * <p>Creates an empty {@link Titanium.XML.DocumentType} node. Entity declarations and notations are not made available. Entity reference expansions and default attribute additions do not occur. Raises an exception if qualifiedName is malformed or contains an illegal character.</p>
     * @param {String} qualifiedName <p>The qualified name of the document type to be created.</p>
     * @param {String} publicId <p>The external subset public identifier.</p>
     * @param {String} systemId <p>The external subset system identifier.</p>
     * @returns Titanium_XML_DocumentType A new <Titanium.XML.DocumentType> node with Node.ownerDocument set to null.
     * @since 1.8 (Android), 1.8 (iPhone), 1.8 (iPad)
     */
    createDocumentType:function(qualifiedName, publicId, systemId) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 1.8 (Android), 1.8 (iPhone), 1.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Test if the {@link Titanium.XML.DOMImplementation} implements a specific feature.</p>
     * @param {String} feature <p>The name of the feature to test (case-insensitive). The values used by DOM features are defined throughout the DOM Level 2 specifications and listed in the Conformance section. The name must be an XML name. To avoid possible conflicts, as a convention, names referring to features defined outside the DOM specification should be made unique by reversing the name of the Internet domain name of the person (or the organization that the person belongs to) who defines the feature, component by component, and using this as a prefix. For instance, the W3C SVG Working Group defines the feature "org.w3c.dom.svg".</p>
     * @param {String} version <p>This is the version number of the feature to test. In Level 2, the string can be either "2.0" or "1.0". If the version is not specified, supporting any version of the feature causes the method to return true.</p>
     * @returns Boolean true if the feature is implemented in the specified version, false otherwise.
     * @since 1.8 (Android), 1.8 (iPhone), 1.8 (iPad)
     */
    hasFeature:function(feature, version) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 1.8 (Android), 1.8 (iPhone), 1.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>As of version 3.1, Android still does not truly support DTDs.  A document with a DTD can be
parsed, however it is not validated, none of its default attributes will automatically be put
into the tree, etc.  {@link http://code.google.com/p/android/issues/detail?id=7395}.</p>
 */
function Titanium_XML_Document() {
}
Titanium_XML_Document.prototype = {

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Attr}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    ATTRIBUTE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a CData section (a type of {@link Titanium.XML.Text})</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    CDATA_SECTION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a <code>Titanium.XML.Comment</code></p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    COMMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a <code>Titanium.XML.DocumentFragment</code></p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    DOCUMENT_FRAGMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Document}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    DOCUMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.DocumentType}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    DOCUMENT_TYPE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Element}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    ELEMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Entity}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    ENTITY_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is an {@link http://www.w3.org/TR/2000/REC} (a type of {@link Titanium.XML.Node})</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    ENTITY_REFERENCE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Notation}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    NOTATION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.ProcessingInstruction}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    PROCESSING_INSTRUCTION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Text}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    TEXT_NODE:null,

    /**
     * <p>A map of this node's attributes</p>
     * @type Titanium_XML_NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    attributes:null,

    /**
     * <p>A {@link Titanium.XML.NodeList} of this node's children</p>
     * @type Titanium_XML_NodeList
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    childNodes:null,

    /**
     * <p>An interface to the list of entities that are defined for the document, such as via a Document Type Definition (DTD). See note about Android and DTDs.</p>
     * @type Titanium_XML_DocumentType
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    doctype:null,

    /**
     * <p>the root element in the document.</p>
     * @type Titanium_XML_Element
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    documentElement:null,

    /**
     * <p>This node's first child</p>
     * @type Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    firstChild:null,

    /**
     * <p>the {@link Titanium.XML.DOMImplementation} that handles this document</p>
     * @type Titanium_XML_DOMImplementation
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    implementation:null,

    /**
     * <p>This node's last child</p>
     * @type Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    lastChild:null,

    /**
     * <p>The local part of the qualified name of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    localName:null,

    /**
     * <p>The namespace URI of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    namespaceURI:null,

    /**
     * <p>This node's next sibling</p>
     * @type Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    nextSibling:null,

    /**
     * <p>The name of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    nodeName:null,

    /**
     * <p>This node's type. One of <ELEMENT_NODE>, <ATTRIBUTE_NODE>, <TEXT_NODE>, <CDATA_SECTION_NODE>, <ENTITY_REFERENCE_NODE>, <ENTITY_NODE>, <PROCESSING_INSTRUCTION_NODE>, <COMMENT_NODE>, <DOCUMENT_NODE>, <DOCUMENT_TYPE_NODE>, <DOCUMENT_FRAGMENT_NODE>, <NOTATION_NODE></p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    nodeType:null,

    /**
     * <p>The content (value) of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    nodeValue:null,

    /**
     * <p>This node's owning Document</p>
     * @type Titanium_XML_Document
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    ownerDocument:null,

    /**
     * <p>This node's parent node</p>
     * @type Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    parentNode:null,

    /**
     * <p>The namespace prefix of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    prefix:null,

    /**
     * <p>This node's previous sibling</p>
     * @type Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    previousSibling:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends the node <code>newChild</code> as a child of this node</p>
     * @param {Titanium_XML_Node} newChild <p>The new node to append</p>
     * @returns Titanium_XML_Node The appended node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    appendChild:function(newChild) {
    },

    /**
     * <p>Returns a duplicate of this node</p>
     * @param {Boolean} deep <p>Whether or not to perform a deep copy of this node</p>
     * @returns Titanium_XML_Node The appended node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    cloneNode:function(deep) {
    },

    /**
     * <p>Creates an attribute with the given name.</p>
     * @param {String} name <p>Name for the new attribute</p>
     * @returns Titanium_XML_Attr An attribute object, ready for putting on an element.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    createAttribute:function(name) {
    },

    /**
     * <p>Creates an attribute with the given name and namespace.</p>
     * @param {String} namespaceURI <p>Namespace URI for the new attribute.</p>
     * @param {String} name <p>Name for the new attribute.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    createAttributeNS:function(namespaceURI, name) {
    },

    /**
     * <p>Creates and returns a <code>Titanium.XML.CDATASection</code>.</p>
     * @param {String} data <p>The String data to go into the CDATA section.</p>
     * @returns Titanium_XML_CDATASection A CDATA section with the given data, ready to be applied to an element.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    createCDATASection:function(data) {
    },

    /**
     * <p>Creates a <code>Titanium.XML.Comment</code> with the supplied string data.</p>
     * @param {String} data <p>The textual comment itself.</p>
     * @returns Titanium_XML_Comment The comment, ready to be appended to the DOM tree.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    createComment:function(data) {
    },

    /**
     * <p>Creates an empty <code>Titanium.XML.DocumentFragment</code>.</p>
     * @returns Titanium_XML_DocumentFragment The empty <Titanium.XML.DocumentFragment>.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    createDocumentFragment:function() {
    },

    /**
     * <p>Creates an element with the given tag name.</p>
     * @param {String} tagName <p>The name for the created element.</p>
     * @returns Titanium_XML_Element The newly created element.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    createElement:function(tagName) {
    },

    /**
     * <p>Create a new element with the given namespace and name.</p>
     * @param {String} namespaceURI <p>URI for the namespace the new element belongs to.</p>
     * @param {String} name <p>The name for the new element.</p>
     * @returns Titanium_XML_Element the new namespace-qualified element.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    createElementNS:function(namespaceURI, name) {
    },

    /**
     * <p>Creates an <code>Titanium.XML.EntityReference</code> with the given name.</p>
     * @param {String} name <p>Name for the new entity reference.</p>
     * @returns Titanium_XML_EntityReference The created entity reference.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    createEntityReference:function(name) {
    },

    /**
     * <p>Creates a processing instruction for inserting into the DOM tree.</p>
     * @param {String} target <p>The target part for the processing instruction.</p>
     * @param {String} data <p>The data for the processing instruction node.</p>
     * @returns Titanium_XML_ProcessingInstruction The created processing instruction.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    createProcessingInstruction:function(target, data) {
    },

    /**
     * <p>Creates a text node.</p>
     * @param {String} data <p>The string value for the text node.</p>
     * @returns Titanium_XML_Text The created text node.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    createTextNode:function(data) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Document.attributes} property.</p>
     * @returns Titanium_XML_NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAttributes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Document.childNodes} property.</p>
     * @returns Titanium_XML_NodeList
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getChildNodes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Document.doctype} property.</p>
     * @returns Titanium_XML_DocumentType
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getDoctype:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Document.documentElement} property.</p>
     * @returns Titanium_XML_Element
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getDocumentElement:function() {
    },

    /**
     * <p>Returns an {@link Titanium.XML.Element} that has an ID attribute with the given value.</p>
     * @param {String} elementId <p>A unique ID value for an element to search for.</p>
     * @returns Titanium_XML_Element The Element matching the given ID, if any.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getElementById:function(elementId) {
    },

    /**
     * <p>Return a node list of elements in the document which have the given tag.</p>
     * @param {String} tagname <p>the tag name to search for.</p>
     * @returns Titanium_XML_NodeList The NodeList of elements in the document which have the given tag name.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getElementsByTagName:function(tagname) {
    },

    /**
     * <p>Return a node list of elements in the document which belong to the given namespace and have the given tag name.</p>
     * @param {String} namespaceURI <p>A namespace URI used for matching elements.</p>
     * @param {String} localname <p>The tag name to search for.</p>
     * @returns Titanium_XML_NodeList The NodeList of elements in the document which belong to the given namespace and have the given tag name.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getElementsByTagNameNS:function(namespaceURI, localname) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Document.firstChild} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getFirstChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Document.implementation} property.</p>
     * @returns Titanium_XML_DOMImplementation
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getImplementation:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Document.lastChild} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getLastChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Document.localName} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getLocalName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Document.namespaceURI} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNamespaceURI:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Document.nextSibling} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNextSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Document.nodeName} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNodeName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Document.nodeType} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNodeType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Document.nodeValue} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNodeValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Document.ownerDocument} property.</p>
     * @returns Titanium_XML_Document
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getOwnerDocument:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Document.parentNode} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getParentNode:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Document.prefix} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getPrefix:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Document.previousSibling} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getPreviousSibling:function() {
    },

    /**
     * <p>Whether or not this node has attributes</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    hasAttributes:function() {
    },

    /**
     * <p>Whether or not this node has child nodes</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    hasChildNodes:function() {
    },

    /**
     * <p>Imports a node from another document to this document, without altering or removing the source node from the original document; this method creates a new copy of the source node. The returned node has no parent.</p>
     * @param {Titanium_XML_Node} importedNode <p>The node to import.</p>
     * @param {Boolean} deep <p>If true, recursively import the subtree under the specified node; if false, import only the node itself.</p>
     * @returns Titanium_XML_Node the imported Node that belongs now to this document.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    importNode:function(importedNode, deep) {
    },

    /**
     * 
     * @param {Titanium_XML_Node} newChild <p>The node to insert</p>
     * @param {Titanium_XML_Node} refChild <p>The node to insert <code>newChild</code> before</p>
     * @returns Titanium_XML_Node The inserted node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    insertBefore:function(newChild, refChild) {
    },

    /**
     * <p>Tests whether the DOM implementation supports a specific feature</p>
     * @param {String} feature <p>The name of the feature</p>
     * @param {String} version <p>The version number of the feature</p>
     * @returns Boolean Whether or not the feature is supported
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    isSupported:function(feature, version) {
    },

    /**
     * <p>Normalizes text and attribute nodes in this node's child hierarchy</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    normalize:function() {
    },

    /**
     * <p>Removes a child node from this node</p>
     * @param {Titanium_XML_Node} oldChild <p>The node to remove</p>
     * @returns Titanium_XML_Node The node that was removed
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeChild:function(oldChild) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Replaces the node <code>oldChild</code> with the node <code>newChild</code></p>
     * @param {Titanium_XML_Node} newChild <p>The new node</p>
     * @param {Titanium_XML_Node} oldChild <p>The node being replaced</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    replaceChild:function(newChild, oldChild) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.XML.Document.localName} property.</p>
     * @param {String} localName <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setLocalName:function(localName) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 * @namespace <p>This provides an
interface to the list of entities that are defined for the document. This
conforms to the {@link http://www.w3.org/TR/DOM}
defintion of a DOM DocumentType.</p>
<p>As of version 3.1, Android still does not truly support DTDs.  A document with a DTD can be
parsed, however it is not validated, none of its default attributes will automatically be put
into the tree, etc.  {@link http://code.google.com/p/android/issues/detail?id=7395}.</p>
 */
function Titanium_XML_DocumentType() {
}
Titanium_XML_DocumentType.prototype = {

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Attr}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    ATTRIBUTE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a CData section (a type of {@link Titanium.XML.Text})</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    CDATA_SECTION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a <code>Titanium.XML.Comment</code></p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    COMMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a <code>Titanium.XML.DocumentFragment</code></p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    DOCUMENT_FRAGMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Document}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    DOCUMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.DocumentType}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    DOCUMENT_TYPE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Element}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    ELEMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Entity}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    ENTITY_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is an {@link http://www.w3.org/TR/2000/REC} (a type of {@link Titanium.XML.Node})</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    ENTITY_REFERENCE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Notation}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    NOTATION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.ProcessingInstruction}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    PROCESSING_INSTRUCTION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Text}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    TEXT_NODE:null,

    /**
     * <p>A map of this node's attributes</p>
     * @type Titanium_XML_NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    attributes:null,

    /**
     * <p>A {@link Titanium.XML.NodeList} of this node's children</p>
     * @type Titanium_XML_NodeList
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    childNodes:null,

    /**
     * <p>A {@link Titanium.XML.NamedNodeMap} containing the general entities, both external and internal, declared in the DTD. Parameter entities are not contained. Duplicates are discarded.</p>
     * @type Titanium_XML_NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    entities:null,

    /**
     * <p>This node's first child</p>
     * @type Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    firstChild:null,

    /**
     * <p>The internal subset as a string.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    internalSubset:null,

    /**
     * <p>This node's last child</p>
     * @type Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    lastChild:null,

    /**
     * <p>The local part of the qualified name of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    localName:null,

    /**
     * <p>The name of DTD; i.e., the name immediately following the <code>DOCTYPE</code> keyword.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    name:null,

    /**
     * <p>The namespace URI of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    namespaceURI:null,

    /**
     * <p>This node's next sibling</p>
     * @type Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    nextSibling:null,

    /**
     * <p>The name of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    nodeName:null,

    /**
     * <p>This node's type. One of <ELEMENT_NODE>, <ATTRIBUTE_NODE>, <TEXT_NODE>, <CDATA_SECTION_NODE>, <ENTITY_REFERENCE_NODE>, <ENTITY_NODE>, <PROCESSING_INSTRUCTION_NODE>, <COMMENT_NODE>, <DOCUMENT_NODE>, <DOCUMENT_TYPE_NODE>, <DOCUMENT_FRAGMENT_NODE>, <NOTATION_NODE></p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    nodeType:null,

    /**
     * <p>The content (value) of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    nodeValue:null,

    /**
     * <p>A {@link Titanium.XML.NamedNodeMap} containing the notations declared  in the DTD. Duplicates are discarded. Every node in this map also  implements the {@link Titanium.XML.Notation} interface.</p>
     * @type Titanium_XML_NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    notations:null,

    /**
     * <p>This node's owning Document</p>
     * @type Titanium_XML_Document
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    ownerDocument:null,

    /**
     * <p>This node's parent node</p>
     * @type Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    parentNode:null,

    /**
     * <p>The namespace prefix of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    prefix:null,

    /**
     * <p>This node's previous sibling</p>
     * @type Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    previousSibling:null,

    /**
     * <p>The public identifier of the external subset.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    publicId:null,

    /**
     * <p>The system identifier of the external subset.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    systemId:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends the node <code>newChild</code> as a child of this node</p>
     * @param {Titanium_XML_Node} newChild <p>The new node to append</p>
     * @returns Titanium_XML_Node The appended node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    appendChild:function(newChild) {
    },

    /**
     * <p>Returns a duplicate of this node</p>
     * @param {Boolean} deep <p>Whether or not to perform a deep copy of this node</p>
     * @returns Titanium_XML_Node The appended node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    cloneNode:function(deep) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.DocumentType.attributes} property.</p>
     * @returns Titanium_XML_NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAttributes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.DocumentType.childNodes} property.</p>
     * @returns Titanium_XML_NodeList
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getChildNodes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.DocumentType.entities} property.</p>
     * @returns Titanium_XML_NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getEntities:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.DocumentType.firstChild} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getFirstChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.DocumentType.internalSubset} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getInternalSubset:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.DocumentType.lastChild} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getLastChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.DocumentType.localName} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getLocalName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.DocumentType.name} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.DocumentType.namespaceURI} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNamespaceURI:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.DocumentType.nextSibling} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNextSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.DocumentType.nodeName} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNodeName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.DocumentType.nodeType} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNodeType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.DocumentType.nodeValue} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNodeValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.DocumentType.notations} property.</p>
     * @returns Titanium_XML_NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNotations:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.DocumentType.ownerDocument} property.</p>
     * @returns Titanium_XML_Document
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getOwnerDocument:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.DocumentType.parentNode} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getParentNode:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.DocumentType.prefix} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getPrefix:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.DocumentType.previousSibling} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getPreviousSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.DocumentType.publicId} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getPublicId:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.DocumentType.systemId} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getSystemId:function() {
    },

    /**
     * <p>Whether or not this node has attributes</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    hasAttributes:function() {
    },

    /**
     * <p>Whether or not this node has child nodes</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    hasChildNodes:function() {
    },

    /**
     * 
     * @param {Titanium_XML_Node} newChild <p>The node to insert</p>
     * @param {Titanium_XML_Node} refChild <p>The node to insert <code>newChild</code> before</p>
     * @returns Titanium_XML_Node The inserted node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    insertBefore:function(newChild, refChild) {
    },

    /**
     * <p>Tests whether the DOM implementation supports a specific feature</p>
     * @param {String} feature <p>The name of the feature</p>
     * @param {String} version <p>The version number of the feature</p>
     * @returns Boolean Whether or not the feature is supported
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    isSupported:function(feature, version) {
    },

    /**
     * <p>Normalizes text and attribute nodes in this node's child hierarchy</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    normalize:function() {
    },

    /**
     * <p>Removes a child node from this node</p>
     * @param {Titanium_XML_Node} oldChild <p>The node to remove</p>
     * @returns Titanium_XML_Node The node that was removed
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeChild:function(oldChild) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Replaces the node <code>oldChild</code> with the node <code>newChild</code></p>
     * @param {Titanium_XML_Node} newChild <p>The new node</p>
     * @param {Titanium_XML_Node} oldChild <p>The node being replaced</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    replaceChild:function(newChild, oldChild) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.XML.DocumentType.localName} property.</p>
     * @param {String} localName <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setLocalName:function(localName) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_XML_Element() {
}
Titanium_XML_Element.prototype = {

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Attr}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ATTRIBUTE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a CData section (a type of {@link Titanium.XML.Text})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    CDATA_SECTION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a <code>Titanium.XML.Comment</code></p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    COMMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a <code>Titanium.XML.DocumentFragment</code></p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    DOCUMENT_FRAGMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Document}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    DOCUMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.DocumentType}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    DOCUMENT_TYPE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Element}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ELEMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Entity}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ENTITY_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is an {@link http://www.w3.org/TR/2000/REC} (a type of {@link Titanium.XML.Node})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ENTITY_REFERENCE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Notation}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    NOTATION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.ProcessingInstruction}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    PROCESSING_INSTRUCTION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Text}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    TEXT_NODE:null,

    /**
     * <p>A map of this node's attributes</p>
     * @type Titanium_XML_NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    attributes:null,

    /**
     * <p>A {@link Titanium.XML.NodeList} of this node's children</p>
     * @type Titanium_XML_NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    childNodes:null,

    /**
     * <p>This node's first child</p>
     * @type Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    firstChild:null,

    /**
     * <p>This node's last child</p>
     * @type Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    lastChild:null,

    /**
     * <p>The local part of the qualified name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    localName:null,

    /**
     * <p>The namespace URI of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    namespaceURI:null,

    /**
     * <p>This node's next sibling</p>
     * @type Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    nextSibling:null,

    /**
     * <p>The name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    nodeName:null,

    /**
     * <p>This node's type. One of <ELEMENT_NODE>, <ATTRIBUTE_NODE>, <TEXT_NODE>, <CDATA_SECTION_NODE>, <ENTITY_REFERENCE_NODE>, <ENTITY_NODE>, <PROCESSING_INSTRUCTION_NODE>, <COMMENT_NODE>, <DOCUMENT_NODE>, <DOCUMENT_TYPE_NODE>, <DOCUMENT_FRAGMENT_NODE>, <NOTATION_NODE></p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    nodeType:null,

    /**
     * <p>The content (value) of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    nodeValue:null,

    /**
     * <p>This node's owning Document</p>
     * @type Titanium_XML_Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ownerDocument:null,

    /**
     * <p>This node's parent node</p>
     * @type Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    parentNode:null,

    /**
     * <p>The namespace prefix of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    prefix:null,

    /**
     * <p>This node's previous sibling</p>
     * @type Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    previousSibling:null,

    /**
     * <p>The name of the element, as defined by its tag.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    tagName:null,

    /**
     * <p>Retrieves all child text nodes as one String</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    text:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends the node <code>newChild</code> as a child of this node</p>
     * @param {Titanium_XML_Node} newChild <p>The new node to append</p>
     * @returns Titanium_XML_Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    appendChild:function(newChild) {
    },

    /**
     * <p>Returns a duplicate of this node</p>
     * @param {Boolean} deep <p>Whether or not to perform a deep copy of this node</p>
     * @returns Titanium_XML_Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    cloneNode:function(deep) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Retrieves an attribute value by name, returning it as a string.</p>
     * @param {String} name <p>The name of the attribute</p>
     * @returns String The <Titanium.XML.Attr> value as a string, or empty string if the attribute has no specified or default value.

     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAttribute:function(name) {
    },

    /**
     * <p>Retrieves an attribute value by local name and namespace URI, returning it as a string.</p>
     * @param {String} namespaceURI <p>The namespace URI of the attribute to retrieve.</p>
     * @param {String} localName <p>The local name of the attribute to retrieve.</p>
     * @returns String The <Titanium.XML.Attr> value as a string, or empty string if the attribute has no specified or default value.

     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAttributeNS:function(namespaceURI, localName) {
    },

    /**
     * <p>Retrieves an attribute value by name, returning it as a {@link Titanium.XML.Attr} object.</p>
     * @param {String} name <p>The name of the attribute</p>
     * @returns Titanium_XML_Attr The <Titanium.XML.Attr> value, or null if there is no such attribute.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAttributeNode:function(name) {
    },

    /**
     * <p>Retrieves an attribute value by local name and namespace URI,  returning it as a {@link Titanium.XML.Attr} object.</p>
     * @param {String} namespaceURI <p>The namespace URI of the attribute to retrieve.</p>
     * @param {String} localName <p>The local name of the attribute to retrieve.</p>
     * @returns Titanium_XML_Attr The <Titanium.XML.Attr> value, or null if there is no such attribute.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAttributeNodeNS:function(namespaceURI, localName) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Element.attributes} property.</p>
     * @returns Titanium_XML_NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAttributes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Element.childNodes} property.</p>
     * @returns Titanium_XML_NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getChildNodes:function() {
    },

    /**
     * <p>Retrieves a {@link Titanium.XML.NodeList} of all descendant elements with a given tag name, in preorder traversal.</p>
     * @param {String} name <p>The name of the element. The value <code>*</code> matches all tags.</p>
     * @returns Titanium_XML_NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getElementsByTagName:function(name) {
    },

    /**
     * <p>Retrieves a {@link Titanium.XML.NodeList} of all descendant elements with a given local name and namespace URI, in preorder traversal.</p>
     * @param {String} namespaceURI <p>The namespace URI of the element. The value <code>*</code> matches all namespaces.</p>
     * @param {String} localName <p>The local name of the element. The value <code>*</code> matches all local names.</p>
     * @returns Titanium_XML_NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getElementsByTagNameNS:function(namespaceURI, localName) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Element.firstChild} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getFirstChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Element.lastChild} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLastChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Element.localName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLocalName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Element.namespaceURI} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNamespaceURI:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Element.nextSibling} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNextSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Element.nodeName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNodeName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Element.nodeType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNodeType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Element.nodeValue} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNodeValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Element.ownerDocument} property.</p>
     * @returns Titanium_XML_Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getOwnerDocument:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Element.parentNode} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getParentNode:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Element.prefix} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getPrefix:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Element.previousSibling} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getPreviousSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Element.tagName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getTagName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Element.text} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getText:function() {
    },

    /**
     * <p>Determines whether or not an attribute with the given name is available in the element, or has a default value.</p>
     * @param {String} name <p>The name of the attribute to search for.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    hasAttribute:function(name) {
    },

    /**
     * <p>Determines whether or not an attribute with the given name is available in the element, or has a default value.</p>
     * @param {String} namespaceURI <p>The namespace URI of the attribute to search for.</p>
     * @param {String} localName <p>The local name of the attribute to search for.</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    hasAttributeNS:function(namespaceURI, localName) {
    },

    /**
     * <p>Whether or not this node has attributes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    hasAttributes:function() {
    },

    /**
     * <p>Whether or not this node has child nodes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    hasChildNodes:function() {
    },

    /**
     * 
     * @param {Titanium_XML_Node} newChild <p>The node to insert</p>
     * @param {Titanium_XML_Node} refChild <p>The node to insert <code>newChild</code> before</p>
     * @returns Titanium_XML_Node The inserted node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    insertBefore:function(newChild, refChild) {
    },

    /**
     * <p>Tests whether the DOM implementation supports a specific feature</p>
     * @param {String} feature <p>The name of the feature</p>
     * @param {String} version <p>The version number of the feature</p>
     * @returns Boolean Whether or not the feature is supported
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    isSupported:function(feature, version) {
    },

    /**
     * <p>Normalizes text and attribute nodes in this node's child hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    normalize:function() {
    },

    /**
     * <p>Removes an attribute by name. If the attribute has a default value, it is immediately replaced with this default, including namespace URI and local name. Throws an exception if the element is read-only.</p>
     * @param {String} name <p>The name of the attribute to remove.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeAttribute:function(name) {
    },

    /**
     * <p>Removes an attribute by local name and namespace URI. If the attribute has a default value, it is immediately replaced with this default, including namespace URI and local name. Throws an exception if the element is read-only.</p>
     * @param {String} namespaceURI <p>The namespace URI of the attribute to remove.</p>
     * @param {String} localName <p>The local name of the attribute to remove.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeAttributeNS:function(namespaceURI, localName) {
    },

    /**
     * <p>Removes the specified attribute node. If the removed attribute has a default value, it is replaced immediately, with the same namespace and local name as the removed attribute, if applicable. Throws an exception if the element is read-only, or the attribute is  not an attribute of the element.</p>
     * @param {Titanium_XML_Attr} oldAttr <p>The attribute to remove.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeAttributeNode:function(oldAttr) {
    },

    /**
     * <p>Removes a child node from this node</p>
     * @param {Titanium_XML_Node} oldChild <p>The node to remove</p>
     * @returns Titanium_XML_Node The node that was removed
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeChild:function(oldChild) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Replaces the node <code>oldChild</code> with the node <code>newChild</code></p>
     * @param {Titanium_XML_Node} newChild <p>The new node</p>
     * @param {Titanium_XML_Node} oldChild <p>The node being replaced</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    replaceChild:function(newChild, oldChild) {
    },

    /**
     * <p>Adds a new attribute. Any attribute with the same name is replaced. Throws an exception if the element is read-only, or if the name contains an illegal character.</p>
     * @param {String} name <p>The name of the attribute.</p>
     * @param {String} value <p>The value of the attribute. This is value is <strong>not</strong> parsed as part of the assignment. Any markup is treated as literal text, and needs to be escaped.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setAttribute:function(name, value) {
    },

    /**
     * <p>Adds a new attribute. Any attribute with the same local name and namespace URI is present on the element is replaced, with its prefix changed to that of the <code>qualifiedName</code> parameter.  Throws an exception if the element is read-only, if the name contains an illegal character, or if the qualified name contains an error.</p>
     * @param {String} namespaceURI <p>The namespace URI of the attribute.</p>
     * @param {String} qualifiedName <p>The qualified name of the attribute. If it is malformed, has a prefix and namespaceURI is <code>null</code>, or if the prefix is <code>xml</code> or <code>xmlns</code> but does not correspond to a property defined in the  {@link http://www.w3.org/XML/1998/namespace} or {@link http://www.w3.org/2000/xmlns/} specifications, then it contains an error.</p>
     * @param {String} value <p>The value of the attribute. This is value is <strong>not</strong> parsed as part of the assignment. Any markup is treated as literal text, and needs to be escaped.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setAttributeNS:function(namespaceURI, qualifiedName, value) {
    },

    /**
     * <p>Adds a new attribute. Any attribute with the same <code>nodeName</code> as the argument is replaced. Throws an exception if the element is read-only, if <code>newAttr</code> is from a different document, or if <code>newAttr</code> is already an attribute of another element.</p>
     * @param {Titanium_XML_Attr} newAttr <p>The attribute node to add to the element.</p>
     * @returns Titanium_XML_Attr The attribute that was replaced, or `null` otherwise.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setAttributeNode:function(newAttr) {
    },

    /**
     * <p>Adds a new attribute. Any attribute with the same local name and namespace URI is replaced. Throws an exception if the element is read-only, if <code>newAttr</code> is from a different document, or if <code>newAttr</code> is already an attribute of another element.</p>
     * @param {Titanium_XML_Attr} newAttr <p>The attribute node to add to the element.</p>
     * @returns Titanium_XML_Attr The attribute that was replaced, or `null` otherwise.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setAttributeNodeNS:function(newAttr) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.XML.Element.localName} property.</p>
     * @param {String} localName <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLocalName:function(localName) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_XML_Entity() {
}
Titanium_XML_Entity.prototype = {

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Attr}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    ATTRIBUTE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a CData section (a type of {@link Titanium.XML.Text})</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    CDATA_SECTION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a <code>Titanium.XML.Comment</code></p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    COMMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a <code>Titanium.XML.DocumentFragment</code></p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    DOCUMENT_FRAGMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Document}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    DOCUMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.DocumentType}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    DOCUMENT_TYPE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Element}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    ELEMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Entity}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    ENTITY_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is an {@link http://www.w3.org/TR/2000/REC} (a type of {@link Titanium.XML.Node})</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    ENTITY_REFERENCE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Notation}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    NOTATION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.ProcessingInstruction}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    PROCESSING_INSTRUCTION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Text}</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    TEXT_NODE:null,

    /**
     * <p>A map of this node's attributes</p>
     * @type Titanium_XML_NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    attributes:null,

    /**
     * <p>A {@link Titanium.XML.NodeList} of this node's children</p>
     * @type Titanium_XML_NodeList
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    childNodes:null,

    /**
     * <p>This node's first child</p>
     * @type Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    firstChild:null,

    /**
     * <p>This node's last child</p>
     * @type Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    lastChild:null,

    /**
     * <p>The local part of the qualified name of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    localName:null,

    /**
     * <p>The namespace URI of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    namespaceURI:null,

    /**
     * <p>This node's next sibling</p>
     * @type Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    nextSibling:null,

    /**
     * <p>The name of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    nodeName:null,

    /**
     * <p>This node's type. One of <ELEMENT_NODE>, <ATTRIBUTE_NODE>, <TEXT_NODE>, <CDATA_SECTION_NODE>, <ENTITY_REFERENCE_NODE>, <ENTITY_NODE>, <PROCESSING_INSTRUCTION_NODE>, <COMMENT_NODE>, <DOCUMENT_NODE>, <DOCUMENT_TYPE_NODE>, <DOCUMENT_FRAGMENT_NODE>, <NOTATION_NODE></p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    nodeType:null,

    /**
     * <p>The content (value) of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    nodeValue:null,

    /**
     * <p>For unparsed entities, the name of the notation for the entity. For parsed entities, this is <code>null</code>.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    notationName:null,

    /**
     * <p>This node's owning Document</p>
     * @type Titanium_XML_Document
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    ownerDocument:null,

    /**
     * <p>This node's parent node</p>
     * @type Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    parentNode:null,

    /**
     * <p>The namespace prefix of this node</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    prefix:null,

    /**
     * <p>This node's previous sibling</p>
     * @type Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    previousSibling:null,

    /**
     * <p>The public identifier associated with the entity, if specified. If the public identifier was not specified, this is <code>null</code>.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    publicId:null,

    /**
     * <p>The system identifier associated with the entity, if specified. If the system identifier was not specified, this is null.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    systemId:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends the node <code>newChild</code> as a child of this node</p>
     * @param {Titanium_XML_Node} newChild <p>The new node to append</p>
     * @returns Titanium_XML_Node The appended node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    appendChild:function(newChild) {
    },

    /**
     * <p>Returns a duplicate of this node</p>
     * @param {Boolean} deep <p>Whether or not to perform a deep copy of this node</p>
     * @returns Titanium_XML_Node The appended node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    cloneNode:function(deep) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Entity.attributes} property.</p>
     * @returns Titanium_XML_NamedNodeMap
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getAttributes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Entity.childNodes} property.</p>
     * @returns Titanium_XML_NodeList
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getChildNodes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Entity.firstChild} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getFirstChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Entity.lastChild} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getLastChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Entity.localName} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getLocalName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Entity.namespaceURI} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNamespaceURI:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Entity.nextSibling} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNextSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Entity.nodeName} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNodeName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Entity.nodeType} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNodeType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Entity.nodeValue} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNodeValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Entity.notationName} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNotationName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Entity.ownerDocument} property.</p>
     * @returns Titanium_XML_Document
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getOwnerDocument:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Entity.parentNode} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getParentNode:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Entity.prefix} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getPrefix:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Entity.previousSibling} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getPreviousSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Entity.publicId} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getPublicId:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Entity.systemId} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getSystemId:function() {
    },

    /**
     * <p>Whether or not this node has attributes</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    hasAttributes:function() {
    },

    /**
     * <p>Whether or not this node has child nodes</p>
     * @returns Boolean
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    hasChildNodes:function() {
    },

    /**
     * 
     * @param {Titanium_XML_Node} newChild <p>The node to insert</p>
     * @param {Titanium_XML_Node} refChild <p>The node to insert <code>newChild</code> before</p>
     * @returns Titanium_XML_Node The inserted node
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    insertBefore:function(newChild, refChild) {
    },

    /**
     * <p>Tests whether the DOM implementation supports a specific feature</p>
     * @param {String} feature <p>The name of the feature</p>
     * @param {String} version <p>The version number of the feature</p>
     * @returns Boolean Whether or not the feature is supported
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    isSupported:function(feature, version) {
    },

    /**
     * <p>Normalizes text and attribute nodes in this node's child hierarchy</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    normalize:function() {
    },

    /**
     * <p>Removes a child node from this node</p>
     * @param {Titanium_XML_Node} oldChild <p>The node to remove</p>
     * @returns Titanium_XML_Node The node that was removed
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeChild:function(oldChild) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Replaces the node <code>oldChild</code> with the node <code>newChild</code></p>
     * @param {Titanium_XML_Node} newChild <p>The new node</p>
     * @param {Titanium_XML_Node} oldChild <p>The node being replaced</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    replaceChild:function(newChild, oldChild) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.XML.Entity.localName} property.</p>
     * @param {String} localName <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setLocalName:function(localName) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_XML_NamedNodeMap() {
}
Titanium_XML_NamedNodeMap.prototype = {

    /**
     * <p>The number of nodes in the map. The valid range of child node indices is 0-<code>length</code>-1, inclusive.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    length:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.NamedNodeMap.length} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getLength:function() {
    },

    /**
     * <p>Retrieves a node specified by name.</p>
     * @param {String} name <p>The name of the node to retrieve.</p>
     * @returns Titanium_XML_Node The specified node, or `null` if no node with the name is in the map
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNamedItem:function(name) {
    },

    /**
     * <p>Retrieves a node specified by name and namespace. Returns <code>null</code> if no matching node is in the map.</p>
     * @param {String} namespaceURI <p>The namespace URI of the node to retrieve.</p>
     * @param {String} localName <p>The local name of the node within the namespace to retrieve.</p>
     * @returns Titanium_XML_Node The specified node, or `null` if there is no matching node.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getNamedItemNS:function(namespaceURI, localName) {
    },

    /**
     * <p>Retrieves the node at the specified index of the map. Note that NamedNodeMaps are not ordered.</p>
     * @param {Number} index <p>The index of the node to retrieve.</p>
     * @returns Titanium_XML_Node The node at the specified index, or `null` if the index is invalid
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    item:function(index) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Removes a node from the map specified by name. When this map contains attributes attached to an element, if the removed attribtue is known to have a default, it is replaced with that value.</p>
     * @param {String} name <p>The name of the node to remove.</p>
     * @returns Titanium_XML_Node The node removed from the map, or `null` if nothing removed.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeNamedItem:function(name) {
    },

    /**
     * <p>Removes a node from the map specified by local name and namespace URI.  When this map contains attributes attached to an element, if the removed attribtue is known to have a default, it is replaced with that value. Returns the node removed from the map, or <code>null</code> if there is no corresponding node.</p>
     * @param {String} namespaceURI <p>The namespace URI of the node to remove.</p>
     * @param {String} localName <p>The local name of the node within the namespace to remove.</p>
     * @returns Titanium_XML_Node The node removed from the map, or `null` if nothing removed.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeNamedItemNS:function(namespaceURI, localName) {
    },

    /**
     * <p>Adds a node using its <code>nodeName</code> attribute. If a node with that name is already present, it is replaced.  Throws an exception if the argument is from a different document, the map is read-only, or the argument is an attribute of another element.</p>
     * @param {Titanium_XML_Node} node <p>The node to insert into the map.</p>
     * @returns Titanium_XML_Node The node replaced, or `null` if no node was replaced.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setNamedItem:function(node) {
    },

    /**
     * <p>Adds a node using its <code>namespaceURI</code> and <code>localName</code> attributes. If a node with that name is already present, it is replaced. Throws an exception if the argument is from a different document, the map is read-only, or the argument is an attribute of another element.</p>
     * @param {Titanium_XML_Node} node <p>The node to insert into the map.</p>
     * @returns Titanium_XML_Node Returns the node replaced, or `null`.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setNamedItemNS:function(node) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_XML_Node() {
}
Titanium_XML_Node.prototype = {

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Attr}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ATTRIBUTE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a CData section (a type of {@link Titanium.XML.Text})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    CDATA_SECTION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a <code>Titanium.XML.Comment</code></p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    COMMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a <code>Titanium.XML.DocumentFragment</code></p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    DOCUMENT_FRAGMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Document}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    DOCUMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.DocumentType}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    DOCUMENT_TYPE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Element}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ELEMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Entity}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ENTITY_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is an {@link http://www.w3.org/TR/2000/REC} (a type of {@link Titanium.XML.Node})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ENTITY_REFERENCE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Notation}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    NOTATION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.ProcessingInstruction}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    PROCESSING_INSTRUCTION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Text}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    TEXT_NODE:null,

    /**
     * <p>A map of this node's attributes</p>
     * @type Titanium_XML_NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    attributes:null,

    /**
     * <p>A {@link Titanium.XML.NodeList} of this node's children</p>
     * @type Titanium_XML_NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    childNodes:null,

    /**
     * <p>This node's first child</p>
     * @type Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    firstChild:null,

    /**
     * <p>This node's last child</p>
     * @type Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    lastChild:null,

    /**
     * <p>The local part of the qualified name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    localName:null,

    /**
     * <p>The namespace URI of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    namespaceURI:null,

    /**
     * <p>This node's next sibling</p>
     * @type Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    nextSibling:null,

    /**
     * <p>The name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    nodeName:null,

    /**
     * <p>This node's type. One of <ELEMENT_NODE>, <ATTRIBUTE_NODE>, <TEXT_NODE>, <CDATA_SECTION_NODE>, <ENTITY_REFERENCE_NODE>, <ENTITY_NODE>, <PROCESSING_INSTRUCTION_NODE>, <COMMENT_NODE>, <DOCUMENT_NODE>, <DOCUMENT_TYPE_NODE>, <DOCUMENT_FRAGMENT_NODE>, <NOTATION_NODE></p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    nodeType:null,

    /**
     * <p>The content (value) of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    nodeValue:null,

    /**
     * <p>This node's owning Document</p>
     * @type Titanium_XML_Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ownerDocument:null,

    /**
     * <p>This node's parent node</p>
     * @type Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    parentNode:null,

    /**
     * <p>The namespace prefix of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    prefix:null,

    /**
     * <p>This node's previous sibling</p>
     * @type Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    previousSibling:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends the node <code>newChild</code> as a child of this node</p>
     * @param {Titanium_XML_Node} newChild <p>The new node to append</p>
     * @returns Titanium_XML_Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    appendChild:function(newChild) {
    },

    /**
     * <p>Returns a duplicate of this node</p>
     * @param {Boolean} deep <p>Whether or not to perform a deep copy of this node</p>
     * @returns Titanium_XML_Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    cloneNode:function(deep) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Node.attributes} property.</p>
     * @returns Titanium_XML_NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAttributes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Node.childNodes} property.</p>
     * @returns Titanium_XML_NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getChildNodes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Node.firstChild} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getFirstChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Node.lastChild} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLastChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Node.localName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLocalName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Node.namespaceURI} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNamespaceURI:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Node.nextSibling} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNextSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Node.nodeName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNodeName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Node.nodeType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNodeType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Node.nodeValue} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNodeValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Node.ownerDocument} property.</p>
     * @returns Titanium_XML_Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getOwnerDocument:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Node.parentNode} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getParentNode:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Node.prefix} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getPrefix:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Node.previousSibling} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getPreviousSibling:function() {
    },

    /**
     * <p>Whether or not this node has attributes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    hasAttributes:function() {
    },

    /**
     * <p>Whether or not this node has child nodes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    hasChildNodes:function() {
    },

    /**
     * 
     * @param {Titanium_XML_Node} newChild <p>The node to insert</p>
     * @param {Titanium_XML_Node} refChild <p>The node to insert <code>newChild</code> before</p>
     * @returns Titanium_XML_Node The inserted node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    insertBefore:function(newChild, refChild) {
    },

    /**
     * <p>Tests whether the DOM implementation supports a specific feature</p>
     * @param {String} feature <p>The name of the feature</p>
     * @param {String} version <p>The version number of the feature</p>
     * @returns Boolean Whether or not the feature is supported
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    isSupported:function(feature, version) {
    },

    /**
     * <p>Normalizes text and attribute nodes in this node's child hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    normalize:function() {
    },

    /**
     * <p>Removes a child node from this node</p>
     * @param {Titanium_XML_Node} oldChild <p>The node to remove</p>
     * @returns Titanium_XML_Node The node that was removed
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeChild:function(oldChild) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Replaces the node <code>oldChild</code> with the node <code>newChild</code></p>
     * @param {Titanium_XML_Node} newChild <p>The new node</p>
     * @param {Titanium_XML_Node} oldChild <p>The node being replaced</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    replaceChild:function(newChild, oldChild) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.XML.Node.localName} property.</p>
     * @param {String} localName <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLocalName:function(localName) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_XML_NodeList() {
}
Titanium_XML_NodeList.prototype = {

    /**
     * <p>The length of the node list.</p>
     * @type Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    length:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.NodeList.length} property.</p>
     * @returns Number
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getLength:function() {
    },

    /**
     * <p>Returns the {@link Titanium.XML.Node} object at the specified index.</p>
     * @param {Number} index <p>The index of the node to retrieve. Indexing starts at 0.</p>
     * @returns Titanium_XML_Node The node at the index, or `null` if the index is out of bounds.
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    item:function(index) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_XML_Notation() {
}
Titanium_XML_Notation.prototype = {

    /**
     * <p>The public identifier of this notation. If the public identifier was not specified, this is <code>null</code>.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    publicId:null,

    /**
     * <p>The system identifier of this notation. If the system identifier was not specified, this is <code>null</code>.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    systemId:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Notation.publicId} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getPublicId:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Notation.systemId} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getSystemId:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_XML_ProcessingInstruction() {
}
Titanium_XML_ProcessingInstruction.prototype = {

    /**
     * <p>Retrieve the content of this processing instruction. This from the first non white space character  after the target to the character immediatly preceding the ?&gt;. When setting a processing instruction, a DOMException may be thrown on an invalid instruction.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    data:null,

    /**
     * <p>Retrieve the target of this processing instruction. XML defines this as being the first token following  the markup that begins the processing instruction.</p>
     * @type String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    target:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.ProcessingInstruction.data} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getData:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.ProcessingInstruction.target} property.</p>
     * @returns String
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    getTarget:function() {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.XML.ProcessingInstruction.data} property.</p>
     * @param {String} data <p>New value for the property.</p>
     * @since 0.9 (Android), 0.9 (iPhone), 0.9 (iPad)
     */
    setData:function(data) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
function Titanium_XML_Text() {
}
Titanium_XML_Text.prototype = {

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Attr}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ATTRIBUTE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a CData section (a type of {@link Titanium.XML.Text})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    CDATA_SECTION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a <code>Titanium.XML.Comment</code></p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    COMMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a <code>Titanium.XML.DocumentFragment</code></p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    DOCUMENT_FRAGMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Document}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    DOCUMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.DocumentType}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    DOCUMENT_TYPE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Element}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ELEMENT_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Entity}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ENTITY_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is an {@link http://www.w3.org/TR/2000/REC} (a type of {@link Titanium.XML.Node})</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ENTITY_REFERENCE_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Notation}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    NOTATION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.ProcessingInstruction}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    PROCESSING_INSTRUCTION_NODE:null,

    /**
     * <p>The value of <nodeType> when this node is a {@link Titanium.XML.Text}</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    TEXT_NODE:null,

    /**
     * <p>A map of this node's attributes</p>
     * @type Titanium_XML_NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    attributes:null,

    /**
     * <p>A {@link Titanium.XML.NodeList} of this node's children</p>
     * @type Titanium_XML_NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    childNodes:null,

    /**
     * <p>The character data of the node that implements this interface. Throws an exception during setting if this node is readonly.</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    data:null,

    /**
     * <p>This node's first child</p>
     * @type Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    firstChild:null,

    /**
     * <p>This node's last child</p>
     * @type Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    lastChild:null,

    /**
     * <p>The number of characters that are available through data and the substringData method. This may have the value zero, i.e., {@link Titanium.XML.CharacterData} may be empty.</p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    length:null,

    /**
     * <p>The local part of the qualified name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    localName:null,

    /**
     * <p>The namespace URI of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    namespaceURI:null,

    /**
     * <p>This node's next sibling</p>
     * @type Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    nextSibling:null,

    /**
     * <p>The name of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    nodeName:null,

    /**
     * <p>This node's type. One of <ELEMENT_NODE>, <ATTRIBUTE_NODE>, <TEXT_NODE>, <CDATA_SECTION_NODE>, <ENTITY_REFERENCE_NODE>, <ENTITY_NODE>, <PROCESSING_INSTRUCTION_NODE>, <COMMENT_NODE>, <DOCUMENT_NODE>, <DOCUMENT_TYPE_NODE>, <DOCUMENT_FRAGMENT_NODE>, <NOTATION_NODE></p>
     * @type Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    nodeType:null,

    /**
     * <p>The content (value) of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    nodeValue:null,

    /**
     * <p>This node's owning Document</p>
     * @type Titanium_XML_Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    ownerDocument:null,

    /**
     * <p>This node's parent node</p>
     * @type Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    parentNode:null,

    /**
     * <p>The namespace prefix of this node</p>
     * @type String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    prefix:null,

    /**
     * <p>This node's previous sibling</p>
     * @type Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    previousSibling:null,


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Appends the node <code>newChild</code> as a child of this node</p>
     * @param {Titanium_XML_Node} newChild <p>The new node to append</p>
     * @returns Titanium_XML_Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    appendChild:function(newChild) {
    },

    /**
     * <p>Append the string to the end of the character data of the node. Upon success, data provides access to the concatenation of data and the string specified. Throws an exception if this node is readonly.</p>
     * @param {String} arg <p>The string to append.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    appendData:function(arg) {
    },

    /**
     * <p>Returns a duplicate of this node</p>
     * @param {Boolean} deep <p>Whether or not to perform a deep copy of this node</p>
     * @returns Titanium_XML_Node The appended node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    cloneNode:function(deep) {
    },

    /**
     * <p>Remove a range of characters from the node. Upon success, data and length reflect the change. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.</p>
     * @param {Number} offset <p>The offset from which to start removing.</p>
     * @param {Number} count <p>The number of characters to delete. If the sum of offset and count exceeds length then all characters from offset to the end of the data are deleted.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    deleteData:function(offset, count) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Text.attributes} property.</p>
     * @returns Titanium_XML_NamedNodeMap
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getAttributes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Text.childNodes} property.</p>
     * @returns Titanium_XML_NodeList
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getChildNodes:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Text.data} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getData:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Text.firstChild} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getFirstChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Text.lastChild} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLastChild:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Text.length} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLength:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Text.localName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getLocalName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Text.namespaceURI} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNamespaceURI:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Text.nextSibling} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNextSibling:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Text.nodeName} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNodeName:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Text.nodeType} property.</p>
     * @returns Number
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNodeType:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Text.nodeValue} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getNodeValue:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Text.ownerDocument} property.</p>
     * @returns Titanium_XML_Document
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getOwnerDocument:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Text.parentNode} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getParentNode:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Text.prefix} property.</p>
     * @returns String
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getPrefix:function() {
    },

    /**
     * <p>Gets the value of the {@link Titanium.XML.Text.previousSibling} property.</p>
     * @returns Titanium_XML_Node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    getPreviousSibling:function() {
    },

    /**
     * <p>Whether or not this node has attributes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    hasAttributes:function() {
    },

    /**
     * <p>Whether or not this node has child nodes</p>
     * @returns Boolean
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    hasChildNodes:function() {
    },

    /**
     * 
     * @param {Titanium_XML_Node} newChild <p>The node to insert</p>
     * @param {Titanium_XML_Node} refChild <p>The node to insert <code>newChild</code> before</p>
     * @returns Titanium_XML_Node The inserted node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    insertBefore:function(newChild, refChild) {
    },

    /**
     * <p>Insert a string at the specified offset. Throws an exception if this node is readonly, if offset is negative, or if offset is beyond the data's length.</p>
     * @param {Number} offset <p>The character offset at which to insert.</p>
     * @param {String} arg <p>The string to insert.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    insertData:function(offset, arg) {
    },

    /**
     * <p>Tests whether the DOM implementation supports a specific feature</p>
     * @param {String} feature <p>The name of the feature</p>
     * @param {String} version <p>The version number of the feature</p>
     * @returns Boolean Whether or not the feature is supported
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    isSupported:function(feature, version) {
    },

    /**
     * <p>Normalizes text and attribute nodes in this node's child hierarchy</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    normalize:function() {
    },

    /**
     * <p>Removes a child node from this node</p>
     * @param {Titanium_XML_Node} oldChild <p>The node to remove</p>
     * @returns Titanium_XML_Node The node that was removed
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeChild:function(oldChild) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>Replaces the node <code>oldChild</code> with the node <code>newChild</code></p>
     * @param {Titanium_XML_Node} newChild <p>The new node</p>
     * @param {Titanium_XML_Node} oldChild <p>The node being replaced</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    replaceChild:function(newChild, oldChild) {
    },

    /**
     * <p>Replace the characters starting at the specified offset with the specified string. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.</p>
     * @param {Number} offset <p>The offset from which to start replacing.</p>
     * @param {Number} count <p>The number of characters to replace. If the sum of offset and count exceeds length, then all characters to the end of the data are replaced; (i.e., the effect is the same as a remove method call with the same range, followed by an append method invocation).</p>
     * @param {String} arg <p>The string with which the range must be replaced.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    replaceData:function(offset, count, arg) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.XML.Text.data} property.</p>
     * @param {String} data <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setData:function(data) {
    },

    /**
     * <p>Sets the value of the {@link Titanium.XML.Text.localName} property.</p>
     * @param {String} localName <p>New value for the property.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    setLocalName:function(localName) {
    },

    /**
     * <p>Breaks this node into two nodes at the specified by offset, and returns a new node of the same type, which contains all the content at and after the offset point. Throws an exception if the specified offset is negative or if this node is read only.</p>
     * @param {Number} offset <p>The offset at which to split, starting from 0.</p>
     * @returns Titanium_XML_Text The new node, of the same type as this node
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    splitText:function(offset) {
    },

    /**
     * <p>Extracts a range of data from the node. Throws an exception if offset is negative, offset is beyond the data's length, or if count is negative.</p>
     * @param {Number} offset <p>Start offset of substring to extract.</p>
     * @param {Number} count <p>The number of characters units to extract.</p>
     * @returns String The specified substring. If the sum of offset and count exceeds the length, then all 16-bit units to the end of the data are returned.
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    substringData:function(offset, count) {
    }
}

/**
 * platforms: Android, iPhone, iPad
 */
Titanium.Yahoo = {


    /**
     * <p>Adds the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to invoke when the event is fired.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    addEventListener:function(name, callback) {
    },

    /**
     * <p>Fires a synthesized event to any registered listeners.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Dictionary} event <p>A dictionary of keys and values to add to the {@link Titanium.Event} object sent to the listeners.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    fireEvent:function(name, event) {
    },

    /**
     * <p>Removes the specified callback as an event listener for the named event.</p>
     * @param {String} name <p>Name of the event.</p>
     * @param {Callback<Object>} callback <p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    removeEventListener:function(name, callback) {
    },

    /**
     * <p>invoke a Yahoo YQL query</p>
     * @param {String} yql <p>the YQL query to execute</p>
     * @param {Callback<Object>} callback <p>the function to execute when the query completes. The event will contain the boolean property <code>success</code> if successful. If <code>success</code> is false, the <code>message</code> property will contain the error message. If <code>success</code> is true, the <code>data</code> property will contain the data payload received from the YQL.</p>
     * @since 0.8 (Android), 0.8 (iPhone), 0.8 (iPad)
     */
    yql:function(yql, callback) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
function WriteCallbackArgs() {
}
WriteCallbackArgs.prototype = {

    /**
     * <p>number of bytes processed</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    bytesProcessed:null,

    /**
     * <p>description of the error</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    errorDescription:null,

    /**
     * <p>state representing error</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    errorState:null,

    /**
     * <p>Stream being write</p>
     * @type Titanium_IOStream
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    source:null,


    /**
     * <p>Gets the value of the {@link WriteCallbackArgs.bytesProcessed} property.</p>
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getBytesProcessed:function() {
    },

    /**
     * <p>Gets the value of the {@link WriteCallbackArgs.errorDescription} property.</p>
     * @returns String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getErrorDescription:function() {
    },

    /**
     * <p>Gets the value of the {@link WriteCallbackArgs.errorState} property.</p>
     * @returns String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getErrorState:function() {
    },

    /**
     * <p>Gets the value of the {@link WriteCallbackArgs.source} property.</p>
     * @returns Titanium_IOStream
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getSource:function() {
    },

    /**
     * <p>Sets the value of the {@link WriteCallbackArgs.bytesProcessed} property.</p>
     * @param {Number} bytesProcessed <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setBytesProcessed:function(bytesProcessed) {
    },

    /**
     * <p>Sets the value of the {@link WriteCallbackArgs.errorDescription} property.</p>
     * @param {String} errorDescription <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setErrorDescription:function(errorDescription) {
    },

    /**
     * <p>Sets the value of the {@link WriteCallbackArgs.errorState} property.</p>
     * @param {String} errorState <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setErrorState:function(errorState) {
    },

    /**
     * <p>Sets the value of the {@link WriteCallbackArgs.source} property.</p>
     * @param {Titanium_IOStream} source <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setSource:function(source) {
    }
}

/**
 * platforms: Android, iPhone, iPad, Mobile Web
 */
function WriteStreamCallbackArgs() {
}
WriteStreamCallbackArgs.prototype = {

    /**
     * <p>number of bytes processed</p>
     * @type Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    bytesProcessed:null,

    /**
     * <p>description of the error</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    errorDescription:null,

    /**
     * <p>state representing error</p>
     * @type String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    errorState:null,

    /**
     * <p>Stream being read from</p>
     * @type Titanium_IOStream
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    fromStream:null,

    /**
     * <p>Stream being written to</p>
     * @type Titanium_IOStream
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    toStream:null,


    /**
     * <p>Gets the value of the {@link WriteStreamCallbackArgs.bytesProcessed} property.</p>
     * @returns Number
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getBytesProcessed:function() {
    },

    /**
     * <p>Gets the value of the {@link WriteStreamCallbackArgs.errorDescription} property.</p>
     * @returns String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getErrorDescription:function() {
    },

    /**
     * <p>Gets the value of the {@link WriteStreamCallbackArgs.errorState} property.</p>
     * @returns String
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getErrorState:function() {
    },

    /**
     * <p>Gets the value of the {@link WriteStreamCallbackArgs.fromStream} property.</p>
     * @returns Titanium_IOStream
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getFromStream:function() {
    },

    /**
     * <p>Gets the value of the {@link WriteStreamCallbackArgs.toStream} property.</p>
     * @returns Titanium_IOStream
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    getToStream:function() {
    },

    /**
     * <p>Sets the value of the {@link WriteStreamCallbackArgs.bytesProcessed} property.</p>
     * @param {Number} bytesProcessed <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setBytesProcessed:function(bytesProcessed) {
    },

    /**
     * <p>Sets the value of the {@link WriteStreamCallbackArgs.errorDescription} property.</p>
     * @param {String} errorDescription <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setErrorDescription:function(errorDescription) {
    },

    /**
     * <p>Sets the value of the {@link WriteStreamCallbackArgs.errorState} property.</p>
     * @param {String} errorState <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setErrorState:function(errorState) {
    },

    /**
     * <p>Sets the value of the {@link WriteStreamCallbackArgs.fromStream} property.</p>
     * @param {Titanium_IOStream} fromStream <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setFromStream:function(fromStream) {
    },

    /**
     * <p>Sets the value of the {@link WriteStreamCallbackArgs.toStream} property.</p>
     * @param {Titanium_IOStream} toStream <p>New value for the property.</p>
     * @since 1.7 (Android), 1.7 (iPhone), 1.7 (iPad), 1.8 (Mobile Web)
     */
    setToStream:function(toStream) {
    }
}


Ti = Titanium;
